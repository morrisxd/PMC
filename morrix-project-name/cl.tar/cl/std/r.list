 














 
















 
























 

 

 





















































 




















 

 
 








 

























 

 

 












 













































 

 

 








 


















 










 

 

 








 





























































 













 

 










 
































































































































































































 



















 

 

 



























 




































































 

 

 































	
 



 


 

















 






 
































 






typedef	unsigned int	_RType<s(0)>;(D1:_RType:1)[[TYPENAME:_RType]]		 







































 

 

 
























 









 



















 
































 










 














 








 



 

 

























 

 
 




































 

 





































   































































 















 











 

 

 










 













































 

 

 



















 






















 







 

 




 


 





 




 





 


















 





 

 





















typedef int ptrdiff_t<s(0)>;(D1:ptrdiff_t:1)[[TYPENAME:ptrdiff_t]]









 




 

 


































typedef unsigned int size_t<s(0)>;(D1:size_t:1)[[TYPENAME:size_t]]






















 




 





























 


























typedef short unsigned int wchar_t<s(0)>;(D1:wchar_t:1)[[TYPENAME:wchar_t]]
























typedef unsigned int  wint_t<s(0)>;(D1:wint_t:1)[[TYPENAME:wint_t]]




 

 





 













 









 






struct __timer<s(1)>;































































 






 




















 










































































 






















































































































 






 









































typedef int ssize_t<s(0)> ;(D1:ssize_t:1)[[TYPENAME:ssize_t]]




typedef unsigned long time_t<s(0)> ;(D1:time_t:1)[[TYPENAME:time_t]]




typedef long fpos_t<s(0)> ;(D1:fpos_t:1)[[TYPENAME:fpos_t]]




typedef signed char int8_t<s(0)> ;(D1:int8_t:1)[[TYPENAME:int8_t]]




typedef unsigned char uint8_t<s(0)> ;(D1:uint8_t:1)[[TYPENAME:uint8_t]]




typedef short int16_t<s(0)> ;(D1:int16_t:1)[[TYPENAME:int16_t]]




typedef unsigned short uint16_t<s(0)> ;(D1:uint16_t:1)[[TYPENAME:uint16_t]]




typedef long int32_t<s(0)> ;(D1:int32_t:1)[[TYPENAME:int32_t]]




typedef unsigned long uint32_t<s(0)> ;(D1:uint32_t:1)[[TYPENAME:uint32_t]]




typedef long long int64_t<s(0)> ;(D1:int64_t:1)[[TYPENAME:int64_t]]




typedef unsigned long long uint64_t<s(0)> ;(D1:uint64_t:1)[[TYPENAME:uint64_t]]



 

typedef unsigned char	uchar_t<s(0)>;(D1:uchar_t:1)[[TYPENAME:uchar_t]]
typedef unsigned short	ushort_t<s(0)>;(D1:ushort_t:1)[[TYPENAME:ushort_t]]
typedef unsigned int	uint_t<s(0)>;(D1:uint_t:1)[[TYPENAME:uint_t]]
typedef unsigned long	ulong_t<s(0)>;(D1:ulong_t:1)[[TYPENAME:ulong_t]]

typedef	struct	_quad<s(1)> { long val<s(1)>[2]; } quad<s(0)>;(D1:quad:1)[[TYPENAME:quad]]
typedef	long	daddr_t<s(0)>;(D1:daddr_t:1)[[TYPENAME:daddr_t]]
typedef	char *	caddr_t<s(0)>;(D1:caddr_t:1)[[TYPENAME:caddr_t]]
typedef	char *	addr_t<s(0)>;(D1:addr_t:1)[[TYPENAME:addr_t]]
typedef	long	swblk_t<s(0)>;(D1:swblk_t:1)[[TYPENAME:swblk_t]]

 

typedef short		dev_t<s(0)>;(D1:dev_t:1)[[TYPENAME:dev_t]]
typedef unsigned short	gid_t<s(0)>;(D1:gid_t:1)[[TYPENAME:gid_t]]
typedef	unsigned long	ino_t<s(0)>;(D1:ino_t:1)[[TYPENAME:ino_t]]
typedef int		mode_t<s(0)>;(D1:mode_t:1)[[TYPENAME:mode_t]]
typedef unsigned long	nlink_t<s(0)>;(D1:nlink_t:1)[[TYPENAME:nlink_t]]
typedef long		off_t<s(0)>;(D1:off_t:1)[[TYPENAME:off_t]]
typedef int		pid_t<s(0)>;(D1:pid_t:1)[[TYPENAME:pid_t]]
typedef unsigned short	uid_t<s(0)>;(D1:uid_t:1)[[TYPENAME:uid_t]]















 

typedef	char		INT8<s(0)>;(D1:INT8:1)[[TYPENAME:INT8]]
typedef	short		INT16<s(0)>;(D1:INT16:1)[[TYPENAME:INT16]]
typedef	int		INT32<s(0)>;(D1:INT32:1)[[TYPENAME:INT32]]
typedef	long long	INT64<s(0)>;(D1:INT64:1)[[TYPENAME:INT64]]

typedef	unsigned char	UINT8<s(0)>;(D1:UINT8:1)[[TYPENAME:UINT8]]
typedef	unsigned short	UINT16<s(0)>;(D1:UINT16:1)[[TYPENAME:UINT16]]
typedef	unsigned int	UINT32<s(0)>;(D1:UINT32:1)[[TYPENAME:UINT32]]
typedef	unsigned long long UINT64<s(0)>;(D1:UINT64:1)[[TYPENAME:UINT64]]

typedef	unsigned char	UCHAR<s(0)>;(D1:UCHAR:1)[[TYPENAME:UCHAR]]
typedef unsigned short	USHORT<s(0)>;(D1:USHORT:1)[[TYPENAME:USHORT]]
typedef	unsigned int	UINT<s(0)>;(D1:UINT:1)[[TYPENAME:UINT]]
typedef unsigned long	ULONG<s(0)>;(D1:ULONG:1)[[TYPENAME:ULONG]]

typedef	int		BOOL<s(0)>;(D1:BOOL:1)[[TYPENAME:BOOL]]
typedef	int		STATUS<s(0)>;(D1:STATUS:1)[[TYPENAME:STATUS]]
typedef int 		ARGINT<s(0)>;(D1:ARGINT:1)[[TYPENAME:ARGINT]]

typedef void		VOID<s(0)>;(D1:VOID:1)[[TYPENAME:VOID]]







typedef int 		(*FUNCPTR<s(0)>)TYPENAME:FUNC:(FUNCPTR) ();(D1:FUNCPTR:0)	    
typedef void 		(*VOIDFUNCPTR<s(0)>)TYPENAME:FUNC:(VOIDFUNCPTR) ();(D1:VOIDFUNCPTR:0)  
typedef double 		(*DBLFUNCPTR<s(0)>)TYPENAME:FUNC:(DBLFUNCPTR) ();(D1:DBLFUNCPTR:0)   
typedef float 		(*FLTFUNCPTR<s(0)>)TYPENAME:FUNC:(FLTFUNCPTR) ();(D1:FLTFUNCPTR:0)   



 




typedef union
    {
    long pm_int<s(1)>;
    void *pm_v<s(1)>;
    const void *pm_cv<s(1)>;
    char *pm_c<s(1)>;
    unsigned char *pm_uc<s(1)>;

    signed char *pm_sc<s(1)>;
    const char *pm_cc<s(1)>;
    const unsigned char *pm_cuc<s(1)>;
    const signed char *pm_csc<s(1)>;
    short *pm_s<s(1)>;
    ushort_t *pm_us<s(1)>;
    const short *pm_cs<s(1)>;
    const ushort_t *pm_cus<s(1)>;
    int *pm_i<s(1)>;
    uint_t *pm_ui<s(1)>;
    const int *pm_ci<s(1)>;
    const uint_t *pm_cui<s(1)>;
    long *pm_l<s(1)>;
    ulong_t *pm_ul<s(1)>;
    const long *pm_cl<s(1)>;
    const ulong_t *pm_cul<s(1)>;

    int8_t *pm_i8<s(1)>;
    uint8_t *pm_ui8<s(1)>;
    const int8_t *pm_ci8<s(1)>;
    const uint8_t *pm_cui8<s(1)>;
    int16_t *pm_i16<s(1)>;
    uint16_t *pm_ui16<s(1)>;
    const int16_t *pm_ci16<s(1)>;
    const uint16_t *pm_cui16<s(1)>;
    int32_t *pm_i32<s(1)>;
    uint32_t *pm_ui32<s(1)>;
    const int32_t *pm_ci32<s(1)>;
    const uint32_t *pm_cui32<s(1)>;








    } pointer_mix_t<s(0)>;(D1:pointer_mix_t:1)[[TYPENAME:pointer_mix_t]]













 





 














typedef long	fd_mask<s(0)>;(D1:fd_mask:1)[[TYPENAME:fd_mask]]





typedef	struct fd_set<s(1)>
    {
    fd_mask	fds_bits<s(1)>[((unsigned int)((( 2048  )+((  (sizeof(fd_mask) * 8 )  )-1)))/(unsigned int)(  (sizeof(fd_mask) * 8 )  )) ];
    } fd_set<s(0)>;(D1:fd_set:1)[[TYPENAME:fd_set]]







 

typedef	unsigned char	u_char<s(0)>;(D1:u_char:1)[[TYPENAME:u_char]]
typedef	unsigned short	u_short<s(0)>;(D1:u_short:1)[[TYPENAME:u_short]]
typedef	unsigned int	u_int<s(0)>;(D1:u_int:1)[[TYPENAME:u_int]]
typedef	unsigned long	u_long<s(0)>;(D1:u_long:1)[[TYPENAME:u_long]]
typedef	unsigned short	ushort<s(0)>;(D1:ushort:1)[[TYPENAME:ushort]]


 

typedef char		TBOOL<s(0)>;(D1:TBOOL:1)[[TYPENAME:TBOOL]]		 


 
























typedef unsigned long INSTR<s(0)>;(D1:INSTR:1)[[TYPENAME:INSTR]]             
















 
















typedef unsigned int HANDLE<s(0)>;(D1:HANDLE:1)[[TYPENAME:HANDLE]]


 



typedef unsigned char UINT1<s(0)>;(D1:UINT1:1)[[TYPENAME:UINT1]]

typedef char INT1<s(0)>;(D1:INT1:1)[[TYPENAME:INT1]]

typedef unsigned short UINT2<s(0)>;(D1:UINT2:1)[[TYPENAME:UINT2]]

typedef short INT2<s(0)>;(D1:INT2:1)[[TYPENAME:INT2]]

typedef unsigned long UINT4<s(0)>;(D1:UINT4:1)[[TYPENAME:UINT4]]

typedef long INT4<s(0)>;(D1:INT4:1)[[TYPENAME:INT4]]

typedef unsigned short BOOLEAN<s(0)>;(D1:BOOLEAN:1)[[TYPENAME:BOOLEAN]]






 





typedef enum 
{
    DEV_NOT_INIT<s(0)>,
    DEV_FAIL<s(0)>,
    DEV_OK<s(0)>,
    DEV_MAX<s(0)>
}DEVICE_STATUS_Tval<s(0)>;(D1:DEVICE_STATUS_Tval:1)[[TYPENAME:DEVICE_STATUS_Tval]]





 
typedef UINT32 INSTANCE_T<s(0)>;(D1:INSTANCE_T:1)[[TYPENAME:INSTANCE_T]] 

 

 














































typedef enum
{
    SLOT_NUMBER_NONE<s(0)>    = 0,
    SLOT_NUMBER_LC1<s(0)>     = 1,
    SLOT_NUMBER_LC2<s(0)>     = 2,
    SLOT_NUMBER_LC3<s(0)>     = 3,
    SLOT_NUMBER_LC4<s(0)>     = 4,
    SLOT_NUMBER_LC5<s(0)>     = 5,
    SLOT_NUMBER_LC6<s(0)>     = 6,
    SLOT_NUMBER_HOCC1<s(0)>   = 7,
    SLOT_NUMBER_HOCC2<s(0)>   = 8,
    SLOT_NUMBER_SFC1<s(0)>    = 9,
    SLOT_NUMBER_SFC2<s(0)>    = 10,
    SLOT_NUMBER_CE1<s(0)>     = 11,
    SLOT_NUMBER_CE2<s(0)>     = 12,
    SLOT_NUMBER_CE3<s(0)>     = 13,
    SLOT_NUMBER_CE4<s(0)>     = 14,
    SLOT_NUMBER_CE5<s(0)>     = 15,
    SLOT_NUMBER_CE6<s(0)>     = 16,
    SLOT_NUMBER_SC1<s(0)>     = 17,
    SLOT_NUMBER_SC2<s(0)>     = 18,  
    SLOT_NUMBER_SI<s(0)>      = 19,
    SLOT_NUMBER_SFM1<s(0)>    = 20,
    SLOT_NUMBER_SFM2<s(0)>    = 21,
    SLOT_NUMBER_IO1<s(0)>     = 22,
    SLOT_NUMBER_IO2<s(0)>     = 23,
    SLOT_NUMBER_IO3<s(0)>     = 24,
    SLOT_NUMBER_IO4<s(0)>     = 25,
    SLOT_NUMBER_IO5<s(0)>     = 26,
    SLOT_NUMBER_IO6<s(0)>     = 27,
    SLOT_NUMBER_IO7<s(0)>     = 28,
    SLOT_NUMBER_IO8<s(0)>     = 29,
    SLOT_NUMBER_IO9<s(0)>     = 30,
    SLOT_NUMBER_IO10<s(0)>    = 31,
    SLOT_NUMBER_IO11<s(0)>    = 32,
    SLOT_NUMBER_IO12<s(0)>    = 33,
    SLOT_NUMBER_IO13<s(0)>    = 34,
    SLOT_NUMBER_IO14<s(0)>    = 35,
    SLOT_NUMBER_IO15<s(0)>    = 36,
    SLOT_NUMBER_PWR1<s(0)>    = 37,
    SLOT_NUMBER_PWR2<s(0)>    = 38,
    SLOT_NUMBER_FAN1<s(0)>    = 39,
    SLOT_NUMBER_FAN2<s(0)>    = 40,

    SLOT_NUMBER_MAX<s(0)>     = 40
}SLOT_NUMBER_T<s(0)>;(D1:SLOT_NUMBER_T:1)[[TYPENAME:SLOT_NUMBER_T]]

 




 




 




 




 




typedef enum 
{
    CARDTYPE_UNKNOWN<s(0)> = 0,
    
     
    CARDTYPE_SI<s(0)>,              
    CARDTYPE_SC<s(0)>,              
    CARDTYPE_HOCC<s(0)>,            
    CARDTYPE_LOCC<s(0)>,            
    CARDTYPE_LOCC_PMC<s(0)>,        
    CARDTYPE_LOCC_FPGA<s(0)>,       
    CARDTYPE_1_STM256<s(0)>,        
    CARDTYPE_2_STM64<s(0)>,         
     

    CARDTYPE_1_STM64<s(0)>,         
    CARDTYPE_8_STM16<s(0)>,         
    CARDTYPE_4_STM16<s(0)>,         
    CARDTYPE_2_STM16<s(0)>,         
    CARDTYPE_8_STM4<s(0)>,          
    CARDTYPE_8_STM1O<s(0)>,         
    CARDTYPE_8_STM1E_FUNC<s(0)>,    
    CARDTYPE_8_STM1E_CONN<s(0)>,    
    CARDTYPE_2_STM64M<s(0)>,        
    CARDTYPE_8_STM16M<s(0)>,        
    CARDTYPE_16_STM4M<s(0)>,        
    CARDTYPE_16_STM1EM<s(0)>,       
    CARDTYPE_16_STM1E_CONN<s(0)>,   
    CARDTYPE_12_E3DS3_FUNC<s(0)>,   
    CARDTYPE_12_E3DS3_CONN<s(0)>,   
    CARDTYPE_126_E1_FUNC<s(0)>,     
    CARDTYPE_126_E1_CONN<s(0)>,     
    CARDTYPE_13DBM_OA<s(0)>,        
    CARDTYPE_15DBM_OA<s(0)>,        
    CARDTYPE_18DBM_OA<s(0)>,        
    CARDTYPE_20DB_OA<s(0)>,         
    CARDTYPE_2_OTU<s(0)>,           
    CARDTYPE_1_OTU2<s(0)>,          
    
    CARDTYPE_SDH<s(0)>,             
    CARDTYPE_PDH<s(0)>,             
    CARDTYPE_CC<s(0)>,              
    CARDTYPE_DATA<s(0)>,            
    CARDTYPE_DATA_L2<s(0)>,         
    CARDTYPE_RPR<s(0)>,             
    CARDTYPE_OA<s(0)>,              
    CARDTYPE_OTU<s(0)>,             
    CARDTYPE_MAGUS<s(0)>,           
    
    CARDTYPE_FAN<s(0)>,             
    CARDTYPE_PWR<s(0)>,             
    
    CARD_TYPE_MAX<s(0)>
} CARDTYPE_T<s(0)>;(D1:CARDTYPE_T:1)[[TYPENAME:CARDTYPE_T]]

typedef UINT32 ENTITY_T<s(0)>;(D1:ENTITY_T:1)[[TYPENAME:ENTITY_T]]

typedef enum
{
    ENTITY_STATE_EMPTY<s(0)>  = 0,
    ENTITY_STATE_INIT<s(0)>   = 1,
    ENTITY_STATE_ACTIVE<s(0)> = 2
} ENTITY_STATE_T<s(0)>;(D1:ENTITY_STATE_T:1)[[TYPENAME:ENTITY_STATE_T]]

typedef struct
{
    ENTITY_T   entity<s(1)>;
    BOOL       bPresent<s(1)>;
    CARDTYPE_T cardType<s(1)>;
}ENTITY_INFO_T<s(0)>;(D1:ENTITY_INFO_T:1)[[TYPENAME:ENTITY_INFO_T]]

typedef int BOARD_OPTION_T<s(0)>;(D1:BOARD_OPTION_T:1)[[TYPENAME:BOARD_OPTION_T]]

 



 











 




 
























 


























































































 

























typedef enum 
{
    PB_OK<s(0)> = 0,                       
    PB_ERROR<s(0)>,                
    PB_ERR_PARAM<s(0)>,            
    PB_ERR_NAPPL<s(0)>,            
    PB_ERR_NOTIMP<s(0)>,           
    PB_ERR_CONFLICT<s(0)>,         
    PB_ERR_TIMEOUT<s(0)>,          
    PB_ERR_TOOBIG<s(0)>,           
    PB_ERR_TOOMUCH<s(0)>,          
    PB_ERR_WRONGCALL<s(0)>,        
    PB_ERR_VERSION<s(0)>,          
    PB_ERR_NOSUCH<s(0)>,           
    PB_ERR_HARDWARE<s(0)>,         
    PB_ERR_MEMORY<s(0)>,           
    PB_ERR_BUSY<s(0)>,             
    PB_ERR_DRIVER_ERROR<s(0)>,     
    PB_ERR_HANDLE<s(0)>,           
    PB_ERR_BLOCK<s(0)>,            
    PB_ERR_STATE<s(0)>,            
    PB_ERR_COMM<s(0)>,             
    PB_ERR_MAX<s(0)>
} PB_ERROR_CODE_T<s(0)>;(D1:PB_ERROR_CODE_T:1)[[TYPENAME:PB_ERROR_CODE_T]]

 

 
static __inline const char *CTD_StrError<s(0)>(int code<s(0)>)
{
    switch (code<s(0)>)
    {
        case PB_OK<s(0)>:                    
            return "No error";
            
        case PB_ERROR<s(0)>:                
            return "Unknown Error";
            
        case PB_ERR_PARAM<s(0)>:            
            return "Incorrect Parameter";
            
        case PB_ERR_NAPPL<s(0)>:            
            return "Not applicable";
            
        case PB_ERR_NOTIMP<s(0)>:            
            return "Not Implemented";
            
        case PB_ERR_CONFLICT<s(0)>:        
            return "Conflict to Exist Element";
            
        case PB_ERR_TIMEOUT<s(0)>:        
            return "Operation Timeout";
            
        case PB_ERR_TOOBIG<s(0)>:            
            return "Too Big";
            
        case PB_ERR_TOOMUCH<s(0)>:        
            return "Too Many Elements";
            
        case PB_ERR_WRONGCALL<s(0)>:        
            return "Incorrect Call";
            
        case PB_ERR_VERSION<s(0)>:        
            return "version Mismatch";
            
        case PB_ERR_NOSUCH<s(0)>:            
            return "No Such Element";
            
        case PB_ERR_HARDWARE<s(0)>:        
            return "Hardware Error";
            
        case PB_ERR_MEMORY<s(0)>:            
            return "Out of Memory";
            
        case PB_ERR_BUSY<s(0)>:            
            return "Busy";
            
        case PB_ERR_DRIVER_ERROR<s(0)>:    
            return "Driver Error";
            
        case PB_ERR_HANDLE<s(0)>:            
            return "Invalid Handle";
            
        case PB_ERR_BLOCK<s(0)>:            
            return "Blocked";
            
        case PB_ERR_STATE<s(0)>:            
            return "Invalid state/status";
            
        case PB_ERR_COMM<s(0)>:            
            return "Communication error";
            
        default: 
            return "Unknown error";
    }
}







 
















 






















 























 















































 

 

 




































 

 

 










































































 




 




 





 




 





 









 







 






 




























 

























 












 





 

 

 

 


















 









 
















 



















 

 

 

































































































 












































































































































 












 






 











 

typedef enum		 
    {
    SEM_EMPTY<s(0)>,			 
    SEM_FULL<s(0)>			 
    } SEM_B_STATE<s(0)>;(D1:SEM_B_STATE:1)[[TYPENAME:SEM_B_STATE]]

typedef struct semaphore<s(1)> *SEM_ID<s(0)>;(D1:SEM_ID:1)[[TYPENAME:SEM_ID]]

 



extern STATUS 	semGive<s(0)> (SEM_ID semId<s(0)>);(D1:semId:0)
extern STATUS 	semTake<s(0)> (SEM_ID semId<s(0)>, int timeout<s(0)>);(D1:timeout:0)
extern STATUS 	semFlush<s(0)> (SEM_ID semId<s(0)>);(D1:semId:0)
extern STATUS 	semDelete<s(0)> (SEM_ID semId<s(0)>);(D1:semId:0)
extern int 	semInfo<s(0)> (SEM_ID semId<s(0)>, int idList<s(0)>[], int maxTasks<s(0)>);(D1:maxTasks:0)
extern STATUS 	semBLibInit<s(0)> (void);(D1:semBLibInit:0)
extern SEM_ID 	semBCreate<s(0)> (int options<s(0)>, SEM_B_STATE initialState<s(0)>);(D1:initialState:0)
extern STATUS 	semCLibInit<s(0)> (void);(D1:semCLibInit:0)
extern SEM_ID 	semCCreate<s(0)> (int options<s(0)>, int initialCount<s(0)>);(D1:initialCount:0)
extern STATUS 	semMLibInit<s(0)> (void);(D1:semMLibInit:0)
extern SEM_ID 	semMCreate<s(0)> (int options<s(0)>);(D1:options:0)
extern STATUS   semMGiveForce<s(0)> (SEM_ID semId<s(0)>);(D1:semId:0)
extern STATUS 	semOLibInit<s(0)> (void);(D1:semOLibInit:0)
extern SEM_ID 	semCreate<s(0)> (void);(D1:semCreate:0)
extern void 	semShowInit<s(0)> (void);(D1:semShowInit:0)
extern STATUS 	semShow<s(0)> (SEM_ID semId<s(0)>, int level<s(0)>);(D1:level:0)














 



 
 




















 



 





 










 



 
 
    typedef struct {
        unsigned int flags<s(1)>[4];   
    } MIB_Flags_t<s(0)>;(D1:MIB_Flags_t:1)[[TYPENAME:MIB_Flags_t]]


 
    typedef struct {
        int oid_length<s(1)>;
        int oid_data<s(1)>[30 ];
    } OIDValue<s(0)>;(D1:OIDValue:1)[[TYPENAME:OIDValue]]

 
    typedef struct {
        int index<s(1)>;               
        int oid_length<s(1)>;
        int oid_data<s(1)>[30 ];    
    } MIBDid_t<s(0)>;(D1:MIBDid_t:1)[[TYPENAME:MIBDid_t]]
    typedef MIBDid_t *MIBDID<s(0)>;(D1:MIBDID:1)[[TYPENAME:MIBDID]]    

 
    typedef struct {
        unsigned short year<s(1)>;
        unsigned char month<s(1)>;
        unsigned char day<s(1)>;
        unsigned char hour<s(1)>;
        unsigned char min<s(1)>;
        unsigned char sec<s(1)>;
        unsigned char dec_sec<s(1)>;
        unsigned char dir_utc<s(1)>;
        unsigned char hrs_utc<s(1)>;
        unsigned char min_utc<s(1)>;
        unsigned char padd<s(1)>;      
    } DateTime<s(0)>;(D1:DateTime:1)[[TYPENAME:DateTime]]


 



 





















 





















 
    void MibRegisterCallback<s(0)>(MIBDID did<s(0)>, int (*fptr<s(0)>) (MIBDID, void *, int, void *));(D1:MIBDID:0)
    void MibRegisterCallbackCheck<s(0)>(MIBDID did<s(0)>, int (*fptr_check<s(0)>) (MIBDID, void *, int, void *));(D1:MIBDID:0)
    void MibRegisterCallbackPartial<s(0)>(MIBDID did<s(0)>, int (*fptr_partial<s(0)>) (MIBDID, void *, int, void *), MIB_Flags_t);(D1:MIB_Flags_t:0)

 
    void MibUnRegisterCallback<s(0)>(MIBDID did<s(0)>, int (*fptr<s(0)>) (MIBDID, void *, int, void *));(D1:MIBDID:0)
    void MibUnRegisterCallbackCheck<s(0)>(MIBDID did<s(0)>, int (*fptr_check<s(0)>) (MIBDID, void *, int, void *));(D1:MIBDID:0)
    void MibUnRegisterCallbackPartial<s(0)>(MIBDID did<s(0)>, int (*fptr_partial<s(0)>) (MIBDID, void *, int, void *));(D1:MIBDID:0)

 
    int MibLoadAFileByDid<s(0)>(MIBDID did<s(0)>);(D1:did:0)

 
    int MibLoadTablesSequence<s(0)>(MIBDID * list<s(0)>, int num_entries<s(0)>);(D1:num_entries:0)

 
    void MibTableChangedFlag<s(0)>(MIBDID did<s(0)>);(D1:did:0)
    void MibTblGrpChanged<s(0)>(MIBDID did<s(0)>, void *row<s(0)>, int type<s(0)>);(D1:type:0)
	void MibTblGrpChangedMirrored<s(0)>(MIBDID did<s(0)>, void *row<s(0)>, int type<s(0)>, int saveFlag<s(0)>);(D1:saveFlag:0)

 
    int MibGroupRegisterSema<s(0)>(MIBDID did<s(0)>, SEM_ID sema<s(0)>);(D1:sema:0)

 
    int MibGroupRegisterRemote<s(0)>(MIBDID did<s(0)>, int (*fptr<s(0)>) (MIBDID did<s(0)>, void *row<s(0)>, int type<s(0)>, MIB_Flags_t flags<s(0)>));(D1:flags:0)

 
    int MibRegisterSlotFunc<s(0)>(MIBDID did<s(0)>, int (*fptr<s(0)>) (MIBDID did<s(0)>, void *row<s(0)>), int distributed<s(0)>, int phys_log<s(0)>);(D1:phys_log:0)

 
 
    int MibSetRemoteIntegerData<s(0)>(MIBDID did<s(0)>, int value<s(0)>);(D1:value:0)
    int MibGetRemoteIntegerData<s(0)>(MIBDID did<s(0)>);(D1:did:0)

    int MibSetRemoteChildData<s(0)>(MIBDID did<s(0)>, int oid<s(0)>, int value<s(0)>);(D1:value:0)
    int MibGetRemoteChildData<s(0)>(MIBDID did<s(0)>, int oid<s(0)>);(D1:oid:0)

 
    int MibAccessHandle<s(0)>(int type<s(0)>, MIBDID did<s(0)>, void *row<s(0)>, int row_len<s(0)>, MIB_Flags_t flags<s(0)>, int slot<s(0)>);(D1:slot:0)
    int MibAccessHandle_NCB<s(0)>(int type<s(0)>, MIBDID did<s(0)>, void *row<s(0)>, int row_len<s(0)>, MIB_Flags_t flags<s(0)>, int slot<s(0)>);(D1:slot:0)
 
void setMibIdApplNo<s(0)>(int mibIdBef<s(0)>,  int applNumberBef<s(0)>, int type<s(0)>);(D1:type:0)
void clrMibIdApplNo<s(0)>(int mibIdAft<s(0)>, int applNumberAft<s(0)>,   int type<s(0)>);(D1:type:0)

int MibFlagsCheck<s(0)>(MIB_Flags_t flags_setpartial<s(0)>, MIB_Flags_t flags_callback<s(0)>);(D1:flags_callback:0)

int MibSetCleanFlagToFlash<s(0)>(int TLVtype<s(0)>, int delFlag<s(0)>);(D1:delFlag:0)

 
int MibGetActiveScSlotNumber<s(0)>(int *pSlotNumber<s(0)>);(D1:pSlotNumber:0)

    extern MIB_Flags_t mibDefFlags<s(0)>;(D1:mibDefFlags:0)









typedef enum {
	PbApplState_initial<s(0)> = 0,
	PbApplState_ready<s(0)> = 1,
	PbApplState_active<s(0)> = 2,
	PbApplState_standby<s(0)> = 3,
	PbApplState_failed<s(0)> = 4,
	PbApplState_diagnostic<s(0)> = 5
} PbApplState_Tval<s(0)>;(D1:PbApplState_Tval:1)[[TYPENAME:PbApplState_Tval]]

typedef enum {
	PbSNCPSwitchReason_clearcmd<s(0)> = 1,
	PbSNCPSwitchReason_lpcmd<s(0)> = 2,
	PbSNCPSwitchReason_forcedswitch<s(0)> = 3,
	PbSNCPSwitchReason_manualswitch<s(0)> = 4,
	PbSNCPSwitchReason_signalfail<s(0)> = 5,
	PbSNCPSwitchReason_signalfailclear<s(0)> = 6,
	PbSNCPSwitchReason_noswitch<s(0)> = 7,
	PbSNCPSwitchReason_signaldeg<s(0)> = 8,
	PbSNCPSwitchReason_signalnormal<s(0)> = 9
} PbSNCPSwitchReason_Tval<s(0)>;(D1:PbSNCPSwitchReason_Tval:1)[[TYPENAME:PbSNCPSwitchReason_Tval]]

typedef enum {
	PbTMSSquelchMode_clear<s(0)> = 0,
	PbTMSSquelchMode_forceAIS<s(0)> = 1,
	PbTMSSquelchMode_forceDNU<s(0)> = 2,
	PbTMSSquelchMode_forceShutdown<s(0)> = 3
} PbTMSSquelchMode_Tval<s(0)>;(D1:PbTMSSquelchMode_Tval:1)[[TYPENAME:PbTMSSquelchMode_Tval]]

typedef enum {
	EventCategory_management<s(0)> = 1,
	EventCategory_software<s(0)> = 2,
	EventCategory_hardware<s(0)> = 3,
	EventCategory_indeterminate<s(0)> = 4
} EventCategory_Tval<s(0)>;(D1:EventCategory_Tval:1)[[TYPENAME:EventCategory_Tval]]

typedef enum {
	PbXcFrom_cli<s(0)> = 1,
	PbXcFrom_ems<s(0)> = 2,
	PbXcFrom_snm<s(0)> = 3,
	PbXcFrom_gmpls<s(0)> = 4,
	PbXcFrom_rpr<s(0)> = 5,
	PbXcFrom_sncp<s(0)> = 6
} PbXcFrom_Tval<s(0)>;(D1:PbXcFrom_Tval:1)[[TYPENAME:PbXcFrom_Tval]]

typedef enum {
	RprTpNumberType_hex11110000<s(0)> = 286326784,
	RprTpNumberType_hex11120000<s(0)> = 286392320,
	RprTpNumberType_hex11130000<s(0)> = 286457856,
	RprTpNumberType_hex11140000<s(0)> = 286523392,
	RprTpNumberType_hex11210000<s(0)> = 287375360,
	RprTpNumberType_hex11220000<s(0)> = 287440896,
	RprTpNumberType_hex11230000<s(0)> = 287506432,
	RprTpNumberType_hex11240000<s(0)> = 287571968,
	RprTpNumberType_hex11310000<s(0)> = 288423936,
	RprTpNumberType_hex11320000<s(0)> = 288489472,
	RprTpNumberType_hex11330000<s(0)> = 288555008,
	RprTpNumberType_hex11340000<s(0)> = 288620544,
	RprTpNumberType_hex11410000<s(0)> = 289472512,
	RprTpNumberType_hex11420000<s(0)> = 289538048,
	RprTpNumberType_hex11430000<s(0)> = 289603584,
	RprTpNumberType_hex11440000<s(0)> = 289669120
} RprTpNumberType_Tval<s(0)>;(D1:RprTpNumberType_Tval:1)[[TYPENAME:RprTpNumberType_Tval]]

typedef enum {
	RprSvcFailReason_noerr<s(0)> = 0,
	RprSvcFailReason_flowlimit<s(0)> = 1,
	RprSvcFailReason_cannotadd<s(0)> = 2,
	RprSvcFailReason_cannotdel<s(0)> = 3,
	RprSvcFailReason_cannotreach<s(0)> = 4,
	RprSvcFailReason_bandwidth<s(0)> = 5,
	RprSvcFailReason_svctypeconflict<s(0)> = 6,
	RprSvcFailReason_macconflict<s(0)> = 7,
	RprSvcFailReason_cosconflict<s(0)> = 8,
	RprSvcFailReason_autoringenconflict<s(0)> = 9,
	RprSvcFailReason_ringselconflict<s(0)> = 10,
	RprSvcFailReason_wrapenconflict<s(0)> = 11,
	RprSvcFailReason_svcmodeconflict<s(0)> = 12,
	RprSvcFailReason_ttlmodeconflict<s(0)> = 13,
	RprSvcFailReason_manttlvalueconflict<s(0)> = 14,
	RprSvcFailReason_activeconflict<s(0)> = 15,
	RprSvcFailReason_inactive<s(0)> = 16,
	RprSvcFailReason_other<s(0)> = 17
} RprSvcFailReason_Tval<s(0)>;(D1:RprSvcFailReason_Tval:1)[[TYPENAME:RprSvcFailReason_Tval]]

typedef enum {
	PbMsspAgentState_init<s(0)> = 0,
	PbMsspAgentState_ready<s(0)> = 1,
	PbMsspAgentState_suspend<s(0)> = 2
} PbMsspAgentState_Tval<s(0)>;(D1:PbMsspAgentState_Tval:1)[[TYPENAME:PbMsspAgentState_Tval]]

typedef enum {
	PbPmReportResp_noerr<s(0)> = 0,
	PbPmReportResp_resource<s(0)> = 1,
	PbPmReportResp_invalid<s(0)> = 2,
	PbPmReportResp_conflict<s(0)> = 3
} PbPmReportResp_Tval<s(0)>;(D1:PbPmReportResp_Tval:1)[[TYPENAME:PbPmReportResp_Tval]]

typedef enum {
	PbMsspLineRequest_signalDegradeRing<s(0)> = 8,
	PbMsspLineRequest_signalFailRing<s(0)> = 11,
	PbMsspLineRequest_clear<s(0)> = 21
} PbMsspLineRequest_Tval<s(0)>;(D1:PbMsspLineRequest_Tval:1)[[TYPENAME:PbMsspLineRequest_Tval]]

typedef enum {
	PbEthInterfaceType_lan<s(0)> = 1,
	PbEthInterfaceType_wan<s(0)> = 2,
	PbEthInterfaceType_trunk<s(0)> = 3
} PbEthInterfaceType_Tval<s(0)>;(D1:PbEthInterfaceType_Tval:1)[[TYPENAME:PbEthInterfaceType_Tval]]

typedef enum {
	PbTMSSetSa_sa4<s(0)> = 4,
	PbTMSSetSa_sa5<s(0)> = 5,
	PbTMSSetSa_sa6<s(0)> = 6,
	PbTMSSetSa_sa7<s(0)> = 7,
	PbTMSSetSa_sa8<s(0)> = 8
} PbTMSSetSa_Tval<s(0)>;(D1:PbTMSSetSa_Tval:1)[[TYPENAME:PbTMSSetSa_Tval]]

typedef enum {
	RprSpan_east<s(0)> = 1,
	RprSpan_west<s(0)> = 2
} RprSpan_Tval<s(0)>;(D1:RprSpan_Tval:1)[[TYPENAME:RprSpan_Tval]]

typedef enum {
	PbLedColor_off<s(0)> = 0,
	PbLedColor_green<s(0)> = 1,
	PbLedColor_yellow<s(0)> = 2,
	PbLedColor_red<s(0)> = 3,
	PbLedColor_orange<s(0)> = 4,
	PbLedColor_blinkingGreen<s(0)> = 5,
	PbLedColor_blinkingYellow<s(0)> = 6,
	PbLedColor_blinkingRed<s(0)> = 7,
	PbLedColor_blinkingOrange<s(0)> = 8
} PbLedColor_Tval<s(0)>;(D1:PbLedColor_Tval:1)[[TYPENAME:PbLedColor_Tval]]

typedef enum {
	PbSdhHpSignalLabel_unequipped<s(0)> = 0,
	PbSdhHpSignalLabel_reserved<s(0)> = 1,
	PbSdhHpSignalLabel_tugstructure<s(0)> = 2,
	PbSdhHpSignalLabel_lockedtu<s(0)> = 3,
	PbSdhHpSignalLabel_asynchronousvc3<s(0)> = 4,
	PbSdhHpSignalLabel_asynchronousvc4<s(0)> = 18,
	PbSdhHpSignalLabel_atm<s(0)> = 19,
	PbSdhHpSignalLabel_mandqdb<s(0)> = 20,
	PbSdhHpSignalLabel_fddi<s(0)> = 21,
	PbSdhHpSignalLabel_hdlcppp<s(0)> = 22,
	PbSdhHpSignalLabel_sdlsss<s(0)> = 23,
	PbSdhHpSignalLabel_hdlclaps<s(0)> = 24,
	PbSdhHpSignalLabel_sdlsrs<s(0)> = 25,
	PbSdhHpSignalLabel_gig10<s(0)> = 26,
	PbSdhHpSignalLabel_gfp<s(0)> = 27,
	PbSdhHpSignalLabel_test<s(0)> = 254,
	PbSdhHpSignalLabel_ais<s(0)> = 255
} PbSdhHpSignalLabel_Tval<s(0)>;(D1:PbSdhHpSignalLabel_Tval:1)[[TYPENAME:PbSdhHpSignalLabel_Tval]]

typedef enum {
	PbTMSQLMode_passThrough<s(0)> = 1,
	PbTMSQLMode_overWrite<s(0)> = 2
} PbTMSQLMode_Tval<s(0)>;(D1:PbTMSQLMode_Tval:1)[[TYPENAME:PbTMSQLMode_Tval]]

typedef enum {
	PbTMSSignalStatus_normal<s(0)> = 1,
	PbTMSSignalStatus_failed<s(0)> = 2,
	PbTMSSignalStatus_na<s(0)> = 3,
	PbTMSSignalStatus_holdoff<s(0)> = 4,
	PbTMSSignalStatus_waitToRestore<s(0)> = 5
} PbTMSSignalStatus_Tval<s(0)>;(D1:PbTMSSignalStatus_Tval:1)[[TYPENAME:PbTMSSignalStatus_Tval]]

typedef enum {
	AlarmSeverity_notInAlarm<s(0)> = 0,
	AlarmSeverity_warning<s(0)> = 1,
	AlarmSeverity_minor<s(0)> = 2,
	AlarmSeverity_major<s(0)> = 3,
	AlarmSeverity_critical<s(0)> = 4,
	AlarmSeverity_indeterminate<s(0)> = 5
} AlarmSeverity_Tval<s(0)>;(D1:AlarmSeverity_Tval:1)[[TYPENAME:AlarmSeverity_Tval]]

typedef enum {
	PbTpSegment_pm<s(0)> = 0,
	PbTpSegment_tcm1<s(0)> = 1,
	PbTpSegment_tcm2<s(0)> = 2,
	PbTpSegment_tcm3<s(0)> = 3,
	PbTpSegment_tcm4<s(0)> = 4,
	PbTpSegment_tcm5<s(0)> = 5,
	PbTpSegment_tcm6<s(0)> = 6,
	PbTpSegment_sm<s(0)> = 7,
	PbTpSegment_total<s(0)> = 8
} PbTpSegment_Tval<s(0)>;(D1:PbTpSegment_Tval:1)[[TYPENAME:PbTpSegment_Tval]]

typedef enum {
	PbRspType_failed<s(0)> = 1,
	PbRspType_okay<s(0)> = 2
} PbRspType_Tval<s(0)>;(D1:PbRspType_Tval:1)[[TYPENAME:PbRspType_Tval]]

typedef enum {
	PbCpgCardStatus_none<s(0)> = 0,
	PbCpgCardStatus_normal<s(0)> = 1,
	PbCpgCardStatus_fail<s(0)> = 2,
	PbCpgCardStatus_absent<s(0)> = 3
} PbCpgCardStatus_Tval<s(0)>;(D1:PbCpgCardStatus_Tval:1)[[TYPENAME:PbCpgCardStatus_Tval]]

typedef enum {
	PbOnOff_on<s(0)> = 1,
	PbOnOff_off<s(0)> = 2
} PbOnOff_Tval<s(0)>;(D1:PbOnOff_Tval:1)[[TYPENAME:PbOnOff_Tval]]

typedef enum {
	IANAifType_other<s(0)> = 1,
	IANAifType_regular1822<s(0)> = 2,
	IANAifType_hdh1822<s(0)> = 3,
	IANAifType_ddnX25<s(0)> = 4,
	IANAifType_rfc877x25<s(0)> = 5,
	IANAifType_ethernetCsmacd<s(0)> = 6,
	IANAifType_iso88023Csmacd<s(0)> = 7,
	IANAifType_iso88024TokenBus<s(0)> = 8,
	IANAifType_iso88025TokenRing<s(0)> = 9,
	IANAifType_iso88026Man<s(0)> = 10,
	IANAifType_starLan<s(0)> = 11,
	IANAifType_proteon10Mbit<s(0)> = 12,
	IANAifType_proteon80Mbit<s(0)> = 13,
	IANAifType_hyperchannel<s(0)> = 14,
	IANAifType_fddi<s(0)> = 15,
	IANAifType_lapb<s(0)> = 16,
	IANAifType_sdlc<s(0)> = 17,
	IANAifType_ds1<s(0)> = 18,
	IANAifType_e1<s(0)> = 19,
	IANAifType_basicISDN<s(0)> = 20,
	IANAifType_primaryISDN<s(0)> = 21,
	IANAifType_propPointToPointSerial<s(0)> = 22,
	IANAifType_ppp<s(0)> = 23,
	IANAifType_softwareLoopback<s(0)> = 24,
	IANAifType_eon<s(0)> = 25,
	IANAifType_ethernet3Mbit<s(0)> = 26,
	IANAifType_nsip<s(0)> = 27,
	IANAifType_slip<s(0)> = 28,
	IANAifType_ultra<s(0)> = 29,
	IANAifType_ds3<s(0)> = 30,
	IANAifType_sip<s(0)> = 31,
	IANAifType_frameRelay<s(0)> = 32,
	IANAifType_rs232<s(0)> = 33,
	IANAifType_para<s(0)> = 34,
	IANAifType_arcnet<s(0)> = 35,
	IANAifType_arcnetPlus<s(0)> = 36,
	IANAifType_atm<s(0)> = 37,
	IANAifType_miox25<s(0)> = 38,
	IANAifType_sonet<s(0)> = 39,
	IANAifType_x25ple<s(0)> = 40,
	IANAifType_iso88022llc<s(0)> = 41,
	IANAifType_localTalk<s(0)> = 42,
	IANAifType_smdsDxi<s(0)> = 43,
	IANAifType_frameRelayService<s(0)> = 44,
	IANAifType_v35<s(0)> = 45,
	IANAifType_hssi<s(0)> = 46,
	IANAifType_hippi<s(0)> = 47,
	IANAifType_modem<s(0)> = 48,
	IANAifType_aal5<s(0)> = 49,
	IANAifType_sonetPath<s(0)> = 50,
	IANAifType_sonetVT<s(0)> = 51,
	IANAifType_smdsIcip<s(0)> = 52,
	IANAifType_propVirtual<s(0)> = 53,
	IANAifType_propMultiplexor<s(0)> = 54,
	IANAifType_ieee80212<s(0)> = 55,
	IANAifType_fibreChannel<s(0)> = 56,
	IANAifType_hippiInterface<s(0)> = 57,
	IANAifType_frameRelayInterconnect<s(0)> = 58,
	IANAifType_aflane8023<s(0)> = 59,
	IANAifType_aflane8025<s(0)> = 60,
	IANAifType_cctEmul<s(0)> = 61,
	IANAifType_fastEther<s(0)> = 62,
	IANAifType_isdn<s(0)> = 63,
	IANAifType_v11<s(0)> = 64,
	IANAifType_v36<s(0)> = 65,
	IANAifType_g703at64k<s(0)> = 66,
	IANAifType_g703at2mb<s(0)> = 67,
	IANAifType_qllc<s(0)> = 68,
	IANAifType_fastEtherFX<s(0)> = 69,
	IANAifType_channel<s(0)> = 70,
	IANAifType_ieee80211<s(0)> = 71,
	IANAifType_ibm370parChan<s(0)> = 72,
	IANAifType_escon<s(0)> = 73,
	IANAifType_dlsw<s(0)> = 74,
	IANAifType_isdns<s(0)> = 75,
	IANAifType_isdnu<s(0)> = 76,
	IANAifType_lapd<s(0)> = 77,
	IANAifType_ipSwitch<s(0)> = 78,
	IANAifType_rsrb<s(0)> = 79,
	IANAifType_atmLogical<s(0)> = 80,
	IANAifType_ds0<s(0)> = 81,
	IANAifType_ds0Bundle<s(0)> = 82,
	IANAifType_bsc<s(0)> = 83,
	IANAifType_async<s(0)> = 84,
	IANAifType_cnr<s(0)> = 85,
	IANAifType_iso88025Dtr<s(0)> = 86,
	IANAifType_eplrs<s(0)> = 87,
	IANAifType_arap<s(0)> = 88,
	IANAifType_propCnls<s(0)> = 89,
	IANAifType_hostPad<s(0)> = 90,
	IANAifType_termPad<s(0)> = 91,
	IANAifType_frameRelayMPI<s(0)> = 92,
	IANAifType_x213<s(0)> = 93,
	IANAifType_adsl<s(0)> = 94,
	IANAifType_radsl<s(0)> = 95,
	IANAifType_sdsl<s(0)> = 96,
	IANAifType_vdsl<s(0)> = 97,
	IANAifType_iso88025CRFPInt<s(0)> = 98,
	IANAifType_myrinet<s(0)> = 99,
	IANAifType_voiceEM<s(0)> = 100,
	IANAifType_voiceFXO<s(0)> = 101,
	IANAifType_voiceFXS<s(0)> = 102,
	IANAifType_voiceEncap<s(0)> = 103,
	IANAifType_voiceOverIp<s(0)> = 104,
	IANAifType_atmDxi<s(0)> = 105,
	IANAifType_atmFuni<s(0)> = 106,
	IANAifType_atmIma<s(0)> = 107,
	IANAifType_pppMultilinkBundle<s(0)> = 108,
	IANAifType_ipOverCdlc<s(0)> = 109,
	IANAifType_ipOverClaw<s(0)> = 110,
	IANAifType_stackToStack<s(0)> = 111,
	IANAifType_virtualIpAddress<s(0)> = 112,
	IANAifType_mpc<s(0)> = 113,
	IANAifType_ipOverAtm<s(0)> = 114,
	IANAifType_iso88025Fiber<s(0)> = 115,
	IANAifType_tdlc<s(0)> = 116,
	IANAifType_gigabitEthernet<s(0)> = 117,
	IANAifType_hdlc<s(0)> = 118,
	IANAifType_lapf<s(0)> = 119,
	IANAifType_v37<s(0)> = 120,
	IANAifType_x25mlp<s(0)> = 121,
	IANAifType_x25huntGroup<s(0)> = 122,
	IANAifType_transpHdlc<s(0)> = 123,
	IANAifType_interleave<s(0)> = 124,
	IANAifType_fast<s(0)> = 125,
	IANAifType_ip<s(0)> = 126,
	IANAifType_docsCableMaclayer<s(0)> = 127,
	IANAifType_docsCableDownstream<s(0)> = 128,
	IANAifType_docsCableUpstream<s(0)> = 129,
	IANAifType_a12MppSwitch<s(0)> = 130,
	IANAifType_tunnel<s(0)> = 131,
	IANAifType_coffee<s(0)> = 132,
	IANAifType_ces<s(0)> = 133,
	IANAifType_atmSubInterface<s(0)> = 134,
	IANAifType_l2vlan<s(0)> = 135,
	IANAifType_l3ipvlan<s(0)> = 136,
	IANAifType_l3ipxvlan<s(0)> = 137,
	IANAifType_digitalPowerline<s(0)> = 138,
	IANAifType_mediaMailOverIp<s(0)> = 139,
	IANAifType_dtm<s(0)> = 140,
	IANAifType_dcn<s(0)> = 141,
	IANAifType_ipForward<s(0)> = 142,
	IANAifType_msdsl<s(0)> = 143,
	IANAifType_ieee1394<s(0)> = 144,
	IANAifType_if_gsn<s(0)> = 145,
	IANAifType_dvbRccMacLayer<s(0)> = 146,
	IANAifType_dvbRccDownstream<s(0)> = 147,
	IANAifType_dvbRccUpstream<s(0)> = 148,
	IANAifType_atmVirtual<s(0)> = 149,
	IANAifType_mplsTunnel<s(0)> = 150,
	IANAifType_srp<s(0)> = 151,
	IANAifType_voiceOverAtm<s(0)> = 152,
	IANAifType_voiceOverFrameRelay<s(0)> = 153,
	IANAifType_idsl<s(0)> = 154,
	IANAifType_compositeLink<s(0)> = 155,
	IANAifType_ss7SigLink<s(0)> = 156,
	IANAifType_propWirelessP2P<s(0)> = 157,
	IANAifType_frForward<s(0)> = 158,
	IANAifType_rfc1483<s(0)> = 159,
	IANAifType_usb<s(0)> = 160,
	IANAifType_ieee8023adLag<s(0)> = 161,
	IANAifType_bgppolicyaccounting<s(0)> = 162,
	IANAifType_frf16MfrBundle<s(0)> = 163,
	IANAifType_h323Gatekeeper<s(0)> = 164,
	IANAifType_h323Proxy<s(0)> = 165,
	IANAifType_mpls<s(0)> = 166,
	IANAifType_mfSigLink<s(0)> = 167,
	IANAifType_hdsl2<s(0)> = 168,
	IANAifType_shdsl<s(0)> = 169,
	IANAifType_ds1FDL<s(0)> = 170,
	IANAifType_pos<s(0)> = 171,
	IANAifType_dvbAsiIn<s(0)> = 172,
	IANAifType_dvbAsiOut<s(0)> = 173,
	IANAifType_plc<s(0)> = 174,
	IANAifType_nfas<s(0)> = 175,
	IANAifType_tr008<s(0)> = 176,
	IANAifType_gr303RDT<s(0)> = 177,
	IANAifType_gr303IDT<s(0)> = 178,
	IANAifType_isup<s(0)> = 179,
	IANAifType_propDocsWirelessMaclayer<s(0)> = 180,
	IANAifType_propDocsWirelessDownstream<s(0)> = 181,
	IANAifType_propDocsWirelessUpstream<s(0)> = 182,
	IANAifType_hiperlan2<s(0)> = 183,
	IANAifType_propBWAp2Mp<s(0)> = 184,
	IANAifType_sonetOverheadChannel<s(0)> = 185,
	IANAifType_digitalWrapperOverheadChannel<s(0)> = 186,
	IANAifType_aal2<s(0)> = 187,
	IANAifType_radioMAC<s(0)> = 188,
	IANAifType_atmRadio<s(0)> = 189,
	IANAifType_imt<s(0)> = 190,
	IANAifType_mvl<s(0)> = 191,
	IANAifType_reachDSL<s(0)> = 192,
	IANAifType_frDlciEndPt<s(0)> = 193,
	IANAifType_atmVciEndPt<s(0)> = 194,
	IANAifType_opticalChannel<s(0)> = 195,
	IANAifType_opticalTransport<s(0)> = 196,
	IANAifType_propAtm<s(0)> = 197,
	IANAifType_voiceOverCable<s(0)> = 198,
	IANAifType_infiniband<s(0)> = 199,
	IANAifType_teLink<s(0)> = 200,
	IANAifType_q2931<s(0)> = 201,
	IANAifType_virtualTg<s(0)> = 202,
	IANAifType_sipTg<s(0)> = 203,
	IANAifType_sipSig<s(0)> = 204,
	IANAifType_docsCableUpstreamChannel<s(0)> = 205,
	IANAifType_econet<s(0)> = 206,
	IANAifType_pon155<s(0)> = 207,
	IANAifType_pon622<s(0)> = 208,
	IANAifType_bridge<s(0)> = 209,
	IANAifType_linegroup<s(0)> = 210,
	IANAifType_voiceEMFGD<s(0)> = 211,
	IANAifType_voiceFGDEANA<s(0)> = 212,
	IANAifType_voiceDID<s(0)> = 213,
	IANAifType_mpegTransport<s(0)> = 214,
	IANAifType_sixToFour<s(0)> = 215,
	IANAifType_gtp<s(0)> = 216,
	IANAifType_pdnEtherLoop1<s(0)> = 217,
	IANAifType_pdnEtherLoop2<s(0)> = 218,
	IANAifType_opticalChannelGroup<s(0)> = 219,
	IANAifType_homepna<s(0)> = 220,
	IANAifType_gfp<s(0)> = 221,
	IANAifType_ciscoISLvlan<s(0)> = 222,
	IANAifType_actelisMetaLOOP<s(0)> = 223,
	IANAifType_fcipLink<s(0)> = 224,
	IANAifType_rpr<s(0)> = 225,
	IANAifType_qam<s(0)> = 226,
	IANAifType_lmp<s(0)> = 227,
	IANAifType_cblVectaStar<s(0)> = 228,
	IANAifType_docsCableMCmtsDownstream<s(0)> = 229,
	IANAifType_adsl2<s(0)> = 230,
	IANAifType_macSecControlledIF<s(0)> = 231,
	IANAifType_macSecUncontrolledIF<s(0)> = 232,
	IANAifType_aviciOpticalEther<s(0)> = 233,
	IANAifType_atmbond<s(0)> = 234,
	IANAifType_voiceFGDOS<s(0)> = 235,
	IANAifType_mocaVersion1<s(0)> = 236,
	IANAifType_ieee80216WMAN<s(0)> = 237,
	IANAifType_adsl2plus<s(0)> = 238,
	IANAifType_dvbRcsMacLayer<s(0)> = 239,
	IANAifType_dvbTdm<s(0)> = 240,
	IANAifType_dvbRcsTdma<s(0)> = 241,
	IANAifType_x86Laps<s(0)> = 242,
	IANAifType_wwanPP<s(0)> = 243,
	IANAifType_wwanPP2<s(0)> = 244,
	IANAifType_voiceEBS<s(0)> = 245,
	IANAifType_ifPwType<s(0)> = 246,
	IANAifType_ilan<s(0)> = 247,
	IANAifType_pip<s(0)> = 248,
	IANAifType_aluELP<s(0)> = 249
} IANAifType_Tval<s(0)>;(D1:IANAifType_Tval:1)[[TYPENAME:IANAifType_Tval]]

typedef enum {
	PbMsspSwitchStatus_idle<s(0)> = 0,
	PbMsspSwitchStatus_bridge<s(0)> = 1,
	PbMsspSwitchStatus_bridgeAndSwitch<s(0)> = 2,
	PbMsspSwitchStatus_passthough<s(0)> = 3
} PbMsspSwitchStatus_Tval<s(0)>;(D1:PbMsspSwitchStatus_Tval:1)[[TYPENAME:PbMsspSwitchStatus_Tval]]

typedef enum {
	PbMSPRestoreMode_revertive<s(0)> = 1,
	PbMSPRestoreMode_nonrevertive<s(0)> = 2
} PbMSPRestoreMode_Tval<s(0)>;(D1:PbMSPRestoreMode_Tval:1)[[TYPENAME:PbMSPRestoreMode_Tval]]

typedef enum {
	PbXcAction_up<s(0)> = 0,
	PbXcAction_down<s(0)> = 1,
	PbXcAction_delete<s(0)> = 2
} PbXcAction_Tval<s(0)>;(D1:PbXcAction_Tval:1)[[TYPENAME:PbXcAction_Tval]]

typedef enum {
	PbSdhLpSignalLabel_unequipped<s(0)> = 0,
	PbSdhLpSignalLabel_reserved<s(0)> = 1,
	PbSdhLpSignalLabel_async<s(0)> = 2,
	PbSdhLpSignalLabel_bitsync<s(0)> = 3,
	PbSdhLpSignalLabel_bytesync<s(0)> = 4,
	PbSdhLpSignalLabel_ext<s(0)> = 5,
	PbSdhLpSignalLabel_test<s(0)> = 6,
	PbSdhLpSignalLabel_ais<s(0)> = 7
} PbSdhLpSignalLabel_Tval<s(0)>;(D1:PbSdhLpSignalLabel_Tval:1)[[TYPENAME:PbSdhLpSignalLabel_Tval]]

typedef enum {
	PbPortOperationStatus_up<s(0)> = 1,
	PbPortOperationStatus_down<s(0)> = 2,
	PbPortOperationStatus_absent<s(0)> = 3,
	PbPortOperationStatus_na<s(0)> = 4
} PbPortOperationStatus_Tval<s(0)>;(D1:PbPortOperationStatus_Tval:1)[[TYPENAME:PbPortOperationStatus_Tval]]

typedef enum {
	PbLacpPortClass_lAN<s(0)> = 0,
	PbLacpPortClass_wAN<s(0)> = 1
} PbLacpPortClass_Tval<s(0)>;(D1:PbLacpPortClass_Tval:1)[[TYPENAME:PbLacpPortClass_Tval]]

typedef enum {
	RprXcTableClass_oldTable<s(0)> = 0,
	RprXcTableClass_newTable<s(0)> = 1
} RprXcTableClass_Tval<s(0)>;(D1:RprXcTableClass_Tval:1)[[TYPENAME:RprXcTableClass_Tval]]

typedef enum {
	PbAlarmGroupType_psuA<s(0)> = 1,
	PbAlarmGroupType_psuB<s(0)> = 2,
	PbAlarmGroupType_fan1<s(0)> = 3,
	PbAlarmGroupType_fan2<s(0)> = 4,
	PbAlarmGroupType_tms_slot_a1<s(0)> = 5,
	PbAlarmGroupType_tms_slot_a2<s(0)> = 6,
	PbAlarmGroupType_almevt_logger<s(0)> = 7,
	PbAlarmGroupType_slot_statistics<s(0)> = 8,
	PbAlarmGroupType_ds3<s(0)> = 9,
	PbAlarmGroupType_sonet_line<s(0)> = 10,
	PbAlarmGroupType_sonet_path<s(0)> = 11,
	PbAlarmGroupType_fdr<s(0)> = 12,
	PbAlarmGroupType_node<s(0)> = 13,
	PbAlarmGroupType_dget_agent<s(0)> = 14,
	PbAlarmGroupType_dget_mgr<s(0)> = 15,
	PbAlarmGroupType_fan3<s(0)> = 16,
	PbAlarmGroupType_optics<s(0)> = 17,
	PbAlarmGroupType_slot_intf<s(0)> = 18,
	PbAlarmGroupType_path_aps<s(0)> = 19,
	PbAlarmGroupType_power_circuit<s(0)> = 20,
	PbAlarmGroupType_line_aps<s(0)> = 21,
	PbAlarmGroupType_optical_signaling<s(0)> = 22
} PbAlarmGroupType_Tval<s(0)>;(D1:PbAlarmGroupType_Tval:1)[[TYPENAME:PbAlarmGroupType_Tval]]

typedef enum {
	PBSNCPIntrusive_sncp_i<s(0)> = 0,
	PBSNCPIntrusive_sncp_n<s(0)> = 1
} PBSNCPIntrusive_Tval<s(0)>;(D1:PBSNCPIntrusive_Tval:1)[[TYPENAME:PBSNCPIntrusive_Tval]]

typedef enum {
	PbSNCPRestoreMode_revertive<s(0)> = 1,
	PbSNCPRestoreMode_nonrevertive<s(0)> = 2
} PbSNCPRestoreMode_Tval<s(0)>;(D1:PbSNCPRestoreMode_Tval:1)[[TYPENAME:PbSNCPRestoreMode_Tval]]

typedef enum {
	PbXcType_add<s(0)> = 1,
	PbXcType_drop<s(0)> = 2,
	PbXcType_passthrough<s(0)> = 3
} PbXcType_Tval<s(0)>;(D1:PbXcType_Tval:1)[[TYPENAME:PbXcType_Tval]]

typedef enum {
	PbUpDown_up<s(0)> = 1,
	PbUpDown_down<s(0)> = 2
} PbUpDown_Tval<s(0)>;(D1:PbUpDown_Tval:1)[[TYPENAME:PbUpDown_Tval]]

typedef enum {
	PbMsspTrafficOrder_none<s(0)> = 0,
	PbMsspTrafficOrder_high<s(0)> = 1,
	PbMsspTrafficOrder_low<s(0)> = 2
} PbMsspTrafficOrder_Tval<s(0)>;(D1:PbMsspTrafficOrder_Tval:1)[[TYPENAME:PbMsspTrafficOrder_Tval]]

typedef enum {
	PbXcFailReason_noerr<s(0)> = 0,
	PbXcFailReason_resource<s(0)> = 1,
	PbXcFailReason_block<s(0)> = 2,
	PbXcFailReason_invalid<s(0)> = 3,
	PbXcFailReason_conflict<s(0)> = 4,
	PbXcFailReason_map<s(0)> = 5,
	PbXcFailReason_interface<s(0)> = 6,
	PbXcFailReason_locc<s(0)> = 7
} PbXcFailReason_Tval<s(0)>;(D1:PbXcFailReason_Tval:1)[[TYPENAME:PbXcFailReason_Tval]]

typedef enum {
	IANAtunnelType_other<s(0)> = 1,
	IANAtunnelType_direct<s(0)> = 2,
	IANAtunnelType_gre<s(0)> = 3,
	IANAtunnelType_minimal<s(0)> = 4,
	IANAtunnelType_l2tp<s(0)> = 5,
	IANAtunnelType_pptp<s(0)> = 6,
	IANAtunnelType_l2f<s(0)> = 7,
	IANAtunnelType_udp<s(0)> = 8,
	IANAtunnelType_atmp<s(0)> = 9,
	IANAtunnelType_msdp<s(0)> = 10,
	IANAtunnelType_sixToFour<s(0)> = 11,
	IANAtunnelType_sixOverFour<s(0)> = 12,
	IANAtunnelType_isatap<s(0)> = 13,
	IANAtunnelType_teredo<s(0)> = 14
} IANAtunnelType_Tval<s(0)>;(D1:IANAtunnelType_Tval:1)[[TYPENAME:IANAtunnelType_Tval]]

typedef enum {
	PbEpgFunctionCardStatus_unknown<s(0)> = 0,
	PbEpgFunctionCardStatus_latchoff<s(0)> = 1,
	PbEpgFunctionCardStatus_latchon<s(0)> = 2,
	PbEpgFunctionCardStatus_cardfail<s(0)> = 3
} PbEpgFunctionCardStatus_Tval<s(0)>;(D1:PbEpgFunctionCardStatus_Tval:1)[[TYPENAME:PbEpgFunctionCardStatus_Tval]]

typedef enum {
	RouteStatus_inactive<s(0)> = 1,
	RouteStatus_active<s(0)> = 2,
	RouteStatus_invalid<s(0)> = 3
} RouteStatus_Tval<s(0)>;(D1:RouteStatus_Tval:1)[[TYPENAME:RouteStatus_Tval]]

typedef enum {
	PbTMSMonitorMode_auto<s(0)> = 0,
	PbTMSMonitorMode_yes<s(0)> = 1,
	PbTMSMonitorMode_no<s(0)> = 2
} PbTMSMonitorMode_Tval<s(0)>;(D1:PbTMSMonitorMode_Tval:1)[[TYPENAME:PbTMSMonitorMode_Tval]]

typedef enum {
	RprXcFailReason_noerr<s(0)> = 0,
	RprXcFailReason_resource<s(0)> = 1,
	RprXcFailReason_block<s(0)> = 2,
	RprXcFailReason_invalid<s(0)> = 3,
	RprXcFailReason_conflict<s(0)> = 4,
	RprXcFailReason_map<s(0)> = 5,
	RprXcFailReason_interface<s(0)> = 6,
	RprXcFailReason_locc<s(0)> = 7
} RprXcFailReason_Tval<s(0)>;(D1:RprXcFailReason_Tval:1)[[TYPENAME:RprXcFailReason_Tval]]

typedef enum {
	PbActualPortType_none<s(0)> = 0,
	PbActualPortType_e1<s(0)> = 1,
	PbActualPortType_ds1<s(0)> = 2,
	PbActualPortType_e3<s(0)> = 3,
	PbActualPortType_ds3<s(0)> = 4,
	PbActualPortType_stm1<s(0)> = 5,
	PbActualPortType_stm4<s(0)> = 6
} PbActualPortType_Tval<s(0)>;(D1:PbActualPortType_Tval:1)[[TYPENAME:PbActualPortType_Tval]]

typedef enum {
	TruthValue_true<s(0)> = 1,
	TruthValue_false<s(0)> = 2
} TruthValue_Tval<s(0)>;(D1:TruthValue_Tval:1)[[TYPENAME:TruthValue_Tval]]

typedef enum {
	RprRingletID_ringlet0<s(0)> = 0,
	RprRingletID_ringlet1<s(0)> = 1
} RprRingletID_Tval<s(0)>;(D1:RprRingletID_Tval:1)[[TYPENAME:RprRingletID_Tval]]

typedef enum {
	PbMsspExternalCommand_exerciseRing<s(0)> = 3,
	PbMsspExternalCommand_manualSwitchRing<s(0)> = 6,
	PbMsspExternalCommand_forcedSwitchRing<s(0)> = 13,
	PbMsspExternalCommand_lockoutProtection<s(0)> = 15,
	PbMsspExternalCommand_clear<s(0)> = 21,
	PbMsspExternalCommand_noCommand<s(0)> = 23
} PbMsspExternalCommand_Tval<s(0)>;(D1:PbMsspExternalCommand_Tval:1)[[TYPENAME:PbMsspExternalCommand_Tval]]

typedef enum {
	PbPmMonitor_notMonitored<s(0)> = 1,
	PbPmMonitor_monitored<s(0)> = 2,
	PbPmMonitor_autoReport<s(0)> = 3
} PbPmMonitor_Tval<s(0)>;(D1:PbPmMonitor_Tval:1)[[TYPENAME:PbPmMonitor_Tval]]

typedef enum {
	PbOkNotOk_failed<s(0)> = 1,
	PbOkNotOk_okay<s(0)> = 2
} PbOkNotOk_Tval<s(0)>;(D1:PbOkNotOk_Tval:1)[[TYPENAME:PbOkNotOk_Tval]]

typedef enum {
	PbMspChNumberType_nullchannel<s(0)> = 0,
	PbMspChNumberType_workchannel1<s(0)> = 1,
	PbMspChNumberType_workchannel2<s(0)> = 2,
	PbMspChNumberType_workchannel3<s(0)> = 3,
	PbMspChNumberType_workchannel4<s(0)> = 4,
	PbMspChNumberType_workchannel5<s(0)> = 5,
	PbMspChNumberType_workchannel6<s(0)> = 6,
	PbMspChNumberType_workchannel7<s(0)> = 7,
	PbMspChNumberType_workchannel8<s(0)> = 8,
	PbMspChNumberType_workchannel9<s(0)> = 9,
	PbMspChNumberType_workchannel10<s(0)> = 10,
	PbMspChNumberType_workchannel11<s(0)> = 11,
	PbMspChNumberType_workchannel12<s(0)> = 12,
	PbMspChNumberType_workchannel13<s(0)> = 13,
	PbMspChNumberType_workchannel14<s(0)> = 14,
	PbMspChNumberType_extrafficchannel<s(0)> = 15
} PbMspChNumberType_Tval<s(0)>;(D1:PbMspChNumberType_Tval:1)[[TYPENAME:PbMspChNumberType_Tval]]

typedef enum {
	PbMSPExCmdRslt_cmdRsltSucc<s(0)> = 1,
	PbMSPExCmdRslt_cmdRsltLowPriority<s(0)> = 2,
	PbMSPExCmdRslt_cmdRsltSwithToActive<s(0)> = 3,
	PbMSPExCmdRslt_cmdSwitchFail<s(0)> = 4
} PbMSPExCmdRslt_Tval<s(0)>;(D1:PbMSPExCmdRslt_Tval:1)[[TYPENAME:PbMSPExCmdRslt_Tval]]

typedef enum {
	PbTMSOutActType_auto<s(0)> = 0,
	PbTMSOutActType_squelch<s(0)> = 1
} PbTMSOutActType_Tval<s(0)>;(D1:PbTMSOutActType_Tval:1)[[TYPENAME:PbTMSOutActType_Tval]]

typedef enum {
	PBMSPChPriState_unknown<s(0)> = 0,
	PBMSPChPriState_prihigh<s(0)> = 1,
	PBMSPChPriState_prilow<s(0)> = 2
} PBMSPChPriState_Tval<s(0)>;(D1:PBMSPChPriState_Tval:1)[[TYPENAME:PBMSPChPriState_Tval]]

typedef enum {
	PbPmTpStatusType_active<s(0)> = 1,
	PbPmTpStatusType_inactive<s(0)> = 2
} PbPmTpStatusType_Tval<s(0)>;(D1:PbPmTpStatusType_Tval:1)[[TYPENAME:PbPmTpStatusType_Tval]]

typedef enum {
	PbSncpFrom_cli<s(0)> = 1,
	PbSncpFrom_ems<s(0)> = 2,
	PbSncpFrom_snm<s(0)> = 3,
	PbSncpFrom_gmpls<s(0)> = 4
} PbSncpFrom_Tval<s(0)>;(D1:PbSncpFrom_Tval:1)[[TYPENAME:PbSncpFrom_Tval]]

typedef enum {
	RprXcMsgStatus_removed<s(0)> = 0,
	RprXcMsgStatus_disabled<s(0)> = 1,
	RprXcMsgStatus_ok<s(0)> = 2,
	RprXcMsgStatus_failed<s(0)> = 3
} RprXcMsgStatus_Tval<s(0)>;(D1:RprXcMsgStatus_Tval:1)[[TYPENAME:RprXcMsgStatus_Tval]]

typedef enum {
	PbUserAccessLevel_superUser<s(0)> = 1,
	PbUserAccessLevel_administrative<s(0)> = 2,
	PbUserAccessLevel_readOnly<s(0)> = 3
} PbUserAccessLevel_Tval<s(0)>;(D1:PbUserAccessLevel_Tval:1)[[TYPENAME:PbUserAccessLevel_Tval]]

typedef enum {
	PbXcCapacity_vc11<s(0)> = 1,
	PbXcCapacity_vc12<s(0)> = 2,
	PbXcCapacity_vc2<s(0)> = 3,
	PbXcCapacity_vc3<s(0)> = 4,
	PbXcCapacity_vc4<s(0)> = 5,
	PbXcCapacity_vc44c<s(0)> = 6,
	PbXcCapacity_vc416c<s(0)> = 7,
	PbXcCapacity_vc464c<s(0)> = 8,
	PbXcCapacity_e1<s(0)> = 9
} PbXcCapacity_Tval<s(0)>;(D1:PbXcCapacity_Tval:1)[[TYPENAME:PbXcCapacity_Tval]]

typedef enum {
	PbPortStatus_up<s(0)> = 1,
	PbPortStatus_down<s(0)> = 2
} PbPortStatus_Tval<s(0)>;(D1:PbPortStatus_Tval:1)[[TYPENAME:PbPortStatus_Tval]]

typedef enum {
	TypeMibUpDownLoadStatus_inactive<s(0)> = 0,
	TypeMibUpDownLoadStatus_uploadPreparing<s(0)> = 1,
	TypeMibUpDownLoadStatus_uploadPrepared<s(0)> = 2,
	TypeMibUpDownLoadStatus_uploadPrepareFailed<s(0)> = 3,
	TypeMibUpDownLoadStatus_uploadPrepareTimeout<s(0)> = 4,
	TypeMibUpDownLoadStatus_uploading<s(0)> = 5,
	TypeMibUpDownLoadStatus_uploaded<s(0)> = 6,
	TypeMibUpDownLoadStatus_uploadCanceled<s(0)> = 7,
	TypeMibUpDownLoadStatus_uploadingTimeout<s(0)> = 8,
	TypeMibUpDownLoadStatus_uploadingFailed<s(0)> = 9,
	TypeMibUpDownLoadStatus_downloadPreparing<s(0)> = 21,
	TypeMibUpDownLoadStatus_downloadPrepared<s(0)> = 22,
	TypeMibUpDownLoadStatus_downloadPrepareFailed<s(0)> = 23,
	TypeMibUpDownLoadStatus_downloadPrepareTimeout<s(0)> = 24,
	TypeMibUpDownLoadStatus_downloading<s(0)> = 25,
	TypeMibUpDownLoadStatus_downloaded<s(0)> = 26,
	TypeMibUpDownLoadStatus_downloadCanceled<s(0)> = 27,
	TypeMibUpDownLoadStatus_downloadingTimeout<s(0)> = 28,
	TypeMibUpDownLoadStatus_downloadingFailed<s(0)> = 29
} TypeMibUpDownLoadStatus_Tval<s(0)>;(D1:TypeMibUpDownLoadStatus_Tval:1)[[TYPENAME:TypeMibUpDownLoadStatus_Tval]]

typedef enum {
	PbMsspNodeState_idle<s(0)> = 0,
	PbMsspNodeState_passthough<s(0)> = 1,
	PbMsspNodeState_switching<s(0)> = 2,
	PbMsspNodeState_isolated<s(0)> = 3
} PbMsspNodeState_Tval<s(0)>;(D1:PbMsspNodeState_Tval:1)[[TYPENAME:PbMsspNodeState_Tval]]

typedef enum {
	PbSNCPExCmdRslt_cmdRsltSucc<s(0)> = 1,
	PbSNCPExCmdRslt_cmdRsltLowPriority<s(0)> = 2,
	PbSNCPExCmdRslt_cmdRsltSwithToActive<s(0)> = 3,
	PbSNCPExCmdRslt_cmdSwitchFail<s(0)> = 4,
	PbSNCPExCmdRslt_cmdSwitchTimeout<s(0)> = 5,
	PbSNCPExCmdRslt_cmdWaitCcRsp<s(0)> = 6,
	PbSNCPExCmdRslt_cmdBadCommand<s(0)> = 7
} PbSNCPExCmdRslt_Tval<s(0)>;(D1:PbSNCPExCmdRslt_Tval:1)[[TYPENAME:PbSNCPExCmdRslt_Tval]]

typedef enum {
	AlarmTypeID_spi_los<s(0)> = 1,
	AlarmTypeID_rs_oof<s(0)> = 2,
	AlarmTypeID_rs_lof<s(0)> = 3,
	AlarmTypeID_rs_deg<s(0)> = 4,
	AlarmTypeID_rs_tim<s(0)> = 5,
	AlarmTypeID_rs_exc<s(0)> = 6,
	AlarmTypeID_rs_dcf<s(0)> = 7,
	AlarmTypeID_rs_tca<s(0)> = 8,
	AlarmTypeID_ms_rdi<s(0)> = 9,
	AlarmTypeID_ms_rei<s(0)> = 10,
	AlarmTypeID_ms_ais<s(0)> = 11,
	AlarmTypeID_ms_deg<s(0)> = 12,
	AlarmTypeID_ms_exc<s(0)> = 13,
	AlarmTypeID_ms_dcf<s(0)> = 14,
	AlarmTypeID_ms_fop<s(0)> = 15,
	AlarmTypeID_ms_tca<s(0)> = 17,
	AlarmTypeID_au_lop<s(0)> = 18,
	AlarmTypeID_au_ais<s(0)> = 19,
	AlarmTypeID_au_tca<s(0)> = 20,
	AlarmTypeID_hp_tim<s(0)> = 21,
	AlarmTypeID_hp_uneq<s(0)> = 22,
	AlarmTypeID_hp_rdi<s(0)> = 23,
	AlarmTypeID_hp_plm<s(0)> = 24,
	AlarmTypeID_hp_deg<s(0)> = 25,
	AlarmTypeID_hp_lom<s(0)> = 26,
	AlarmTypeID_hp_exc<s(0)> = 27,
	AlarmTypeID_hp_tca<s(0)> = 28,
	AlarmTypeID_hpv_lom<s(0)> = 29,
	AlarmTypeID_hpv_sqm<s(0)> = 30,
	AlarmTypeID_hpv_loa<s(0)> = 31,
	AlarmTypeID_tu_lop<s(0)> = 32,
	AlarmTypeID_tu_lom<s(0)> = 33,
	AlarmTypeID_tu_ais<s(0)> = 34,
	AlarmTypeID_tu_tca<s(0)> = 35,
	AlarmTypeID_lp_tim<s(0)> = 36,
	AlarmTypeID_lp_uneq<s(0)> = 37,
	AlarmTypeID_lp_rdi<s(0)> = 38,
	AlarmTypeID_lp_plm<s(0)> = 39,
	AlarmTypeID_lp_deg<s(0)> = 40,
	AlarmTypeID_lp_exc<s(0)> = 41,
	AlarmTypeID_lp_rfi<s(0)> = 42,
	AlarmTypeID_lpv_lom<s(0)> = 43,
	AlarmTypeID_lpv_sqm<s(0)> = 44,
	AlarmTypeID_lpv_loa<s(0)> = 45,
	AlarmTypeID_lan_los<s(0)> = 46,
	AlarmTypeID_lan_bbr<s(0)> = 47,
	AlarmTypeID_lan_bpr<s(0)> = 48,
	AlarmTypeID_set_lti<s(0)> = 49,
	AlarmTypeID_set_lto<s(0)> = 50,
	AlarmTypeID_set_trf<s(0)> = 51,
	AlarmTypeID_set_deg<s(0)> = 52,
	AlarmTypeID_set_ssmbm<s(0)> = 53,
	AlarmTypeID_env_mdi<s(0)> = 54,
	AlarmTypeID_env_oh<s(0)> = 55,
	AlarmTypeID_eqp_uf<s(0)> = 56,
	AlarmTypeID_eqp_ur<s(0)> = 57,
	AlarmTypeID_eqp_pf<s(0)> = 58,
	AlarmTypeID_wan_los<s(0)> = 59,
	AlarmTypeID_wan_bbr<s(0)> = 60,
	AlarmTypeID_wan_bpr<s(0)> = 61,
	AlarmTypeID_tc_lcd<s(0)> = 62,
	AlarmTypeID_vp_ais<s(0)> = 63,
	AlarmTypeID_vp_rdi<s(0)> = 64,
	AlarmTypeID_vp_loc<s(0)> = 65,
	AlarmTypeID_vc_ais<s(0)> = 66,
	AlarmTypeID_vc_rdi<s(0)> = 67,
	AlarmTypeID_vc_loc<s(0)> = 68,
	AlarmTypeID_ppi_los<s(0)> = 69,
	AlarmTypeID_spi_dcf<s(0)> = 70,
	AlarmTypeID_in_cer<s(0)> = 71,
	AlarmTypeID_in_clr<s(0)> = 72,
	AlarmTypeID_out_cer<s(0)> = 73,
	AlarmTypeID_out_clr<s(0)> = 74,
	AlarmTypeID_lp_tca<s(0)> = 75,
	AlarmTypeID_set_scf<s(0)> = 76,
	AlarmTypeID_eqp_ff<s(0)> = 77,
	AlarmTypeID_spi_oop_tca<s(0)> = 78,
	AlarmTypeID_spi_iop_tca<s(0)> = 79,
	AlarmTypeID_spi_lb_tca<s(0)> = 80,
	AlarmTypeID_spi_lt_tca<s(0)> = 81,
	AlarmTypeID_spi_ta<s(0)> = 82,
	AlarmTypeID_eqp_utm<s(0)> = 83,
	AlarmTypeID_spi_lcd_slow<s(0)> = 84,
	AlarmTypeID_spi_lcd_fast<s(0)> = 85,
	AlarmTypeID_hpv_csf<s(0)> = 86,
	AlarmTypeID_hpv_lfd<s(0)> = 87,
	AlarmTypeID_lpv_csf<s(0)> = 88,
	AlarmTypeID_lpv_lfd<s(0)> = 89,
	AlarmTypeID_ppi_tca<s(0)> = 90,
	AlarmTypeID_ppi_nslip<s(0)> = 91,
	AlarmTypeID_ppi_pslip<s(0)> = 92,
	AlarmTypeID_rs_tca_es15m<s(0)> = 93,
	AlarmTypeID_rs_tca_es24h<s(0)> = 94,
	AlarmTypeID_rs_tca_bbe15m<s(0)> = 95,
	AlarmTypeID_rs_tca_bbe24h<s(0)> = 96,
	AlarmTypeID_rs_tca_ses15m<s(0)> = 97,
	AlarmTypeID_rs_tca_ses24h<s(0)> = 98,
	AlarmTypeID_rs_tca_uas15m<s(0)> = 99,
	AlarmTypeID_rs_tca_uas24h<s(0)> = 100,
	AlarmTypeID_rs_tca_uap15m<s(0)> = 101,
	AlarmTypeID_rs_tca_uap24h<s(0)> = 102,
	AlarmTypeID_rs_tca_cses15m<s(0)> = 103,
	AlarmTypeID_rs_tca_cses24h<s(0)> = 104,
	AlarmTypeID_rs_tca_ofs15m<s(0)> = 105,
	AlarmTypeID_rs_tca_ofs24h<s(0)> = 106,
	AlarmTypeID_ms_tca_es15mn<s(0)> = 107,
	AlarmTypeID_ms_tca_es15mf<s(0)> = 108,
	AlarmTypeID_ms_tca_es24hn<s(0)> = 109,
	AlarmTypeID_ms_tca_es24hf<s(0)> = 110,
	AlarmTypeID_ms_tca_bbe15mn<s(0)> = 111,
	AlarmTypeID_ms_tca_bbe15mf<s(0)> = 112,
	AlarmTypeID_ms_tca_bbe24hn<s(0)> = 113,
	AlarmTypeID_ms_tca_bbe24hf<s(0)> = 114,
	AlarmTypeID_ms_tca_ses15mn<s(0)> = 115,
	AlarmTypeID_ms_tca_ses15mf<s(0)> = 116,
	AlarmTypeID_ms_tca_ses24hn<s(0)> = 117,
	AlarmTypeID_ms_tca_ses24hf<s(0)> = 118,
	AlarmTypeID_ms_tca_uas15mn<s(0)> = 119,
	AlarmTypeID_ms_tca_uas15mf<s(0)> = 120,
	AlarmTypeID_ms_tca_uas24hn<s(0)> = 121,
	AlarmTypeID_ms_tca_uas24hf<s(0)> = 122,
	AlarmTypeID_ms_tca_uap15mn<s(0)> = 123,
	AlarmTypeID_ms_tca_uap15mf<s(0)> = 124,
	AlarmTypeID_ms_tca_uap24hn<s(0)> = 125,
	AlarmTypeID_ms_tca_uap24hf<s(0)> = 126,
	AlarmTypeID_ms_tca_cses15mn<s(0)> = 127,
	AlarmTypeID_ms_tca_cses15mf<s(0)> = 128,
	AlarmTypeID_ms_tca_cses24hn<s(0)> = 129,
	AlarmTypeID_ms_tca_cses24hf<s(0)> = 130,
	AlarmTypeID_hp_tca_es15mn<s(0)> = 131,
	AlarmTypeID_hp_tca_es15mf<s(0)> = 132,
	AlarmTypeID_hp_tca_es24hn<s(0)> = 133,
	AlarmTypeID_hp_tca_es24hf<s(0)> = 134,
	AlarmTypeID_hp_tca_bbe15mn<s(0)> = 135,
	AlarmTypeID_hp_tca_bbe15mf<s(0)> = 136,
	AlarmTypeID_hp_tca_bbe24hn<s(0)> = 137,
	AlarmTypeID_hp_tca_bbe24hf<s(0)> = 138,
	AlarmTypeID_hp_tca_ses15mn<s(0)> = 139,
	AlarmTypeID_hp_tca_ses15mf<s(0)> = 140,
	AlarmTypeID_hp_tca_ses24hn<s(0)> = 141,
	AlarmTypeID_hp_tca_ses24hf<s(0)> = 142,
	AlarmTypeID_hp_tca_uas15mn<s(0)> = 143,
	AlarmTypeID_hp_tca_uas15mf<s(0)> = 144,
	AlarmTypeID_hp_tca_uas24hn<s(0)> = 145,
	AlarmTypeID_hp_tca_uas24hf<s(0)> = 146,
	AlarmTypeID_hp_tca_uap15mn<s(0)> = 147,
	AlarmTypeID_hp_tca_uap15mf<s(0)> = 148,
	AlarmTypeID_hp_tca_uap24hn<s(0)> = 149,
	AlarmTypeID_hp_tca_uap24hf<s(0)> = 150,
	AlarmTypeID_hp_tca_cses15mn<s(0)> = 151,
	AlarmTypeID_hp_tca_cses15mf<s(0)> = 152,
	AlarmTypeID_hp_tca_cses24hn<s(0)> = 153,
	AlarmTypeID_hp_tca_cses24hf<s(0)> = 154,
	AlarmTypeID_hp_tca_pjcp15m<s(0)> = 155,
	AlarmTypeID_hp_tca_pjcp24h<s(0)> = 156,
	AlarmTypeID_hp_tca_pjcn15m<s(0)> = 157,
	AlarmTypeID_hp_tca_pjcn24h<s(0)> = 158,
	AlarmTypeID_lp_tca_es15mn<s(0)> = 159,
	AlarmTypeID_lp_tca_es15mf<s(0)> = 160,
	AlarmTypeID_lp_tca_es24hn<s(0)> = 161,
	AlarmTypeID_lp_tca_es24hf<s(0)> = 162,
	AlarmTypeID_lp_tca_bbe15mn<s(0)> = 163,
	AlarmTypeID_lp_tca_bbe15mf<s(0)> = 164,
	AlarmTypeID_lp_tca_bbe24hn<s(0)> = 165,
	AlarmTypeID_lp_tca_bbe24hf<s(0)> = 166,
	AlarmTypeID_lp_tca_ses15mn<s(0)> = 167,
	AlarmTypeID_lp_tca_ses15mf<s(0)> = 168,
	AlarmTypeID_lp_tca_ses24hn<s(0)> = 169,
	AlarmTypeID_lp_tca_ses24hf<s(0)> = 170,
	AlarmTypeID_lp_tca_uas15mn<s(0)> = 171,
	AlarmTypeID_lp_tca_uas15mf<s(0)> = 172,
	AlarmTypeID_lp_tca_uas24hn<s(0)> = 173,
	AlarmTypeID_lp_tca_uas24hf<s(0)> = 174,
	AlarmTypeID_lp_tca_uap15mn<s(0)> = 175,
	AlarmTypeID_lp_tca_uap15mf<s(0)> = 176,
	AlarmTypeID_lp_tca_uap24hn<s(0)> = 177,
	AlarmTypeID_lp_tca_uap24hf<s(0)> = 178,
	AlarmTypeID_lp_tca_cses15mn<s(0)> = 179,
	AlarmTypeID_lp_tca_cses15mf<s(0)> = 180,
	AlarmTypeID_lp_tca_cses24hn<s(0)> = 181,
	AlarmTypeID_lp_tca_cses24hf<s(0)> = 182,
	AlarmTypeID_lp_tca_pjcp15m<s(0)> = 183,
	AlarmTypeID_lp_tca_pjcp24h<s(0)> = 184,
	AlarmTypeID_lp_tca_pjcn15m<s(0)> = 185,
	AlarmTypeID_lp_tca_pjcn24h<s(0)> = 186,
	AlarmTypeID_env_mdi1<s(0)> = 187,
	AlarmTypeID_env_mdi2<s(0)> = 188,
	AlarmTypeID_env_mdi3<s(0)> = 189,
	AlarmTypeID_env_mdi4<s(0)> = 190,
	AlarmTypeID_rpr_katoe<s(0)> = 191,
	AlarmTypeID_rpr_katow<s(0)> = 192,
	AlarmTypeID_rpr_dmac<s(0)> = 193,
	AlarmTypeID_rpr_eres0<s(0)> = 194,
	AlarmTypeID_rpr_eres1<s(0)> = 195,
	AlarmTypeID_rpr_lrnc<s(0)> = 196,
	AlarmTypeID_rpr_mmac<s(0)> = 197,
	AlarmTypeID_rpr_mstn<s(0)> = 198,
	AlarmTypeID_rpr_mscbe<s(0)> = 199,
	AlarmTypeID_rpr_mscbw<s(0)> = 200,
	AlarmTypeID_rpr_pmcfg<s(0)> = 201,
	AlarmTypeID_rpr_tpincs<s(0)> = 202,
	AlarmTypeID_rpr_tpinst<s(0)> = 203,
	AlarmTypeID_oa_tf<s(0)> = 211,
	AlarmTypeID_oa_los<s(0)> = 212,
	AlarmTypeID_oa_bias<s(0)> = 214,
	AlarmTypeID_oa_lth<s(0)> = 215,
	AlarmTypeID_eqp_mismatch<s(0)> = 216,
	AlarmTypeID_neg_slip_tca_15m<s(0)> = 217,
	AlarmTypeID_neg_slip_tca_24h<s(0)> = 218,
	AlarmTypeID_pos_slip_tca_15m<s(0)> = 219,
	AlarmTypeID_pos_slip_tca_24h<s(0)> = 220,
	AlarmTypeID_set_timedeg<s(0)> = 221,
	AlarmTypeID_sfp_failure<s(0)> = 222,
	AlarmTypeID_ecc1_failure<s(0)> = 223,
	AlarmTypeID_sfp_mismatch<s(0)> = 224,
	AlarmTypeID_ppi_ais<s(0)> = 225,
	AlarmTypeID_oa_output_power_high<s(0)> = 226,
	AlarmTypeID_oa_gain_high<s(0)> = 227,
	AlarmTypeID_ecc2_failure<s(0)> = 228,
	AlarmTypeID_memory_card_failure<s(0)> = 229,
	AlarmTypeID_ppi_lof<s(0)> = 230,
	AlarmTypeID_ppi_lom<s(0)> = 231,
	AlarmTypeID_ppi_rdi<s(0)> = 232,
	AlarmTypeID_hpvc_tlct<s(0)> = 234,
	AlarmTypeID_lpvc_tlct<s(0)> = 235,
	AlarmTypeID_ppi_tca_es15mn<s(0)> = 236,
	AlarmTypeID_ppi_tca_es15mf<s(0)> = 237,
	AlarmTypeID_ppi_tca_es24hn<s(0)> = 238,
	AlarmTypeID_ppi_tca_es24hf<s(0)> = 239,
	AlarmTypeID_ppi_tca_bbe15mn<s(0)> = 240,
	AlarmTypeID_ppi_tca_bbe15mf<s(0)> = 241,
	AlarmTypeID_ppi_tca_bbe24hn<s(0)> = 242,
	AlarmTypeID_ppi_tca_bbe24hf<s(0)> = 243,
	AlarmTypeID_ppi_tca_ses15mn<s(0)> = 244,
	AlarmTypeID_ppi_tca_ses15mf<s(0)> = 245,
	AlarmTypeID_ppi_tca_ses24hn<s(0)> = 246,
	AlarmTypeID_ppi_tca_ses24hf<s(0)> = 247,
	AlarmTypeID_ppi_tca_uas15mn<s(0)> = 248,
	AlarmTypeID_ppi_tca_uas15mf<s(0)> = 249,
	AlarmTypeID_ppi_tca_uas24hn<s(0)> = 250,
	AlarmTypeID_ppi_tca_uas24hf<s(0)> = 251,
	AlarmTypeID_loss_of_power_input<s(0)> = 253,
	AlarmTypeID_env_mdi5<s(0)> = 254,
	AlarmTypeID_env_mdi6<s(0)> = 255,
	AlarmTypeID_env_mdi7<s(0)> = 256,
	AlarmTypeID_env_mdi8<s(0)> = 257,
	AlarmTypeID_sfp_absent<s(0)> = 258,
	AlarmTypeID_memory_card_absent<s(0)> = 259,
	AlarmTypeID_oa_pf<s(0)> = 260,
	AlarmTypeID_sc_sw_version_mismatch<s(0)> = 286,
	AlarmTypeID_hcoc9_dcf<s(0)> = 287,
	AlarmTypeID_hcoc27_dcf<s(0)> = 288,
	AlarmTypeID_unsuccessful_logins_exceeded<s(0)> = 289,
	AlarmTypeID_log_occupancy_threshold<s(0)> = 290,
	AlarmTypeID_log_is_full<s(0)> = 291,
	AlarmTypeID_unauthorized_access<s(0)> = 292,
	AlarmTypeID_communication_failure<s(0)> = 293,
	AlarmTypeID_no_free_low_order_capacity<s(0)> = 294,
	AlarmTypeID_low_order_capacity_mismatch<s(0)> = 295,
	AlarmTypeID_pll_unlock<s(0)> = 296,
	AlarmTypeID_account_expired_disabled<s(0)> = 297,
	AlarmTypeID_vcxo_failure<s(0)> = 298,
	AlarmTypeID_eq_fal<s(0)> = 299,
	AlarmTypeID_tr_cim<s(0)> = 300,
	AlarmTypeID_otu_lfa<s(0)> = 301,
	AlarmTypeID_otu_lma<s(0)> = 302,
	AlarmTypeID_sm_tim<s(0)> = 303,
	AlarmTypeID_sm_iae<s(0)> = 304,
	AlarmTypeID_sm_bdi<s(0)> = 305,
	AlarmTypeID_opu_ptm<s(0)> = 306,
	AlarmTypeID_loss_of_optical_input<s(0)> = 307,
	AlarmTypeID_ld_fail<s(0)> = 308,
	AlarmTypeID_optical_output_fail<s(0)> = 309,
	AlarmTypeID_wavelength_control<s(0)> = 310,
	AlarmTypeID_dcn_2m_los<s(0)> = 311,
	AlarmTypeID_flash_util_over<s(0)> = 312,
	AlarmTypeID_cfcard_util_over<s(0)> = 313,
	AlarmTypeID_signal_error_fail<s(0)> = 314,
	AlarmTypeID_latch_open<s(0)> = 315,
	AlarmTypeID_otu_deg<s(0)> = 316,
	AlarmTypeID_odu2_loflom<s(0)> = 317,
	AlarmTypeID_odu2_ais<s(0)> = 318,
	AlarmTypeID_odu2_lck<s(0)> = 319,
	AlarmTypeID_odu2_oci<s(0)> = 320,
	AlarmTypeID_odu2_tim<s(0)> = 321,
	AlarmTypeID_odu2_bdi<s(0)> = 322,
	AlarmTypeID_odu2_deg<s(0)> = 323,
	AlarmTypeID_odu2_plm<s(0)> = 324,
	AlarmTypeID_odu2_msim<s(0)> = 325,
	AlarmTypeID_odu1_loflom<s(0)> = 326,
	AlarmTypeID_odu1_ais<s(0)> = 327,
	AlarmTypeID_odu1_lck<s(0)> = 328,
	AlarmTypeID_odu1_oci<s(0)> = 329,
	AlarmTypeID_odu1_tim<s(0)> = 330,
	AlarmTypeID_odu1_bdi<s(0)> = 331,
	AlarmTypeID_odu1_deg<s(0)> = 332,
	AlarmTypeID_odu1_plm<s(0)> = 333,
	AlarmTypeID_hpvc_plct<s(0)> = 334,
	AlarmTypeID_lpvc_plct<s(0)> = 335,
	AlarmTypeID_hpvc_plcr<s(0)> = 336,
	AlarmTypeID_lpvc_plcr<s(0)> = 337,
	AlarmTypeID_eqp_fan_failure<s(0)> = 338
} AlarmTypeID_Tval<s(0)>;(D1:AlarmTypeID_Tval:1)[[TYPENAME:AlarmTypeID_Tval]]

typedef enum {
	RprXcCapacity_vc11<s(0)> = 1,
	RprXcCapacity_vc12<s(0)> = 2,
	RprXcCapacity_vc2<s(0)> = 3,
	RprXcCapacity_vc3<s(0)> = 4,
	RprXcCapacity_vc4<s(0)> = 5,
	RprXcCapacity_vc44c<s(0)> = 6,
	RprXcCapacity_vc416c<s(0)> = 7,
	RprXcCapacity_vc464c<s(0)> = 8,
	RprXcCapacity_e1<s(0)> = 9
} RprXcCapacity_Tval<s(0)>;(D1:RprXcCapacity_Tval:1)[[TYPENAME:RprXcCapacity_Tval]]

typedef enum {
	PbTimeZone_eniwetok<s(0)> = 0,
	PbTimeZone_midwayIsland<s(0)> = 1,
	PbTimeZone_hawaii<s(0)> = 2,
	PbTimeZone_alaska<s(0)> = 3,
	PbTimeZone_pacificTime<s(0)> = 4,
	PbTimeZone_arizona<s(0)> = 5,
	PbTimeZone_mountainTime<s(0)> = 10,
	PbTimeZone_centralAmerica<s(0)> = 15,
	PbTimeZone_centralTime<s(0)> = 20,
	PbTimeZone_mexico<s(0)> = 25,
	PbTimeZone_saskatchewan<s(0)> = 30,
	PbTimeZone_bogota<s(0)> = 35,
	PbTimeZone_easternTime<s(0)> = 40,
	PbTimeZone_indiana<s(0)> = 45,
	PbTimeZone_atlantic<s(0)> = 50,
	PbTimeZone_caracas<s(0)> = 55,
	PbTimeZone_santiago<s(0)> = 56,
	PbTimeZone_newfoundland<s(0)> = 60,
	PbTimeZone_brasilia<s(0)> = 65,
	PbTimeZone_buenosAires<s(0)> = 70,
	PbTimeZone_greenland<s(0)> = 73,
	PbTimeZone_midAtlantic<s(0)> = 75,
	PbTimeZone_azores<s(0)> = 80,
	PbTimeZone_capeVerdeIslands<s(0)> = 83,
	PbTimeZone_casablanca<s(0)> = 85,
	PbTimeZone_greenwich<s(0)> = 90,
	PbTimeZone_amsterdam<s(0)> = 95,
	PbTimeZone_belgrade<s(0)> = 100,
	PbTimeZone_brussels<s(0)> = 105,
	PbTimeZone_sarajevo<s(0)> = 110,
	PbTimeZone_westCentralAfrica<s(0)> = 115,
	PbTimeZone_athens<s(0)> = 120,
	PbTimeZone_bucharest<s(0)> = 125,
	PbTimeZone_cairo<s(0)> = 130,
	PbTimeZone_harare<s(0)> = 135,
	PbTimeZone_helsinki<s(0)> = 140,
	PbTimeZone_jerusalem<s(0)> = 145,
	PbTimeZone_baghdad<s(0)> = 150,
	PbTimeZone_kuwait<s(0)> = 155,
	PbTimeZone_moscow<s(0)> = 158,
	PbTimeZone_nairobi<s(0)> = 160,
	PbTimeZone_tehran<s(0)> = 165,
	PbTimeZone_abuDhabi<s(0)> = 170,
	PbTimeZone_baku<s(0)> = 175,
	PbTimeZone_kabul<s(0)> = 180,
	PbTimeZone_ekaterinburg<s(0)> = 185,
	PbTimeZone_islamabad<s(0)> = 190,
	PbTimeZone_calcutta<s(0)> = 195,
	PbTimeZone_kathmandu<s(0)> = 198,
	PbTimeZone_almaty<s(0)> = 200,
	PbTimeZone_astana<s(0)> = 201,
	PbTimeZone_sri<s(0)> = 202,
	PbTimeZone_rangoony<s(0)> = 205,
	PbTimeZone_bangkok<s(0)> = 207,
	PbTimeZone_krasnoyarsk<s(0)> = 208,
	PbTimeZone_beijing<s(0)> = 210,
	PbTimeZone_irkutsk<s(0)> = 212,
	PbTimeZone_kualaLumpur<s(0)> = 215,
	PbTimeZone_perth<s(0)> = 220,
	PbTimeZone_taipei<s(0)> = 225,
	PbTimeZone_osaka<s(0)> = 230,
	PbTimeZone_seoulr<s(0)> = 235,
	PbTimeZone_yakutsk<s(0)> = 240,
	PbTimeZone_adelaidei<s(0)> = 245,
	PbTimeZone_darwin<s(0)> = 250,
	PbTimeZone_brisbane<s(0)> = 255,
	PbTimeZone_canberra<s(0)> = 260,
	PbTimeZone_guam<s(0)> = 265,
	PbTimeZone_hobart<s(0)> = 270,
	PbTimeZone_vladivostok<s(0)> = 275,
	PbTimeZone_magadan<s(0)> = 280,
	PbTimeZone_auckland<s(0)> = 285,
	PbTimeZone_fujiIslands<s(0)> = 290,
	PbTimeZone_nuku<s(0)> = 300
} PbTimeZone_Tval<s(0)>;(D1:PbTimeZone_Tval:1)[[TYPENAME:PbTimeZone_Tval]]

typedef enum {
	PbSecondaryStatus_none<s(0)> = 1,
	PbSecondaryStatus_bsl_down<s(0)> = 2,
	PbSecondaryStatus_bsl_adminDown<s(0)> = 3,
	PbSecondaryStatus_bsl_HW_adminDown<s(0)> = 4,
	PbSecondaryStatus_bsl_HW_adminTest<s(0)> = 5,
	PbSecondaryStatus_bsl_HW_down<s(0)> = 6,
	PbSecondaryStatus_bsl_notPresent<s(0)> = 7,
	PbSecondaryStatus_sl_adminDown<s(0)> = 8,
	PbSecondaryStatus_sl_adminTest<s(0)> = 9,
	PbSecondaryStatus_hw_adminDown<s(0)> = 10,
	PbSecondaryStatus_hw_adminTest<s(0)> = 11,
	PbSecondaryStatus_hw_down<s(0)> = 12,
	PbSecondaryStatus_nc_HW_removed<s(0)> = 13,
	PbSecondaryStatus_nc_HW_adminDown<s(0)> = 14,
	PbSecondaryStatus_nc_HW_adminTest<s(0)> = 15,
	PbSecondaryStatus_nc_HW_down<s(0)> = 16,
	PbSecondaryStatus_nc_SL_adminDown<s(0)> = 17,
	PbSecondaryStatus_nc_SL_adminTest<s(0)> = 18,
	PbSecondaryStatus_nc_SL_down<s(0)> = 19,
	PbSecondaryStatus_nc_funcAdminDown<s(0)> = 20,
	PbSecondaryStatus_hw_inactive<s(0)> = 21
} PbSecondaryStatus_Tval<s(0)>;(D1:PbSecondaryStatus_Tval:1)[[TYPENAME:PbSecondaryStatus_Tval]]

typedef enum {
	PbLatchState_on<s(0)> = 1,
	PbLatchState_off<s(0)> = 2
} PbLatchState_Tval<s(0)>;(D1:PbLatchState_Tval:1)[[TYPENAME:PbLatchState_Tval]]

typedef enum {
	PbTMSOutState_normal<s(0)> = 0,
	PbTMSOutState_ais<s(0)> = 1,
	PbTMSOutState_dnu<s(0)> = 2,
	PbTMSOutState_shutdown<s(0)> = 3,
	PbTMSOutState_na<s(0)> = 4
} PbTMSOutState_Tval<s(0)>;(D1:PbTMSOutState_Tval:1)[[TYPENAME:PbTMSOutState_Tval]]

typedef enum {
	RprProtectionStatus_noRequest<s(0)> = 1,
	RprProtectionStatus_waitToRestore<s(0)> = 2,
	RprProtectionStatus_manualSwitch<s(0)> = 4,
	RprProtectionStatus_signalDegraded<s(0)> = 8,
	RprProtectionStatus_signalFailed<s(0)> = 16,
	RprProtectionStatus_forcedSwitch<s(0)> = 32
} RprProtectionStatus_Tval<s(0)>;(D1:RprProtectionStatus_Tval:1)[[TYPENAME:RprProtectionStatus_Tval]]

typedef enum {
	PbSlotNumberType_none<s(0)> = 0,
	PbSlotNumberType_lc1<s(0)> = 1,
	PbSlotNumberType_lc2<s(0)> = 2,
	PbSlotNumberType_lc3<s(0)> = 3,
	PbSlotNumberType_lc4<s(0)> = 4,
	PbSlotNumberType_lc5<s(0)> = 5,
	PbSlotNumberType_lc6<s(0)> = 6,
	PbSlotNumberType_hocc1<s(0)> = 7,
	PbSlotNumberType_hocc2<s(0)> = 8,
	PbSlotNumberType_sfc1<s(0)> = 9,
	PbSlotNumberType_sfc2<s(0)> = 10,
	PbSlotNumberType_ce1<s(0)> = 11,
	PbSlotNumberType_ce2<s(0)> = 12,
	PbSlotNumberType_ce3<s(0)> = 13,
	PbSlotNumberType_ce4<s(0)> = 14,
	PbSlotNumberType_ce5<s(0)> = 15,
	PbSlotNumberType_ce6<s(0)> = 16,
	PbSlotNumberType_sc1<s(0)> = 17,
	PbSlotNumberType_sc2<s(0)> = 18,
	PbSlotNumberType_si<s(0)> = 19,
	PbSlotNumberType_sfm1<s(0)> = 20,
	PbSlotNumberType_sfm2<s(0)> = 21,
	PbSlotNumberType_io1<s(0)> = 22,
	PbSlotNumberType_io2<s(0)> = 23,
	PbSlotNumberType_io3<s(0)> = 24,
	PbSlotNumberType_io4<s(0)> = 25,
	PbSlotNumberType_io5<s(0)> = 26,
	PbSlotNumberType_io6<s(0)> = 27,
	PbSlotNumberType_io7<s(0)> = 28,
	PbSlotNumberType_io8<s(0)> = 29,
	PbSlotNumberType_io9<s(0)> = 30,
	PbSlotNumberType_io10<s(0)> = 31,
	PbSlotNumberType_io11<s(0)> = 32,
	PbSlotNumberType_io12<s(0)> = 33,
	PbSlotNumberType_io13<s(0)> = 34,
	PbSlotNumberType_io14<s(0)> = 35,
	PbSlotNumberType_io15<s(0)> = 36,
	PbSlotNumberType_power1<s(0)> = 37,
	PbSlotNumberType_power2<s(0)> = 38,
	PbSlotNumberType_fan1<s(0)> = 39,
	PbSlotNumberType_fan2<s(0)> = 40
} PbSlotNumberType_Tval<s(0)>;(D1:PbSlotNumberType_Tval:1)[[TYPENAME:PbSlotNumberType_Tval]]

typedef enum {
	PbMsspNodeSide_west<s(0)> = 0,
	PbMsspNodeSide_east<s(0)> = 1
} PbMsspNodeSide_Tval<s(0)>;(D1:PbMsspNodeSide_Tval:1)[[TYPENAME:PbMsspNodeSide_Tval]]

typedef enum {
	PbSNCPChannelState_active<s(0)> = 1,
	PbSNCPChannelState_standby<s(0)> = 2
} PbSNCPChannelState_Tval<s(0)>;(D1:PbSNCPChannelState_Tval:1)[[TYPENAME:PbSNCPChannelState_Tval]]

typedef enum {
	SdhFtpCmndLastState_notApplicable<s(0)> = 1,
	SdhFtpCmndLastState_success<s(0)> = 2,
	SdhFtpCmndLastState_failed<s(0)> = 3,
	SdhFtpCmndLastState_inProgress<s(0)> = 4
} SdhFtpCmndLastState_Tval<s(0)>;(D1:SdhFtpCmndLastState_Tval:1)[[TYPENAME:SdhFtpCmndLastState_Tval]]

typedef enum {
	PbLinkGeneralType_networkLink<s(0)> = 1,
	PbLinkGeneralType_offNetworkLink<s(0)> = 2
} PbLinkGeneralType_Tval<s(0)>;(D1:PbLinkGeneralType_Tval:1)[[TYPENAME:PbLinkGeneralType_Tval]]

typedef enum {
	PbBoardFunction_none<s(0)> = 0,
	PbBoardFunction_empty<s(0)> = 1,
	PbBoardFunction_main<s(0)> = 2305,
	PbBoardFunction_hocc<s(0)> = 2306,
	PbBoardFunction_locc<s(0)> = 2307,
	PbBoardFunction_e1x126<s(0)> = 2308,
	PbBoardFunction_e1x63<s(0)> = 2309,
	PbBoardFunction_stm_1ex8<s(0)> = 2310,
	PbBoardFunction_e3ds3x12<s(0)> = 2312,
	PbBoardFunction_stm_41x8<s(0)> = 2320,
	PbBoardFunction_stm_1x8<s(0)> = 2321,
	PbBoardFunction_stm_16x4<s(0)> = 2322,
	PbBoardFunction_stm_16x8<s(0)> = 2323,
	PbBoardFunction_e3ds3px12<s(0)> = 2324,
	PbBoardFunction_stm_64x2<s(0)> = 2325,
	PbBoardFunction_stm_64x1<s(0)> = 2326,
	PbBoardFunction_oaBooster13dbm<s(0)> = 2336,
	PbBoardFunction_oaBooster15dbm<s(0)> = 2337,
	PbBoardFunction_oaBooster18dbm<s(0)> = 2338,
	PbBoardFunction_oaPreamp20db<s(0)> = 2340,
	PbBoardFunction_tengetx1<s(0)> = 2342,
	PbBoardFunction_tengetx1_geax46<s(0)> = 2343,
	PbBoardFunction_getx8<s(0)> = 2344,
	PbBoardFunction_gex6_fegeax4<s(0)> = 2345,
	PbBoardFunction_gex2_ferprx12<s(0)> = 2352,
	PbBoardFunction_gex4_feax12<s(0)> = 2353,
	PbBoardFunction_fetx12<s(0)> = 2354,
	PbBoardFunction_fc2gx8<s(0)> = 2355,
	PbBoardFunction_stm_256x1<s(0)> = 2357,
	PbBoardFunction_fan<s(0)> = 2358,
	PbBoardFunction_si_without_eow<s(0)> = 2368,
	PbBoardFunction_stm_16x2<s(0)> = 2369,
	PbBoardFunction_otu_2x1<s(0)> = 2400,
	PbBoardFunction_tengex1_gex10l2<s(0)> = 2440,
	PbBoardFunction_stm_16x8m<s(0)> = 2441,
	PbBoardFunction_stm_41x16m<s(0)> = 2448,
	PbBoardFunction_stm_64x2m<s(0)> = 2449,
	PbBoardFunction_otu_2x2<s(0)> = 2450,
	PbBoardFunction_chassis<s(0)> = 4232,
	PbBoardFunction_cc<s(0)> = 4240,
	PbBoardFunction_dataFabric_controller<s(0)> = 4241,
	PbBoardFunction_dataFabric<s(0)> = 4242,
	PbBoardFunction_si<s(0)> = 4243,
	PbBoardFunction_power<s(0)> = 4244,
	PbBoardFunction_chassis_fan_airFilter<s(0)> = 4245,
	PbBoardFunction_fanTray<s(0)> = 4246,
	PbBoardFunction_fanCircuitBoard<s(0)> = 4247,
	PbBoardFunction_backplane<s(0)> = 4248,
	PbBoardFunction_e1x21p_75<s(0)> = 4352,
	PbBoardFunction_e1x21p_120<s(0)> = 4353,
	PbBoardFunction_stm_1ex16<s(0)> = 4354,
	PbBoardFunction_stm_1ex8p<s(0)> = 4356,
	PbBoardFunction_e3ds3x6p<s(0)> = 4358,
	PbBoardFunction_gex20<s(0)> = 4359,
	PbBoardFunction_tengex2<s(0)> = 4360,
	PbBoardFunction_gex10_eos<s(0)> = 4361,
	PbBoardFunction_tengex2_eos<s(0)> = 4368,
	PbBoardFunction_gmpls_load<s(0)> = 983040
} PbBoardFunction_Tval<s(0)>;(D1:PbBoardFunction_Tval:1)[[TYPENAME:PbBoardFunction_Tval]]

typedef enum {
	PbYesNo_yes<s(0)> = 1,
	PbYesNo_no<s(0)> = 2
} PbYesNo_Tval<s(0)>;(D1:PbYesNo_Tval:1)[[TYPENAME:PbYesNo_Tval]]

typedef enum {
	PBMSPSignalState_signalunknown<s(0)> = 0,
	PBMSPSignalState_signalfailhigh<s(0)> = 1,
	PBMSPSignalState_signalfaillow<s(0)> = 2,
	PBMSPSignalState_signaldeglhigh<s(0)> = 3,
	PBMSPSignalState_signaldeglow<s(0)> = 4,
	PBMSPSignalState_signalnormal<s(0)> = 5
} PBMSPSignalState_Tval<s(0)>;(D1:PBMSPSignalState_Tval:1)[[TYPENAME:PBMSPSignalState_Tval]]

typedef enum {
	PbMSPSignalDirection_unidirection<s(0)> = 1,
	PbMSPSignalDirection_bidirection<s(0)> = 2
} PbMSPSignalDirection_Tval<s(0)>;(D1:PbMSPSignalDirection_Tval:1)[[TYPENAME:PbMSPSignalDirection_Tval]]

typedef enum {
	PbEpgCmdResult_ok<s(0)> = 0,
	PbEpgCmdResult_failed<s(0)> = 1
} PbEpgCmdResult_Tval<s(0)>;(D1:PbEpgCmdResult_Tval:1)[[TYPENAME:PbEpgCmdResult_Tval]]

typedef enum {
	TMSIfSdhQlType_sdh<s(0)> = 1,
	TMSIfSdhQlType_sonet<s(0)> = 2
} TMSIfSdhQlType_Tval<s(0)>;(D1:TMSIfSdhQlType_Tval:1)[[TYPENAME:TMSIfSdhQlType_Tval]]

typedef enum {
	PbChassisType_mw863<s(0)> = 1,
	PbChassisType_mw808<s(0)> = 2,
	PbChassisType_mw8100<s(0)> = 3,
	PbChassisType_mw801<s(0)> = 4,
	PbChassisType_hiT7035<s(0)> = 5,
	PbChassisType_hiT7080<s(0)> = 7,
	PbChassisType_hiT7065<s(0)> = 8,
	PbChassisType_all<s(0)> = 255
} PbChassisType_Tval<s(0)>;(D1:PbChassisType_Tval:1)[[TYPENAME:PbChassisType_Tval]]

typedef enum {
	PbMsspSwStatus_idle<s(0)> = 0,
	PbMsspSwStatus_bridge<s(0)> = 1,
	PbMsspSwStatus_bridgeAndSwitch<s(0)> = 2,
	PbMsspSwStatus_passthough<s(0)> = 3
} PbMsspSwStatus_Tval<s(0)>;(D1:PbMsspSwStatus_Tval:1)[[TYPENAME:PbMsspSwStatus_Tval]]

typedef enum {
	PbTMSQl_inv0<s(0)> = 0,
	PbTMSQl_inv1<s(0)> = 1,
	PbTMSQl_prc<s(0)> = 2,
	PbTMSQl_inv3<s(0)> = 3,
	PbTMSQl_ssut<s(0)> = 4,
	PbTMSQl_inv5<s(0)> = 5,
	PbTMSQl_inv6<s(0)> = 6,
	PbTMSQl_inv7<s(0)> = 7,
	PbTMSQl_ssul<s(0)> = 8,
	PbTMSQl_inv9<s(0)> = 9,
	PbTMSQl_inv10<s(0)> = 10,
	PbTMSQl_sec<s(0)> = 11,
	PbTMSQl_inv12<s(0)> = 12,
	PbTMSQl_inv13<s(0)> = 13,
	PbTMSQl_inv14<s(0)> = 14,
	PbTMSQl_dnu<s(0)> = 15,
	PbTMSQl_failed<s(0)> = 16,
	PbTMSQl_nsupp<s(0)> = 17,
	PbTMSQl_unc<s(0)> = 18
} PbTMSQl_Tval<s(0)>;(D1:PbTMSQl_Tval:1)[[TYPENAME:PbTMSQl_Tval]]

typedef enum {
	TypeMibUpgFailedIndex_noError<s(0)> = 0,
	TypeMibUpgFailedIndex_unKnown<s(0)> = 1,
	TypeMibUpgFailedIndex_writeFlashFailed<s(0)> = 2,
	TypeMibUpgFailedIndex_readFlashFailed<s(0)> = 3,
	TypeMibUpgFailedIndex_flashFull<s(0)> = 4,
	TypeMibUpgFailedIndex_flashError<s(0)> = 5,
	TypeMibUpgFailedIndex_writeCfFailed<s(0)> = 6,
	TypeMibUpgFailedIndex_readCfFailed<s(0)> = 7,
	TypeMibUpgFailedIndex_cfFull<s(0)> = 8,
	TypeMibUpgFailedIndex_cfError<s(0)> = 9,
	TypeMibUpgFailedIndex_copyAscFlashFailed<s(0)> = 10,
	TypeMibUpgFailedIndex_copyAscCfFailed<s(0)> = 11,
	TypeMibUpgFailedIndex_copySscFlashFailed<s(0)> = 12,
	TypeMibUpgFailedIndex_copySscCfFailed<s(0)> = 13,
	TypeMibUpgFailedIndex_spawnTaskFailed<s(0)> = 14,
	TypeMibUpgFailedIndex_paraInvalid<s(0)> = 15,
	TypeMibUpgFailedIndex_writeRamdscFailed<s(0)> = 16,
	TypeMibUpgFailedIndex_readRamdscFailed<s(0)> = 17,
	TypeMibUpgFailedIndex_setMibFailed<s(0)> = 18,
	TypeMibUpgFailedIndex_getMibFailed<s(0)> = 19,
	TypeMibUpgFailedIndex_openDirFailed<s(0)> = 20,
	TypeMibUpgFailedIndex_createDirFailed<s(0)> = 21,
	TypeMibUpgFailedIndex_peerScOnline<s(0)> = 22,
	TypeMibUpgFailedIndex_peerScOffline<s(0)> = 23,
	TypeMibUpgFailedIndex_synRamdscFailed<s(0)> = 24,
	TypeMibUpgFailedIndex_synFlashFailed<s(0)> = 25,
	TypeMibUpgFailedIndex_synCfFailed<s(0)> = 26,
	TypeMibUpgFailedIndex_msgCreateFailed<s(0)> = 27,
	TypeMibUpgFailedIndex_msgSendFailed<s(0)> = 28,
	TypeMibUpgFailedIndex_cmndStatusInvalid<s(0)> = 29,
	TypeMibUpgFailedIndex_sscCopyTimeout<s(0)> = 30,
	TypeMibUpgFailedIndex_createSemFailed<s(0)> = 31,
	TypeMibUpgFailedIndex_mibHeadFileInvalid<s(0)> = 32,
	TypeMibUpgFailedIndex_mibNeFileCheckSumInvalid<s(0)> = 33,
	TypeMibUpgFailedIndex_mibGmFileCheckSumInvalid<s(0)> = 34,
	TypeMibUpgFailedIndex_lcsFileInvalid<s(0)> = 35,
	TypeMibUpgFailedIndex_dirCopyFailed<s(0)> = 36,
	TypeMibUpgFailedIndex_dirDelFailed<s(0)> = 37,
	TypeMibUpgFailedIndex_zipFileNotExist<s(0)> = 38,
	TypeMibUpgFailedIndex_tarFileFailed<s(0)> = 39,
	TypeMibUpgFailedIndex_zipFileFailed<s(0)> = 40,
	TypeMibUpgFailedIndex_unzipFileFailed<s(0)> = 41,
	TypeMibUpgFailedIndex_gsemTakeFailed<s(0)> = 42,
	TypeMibUpgFailedIndex_gSaveFlagSetFailed<s(0)> = 43,
	TypeMibUpgFailedIndex_dirRnameLoadTmpFailed<s(0)> = 44,
	TypeMibUpgFailedIndex_dirRnameTmpLoadFailed<s(0)> = 45,
	TypeMibUpgFailedIndex_dirRnameTmpBkupFailed<s(0)> = 46,
	TypeMibUpgFailedIndex_dirRnameBkupActFailed<s(0)> = 47,
	TypeMibUpgFailedIndex_mibIncSaveFailed<s(0)> = 48,
	TypeMibUpgFailedIndex_mibAllSaveFailed<s(0)> = 49,
	TypeMibUpgFailedIndex_mibSaveSwitchSetFailed<s(0)> = 50,
	TypeMibUpgFailedIndex_scSwitch<s(0)> = 51,
	TypeMibUpgFailedIndex_upgCommandRunning<s(0)> = 52,
	TypeMibUpgFailedIndex_cfaSoftCopying<s(0)> = 53,
	TypeMibUpgFailedIndex_psmMibCheckingFuncInvalid<s(0)> = 54,
	TypeMibUpgFailedIndex_lcmMibCheckingFuncInvalid<s(0)> = 55,
	TypeMibUpgFailedIndex_globleHeadFileInvalid<s(0)> = 56,
	TypeMibUpgFailedIndex_neHeadfileFlagSetFailed<s(0)> = 57,
	TypeMibUpgFailedIndex_psmHeadfileFlagSetFailed<s(0)> = 58,
	TypeMibUpgFailedIndex_uploadPrepareTimeout<s(0)> = 71,
	TypeMibUpgFailedIndex_uploadPrepareFailed<s(0)> = 72,
	TypeMibUpgFailedIndex_uploadMidTimeout<s(0)> = 73,
	TypeMibUpgFailedIndex_uploadMidFailed<s(0)> = 74,
	TypeMibUpgFailedIndex_uploadCanceled<s(0)> = 75,
	TypeMibUpgFailedIndex_downloadPrepareTimeout<s(0)> = 81,
	TypeMibUpgFailedIndex_downloadPrepareFailed<s(0)> = 82,
	TypeMibUpgFailedIndex_downloadMidTimeout<s(0)> = 83,
	TypeMibUpgFailedIndex_downloadMidFailed<s(0)> = 84,
	TypeMibUpgFailedIndex_downloadCanceled<s(0)> = 85,
	TypeMibUpgFailedIndex_switchAscTimeout<s(0)> = 91,
	TypeMibUpgFailedIndex_switchAscFailed<s(0)> = 92,
	TypeMibUpgFailedIndex_switchAscCfFailed<s(0)> = 93,
	TypeMibUpgFailedIndex_synTimeout<s(0)> = 101,
	TypeMibUpgFailedIndex_synCanceled<s(0)> = 102,
	TypeMibUpgFailedIndex_synFailed<s(0)> = 103,
	TypeMibUpgFailedIndex_clearTimeout<s(0)> = 111,
	TypeMibUpgFailedIndex_clearFailed<s(0)> = 112,
	TypeMibUpgFailedIndex_ascMibClearSetFailed<s(0)> = 113,
	TypeMibUpgFailedIndex_sscMibClearSetFailed<s(0)> = 114,
	TypeMibUpgFailedIndex_mibCopyTimeout<s(0)> = 121,
	TypeMibUpgFailedIndex_mibCopyFailed<s(0)> = 122,
	TypeMibUpgFailedIndex_gmplsCopyFailed<s(0)> = 123,
	TypeMibUpgFailedIndex_lcsynTimeout<s(0)> = 131,
	TypeMibUpgFailedIndex_lcsSynFailed<s(0)> = 132,
	TypeMibUpgFailedIndex_lcsDownTimeout<s(0)> = 141,
	TypeMibUpgFailedIndex_lcsDownFailed<s(0)> = 142
} TypeMibUpgFailedIndex_Tval<s(0)>;(D1:TypeMibUpgFailedIndex_Tval:1)[[TYPENAME:TypeMibUpgFailedIndex_Tval]]

typedef enum {
	PBSNCPAction_normal<s(0)> = 0,
	PBSNCPAction_recfgw<s(0)> = 1,
	PBSNCPAction_recfgp<s(0)> = 2,
	PBSNCPAction_setmib<s(0)> = 3
} PBSNCPAction_Tval<s(0)>;(D1:PBSNCPAction_Tval:1)[[TYPENAME:PBSNCPAction_Tval]]

typedef enum {
	PBMSPType_msponevsn<s(0)> = 1,
	PBMSPType_msponeplusone<s(0)> = 2
} PBMSPType_Tval<s(0)>;(D1:PBMSPType_Tval:1)[[TYPENAME:PBMSPType_Tval]]

typedef enum {
	PbAlmClassType_ne<s(0)> = 1,
	PbAlmClassType_slot<s(0)> = 2,
	PbAlmClassType_port<s(0)> = 3,
	PbAlmClassType_tp<s(0)> = 4
} PbAlmClassType_Tval<s(0)>;(D1:PbAlmClassType_Tval:1)[[TYPENAME:PbAlmClassType_Tval]]

typedef enum {
	RprSvcStatus_ok<s(0)> = 0,
	RprSvcStatus_failed<s(0)> = 1,
	RprSvcStatus_removed<s(0)> = 2
} RprSvcStatus_Tval<s(0)>;(D1:RprSvcStatus_Tval:1)[[TYPENAME:RprSvcStatus_Tval]]

typedef enum {
	PbLowHigh_low<s(0)> = 1,
	PbLowHigh_high<s(0)> = 2
} PbLowHigh_Tval<s(0)>;(D1:PbLowHigh_Tval:1)[[TYPENAME:PbLowHigh_Tval]]

typedef enum {
	PBSNCPSignalState_normal<s(0)> = 1,
	PBSNCPSignalState_failed<s(0)> = 2,
	PBSNCPSignalState_degard<s(0)> = 3
} PBSNCPSignalState_Tval<s(0)>;(D1:PBSNCPSignalState_Tval:1)[[TYPENAME:PBSNCPSignalState_Tval]]

typedef enum {
	PbSNCPSignalDirection_source<s(0)> = 1,
	PbSNCPSignalDirection_sink<s(0)> = 2
} PbSNCPSignalDirection_Tval<s(0)>;(D1:PbSNCPSignalDirection_Tval:1)[[TYPENAME:PbSNCPSignalDirection_Tval]]

typedef enum {
	PbCircuitDirection_bidirection<s(0)> = 1,
	PbCircuitDirection_unidirection<s(0)> = 2,
	PbCircuitDirection_multicast<s(0)> = 3
} PbCircuitDirection_Tval<s(0)>;(D1:PbCircuitDirection_Tval:1)[[TYPENAME:PbCircuitDirection_Tval]]

typedef enum {
	RprRingType_closedRing<s(0)> = 1,
	RprRingType_openRing<s(0)> = 2
} RprRingType_Tval<s(0)>;(D1:RprRingType_Tval:1)[[TYPENAME:RprRingType_Tval]]

typedef enum {
	RprOamRinglet_default<s(0)> = 1,
	RprOamRinglet_ringlet0<s(0)> = 2,
	RprOamRinglet_ringlet1<s(0)> = 3,
	RprOamRinglet_reverseRinglet<s(0)> = 4
} RprOamRinglet_Tval<s(0)>;(D1:RprOamRinglet_Tval:1)[[TYPENAME:RprOamRinglet_Tval]]

typedef enum {
	PbColdRebootNodeState_false<s(0)> = 0,
	PbColdRebootNodeState_truewithfpga<s(0)> = 1,
	PbColdRebootNodeState_truewithoutfpga<s(0)> = 2
} PbColdRebootNodeState_Tval<s(0)>;(D1:PbColdRebootNodeState_Tval:1)[[TYPENAME:PbColdRebootNodeState_Tval]]

typedef enum {
	RprServiceType_p2p<s(0)> = 1,
	RprServiceType_mp2mp<s(0)> = 2,
	RprServiceType_local<s(0)> = 3
} RprServiceType_Tval<s(0)>;(D1:RprServiceType_Tval:1)[[TYPENAME:RprServiceType_Tval]]

typedef enum {
	TypeSoftUpgFailedIndex_noError<s(0)> = 0,
	TypeSoftUpgFailedIndex_unKnown<s(0)> = 1,
	TypeSoftUpgFailedIndex_commandTimeout<s(0)> = 2,
	TypeSoftUpgFailedIndex_wrongNodeType<s(0)> = 3,
	TypeSoftUpgFailedIndex_redunLoadError<s(0)> = 4,
	TypeSoftUpgFailedIndex_writeFlashFailed<s(0)> = 5,
	TypeSoftUpgFailedIndex_readFlashFailed<s(0)> = 6,
	TypeSoftUpgFailedIndex_flashFull<s(0)> = 7,
	TypeSoftUpgFailedIndex_flashError<s(0)> = 8,
	TypeSoftUpgFailedIndex_writeCfFailed<s(0)> = 9,
	TypeSoftUpgFailedIndex_readCfFailed<s(0)> = 10,
	TypeSoftUpgFailedIndex_cfFull<s(0)> = 11,
	TypeSoftUpgFailedIndex_cfError<s(0)> = 12,
	TypeSoftUpgFailedIndex_copyAscFlashFailed<s(0)> = 13,
	TypeSoftUpgFailedIndex_copyAscCfFailed<s(0)> = 14,
	TypeSoftUpgFailedIndex_copySscFlashFailed<s(0)> = 15,
	TypeSoftUpgFailedIndex_copySscCfFailed<s(0)> = 16,
	TypeSoftUpgFailedIndex_spawnTaskFailed<s(0)> = 17,
	TypeSoftUpgFailedIndex_parameterInvalid<s(0)> = 18,
	TypeSoftUpgFailedIndex_writeRamdscFailed<s(0)> = 19,
	TypeSoftUpgFailedIndex_readRamdscFailed<s(0)> = 20,
	TypeSoftUpgFailedIndex_setUpgMibFailed<s(0)> = 21,
	TypeSoftUpgFailedIndex_getUpgMibFailed<s(0)> = 22,
	TypeSoftUpgFailedIndex_openUpgDirFailed<s(0)> = 23,
	TypeSoftUpgFailedIndex_createUpgDirFailed<s(0)> = 24,
	TypeSoftUpgFailedIndex_peerScOnline<s(0)> = 25,
	TypeSoftUpgFailedIndex_peerScOffline<s(0)> = 26,
	TypeSoftUpgFailedIndex_synRamdscFailed<s(0)> = 27,
	TypeSoftUpgFailedIndex_synFlashFailed<s(0)> = 28,
	TypeSoftUpgFailedIndex_synCfFailed<s(0)> = 29,
	TypeSoftUpgFailedIndex_msgCreateFailed<s(0)> = 30,
	TypeSoftUpgFailedIndex_msgSendFailed<s(0)> = 31,
	TypeSoftUpgFailedIndex_cmndStatusInvalid<s(0)> = 32,
	TypeSoftUpgFailedIndex_sscCopyTimeout<s(0)> = 33,
	TypeSoftUpgFailedIndex_softInvalid<s(0)> = 34,
	TypeSoftUpgFailedIndex_downRamFailed<s(0)> = 35,
	TypeSoftUpgFailedIndex_downCfFailed<s(0)> = 36,
	TypeSoftUpgFailedIndex_dirRnameLoadTmpFailed<s(0)> = 37,
	TypeSoftUpgFailedIndex_dirRnameTmpLoadFailed<s(0)> = 38,
	TypeSoftUpgFailedIndex_dirRnameTmpBkupFailed<s(0)> = 39,
	TypeSoftUpgFailedIndex_dirRnameBkupActFailed<s(0)> = 40,
	TypeSoftUpgFailedIndex_cfUnSurported<s(0)> = 41,
	TypeSoftUpgFailedIndex_ramUnSurported<s(0)> = 42,
	TypeSoftUpgFailedIndex_delDirFailed<s(0)> = 43,
	TypeSoftUpgFailedIndex_copyDirFailed<s(0)> = 44,
	TypeSoftUpgFailedIndex_copyFileFailed<s(0)> = 45,
	TypeSoftUpgFailedIndex_openFileFailed<s(0)> = 46,
	TypeSoftUpgFailedIndex_scSwitch<s(0)> = 47,
	TypeSoftUpgFailedIndex_srootFileInvalid<s(0)> = 48,
	TypeSoftUpgFailedIndex_crootFileInvalid<s(0)> = 49,
	TypeSoftUpgFailedIndex_lrootFileInvalid<s(0)> = 50,
	TypeSoftUpgFailedIndex_addHostServerFailed<s(0)> = 51,
	TypeSoftUpgFailedIndex_delHostServerFailed<s(0)> = 52,
	TypeSoftUpgFailedIndex_dirNameParseFailed<s(0)> = 53,
	TypeSoftUpgFailedIndex_softVersionInvalid<s(0)> = 54,
	TypeSoftUpgFailedIndex_createConnectFailed<s(0)> = 55,
	TypeSoftUpgFailedIndex_openDataPipeFailed<s(0)> = 56,
	TypeSoftUpgFailedIndex_headFileStructureInvalid<s(0)> = 57,
	TypeSoftUpgFailedIndex_fileTypeInvalid<s(0)> = 58,
	TypeSoftUpgFailedIndex_getReleaseDataFailed<s(0)> = 59,
	TypeSoftUpgFailedIndex_diskStatusInvalid<s(0)> = 60,
	TypeSoftUpgFailedIndex_diskSpaceNotEnough<s(0)> = 61,
	TypeSoftUpgFailedIndex_getFileSizeFailed<s(0)> = 62,
	TypeSoftUpgFailedIndex_createFileFailed<s(0)> = 63,
	TypeSoftUpgFailedIndex_writeFileFailed<s(0)> = 64,
	TypeSoftUpgFailedIndex_fileWithoutCrc<s(0)> = 65,
	TypeSoftUpgFailedIndex_getFileNameFailed<s(0)> = 66,
	TypeSoftUpgFailedIndex_crcBufferInvalid<s(0)> = 67,
	TypeSoftUpgFailedIndex_crcChecksumInvalid<s(0)> = 68,
	TypeSoftUpgFailedIndex_extractFileFailed<s(0)> = 69,
	TypeSoftUpgFailedIndex_getTransDataFailed<s(0)> = 70,
	TypeSoftUpgFailedIndex_writeTransDataFailed<s(0)> = 71,
	TypeSoftUpgFailedIndex_mfmCommandRunning<s(0)> = 72,
	TypeSoftUpgFailedIndex_cfaSoftCopying<s(0)> = 73,
	TypeSoftUpgFailedIndex_versionQueryFailed<s(0)> = 74,
	TypeSoftUpgFailedIndex_fileNotExiste<s(0)> = 75,
	TypeSoftUpgFailedIndex_ftpConnectionFailed<s(0)> = 101,
	TypeSoftUpgFailedIndex_ftpConnectionTimeout<s(0)> = 102,
	TypeSoftUpgFailedIndex_downloadTimeout<s(0)> = 103,
	TypeSoftUpgFailedIndex_downloadCanceled<s(0)> = 104,
	TypeSoftUpgFailedIndex_downloadFailed<s(0)> = 105,
	TypeSoftUpgFailedIndex_backupTimeout<s(0)> = 111,
	TypeSoftUpgFailedIndex_backupCanceled<s(0)> = 112,
	TypeSoftUpgFailedIndex_backupFailed<s(0)> = 113,
	TypeSoftUpgFailedIndex_synchronizeTimeout<s(0)> = 121,
	TypeSoftUpgFailedIndex_synchronizeCanceled<s(0)> = 122,
	TypeSoftUpgFailedIndex_synchronizeFailed<s(0)> = 123,
	TypeSoftUpgFailedIndex_switchTimeout<s(0)> = 131,
	TypeSoftUpgFailedIndex_switchFailed<s(0)> = 132,
	TypeSoftUpgFailedIndex_switchCfFailed<s(0)> = 133
} TypeSoftUpgFailedIndex_Tval<s(0)>;(D1:TypeSoftUpgFailedIndex_Tval:1)[[TYPENAME:TypeSoftUpgFailedIndex_Tval]]

typedef enum {
	PbEpgSwitchRequest_clear<s(0)> = 1,
	PbEpgSwitchRequest_lp<s(0)> = 2,
	PbEpgSwitchRequest_fs_w<s(0)> = 3,
	PbEpgSwitchRequest_fs_p<s(0)> = 4,
	PbEpgSwitchRequest_uf_p<s(0)> = 5,
	PbEpgSwitchRequest_uf_w<s(0)> = 6,
	PbEpgSwitchRequest_lis_w<s(0)> = 7,
	PbEpgSwitchRequest_lis_p<s(0)> = 8,
	PbEpgSwitchRequest_ms_w<s(0)> = 9,
	PbEpgSwitchRequest_ms_p<s(0)> = 10,
	PbEpgSwitchRequest_wtr<s(0)> = 11,
	PbEpgSwitchRequest_nr<s(0)> = 12
} PbEpgSwitchRequest_Tval<s(0)>;(D1:PbEpgSwitchRequest_Tval:1)[[TYPENAME:PbEpgSwitchRequest_Tval]]

typedef enum {
	PbTMSStClkType_twoMHz<s(0)> = 1,
	PbTMSStClkType_twoMbUnFramed<s(0)> = 2,
	PbTMSStClkType_twoMbFramed<s(0)> = 3
} PbTMSStClkType_Tval<s(0)>;(D1:PbTMSStClkType_Tval:1)[[TYPENAME:PbTMSStClkType_Tval]]

typedef enum {
	PbInSignalType_normal<s(0)> = 1,
	PbInSignalType_ais<s(0)> = 3
} PbInSignalType_Tval<s(0)>;(D1:PbInSignalType_Tval:1)[[TYPENAME:PbInSignalType_Tval]]

typedef enum {
	PbGmplsSncpDirection_forward<s(0)> = 1,
	PbGmplsSncpDirection_reverse<s(0)> = 2
} PbGmplsSncpDirection_Tval<s(0)>;(D1:PbGmplsSncpDirection_Tval:1)[[TYPENAME:PbGmplsSncpDirection_Tval]]

typedef enum {
	RprServiceCos_classC<s(0)> = 0,
	RprServiceCos_classBEir<s(0)> = 1,
	RprServiceCos_classBCir<s(0)> = 2,
	RprServiceCos_classA<s(0)> = 3
} RprServiceCos_Tval<s(0)>;(D1:RprServiceCos_Tval:1)[[TYPENAME:RprServiceCos_Tval]]

typedef enum {
	AlarmCategory_communication<s(0)> = 1,
	AlarmCategory_qos<s(0)> = 2,
	AlarmCategory_equipment<s(0)> = 3,
	AlarmCategory_processerror<s(0)> = 4,
	AlarmCategory_environment<s(0)> = 5,
	AlarmCategory_security<s(0)> = 6
} AlarmCategory_Tval<s(0)>;(D1:AlarmCategory_Tval:1)[[TYPENAME:AlarmCategory_Tval]]

typedef enum {
	RprXcRowStatus_free<s(0)> = 0,
	RprXcRowStatus_used<s(0)> = 1
} RprXcRowStatus_Tval<s(0)>;(D1:RprXcRowStatus_Tval:1)[[TYPENAME:RprXcRowStatus_Tval]]

typedef enum {
	PbUsageStatus_free<s(0)> = 0,
	PbUsageStatus_sdh_occupied<s(0)> = 1,
	PbUsageStatus_pdh_data_occupied<s(0)> = 2,
	PbUsageStatus_gmpls_reserved<s(0)> = 3,
	PbUsageStatus_unavailable<s(0)> = 4
} PbUsageStatus_Tval<s(0)>;(D1:PbUsageStatus_Tval:1)[[TYPENAME:PbUsageStatus_Tval]]

typedef enum {
	PbBoardStyle_empty<s(0)> = 0,
	PbBoardStyle_unknown<s(0)> = 1,
	PbBoardStyle_main<s(0)> = 2305,
	PbBoardStyle_hocc<s(0)> = 2306,
	PbBoardStyle_locc_pmc<s(0)> = 2307,
	PbBoardStyle_e1x126<s(0)> = 2308,
	PbBoardStyle_e1px63<s(0)> = 2309,
	PbBoardStyle_stm_1ex8<s(0)> = 2310,
	PbBoardStyle_e3ds3x12<s(0)> = 2312,
	PbBoardStyle_stm_41x8<s(0)> = 2320,
	PbBoardStyle_stm_1x8<s(0)> = 2321,
	PbBoardStyle_stm_16x4<s(0)> = 2322,
	PbBoardStyle_stm_16x8<s(0)> = 2323,
	PbBoardStyle_e3ds3px12<s(0)> = 2324,
	PbBoardStyle_stm_64x2<s(0)> = 2325,
	PbBoardStyle_stm_64x1<s(0)> = 2326,
	PbBoardStyle_oaBooster13dbm<s(0)> = 2336,
	PbBoardStyle_oaBooster15dbm<s(0)> = 2337,
	PbBoardStyle_oaBooster18dbm<s(0)> = 2338,
	PbBoardStyle_oaPreamp20db<s(0)> = 2340,
	PbBoardStyle_tengetx1<s(0)> = 2342,
	PbBoardStyle_tengetx1_geax46<s(0)> = 2343,
	PbBoardStyle_getx8<s(0)> = 2344,
	PbBoardStyle_gex6_fegeax4<s(0)> = 2345,
	PbBoardStyle_gex2_ferprx12<s(0)> = 2352,
	PbBoardStyle_gex4_feax12<s(0)> = 2353,
	PbBoardStyle_fetx12<s(0)> = 2354,
	PbBoardStyle_fc2gx8<s(0)> = 2355,
	PbBoardStyle_locc<s(0)> = 2356,
	PbBoardStyle_stm_256x1<s(0)> = 2357,
	PbBoardStyle_fan<s(0)> = 2358,
	PbBoardStyle_si_without_eow<s(0)> = 2368,
	PbBoardStyle_stm_16x2<s(0)> = 2369,
	PbBoardStyle_otu_2x1<s(0)> = 2400,
	PbBoardStyle_tengex1_gex10l2<s(0)> = 2440,
	PbBoardStyle_stm_16x8m<s(0)> = 2441,
	PbBoardStyle_stm_41x16m<s(0)> = 2448,
	PbBoardStyle_stm_64x2m<s(0)> = 2449,
	PbBoardStyle_otu_2x2<s(0)> = 2450,
	PbBoardStyle_chassis<s(0)> = 4232,
	PbBoardStyle_cc<s(0)> = 4240,
	PbBoardStyle_dataFabric_controller<s(0)> = 4241,
	PbBoardStyle_dataFabric<s(0)> = 4242,
	PbBoardStyle_si<s(0)> = 4243,
	PbBoardStyle_power<s(0)> = 4244,
	PbBoardStyle_chassis_fan_airFilter<s(0)> = 4245,
	PbBoardStyle_fanTray<s(0)> = 4246,
	PbBoardStyle_fanCircuitBoard<s(0)> = 4247,
	PbBoardStyle_backplane<s(0)> = 4248,
	PbBoardStyle_e1x21p_75<s(0)> = 4352,
	PbBoardStyle_e1x21p_120<s(0)> = 4353,
	PbBoardStyle_stm_1ex16<s(0)> = 4354,
	PbBoardStyle_stm_1ex8p<s(0)> = 4356,
	PbBoardStyle_e3ds3x6p<s(0)> = 4358,
	PbBoardStyle_gex20<s(0)> = 4359,
	PbBoardStyle_tengex2<s(0)> = 4360,
	PbBoardStyle_gex10_eos<s(0)> = 4361,
	PbBoardStyle_tengex2_eos<s(0)> = 4368,
	PbBoardStyle_gmpls_load<s(0)> = 983040
} PbBoardStyle_Tval<s(0)>;(D1:PbBoardStyle_Tval:1)[[TYPENAME:PbBoardStyle_Tval]]

typedef enum {
	TypeUpgradeCmnd_inactive<s(0)> = 0,
	TypeUpgradeCmnd_activeScDownload<s(0)> = 1,
	TypeUpgradeCmnd_activeScSwitch<s(0)> = 2,
	TypeUpgradeCmnd_activeScBackup<s(0)> = 3,
	TypeUpgradeCmnd_synchronizeBackup<s(0)> = 4,
	TypeUpgradeCmnd_standbyScSwitch<s(0)> = 5
} TypeUpgradeCmnd_Tval<s(0)>;(D1:TypeUpgradeCmnd_Tval:1)[[TYPENAME:TypeUpgradeCmnd_Tval]]

typedef enum {
	PbMSPCurrentReq_reqlockout<s(0)> = 1,
	PbMSPCurrentReq_reqforcedswitch<s(0)> = 2,
	PbMSPCurrentReq_reqsfhigh<s(0)> = 3,
	PbMSPCurrentReq_reqsflow<s(0)> = 4,
	PbMSPCurrentReq_reqsdhigh<s(0)> = 5,
	PbMSPCurrentReq_reqsdlow<s(0)> = 6,
	PbMSPCurrentReq_reqmannualswitch<s(0)> = 7,
	PbMSPCurrentReq_reqwaittorestore<s(0)> = 8,
	PbMSPCurrentReq_reqexercise<s(0)> = 9,
	PbMSPCurrentReq_reqreverse<s(0)> = 10,
	PbMSPCurrentReq_reqnorevert<s(0)> = 11,
	PbMSPCurrentReq_reqnorequest<s(0)> = 12
} PbMSPCurrentReq_Tval<s(0)>;(D1:PbMSPCurrentReq_Tval:1)[[TYPENAME:PbMSPCurrentReq_Tval]]

typedef enum {
	PbEnableDisable_enable<s(0)> = 1,
	PbEnableDisable_disable<s(0)> = 2
} PbEnableDisable_Tval<s(0)>;(D1:PbEnableDisable_Tval:1)[[TYPENAME:PbEnableDisable_Tval]]

typedef enum {
	Mssp4fLineRequest_signalDegradeRing<s(0)> = 8,
	Mssp4fLineRequest_signalFailRing<s(0)> = 11,
	Mssp4fLineRequest_clear<s(0)> = 21
} Mssp4fLineRequest_Tval<s(0)>;(D1:Mssp4fLineRequest_Tval:1)[[TYPENAME:Mssp4fLineRequest_Tval]]

typedef enum {
	Mssp4fSwitchCommand_noRequest<s(0)> = 0,
	Mssp4fSwitchCommand_reverseRequestRing<s(0)> = 1,
	Mssp4fSwitchCommand_reverseRequestSpan<s(0)> = 2,
	Mssp4fSwitchCommand_exerciserRing<s(0)> = 3,
	Mssp4fSwitchCommand_exerciserSpan<s(0)> = 4,
	Mssp4fSwitchCommand_waitToRestore<s(0)> = 5,
	Mssp4fSwitchCommand_manualSwitchRing<s(0)> = 6,
	Mssp4fSwitchCommand_manualSwitchSpan<s(0)> = 7,
	Mssp4fSwitchCommand_signalDegradeRing<s(0)> = 8,
	Mssp4fSwitchCommand_signalDegradeSpan<s(0)> = 9,
	Mssp4fSwitchCommand_signalDegradeProtection<s(0)> = 10,
	Mssp4fSwitchCommand_signalFailRing<s(0)> = 11,
	Mssp4fSwitchCommand_signalFailSpan<s(0)> = 12,
	Mssp4fSwitchCommand_forcedSwitchRing<s(0)> = 13,
	Mssp4fSwitchCommand_forcedSwitchSpan<s(0)> = 14,
	Mssp4fSwitchCommand_lockoutProtection<s(0)> = 15
} Mssp4fSwitchCommand_Tval<s(0)>;(D1:Mssp4fSwitchCommand_Tval:1)[[TYPENAME:Mssp4fSwitchCommand_Tval]]

typedef enum {
	PbEthPortClass_lAN<s(0)> = 1,
	PbEthPortClass_wAN<s(0)> = 2,
	PbEthPortClass_tRUNK<s(0)> = 3
} PbEthPortClass_Tval<s(0)>;(D1:PbEthPortClass_Tval:1)[[TYPENAME:PbEthPortClass_Tval]]

typedef enum {
	AlarmState_set<s(0)> = 1,
	AlarmState_clear<s(0)> = 2
} AlarmState_Tval<s(0)>;(D1:AlarmState_Tval:1)[[TYPENAME:AlarmState_Tval]]

typedef enum {
	SnmpSecurityLevel_noAuthNoPriv<s(0)> = 1,
	SnmpSecurityLevel_authNoPriv<s(0)> = 2,
	SnmpSecurityLevel_authPriv<s(0)> = 3
} SnmpSecurityLevel_Tval<s(0)>;(D1:SnmpSecurityLevel_Tval:1)[[TYPENAME:SnmpSecurityLevel_Tval]]

typedef enum {
	PbMsspRequestSource_kByte<s(0)> = 0,
	PbMsspRequestSource_line<s(0)> = 1,
	PbMsspRequestSource_external<s(0)> = 2
} PbMsspRequestSource_Tval<s(0)>;(D1:PbMsspRequestSource_Tval:1)[[TYPENAME:PbMsspRequestSource_Tval]]

typedef enum {
	PbSNCPCurrentReq_reqClear<s(0)> = 1,
	PbSNCPCurrentReq_reqlockout<s(0)> = 2,
	PbSNCPCurrentReq_reqforcedswitchtop<s(0)> = 3,
	PbSNCPCurrentReq_reqforcedswitchtow<s(0)> = 4,
	PbSNCPCurrentReq_reqsignalfail<s(0)> = 5,
	PbSNCPCurrentReq_reqmannualswitchtop<s(0)> = 6,
	PbSNCPCurrentReq_reqmannualswitchtow<s(0)> = 7,
	PbSNCPCurrentReq_reqwaittorestore<s(0)> = 8,
	PbSNCPCurrentReq_reqnorequest<s(0)> = 9,
	PbSNCPCurrentReq_reqsignalDeg<s(0)> = 10
} PbSNCPCurrentReq_Tval<s(0)>;(D1:PbSNCPCurrentReq_Tval:1)[[TYPENAME:PbSNCPCurrentReq_Tval]]

typedef enum {
	PbXcStatus_removed<s(0)> = 0,
	PbXcStatus_disabled<s(0)> = 1,
	PbXcStatus_ok<s(0)> = 2,
	PbXcStatus_failed<s(0)> = 3
} PbXcStatus_Tval<s(0)>;(D1:PbXcStatus_Tval:1)[[TYPENAME:PbXcStatus_Tval]]

typedef enum {
	EventTypeID_usr_login<s(0)> = 1,
	EventTypeID_usr_logout<s(0)> = 2,
	EventTypeID_usr_autologout<s(0)> = 3,
	EventTypeID_usr_pwd_change<s(0)> = 4,
	EventTypeID_unauthorized_login<s(0)> = 5,
	EventTypeID_alarm_log_cleared<s(0)> = 6,
	EventTypeID_event_log_cleared<s(0)> = 7,
	EventTypeID_auto_acceptance<s(0)> = 8,
	EventTypeID_card_booted<s(0)> = 9,
	EventTypeID_card_reset<s(0)> = 10,
	EventTypeID_card_disabled<s(0)> = 11,
	EventTypeID_card_removed<s(0)> = 12,
	EventTypeID_sfp_changed<s(0)> = 13,
	EventTypeID_protection_switch_completed<s(0)> = 14,
	EventTypeID_protection_switch_back_completed<s(0)> = 15,
	EventTypeID_software_download_started<s(0)> = 16,
	EventTypeID_software_download_completed<s(0)> = 17,
	EventTypeID_software_upgrade_started<s(0)> = 18,
	EventTypeID_software_upgrade_completed<s(0)> = 19,
	EventTypeID_mib_upload_started<s(0)> = 20,
	EventTypeID_mib_upload_completed<s(0)> = 21,
	EventTypeID_mib_download_started<s(0)> = 22,
	EventTypeID_mib_download_completed<s(0)> = 23,
	EventTypeID_mib_backup_started<s(0)> = 24,
	EventTypeID_mib_backup_completed<s(0)> = 25,
	EventTypeID_mib_restore_started<s(0)> = 26,
	EventTypeID_mib_restore_completed<s(0)> = 27,
	EventTypeID_system_reset<s(0)> = 28,
	EventTypeID_system_start<s(0)> = 29,
	EventTypeID_tms_status<s(0)> = 30,
	EventTypeID_tms_config<s(0)> = 31,
	EventTypeID_port_down<s(0)> = 32,
	EventTypeID_port_up<s(0)> = 33,
	EventTypeID_msspring_state_change<s(0)> = 34,
	EventTypeID_msspring_squelch<s(0)> = 35,
	EventTypeID_cc_switch<s(0)> = 36,
	EventTypeID_tca<s(0)> = 37,
	EventTypeID_flash_full<s(0)> = 38,
	EventTypeID_dcc_dll_status<s(0)> = 39,
	EventTypeID_mib_check_failed<s(0)> = 40,
	EventTypeID_mib_illegal_operation<s(0)> = 41,
	EventTypeID_system_memory_usage<s(0)> = 42,
	EventTypeID_sncp_switch_to_protect<s(0)> = 43,
	EventTypeID_sncp_switch_to_work<s(0)> = 44,
	EventTypeID_card_deleted<s(0)> = 45,
	EventTypeID_system_time_changed<s(0)> = 46,
	EventTypeID_positive_bit_slip<s(0)> = 47,
	EventTypeID_negative_bit_slip<s(0)> = 48,
	EventTypeID_latch_switch_opened<s(0)> = 49,
	EventTypeID_sncp_switch<s(0)> = 50,
	EventTypeID_tms_systiming_status<s(0)> = 51,
	EventTypeID_tms_systiming_config<s(0)> = 52,
	EventTypeID_epg_protectstate_change<s(0)> = 53,
	EventTypeID_rpr_topo_changed<s(0)> = 54,
	EventTypeID_mib_clear_started<s(0)> = 57,
	EventTypeID_mib_clear_completed<s(0)> = 58,
	EventTypeID_boot_image_is_not_identical<s(0)> = 60,
	EventTypeID_rstp_topology_changed<s(0)> = 61,
	EventTypeID_rstp_enabled<s(0)> = 62,
	EventTypeID_rstp_disabled<s(0)> = 63,
	EventTypeID_lcasso_changed<s(0)> = 64,
	EventTypeID_lcassk_changed<s(0)> = 65,
	EventTypeID_mib_file_is_failed<s(0)> = 66,
	EventTypeID_free_space_is_not_enough_in_cf<s(0)> = 67,
	EventTypeID_space_is_released_in_cf<s(0)> = 68,
	EventTypeID_ntp_function_changed<s(0)> = 69,
	EventTypeID_connect_to_ntp_server_failed<s(0)> = 70,
	EventTypeID_connect_to_ntp_server_successfully<s(0)> = 71,
	EventTypeID_primary_load_copy_succeeded<s(0)> = 72,
	EventTypeID_primary_load_copy_failed<s(0)> = 73,
	EventTypeID_lan_port_down_on_csf_alarm<s(0)> = 74,
	EventTypeID_lan_port_recovered_on_csf_alarm_cleared<s(0)> = 75,
	EventTypeID_lan_port_down_on_tlct_alarm<s(0)> = 76,
	EventTypeID_lan_port_recovered_on_tlct_alarm_cleared<s(0)> = 77,
	EventTypeID_lan_port_recovered_on_atls_disable<s(0)> = 78,
	EventTypeID_provision_ssm_mode_changed<s(0)> = 79,
	EventTypeID_ecc_dll_status<s(0)> = 80,
	EventTypeID_software_image_loaded_location<s(0)> = 81,
	EventTypeID_mib_loaded_location<s(0)> = 82,
	EventTypeID_eow_software_download_started<s(0)> = 83,
	EventTypeID_eow_software_download_completed<s(0)> = 84,
	EventTypeID_eow_software_upgrade_started<s(0)> = 85,
	EventTypeID_eow_software_upgrade_completed<s(0)> = 86,
	EventTypeID_eow_box_present_status<s(0)> = 87,
	EventTypeID_eow_box_linkup_status<s(0)> = 88,
	EventTypeID_software_synchronization_started<s(0)> = 89,
	EventTypeID_software_synchronization_statement<s(0)> = 90,
	EventTypeID_mib_syn_started<s(0)> = 91,
	EventTypeID_mib_syn_statement<s(0)> = 92,
	EventTypeID_mib_copy_started<s(0)> = 93,
	EventTypeID_mib_copy_statement<s(0)> = 94,
	EventTypeID_card_mismatch<s(0)> = 95,
	EventTypeID_lcs_download_started<s(0)> = 96,
	EventTypeID_lcs_download_statement<s(0)> = 97,
	EventTypeID_lcs_syn_started<s(0)> = 98,
	EventTypeID_lcs_syn_statement<s(0)> = 99,
	EventTypeID_software_is_different<s(0)> = 101,
	EventTypeID_wr_error<s(0)> = 102,
	EventTypeID_card_inserted<s(0)> = 103,
	EventTypeID_sft_unstable_state<s(0)> = 104,
	EventTypeID_sft_is_switching<s(0)> = 105,
	EventTypeID_sft_switching_complete_by_present<s(0)> = 106,
	EventTypeID_sft_switching_complete_by_external_command<s(0)> = 107,
	EventTypeID_sft_switching_complete_by_unit_failure<s(0)> = 108,
	EventTypeID_sft_switching_complete_by_latch_open<s(0)> = 109,
	EventTypeID_sft_switching_failed<s(0)> = 110,
	EventTypeID_sft_file_lost<s(0)> = 111,
	EventTypeID_sft_ohw_error<s(0)> = 112,
	EventTypeID_sft_pull_ool<s(0)> = 113,
	EventTypeID_sft_gmpls_switch<s(0)> = 114,
	EventTypeID_ms_got_write_authority<s(0)> = 115,
	EventTypeID_ms_release_write_authority<s(0)> = 116,
	EventTypeID_unauthorized_access<s(0)> = 117,
	EventTypeID_si_ens_state<s(0)> = 118,
	EventTypeID_si_erm_state<s(0)> = 119,
	EventTypeID_mstp_port_change<s(0)> = 120,
	EventTypeID_mstp_rstp_enable<s(0)> = 121,
	EventTypeID_initialization_failure<s(0)> = 122,
	EventTypeID_ocxo_failure<s(0)> = 123,
	EventTypeID_vcxo_failure<s(0)> = 124,
	EventTypeID_operation_mode_switch<s(0)> = 125,
	EventTypeID_j0_mode_changed<s(0)> = 126,
	EventTypeID_j0_value_changed<s(0)> = 127,
	EventTypeID_boot_image_upgrade_completed<s(0)> = 128,
	EventTypeID_boot_image_upgrade_failure<s(0)> = 129,
	EventTypeID_pll_cannot_lock<s(0)> = 130,
	EventTypeID_user_enabled<s(0)> = 131,
	EventTypeID_user_disabled<s(0)> = 132,
	EventTypeID_lcs_status_changed<s(0)> = 133,
	EventTypeID_epg_switching_failure<s(0)> = 134,
	EventTypeID_rpr_hardware_passthrough_setup<s(0)> = 135,
	EventTypeID_rpr_hardware_passthrough_removed<s(0)> = 136,
	EventTypeID_account_expired<s(0)> = 137,
	EventTypeID_cpu_util_over<s(0)> = 138,
	EventTypeID_mem_util_over<s(0)> = 139,
	EventTypeID_gmpls_switch_success<s(0)> = 140,
	EventTypeID_queue_over_flow<s(0)> = 141,
	EventTypeID_dcn_mgmt_ethport_down<s(0)> = 142,
	EventTypeID_dcn_mgmt_ethport_up<s(0)> = 143,
	EventTypeID_mib_preserve_clear_started<s(0)> = 144,
	EventTypeID_mib_preserve_clear_completed<s(0)> = 145
} EventTypeID_Tval<s(0)>;(D1:EventTypeID_Tval:1)[[TYPENAME:EventTypeID_Tval]]

typedef enum {
	TmsRefSourceNum_reference1<s(0)> = 1,
	TmsRefSourceNum_reference2<s(0)> = 2,
	TmsRefSourceNum_reference3<s(0)> = 3,
	TmsRefSourceNum_reference4<s(0)> = 4
} TmsRefSourceNum_Tval<s(0)>;(D1:TmsRefSourceNum_Tval:1)[[TYPENAME:TmsRefSourceNum_Tval]]

typedef enum {
	PbSignalType_normal<s(0)> = 1,
	PbSignalType_unequipped<s(0)> = 2,
	PbSignalType_ais<s(0)> = 3,
	PbSignalType_rdi<s(0)> = 5
} PbSignalType_Tval<s(0)>;(D1:PbSignalType_Tval:1)[[TYPENAME:PbSignalType_Tval]]

typedef enum {
	PBSNCPAddRslt_succ<s(0)> = 1,
	PBSNCPAddRslt_workTPError<s(0)> = 2,
	PBSNCPAddRslt_workTPDuplicate<s(0)> = 3,
	PBSNCPAddRslt_protTPDuplicate<s(0)> = 4,
	PBSNCPAddRslt_protTPError<s(0)> = 5,
	PBSNCPAddRslt_msProtTP<s(0)> = 6,
	PBSNCPAddRslt_pcmTimeout<s(0)> = 7,
	PBSNCPAddRslt_noFreeTbl<s(0)> = 8,
	PBSNCPAddRslt_ccFail<s(0)> = 9,
	PBSNCPAddRslt_ccTimeout<s(0)> = 10,
	PBSNCPAddRslt_waitCCReq<s(0)> = 11,
	PBSNCPAddRslt_waitCCResult<s(0)> = 12,
	PBSNCPAddRslt_waitPCMResult<s(0)> = 13,
	PBSNCPAddRslt_pcmFail<s(0)> = 14,
	PBSNCPAddRslt_waitSPAReq<s(0)> = 15,
	PBSNCPAddRslt_waitSPAResult<s(0)> = 16,
	PBSNCPAddRslt_spaFail<s(0)> = 17,
	PBSNCPAddRslt_spaTimeout<s(0)> = 18
} PBSNCPAddRslt_Tval<s(0)>;(D1:PBSNCPAddRslt_Tval:1)[[TYPENAME:PBSNCPAddRslt_Tval]]

typedef enum {
	PbMsspTrafficDirection_rx<s(0)> = 0,
	PbMsspTrafficDirection_tx<s(0)> = 1
} PbMsspTrafficDirection_Tval<s(0)>;(D1:PbMsspTrafficDirection_Tval:1)[[TYPENAME:PbMsspTrafficDirection_Tval]]

typedef enum {
	PbCmndState_none<s(0)> = 1,
	PbCmndState_running<s(0)> = 2,
	PbCmndState_complete<s(0)> = 3,
	PbCmndState_failed<s(0)> = 4
} PbCmndState_Tval<s(0)>;(D1:PbCmndState_Tval:1)[[TYPENAME:PbCmndState_Tval]]

typedef enum {
	PbTIModeType_mode16Byte<s(0)> = 1,
	PbTIModeType_mode64Byte<s(0)> = 2,
	PbTIModeType_modeFixedOneByte<s(0)> = 3,
	PbTIModeType_modeProvisionedOneByte<s(0)> = 4,
	PbTIModeType_modeAutoTrace<s(0)> = 5
} PbTIModeType_Tval<s(0)>;(D1:PbTIModeType_Tval:1)[[TYPENAME:PbTIModeType_Tval]]

typedef enum {
	PbCFCardState_notapplicable<s(0)> = 0,
	PbCFCardState_mountedandnormal<s(0)> = 1,
	PbCFCardState_removed<s(0)> = 2,
	PbCFCardState_mountedbutfailed<s(0)> = 3,
	PbCFCardState_mountednofreespace<s(0)> = 4
} PbCFCardState_Tval<s(0)>;(D1:PbCFCardState_Tval:1)[[TYPENAME:PbCFCardState_Tval]]

typedef enum {
	PbSlotType_none<s(0)> = 0,
	PbSlotType_mc<s(0)> = 1,
	PbSlotType_lc<s(0)> = 2,
	PbSlotType_ti<s(0)> = 5,
	PbSlotType_to<s(0)> = 6,
	PbSlotType_power<s(0)> = 7,
	PbSlotType_fan<s(0)> = 8,
	PbSlotType_si<s(0)> = 10,
	PbSlotType_io<s(0)> = 12,
	PbSlotType_cc<s(0)> = 13,
	PbSlotType_sfc<s(0)> = 14,
	PbSlotType_sfm<s(0)> = 15,
	PbSlotType_ce<s(0)> = 16
} PbSlotType_Tval<s(0)>;(D1:PbSlotType_Tval:1)[[TYPENAME:PbSlotType_Tval]]

typedef enum {
	PbPmUapType_nearend<s(0)> = 1,
	PbPmUapType_farend<s(0)> = 2
} PbPmUapType_Tval<s(0)>;(D1:PbPmUapType_Tval:1)[[TYPENAME:PbPmUapType_Tval]]

typedef enum {
	PbSFFTranscCode_unknown<s(0)> = 0,
	PbSFFTranscCode_infiniband_1x_SX<s(0)> = 1,
	PbSFFTranscCode_infiniband_1x_LX<s(0)> = 2,
	PbSFFTranscCode_infiniband_1x_COP_ACT<s(0)> = 3,
	PbSFFTranscCode_infiniband_1x_COP_PSV<s(0)> = 4,
	PbSFFTranscCode_escon_MMF_1310NM_LED<s(0)> = 5,
	PbSFFTranscCode_escon_SMF_1310NM_LASER<s(0)> = 6,
	PbSFFTranscCode_sonet_oc48_SR<s(0)> = 7,
	PbSFFTranscCode_sonet_oc48_SR1<s(0)> = 8,
	PbSFFTranscCode_sonet_oc48_IR<s(0)> = 9,
	PbSFFTranscCode_sonet_oc48_IR1<s(0)> = 10,
	PbSFFTranscCode_sonet_oc48_IR2<s(0)> = 11,
	PbSFFTranscCode_sonet_oc48_LR<s(0)> = 12,
	PbSFFTranscCode_sonet_oc48_LR1<s(0)> = 13,
	PbSFFTranscCode_sonet_oc48_LR2<s(0)> = 14,
	PbSFFTranscCode_sonet_oc48_LR3<s(0)> = 15,
	PbSFFTranscCode_sonet_oc12_SR<s(0)> = 16,
	PbSFFTranscCode_sonet_oc12_SR1<s(0)> = 17,
	PbSFFTranscCode_sonet_oc12_IR<s(0)> = 18,
	PbSFFTranscCode_sonet_oc12_IR1<s(0)> = 19,
	PbSFFTranscCode_sonet_oc12_IR2<s(0)> = 20,
	PbSFFTranscCode_sonet_oc12_LR<s(0)> = 21,
	PbSFFTranscCode_sonet_oc12_LR1<s(0)> = 22,
	PbSFFTranscCode_sonet_oc12_LR2<s(0)> = 23,
	PbSFFTranscCode_sonet_oc12_LR3<s(0)> = 24,
	PbSFFTranscCode_sonet_oc3_SR<s(0)> = 25,
	PbSFFTranscCode_sonet_oc3_SR1<s(0)> = 26,
	PbSFFTranscCode_sonet_oc3_IR<s(0)> = 27,
	PbSFFTranscCode_sonet_oc3_IR1<s(0)> = 28,
	PbSFFTranscCode_sonet_oc3_IR2<s(0)> = 29,
	PbSFFTranscCode_sonet_oc3_LR<s(0)> = 30,
	PbSFFTranscCode_sonet_oc3_LR1<s(0)> = 31,
	PbSFFTranscCode_sonet_oc3_LR2<s(0)> = 32,
	PbSFFTranscCode_sonet_oc3_LR3<s(0)> = 33,
	PbSFFTranscCode_ethernet_BASE_PX<s(0)> = 34,
	PbSFFTranscCode_ethernet_BASE_BX10<s(0)> = 35,
	PbSFFTranscCode_ethernet_100BASE_FX<s(0)> = 36,
	PbSFFTranscCode_ethernet_100BASE_LX_LX10<s(0)> = 37,
	PbSFFTranscCode_ethernet_1000BASE_T<s(0)> = 38,
	PbSFFTranscCode_ethernet_1000BASE_CX<s(0)> = 39,
	PbSFFTranscCode_ethernet_1000BASE_LX<s(0)> = 40,
	PbSFFTranscCode_ethernet_1000BASE_SX<s(0)> = 41,
	PbSFFTranscCode_fibre_CHANNEL<s(0)> = 42,
	PbSFFTranscCode_max<s(0)> = 43
} PbSFFTranscCode_Tval<s(0)>;(D1:PbSFFTranscCode_Tval:1)[[TYPENAME:PbSFFTranscCode_Tval]]

typedef enum {
	StorageType_other<s(0)> = 1,
	StorageType_volatile<s(0)> = 2,
	StorageType_nonVolatile<s(0)> = 3,
	StorageType_permanent<s(0)> = 4,
	StorageType_readOnly<s(0)> = 5
} StorageType_Tval<s(0)>;(D1:StorageType_Tval:1)[[TYPENAME:StorageType_Tval]]

typedef enum {
	PbCommunityStringAccessLevel_readOnly<s(0)> = 1,
	PbCommunityStringAccessLevel_readWrite<s(0)> = 2
} PbCommunityStringAccessLevel_Tval<s(0)>;(D1:PbCommunityStringAccessLevel_Tval:1)[[TYPENAME:PbCommunityStringAccessLevel_Tval]]

typedef enum {
	PbDpnpSwitchEvent_w2p<s(0)> = 1,
	PbDpnpSwitchEvent_w2m<s(0)> = 2,
	PbDpnpSwitchEvent_p2w<s(0)> = 3,
	PbDpnpSwitchEvent_p2m<s(0)> = 4,
	PbDpnpSwitchEvent_m2w<s(0)> = 5,
	PbDpnpSwitchEvent_m2p<s(0)> = 6
} PbDpnpSwitchEvent_Tval<s(0)>;(D1:PbDpnpSwitchEvent_Tval:1)[[TYPENAME:PbDpnpSwitchEvent_Tval]]

typedef enum {
	PBSNCPWorkorProtToCC_protection<s(0)> = 0,
	PBSNCPWorkorProtToCC_working<s(0)> = 1,
	PBSNCPWorkorProtToCC_none<s(0)> = 255
} PBSNCPWorkorProtToCC_Tval<s(0)>;(D1:PBSNCPWorkorProtToCC_Tval:1)[[TYPENAME:PBSNCPWorkorProtToCC_Tval]]

typedef enum {
	PbTPType_ospiTTP<s(0)> = 1,
	PbTPType_rsDatacomCTP<s(0)> = 2,
	PbTPType_rsTTP<s(0)> = 3,
	PbTPType_msCTP<s(0)> = 4,
	PbTPType_msDatacomCTP<s(0)> = 5,
	PbTPType_msTTP<s(0)> = 6,
	PbTPType_au4CTP<s(0)> = 7,
	PbTPType_vc4TTP<s(0)> = 8,
	PbTPType_tu12CTP<s(0)> = 9,
	PbTPType_vc12TTP<s(0)> = 10,
	PbTPType_ppiTTP<s(0)> = 11,
	PbTPType_vc4xvTTP<s(0)> = 12,
	PbTPType_vc12xvTTP<s(0)> = 13,
	PbTPType_au416cCTP<s(0)> = 14,
	PbTPType_vc416cTTP<s(0)> = 15,
	PbTPType_au44cCTP<s(0)> = 16,
	PbTPType_vc44cTTP<s(0)> = 17,
	PbTPType_au3CTP<s(0)> = 18,
	PbTPType_tu3CTP<s(0)> = 19,
	PbTPType_hovc3TTP<s(0)> = 20,
	PbTPType_lovc3TTP<s(0)> = 21,
	PbTPType_tu11CTP<s(0)> = 22,
	PbTPType_vc11TTP<s(0)> = 23,
	PbTPType_lanTTP<s(0)> = 24,
	PbTPType_wanTTP<s(0)> = 25,
	PbTPType_au464cCTP<s(0)> = 26,
	PbTPType_vc464cTTP<s(0)> = 27,
	PbTPType_tcCTP<s(0)> = 28,
	PbTPType_vpCTP<s(0)> = 29,
	PbTPType_vcCTP<s(0)> = 30,
	PbTPType_vc3xvTTP<s(0)> = 31,
	PbTPType_vc4NIMTTP<s(0)> = 32,
	PbTPType_vc12NIMTTP<s(0)> = 33,
	PbTPType_vc416cNIMTTP<s(0)> = 34,
	PbTPType_vc44cNIMTTP<s(0)> = 35,
	PbTPType_hovc3NIMTTP<s(0)> = 36,
	PbTPType_lovc3NIMTTP<s(0)> = 37,
	PbTPType_vc11NIMTTP<s(0)> = 38,
	PbTPType_vc464cNIMTTP<s(0)> = 39,
	PbTPType_au4256cCTP<s(0)> = 40,
	PbTPType_vc4256cTTP<s(0)> = 41,
	PbTPType_vc4256cNIMTTP<s(0)> = 42
} PbTPType_Tval<s(0)>;(D1:PbTPType_Tval:1)[[TYPENAME:PbTPType_Tval]]

typedef enum {
	PbMSPExternalCmd_cmdClear<s(0)> = 1,
	PbMSPExternalCmd_cmdlockout<s(0)> = 2,
	PbMSPExternalCmd_cmdforcedswitch<s(0)> = 3,
	PbMSPExternalCmd_cmdmannualswitch<s(0)> = 4,
	PbMSPExternalCmd_cmdexercise<s(0)> = 5,
	PbMSPExternalCmd_cmdnocomand<s(0)> = 6
} PbMSPExternalCmd_Tval<s(0)>;(D1:PbMSPExternalCmd_Tval:1)[[TYPENAME:PbMSPExternalCmd_Tval]]

typedef enum {
	TMSStClkOhm_seventyfive<s(0)> = 1,
	TMSStClkOhm_onehundredtwenty<s(0)> = 2
} TMSStClkOhm_Tval<s(0)>;(D1:TMSStClkOhm_Tval:1)[[TYPENAME:TMSStClkOhm_Tval]]

typedef enum {
	PbPmTableType_interval<s(0)> = 1,
	PbPmTableType_intervalFe<s(0)> = 2,
	PbPmTableType_day<s(0)> = 3,
	PbPmTableType_dayFe<s(0)> = 4
} PbPmTableType_Tval<s(0)>;(D1:PbPmTableType_Tval:1)[[TYPENAME:PbPmTableType_Tval]]

typedef enum {
	PbPortType_lan<s(0)> = 1,
	PbPortType_console<s(0)> = 2,
	PbPortType_stm1<s(0)> = 3,
	PbPortType_stm4<s(0)> = 4,
	PbPortType_stm16<s(0)> = 5,
	PbPortType_stm64<s(0)> = 6,
	PbPortType_fe<s(0)> = 7,
	PbPortType_ge<s(0)> = 8,
	PbPortType_e1<s(0)> = 9,
	PbPortType_e3ds3<s(0)> = 10,
	PbPortType_ti<s(0)> = 11,
	PbPortType_to<s(0)> = 12,
	PbPortType_vstm1<s(0)> = 13,
	PbPortType_vstm4<s(0)> = 14,
	PbPortType_vstm16<s(0)> = 15,
	PbPortType_vlan<s(0)> = 16,
	PbPortType_vwan<s(0)> = 17,
	PbPortType_e1ds1<s(0)> = 18,
	PbPortType_ivstm1<s(0)> = 19,
	PbPortType_rprclient<s(0)> = 20,
	PbPortType_rprline<s(0)> = 21,
	PbPortType_oa<s(0)> = 22,
	PbPortType_stm1or4<s(0)> = 23,
	PbPortType_stm256<s(0)> = 24,
	PbPortType_tenge<s(0)> = 25,
	PbPortType_fiber_channel<s(0)> = 26,
	PbPortType_vstm64<s(0)> = 27,
	PbPortType_otu2<s(0)> = 28,
	PbPortType_na<s(0)> = 29
} PbPortType_Tval<s(0)>;(D1:PbPortType_Tval:1)[[TYPENAME:PbPortType_Tval]]

typedef enum {
	PbSncpCircuitDirection_bidirection<s(0)> = 1,
	PbSncpCircuitDirection_unidirection<s(0)> = 2
} PbSncpCircuitDirection_Tval<s(0)>;(D1:PbSncpCircuitDirection_Tval:1)[[TYPENAME:PbSncpCircuitDirection_Tval]]

typedef enum {
	PbPmPortStatusType_normal<s(0)> = 1,
	PbPmPortStatusType_working<s(0)> = 2,
	PbPmPortStatusType_protect<s(0)> = 3
} PbPmPortStatusType_Tval<s(0)>;(D1:PbPmPortStatusType_Tval:1)[[TYPENAME:PbPmPortStatusType_Tval]]

typedef enum {
	PbTpMaintenanceType_normal<s(0)> = 1,
	PbTpMaintenanceType_lck<s(0)> = 5,
	PbTpMaintenanceType_oci<s(0)> = 6,
	PbTpMaintenanceType_ais<s(0)> = 7
} PbTpMaintenanceType_Tval<s(0)>;(D1:PbTpMaintenanceType_Tval:1)[[TYPENAME:PbTpMaintenanceType_Tval]]

typedef enum {
	PbMSPSwitchReason_clearcmd<s(0)> = 1,
	PbMSPSwitchReason_lpcmd<s(0)> = 2,
	PbMSPSwitchReason_forcedswitch<s(0)> = 3,
	PbMSPSwitchReason_manualswitch<s(0)> = 4,
	PbMSPSwitchReason_signalfail<s(0)> = 5,
	PbMSPSwitchReason_signalfailclear<s(0)> = 6,
	PbMSPSwitchReason_signaldeg<s(0)> = 7,
	PbMSPSwitchReason_signaldegclear<s(0)> = 8,
	PbMSPSwitchReason_noswitch<s(0)> = 9
} PbMSPSwitchReason_Tval<s(0)>;(D1:PbMSPSwitchReason_Tval:1)[[TYPENAME:PbMSPSwitchReason_Tval]]

typedef enum {
	PbGmplsCcDirection_forward<s(0)> = 1,
	PbGmplsCcDirection_reverse<s(0)> = 2
} PbGmplsCcDirection_Tval<s(0)>;(D1:PbGmplsCcDirection_Tval:1)[[TYPENAME:PbGmplsCcDirection_Tval]]

typedef enum {
	EthPortClass_lan<s(0)> = 0,
	EthPortClass_wan<s(0)> = 1,
	EthPortClass_trunk<s(0)> = 2
} EthPortClass_Tval<s(0)>;(D1:EthPortClass_Tval:1)[[TYPENAME:EthPortClass_Tval]]

typedef enum {
	TypeMibCmnd_inactive<s(0)> = 0,
	TypeMibCmnd_activeScMibUpload<s(0)> = 1,
	TypeMibCmnd_activeScMibDownload<s(0)> = 2,
	TypeMibCmnd_activeScMibSwitch<s(0)> = 3,
	TypeMibCmnd_standbyScMibSwitch<s(0)> = 4,
	TypeMibCmnd_synchronizeMibBackup<s(0)> = 5,
	TypeMibCmnd_activeScMibClear<s(0)> = 6,
	TypeMibCmnd_activeScMibCopy<s(0)> = 7,
	TypeMibCmnd_downloadLicense<s(0)> = 8,
	TypeMibCmnd_synchronizeLicense<s(0)> = 9,
	TypeMibCmnd_activeScMibPreserveClear<s(0)> = 10
} TypeMibCmnd_Tval<s(0)>;(D1:TypeMibCmnd_Tval:1)[[TYPENAME:TypeMibCmnd_Tval]]

typedef enum {
	RowStatus_active<s(0)> = 1,
	RowStatus_notInService<s(0)> = 2,
	RowStatus_notReady<s(0)> = 3,
	RowStatus_createAndGo<s(0)> = 4,
	RowStatus_createAndWait<s(0)> = 5,
	RowStatus_destroy<s(0)> = 6
} RowStatus_Tval<s(0)>;(D1:RowStatus_Tval:1)[[TYPENAME:RowStatus_Tval]]

typedef enum {
	PbSNCPExternalCmd_cmdClear<s(0)> = 1,
	PbSNCPExternalCmd_cmdlockout<s(0)> = 2,
	PbSNCPExternalCmd_cmdforcedswitchtop<s(0)> = 3,
	PbSNCPExternalCmd_cmdforcedswitchtow<s(0)> = 4,
	PbSNCPExternalCmd_cmdmannualswitchtop<s(0)> = 5,
	PbSNCPExternalCmd_cmdmannualswitchtow<s(0)> = 6,
	PbSNCPExternalCmd_cmdnocomand<s(0)> = 7
} PbSNCPExternalCmd_Tval<s(0)>;(D1:PbSNCPExternalCmd_Tval:1)[[TYPENAME:PbSNCPExternalCmd_Tval]]

typedef enum {
	RprProtectionType_steering<s(0)> = 1,
	RprProtectionType_wrap<s(0)> = 2,
	RprProtectionType_disable<s(0)> = 3
} RprProtectionType_Tval<s(0)>;(D1:RprProtectionType_Tval:1)[[TYPENAME:RprProtectionType_Tval]]

typedef enum {
	PbNodeMode_standalone<s(0)> = 1,
	PbNodeMode_subservient<s(0)> = 2
} PbNodeMode_Tval<s(0)>;(D1:PbNodeMode_Tval:1)[[TYPENAME:PbNodeMode_Tval]]

typedef enum {
	PbAcDc_ac<s(0)> = 1,
	PbAcDc_dc<s(0)> = 2
} PbAcDc_Tval<s(0)>;(D1:PbAcDc_Tval:1)[[TYPENAME:PbAcDc_Tval]]

typedef enum {
	PbMsspRequest_noRequest<s(0)> = 0,
	PbMsspRequest_reverseRequestRing<s(0)> = 1,
	PbMsspRequest_reverseRequestSpan<s(0)> = 2,
	PbMsspRequest_exerciserRing<s(0)> = 3,
	PbMsspRequest_exerciserSpan<s(0)> = 4,
	PbMsspRequest_waitToRestore<s(0)> = 5,
	PbMsspRequest_manualSwitchRing<s(0)> = 6,
	PbMsspRequest_manualSwitchSpan<s(0)> = 7,
	PbMsspRequest_signalDegradeRing<s(0)> = 8,
	PbMsspRequest_signalDegradeSpan<s(0)> = 9,
	PbMsspRequest_signalDegradeProtection<s(0)> = 10,
	PbMsspRequest_signalFailRing<s(0)> = 11,
	PbMsspRequest_signalFailSpan<s(0)> = 12,
	PbMsspRequest_forcedSwitchRing<s(0)> = 13,
	PbMsspRequest_forcedSwitchSpan<s(0)> = 14,
	PbMsspRequest_lockoutProtection<s(0)> = 15
} PbMsspRequest_Tval<s(0)>;(D1:PbMsspRequest_Tval:1)[[TYPENAME:PbMsspRequest_Tval]]

typedef enum {
	PbConnectorType_unknown<s(0)> = 0,
	PbConnectorType_sc<s(0)> = 1,
	PbConnectorType_fiber_1_copper<s(0)> = 2,
	PbConnectorType_fiber_2_copper<s(0)> = 3,
	PbConnectorType_bnctnc<s(0)> = 4,
	PbConnectorType_fiber_coax<s(0)> = 5,
	PbConnectorType_fiber_jack<s(0)> = 6,
	PbConnectorType_lc<s(0)> = 7,
	PbConnectorType_mtrj<s(0)> = 8,
	PbConnectorType_mu<s(0)> = 9,
	PbConnectorType_sg<s(0)> = 10,
	PbConnectorType_optical_pigtail<s(0)> = 11,
	PbConnectorType_hssdc<s(0)> = 32,
	PbConnectorType_copper_pigtail<s(0)> = 33,
	PbConnectorType_unspecified<s(0)> = 256
} PbConnectorType_Tval<s(0)>;(D1:PbConnectorType_Tval:1)[[TYPENAME:PbConnectorType_Tval]]

typedef enum {
	PbBoardProperty_none<s(0)> = 0,
	PbBoardProperty_all<s(0)> = 1,
	PbBoardProperty_hiT7065sc<s(0)> = 2,
	PbBoardProperty_hiT7065cc<s(0)> = 4,
	PbBoardProperty_hiT7065lc<s(0)> = 8
} PbBoardProperty_Tval<s(0)>;(D1:PbBoardProperty_Tval:1)[[TYPENAME:PbBoardProperty_Tval]]

 




 




 



 
extern MIBDid_t pbSonetSdh_Did<s(0)>;(D1:pbSonetSdh_Did:0)

   


 



 
 
extern MIBDid_t pbPortConfigTable_Did<s(0)>;(D1:pbPortConfigTable_Did:0)

   
typedef enum {
	pbPortMode_auto<s(0)>=1,
	pbPortMode_mon<s(0)>=2,
	pbPortMode_nmon<s(0)>=3
} pbPortMode_Tval<s(0)>;(D1:pbPortMode_Tval:1)[[TYPENAME:pbPortMode_Tval]]

typedef enum {
	pbPdhPortMap_async<s(0)>=1,
	pbPdhPortMap_byte<s(0)>=2,
	pbPdhPortMap_none<s(0)>=3
} pbPdhPortMap_Tval<s(0)>;(D1:pbPdhPortMap_Tval:1)[[TYPENAME:pbPdhPortMap_Tval]]

typedef enum {
	pbPortLoopback_none<s(0)>=1,
	pbPortLoopback_outward<s(0)>=2,
	pbPortLoopback_inward<s(0)>=3
} pbPortLoopback_Tval<s(0)>;(D1:pbPortLoopback_Tval:1)[[TYPENAME:pbPortLoopback_Tval]]

typedef enum {
	pbFecMode_correction<s(0)>=1,
	pbFecMode_disable<s(0)>=2
} pbFecMode_Tval<s(0)>;(D1:pbFecMode_Tval:1)[[TYPENAME:pbFecMode_Tval]]

typedef enum {
	pbImpedance_ohm75<s(0)>=0,
	pbImpedance_ohm120<s(0)>=1,
	pbImpedance_ohm100<s(0)>=2,
	pbImpedance_ohm110<s(0)>=3
} pbImpedance_Tval<s(0)>;(D1:pbImpedance_Tval:1)[[TYPENAME:pbImpedance_Tval]]

typedef enum {
	pbCodeType_hdb3<s(0)>=0,
	pbCodeType_ami<s(0)>=1,
	pbCodeType_bypass<s(0)>=2,
	pbCodeType_cdrbypass<s(0)>=3,
	pbCodeType_b3zs<s(0)>=4
} pbCodeType_Tval<s(0)>;(D1:pbCodeType_Tval:1)[[TYPENAME:pbCodeType_Tval]]

typedef enum {
	pbHaulType_e175ohm<s(0)>=0,
	pbHaulType_e1120ohm<s(0)>=1,
	pbHaulType_dsx1133ft<s(0)>=2,
	pbHaulType_dsx1266ft<s(0)>=3,
	pbHaulType_dsx1399ft<s(0)>=4,
	pbHaulType_dsx1533ft<s(0)>=5,
	pbHaulType_dsx1655ft<s(0)>=6,
	pbHaulType_j10655ft<s(0)>=7,
	pbHaulType_ds10<s(0)>=8,
	pbHaulType_ds175<s(0)>=9,
	pbHaulType_ds115<s(0)>=10,
	pbHaulType_ds1225<s(0)>=11,
	pbHaulType_ds111xx<s(0)>=12
} pbHaulType_Tval<s(0)>;(D1:pbHaulType_Tval:1)[[TYPENAME:pbHaulType_Tval]]

typedef enum {
	pbRetimingStatus_disable<s(0)>=0,
	pbRetimingStatus_enable<s(0)>=1
} pbRetimingStatus_Tval<s(0)>;(D1:pbRetimingStatus_Tval:1)[[TYPENAME:pbRetimingStatus_Tval]]

typedef enum {
	pbPortAlsMode_no_command<s(0)>=0,
	pbPortAlsMode_manual_restart<s(0)>=1,
	pbPortAlsMode_manual_test<s(0)>=2
} pbPortAlsMode_Tval<s(0)>;(D1:pbPortAlsMode_Tval:1)[[TYPENAME:pbPortAlsMode_Tval]]

typedef enum {
	expectedFrameStructure_none<s(0)>=0,
	expectedFrameStructure_e1_framed<s(0)>=1,
	expectedFrameStructure_e1_unframed<s(0)>=2,
	expectedFrameStructure_e3_G751<s(0)>=3,
	expectedFrameStructure_e3_G832<s(0)>=4,
	expectedFrameStructure_ds3_M13<s(0)>=5,
	expectedFrameStructure_ds3_CBit<s(0)>=6,
	expectedFrameStructure_e3_unframed<s(0)>=7,
	expectedFrameStructure_ds3_unframed<s(0)>=8
} expectedFrameStructure_Tval<s(0)>;(D1:expectedFrameStructure_Tval:1)[[TYPENAME:expectedFrameStructure_Tval]]

typedef enum {
	crcMultiframeDetector_activated<s(0)>=1,
	crcMultiframeDetector_deactivated<s(0)>=2
} crcMultiframeDetector_Tval<s(0)>;(D1:crcMultiframeDetector_Tval:1)[[TYPENAME:crcMultiframeDetector_Tval]]

typedef enum {
	portClassification_nongmpls<s(0)>=0,
	portClassification_inni<s(0)>=1,
	portClassification_enni<s(0)>=2,
	portClassification_uni10<s(0)>=3,
	portClassification_uni20<s(0)>=4
} portClassification_Tval<s(0)>;(D1:portClassification_Tval:1)[[TYPENAME:portClassification_Tval]]

typedef enum {
	portOperationLock_none<s(0)>=1,
	portOperationLock_nms<s(0)>=2,
	portOperationLock_gmpls<s(0)>=3
} portOperationLock_Tval<s(0)>;(D1:portOperationLock_Tval:1)[[TYPENAME:portOperationLock_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                               
	PbPortType_Tval pbPortType<s(1)>;                                          
	int		pbPortNo<s(1)>;                                                       
	char		pbPortLabel<s(1)>[64];   
	pbPortMode_Tval pbPortMode<s(1)>;   
	pbPdhPortMap_Tval pbPdhPortMap<s(1)>;   
	PbPortStatus_Tval pbPortAdminStatus<s(1)>;   
	PbEnableDisable_Tval pbPortMapRefresh<s(1)>;   
	TruthValue_Tval pbPortAutoLaserShutdown<s(1)>;   
	pbPortLoopback_Tval pbPortLoopback<s(1)>;   
	pbFecMode_Tval pbFecMode<s(1)>;   
	PbActualPortType_Tval pbActualPortType<s(1)>;   
	pbImpedance_Tval pbImpedance<s(1)>;   
	pbCodeType_Tval pbCodeType<s(1)>;   
	pbHaulType_Tval pbHaulType<s(1)>;   
	pbRetimingStatus_Tval pbRetimingStatus<s(1)>;   
	pbPortAlsMode_Tval pbPortAlsMode<s(1)>;   
	TruthValue_Tval pbPortAlarmDisable<s(1)>;   
	expectedFrameStructure_Tval expectedFrameStructure<s(1)>;
	crcMultiframeDetector_Tval crcMultiframeDetector<s(1)>;
	portClassification_Tval portClassification<s(1)>;
	PbUsageStatus_Tval portUsageStatus<s(1)>;
	int		portMappingString_len<s(1)>;
	char		portMappingString<s(1)>[384];
	portOperationLock_Tval portOperationLock<s(1)>;
}MIBpbPortConfigTable_t<s(0)>;(D1:MIBpbPortConfigTable_t:1)[[TYPENAME:MIBpbPortConfigTable_t]]































 



 
 
extern MIBDid_t pbPortStatusTable_Did<s(0)>;(D1:pbPortStatusTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                       
	PbPortType_Tval pbPortType<s(1)>;                               
	int		pbPortNo<s(1)>;                                            
	int		pbPortStatus<s(1)>;   
	PbPortOperationStatus_Tval pbPortOperStatus<s(1)>;   
	int		pbLaserIBias<s(1)>;   
	int		pbLaserRecvPwr<s(1)>;   
	int		pbLaserTransPwr<s(1)>;   
	int		pbLaserTemp<s(1)>;   
	TruthValue_Tval pbCompliance8472<s(1)>;   
	int		pbnNominalMBps<s(1)>;   
	int		pbnWavelength<s(1)>;   
	int		pbnLinkLength9125<s(1)>;   
	int		pbnLinkLength50125<s(1)>;   
	int		pbnLinkLength62125<s(1)>;   
	int		pbnLinkLengthCopper<s(1)>;   
	char		pbsVendorName<s(1)>[20];   
	char		pbsVendorPN<s(1)>[20];   
	char		pbsVendorSN<s(1)>[20];   
	char		pbsManuDate<s(1)>[16];   
	PbSFFTranscCode_Tval pbnTransCode<s(1)>;   
	char		pbsVendorOUI<s(1)>[16];   
	PbConnectorType_Tval pbnConnectorType<s(1)>;   
	int		pbnClLaserTemp<s(1)>;
	int		pbnTECCurrent<s(1)>;
	char		pbsSAGPartNumber<s(1)>[20];
}MIBpbPortStatusTable_t<s(0)>;(D1:MIBpbPortStatusTable_t:1)[[TYPENAME:MIBpbPortStatusTable_t]]

































 



 
 
extern MIBDid_t pbPortHoTpReserveTable_Did<s(0)>;(D1:pbPortHoTpReserveTable_Did:0)

   
typedef enum {
	tpOperationLock_none<s(0)>=1,
	tpOperationLock_nms<s(0)>=2,
	tpOperationLock_gmpls<s(0)>=3
} tpOperationLock_Tval<s(0)>;(D1:tpOperationLock_Tval:1)[[TYPENAME:tpOperationLock_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                           
	PbPortType_Tval pbPortType<s(1)>;                                   
	int		pbPortNo<s(1)>;                                                
	int		vc4ReservationStatus_len<s(1)>;
	char		vc4ReservationStatus<s(1)>[256];   
	int		vc4ReservationOperate_len<s(1)>;
	char		vc4ReservationOperate<s(1)>[257];   
	tpOperationLock_Tval tpOperationLock<s(1)>;   
}MIBpbPortHoTpReserveTable_t<s(0)>;(D1:MIBpbPortHoTpReserveTable_t:1)[[TYPENAME:MIBpbPortHoTpReserveTable_t]]













 



 
 
extern MIBDid_t pbTPConfigTable_Did<s(0)>;(D1:pbTPConfigTable_Did:0)

   
typedef enum {
	pbSdMode_poisson<s(0)>=1,
	pbSdMode_bursty<s(0)>=2
} pbSdMode_Tval<s(0)>;(D1:pbSdMode_Tval:1)[[TYPENAME:pbSdMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                               
	PbPortType_Tval pbPortType<s(1)>;                                       
	int		pbPortNo<s(1)>;                                                    
	PbTPType_Tval pbTpType<s(1)>;                                              
	int		pbTpIndex<s(1)>;                                                      
	TruthValue_Tval pbMonitored<s(1)>;   
	PbSignalType_Tval pbOutSignalType<s(1)>;
	PbInSignalType_Tval pbInSignalType<s(1)>;   
	int		pbTransPsl<s(1)>;   
	int		pbExpPsl<s(1)>;   
	TruthValue_Tval pbSLEnable<s(1)>;   
	int		pbSLAccept<s(1)>;   
	TruthValue_Tval pbTtiEnabled<s(1)>;   
	TruthValue_Tval pbTimAisDis<s(1)>;
	PbTIModeType_Tval pbTtiTransmitMode<s(1)>;   
	PbTIModeType_Tval pbTtiReceiveMode<s(1)>;   
	int		pbTtiOctetTransmitted_len<s(1)>;
	char		pbTtiOctetTransmitted<s(1)>[65];   
	int		pbTtiOctetExpected_len<s(1)>;
	char		pbTtiOctetExpected<s(1)>[65];   
	int		pbTtiOctetAccepted_len<s(1)>;
	char		pbTtiOctetAccepted<s(1)>[65];   
	pbSdMode_Tval pbSdMode<s(1)>;   
	TruthValue_Tval pbBurstyEnable<s(1)>;   
	int		pbBurstyPeriod<s(1)>;   
	int		pbBurstyPercent<s(1)>;   
	TruthValue_Tval pbDegEnable<s(1)>;   
	int		pbDegThreshold<s(1)>;   
	TruthValue_Tval pbExcEnable<s(1)>;   
	int		pbExcThreshold<s(1)>;   
	TruthValue_Tval pbAISEnable<s(1)>;   
	TruthValue_Tval pbRDIEnable<s(1)>;   
	PbPmMonitor_Tval pmNearEnd15minMonitored<s(1)>;
	PbPmMonitor_Tval pmFarEnd15minMonitored<s(1)>;
	PbPmMonitor_Tval pmNearEnd24hrMonitored<s(1)>;
	PbPmMonitor_Tval pmFarEnd24hrMonitored<s(1)>;
}MIBpbTPConfigTable_t<s(0)>;(D1:MIBpbTPConfigTable_t:1)[[TYPENAME:MIBpbTPConfigTable_t]]








































 



 
 
extern MIBDid_t pbOTUPortConfigTable_Did<s(0)>;(D1:pbOTUPortConfigTable_Did:0)

   
typedef enum {
	pbOTUPortMode_auto<s(0)>=1,
	pbOTUPortMode_mon<s(0)>=2,
	pbOTUPortMode_nmon<s(0)>=3
} pbOTUPortMode_Tval<s(0)>;(D1:pbOTUPortMode_Tval:1)[[TYPENAME:pbOTUPortMode_Tval]]

typedef enum {
	pbOTUPortLoopback_none<s(0)>=1,
	pbOTUPortLoopback_outward<s(0)>=2,
	pbOTUPortLoopback_inward<s(0)>=3
} pbOTUPortLoopback_Tval<s(0)>;(D1:pbOTUPortLoopback_Tval:1)[[TYPENAME:pbOTUPortLoopback_Tval]]

typedef enum {
	pbInsFecErrRate_errE3<s(0)>=3,
	pbInsFecErrRate_errE4<s(0)>=4,
	pbInsFecErrRate_errE5<s(0)>=5
} pbInsFecErrRate_Tval<s(0)>;(D1:pbInsFecErrRate_Tval:1)[[TYPENAME:pbInsFecErrRate_Tval]]

typedef enum {
	pbOTUFecMode_rsfec<s(0)>=0,
	pbOTUFecMode_ufec<s(0)>=1
} pbOTUFecMode_Tval<s(0)>;(D1:pbOTUFecMode_Tval:1)[[TYPENAME:pbOTUFecMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                                       
	PbPortType_Tval pbPortType<s(1)>;                                               
	int		pbPortNo<s(1)>;                                                            
	char		pbOTUPortLabel<s(1)>[65];   
	pbOTUPortMode_Tval pbOTUPortMode<s(1)>;   
	TruthValue_Tval pbOTUPortAlarmDisable<s(1)>;   
	pbOTUPortLoopback_Tval pbOTUPortLoopback<s(1)>;   
	TruthValue_Tval pbFecEnable<s(1)>;   
	TruthValue_Tval pbInsFecErrEnable<s(1)>;   
	pbInsFecErrRate_Tval pbInsFecErrRate<s(1)>;   
	int		pbWaveLengthId<s(1)>;   
	TruthValue_Tval pbSMTimAlmEnable<s(1)>;   
	TruthValue_Tval pbSMTimActEnable<s(1)>;   
	int		pbSMTxTti_len<s(1)>;
	char		pbSMTxTti<s(1)>[65];   
	int		pbSMExpTti_len<s(1)>;
	char		pbSMExpTti<s(1)>[65];   
	TruthValue_Tval pbPTAlmEnable<s(1)>;   
	int		pbTxPt<s(1)>;   
	int		pbExpPt<s(1)>;   
	TruthValue_Tval pbCIDAlmEnable<s(1)>;   
	int		pbTxChannelId<s(1)>;   
	TruthValue_Tval pbAutoAdjustManulStopEnable<s(1)>;   
	int		pbPortPathMapping_len<s(1)>;
	char		pbPortPathMapping<s(1)>[9];   
	pbOTUFecMode_Tval pbOTUFecMode<s(1)>;   
	PbPortStatus_Tval pbOTUPortAdminStatus<s(1)>;   
	PbUsageStatus_Tval pbOTUPortUsageStatus<s(1)>;   
}MIBpbOTUPortConfigTable_t<s(0)>;(D1:MIBpbOTUPortConfigTable_t:1)[[TYPENAME:MIBpbOTUPortConfigTable_t]]
































 



 
 
extern MIBDid_t pbPRBSPortHisTable_Did<s(0)>;(D1:pbPRBSPortHisTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                               
	int		pbPortNo<s(1)>;                                                    
	PbPortType_Tval pbPortType<s(1)>;                                       
	unsigned int	pbPRBSHisErrorSeconds<s(1)>;   
	int		pbPRBSHisMeanError<s(1)>;
	char		pbPRBSTrapTimeStamp<s(1)>[15];   
	PbActualPortType_Tval pbPRBSHisActualPortType<s(1)>;   
}MIBpbPRBSPortHisTable_t<s(0)>;(D1:MIBpbPRBSPortHisTable_t:1)[[TYPENAME:MIBpbPRBSPortHisTable_t]]














 



 
 
extern MIBDid_t pbPRBSPortCurTable_Did<s(0)>;(D1:pbPRBSPortCurTable_Did:0)

   
typedef enum {
	pbPRBSPattern_na<s(0)>=0,
	pbPRBSPattern_power15<s(0)>=1,
	pbPRBSPattern_power20<s(0)>=2,
	pbPRBSPattern_power23<s(0)>=3
} pbPRBSPattern_Tval<s(0)>;(D1:pbPRBSPattern_Tval:1)[[TYPENAME:pbPRBSPattern_Tval]]

typedef enum {
	pbPRBSStatus_na<s(0)>=0,
	pbPRBSStatus_syncing<s(0)>=1,
	pbPRBSStatus_syncSucc<s(0)>=2,
	pbPRBSStatus_syncFail<s(0)>=3,
	pbPRBSStatus_syncError<s(0)>=4
} pbPRBSStatus_Tval<s(0)>;(D1:pbPRBSStatus_Tval:1)[[TYPENAME:pbPRBSStatus_Tval]]

typedef enum {
	prbsMode_normal<s(0)>=0,
	prbsMode_invert<s(0)>=1
} prbsMode_Tval<s(0)>;(D1:prbsMode_Tval:1)[[TYPENAME:prbsMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                         
	int		pbPortNo<s(1)>;                                              
	PbPortType_Tval pbPortType<s(1)>;                                 
	TruthValue_Tval pbPRBSEnable<s(1)>;   
	pbPRBSPattern_Tval pbPRBSPattern<s(1)>;   
	unsigned int	pbPRBSErrorBlocks<s(1)>;   
	unsigned int	pbPRBSErrorSeconds<s(1)>;   
	pbPRBSStatus_Tval pbPRBSStatus<s(1)>;   
	PbActualPortType_Tval pbPRBSActualPortType<s(1)>;   
	prbsMode_Tval prbsMode<s(1)>;   
}MIBpbPRBSPortCurTable_t<s(0)>;(D1:MIBpbPRBSPortCurTable_t:1)[[TYPENAME:MIBpbPRBSPortCurTable_t]]

















 



 
 
extern MIBDid_t pbOTUPortStatusTable_Did<s(0)>;(D1:pbOTUPortStatusTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;           
	PbPortType_Tval pbPortType<s(1)>;                   
	int		pbPortNo<s(1)>;                                
	int		pbSMRxTti_len<s(1)>;
	char		pbSMRxTti<s(1)>[65];   
	int		pbRxPt<s(1)>;   
	int		pbRxChannelId<s(1)>;   
}MIBpbOTUPortStatusTable_t<s(0)>;(D1:MIBpbOTUPortStatusTable_t:1)[[TYPENAME:MIBpbOTUPortStatusTable_t]]













 



 
 
extern MIBDid_t pbOTUTPConfigTable_Did<s(0)>;(D1:pbOTUTPConfigTable_Did:0)

   
typedef enum {
	pbOTUTpType_none<s(0)>=0,
	pbOTUTpType_otu1<s(0)>=1,
	pbOTUTpType_otu2<s(0)>=2,
	pbOTUTpType_odu21<s(0)>=3,
	pbOTUTpType_otu3<s(0)>=4,
	pbOTUTpType_odu31<s(0)>=5,
	pbOTUTpType_odu32<s(0)>=6,
	pbOTUTpType_odu321<s(0)>=7,
	pbOTUTpType_otu4<s(0)>=8,
	pbOTUTpType_odu41<s(0)>=9,
	pbOTUTpType_odu42<s(0)>=10,
	pbOTUTpType_odu421<s(0)>=11,
	pbOTUTpType_odu43<s(0)>=12,
	pbOTUTpType_odu431<s(0)>=13,
	pbOTUTpType_odu432<s(0)>=14,
	pbOTUTpType_odu4321<s(0)>=15
} pbOTUTpType_Tval<s(0)>;(D1:pbOTUTpType_Tval:1)[[TYPENAME:pbOTUTpType_Tval]]

typedef struct
{
	PbSlotNumberType_Tval pbSlotNumber<s(1)>;                                     
	PbPortType_Tval pbPortType<s(1)>;                                             
	int		pbPortNo<s(1)>;                                                          
	int		pbOTUTpChannelId<s(1)>;                                                     
	PbTpSegment_Tval pbOTUTpSegment<s(1)>;                                           
	pbOTUTpType_Tval pbOTUTpType<s(1)>;   
	TruthValue_Tval pbOTUMonitored<s(1)>;   
	TruthValue_Tval pbOTUTimAlmEnable<s(1)>;   
	TruthValue_Tval pbOTUTimActEnable<s(1)>;   
	int		pbOTUTxTti_len<s(1)>;
	char		pbOTUTxTti<s(1)>[65];   
	int		pbOTUExpTti_len<s(1)>;
	char		pbOTUExpTti<s(1)>[65];   
	int		pbOTURxTti_len<s(1)>;
	char		pbOTURxTti<s(1)>[65];   
	TruthValue_Tval pbOTUDegEnable<s(1)>;   
	int		pbOTUDegThreshold<s(1)>;   
	int		pbOTUDegIntervals<s(1)>;   
	PbTpMaintenanceType_Tval pbOTUSendMaintenanceType<s(1)>;   
	PbTpMaintenanceType_Tval pbOTURecvMaintenanceType<s(1)>;   
	TruthValue_Tval pbOTUPlmAlmEnable<s(1)>;   
	TruthValue_Tval pbOTUMsimAlmEnable<s(1)>;   
	TruthValue_Tval pbOTUPtAlmEnable<s(1)>;   
	int		pbOTUTxPt<s(1)>;   
	int		pbOTUExpPt<s(1)>;   
	int		pbOTURxPt<s(1)>;   
	PbPmMonitor_Tval pmOTUNearEnd15minMonitored<s(1)>;   
	PbPmMonitor_Tval pmOTUFarEnd15minMonitored<s(1)>;   
	PbPmMonitor_Tval pmOTUNearEnd24hrMonitored<s(1)>;   
	PbPmMonitor_Tval pmOTUFarEnd24hrMonitored<s(1)>;   
}MIBpbOTUTPConfigTable_t<s(0)>;(D1:MIBpbOTUTPConfigTable_t:1)[[TYPENAME:MIBpbOTUTPConfigTable_t]]


































 



 
extern MIBDid_t pbSonetModule_Did<s(0)>;(D1:pbSonetModule_Did:0)

   
















 



typedef struct
{
        UINT32  ulPortId<s(1)>;       
        PbPortType_Tval ulPortType<s(1)>;

         

        UINT32  ulTug3Num<s(1)>;
        
        UINT16 ausTug3Mapping<s(1)>[192 ];
}PORT_TUG3_MAPPING_T<s(0)>;(D1:PORT_TUG3_MAPPING_T:1)[[TYPENAME:PORT_TUG3_MAPPING_T]]  

 
typedef struct
{
        UINT32  ulPortId<s(1)>;       
        PbPortType_Tval ulPortType<s(1)>;

        UINT32  ulTug3Num<s(1)>;

        UINT16 ausTug3Mapping<s(1)>[1];    
}MSG_PORT_TUG3_MAPPING_T<s(0)>;(D1:MSG_PORT_TUG3_MAPPING_T:1)[[TYPENAME:MSG_PORT_TUG3_MAPPING_T]]  

 






















 
















 














 





















typedef struct
{
        UINT32  nPortId<s(1)>;     

         
        PbPortOperationStatus_Tval eLaserOn<s(1)>;    

 
        
        int         nLaserIBias<s(1)>;
        int         nLaserRecvPwr<s(1)>;
        int         nLaserTransPwr<s(1)>;
        int         nLaserTemp<s(1)>;

  

	TruthValue_Tval pbCompliance8472<s(1)>;   
	int		pbnNominalMBps<s(1)>;   
	int		pbnWavelength<s(1)>;   
	int		pbnLinkLength9125<s(1)>;   
	int		pbnLinkLength50125<s(1)>;   
	int		pbnLinkLength62125<s(1)>;   
	int		pbnLinkLengthCopper<s(1)>;   
	char		pbsVendorName<s(1)>[20];   
	char		pbsVendorPN<s(1)>[20];   
	char		pbsVendorSN<s(1)>[20];   
	char		pbsManuDate<s(1)>[16];   
	PbSFFTranscCode_Tval pbnTransCode<s(1)>;   
	char		pbsVendorOUI<s(1)>[16];   
	PbConnectorType_Tval pbnConnectorType<s(1)>;  
    int     pbnClLaserTemp<s(1)>;  
    int     pbnTECCurrent<s(1)>;   
    char    pbsSagPN<s(1)>[20];  
}__attribute__ ((packed))  PORT_STATUS_T<s(0)>;(D1:PORT_STATUS_T:1)[[TYPENAME:PORT_STATUS_T]]  

 


 



























typedef struct
{
    UINT8  slotNo<s(1)>;
    UINT8  portType<s(1)>;
    UINT8  portNo<s(1)>;
    UINT16 mappingStrLen<s(1)>;
    UINT8  mappingStr<s(1)>[0];
}__attribute__ ((packed))  PORT_MAPPING_T<s(0)>;(D1:PORT_MAPPING_T:1)[[TYPENAME:PORT_MAPPING_T]]

typedef struct
{
    UINT8  slotNo<s(1)>;
    UINT8  portType<s(1)>;
    UINT8  portNo<s(1)>;
    UINT16 mappingStrLen<s(1)>;    
}__attribute__ ((packed))  CTD_MAPPING_T<s(0)>;(D1:CTD_MAPPING_T:1)[[TYPENAME:CTD_MAPPING_T]]

 






 














typedef struct
{
    UINT32 SlotNo<s(1)>;
    UINT32 BoardStyle<s(1)>;
}__attribute__ ((packed))  SLOT_ATTRIB<s(0)>;(D1:SLOT_ATTRIB:1)[[TYPENAME:SLOT_ATTRIB]]

typedef struct
{
    UINT32 PortNo_Min<s(1)>;  
	UINT32 PortNo_Max<s(1)>;  
}__attribute__ ((packed))  PORT_RANGE<s(0)>;(D1:PORT_RANGE:1)[[TYPENAME:PORT_RANGE]]

typedef struct
{
    SLOT_ATTRIB slotAttrib<s(1)>[13];  
}__attribute__ ((packed))  PdhCardFuncToIoSuit<s(0)>;(D1:PdhCardFuncToIoSuit:1)[[TYPENAME:PdhCardFuncToIoSuit]]

typedef struct
{
    SLOT_ATTRIB slotAttrib<s(1)>[2]; 
    PORT_RANGE portRange<s(1)>;
}__attribute__ ((packed))  PdhCardIoToFuncSuit<s(0)>;(D1:PdhCardIoToFuncSuit:1)[[TYPENAME:PdhCardIoToFuncSuit]]

typedef struct
{
    UINT32 number<s(1)>;             
    SLOT_ATTRIB cardInfo<s(1)>[12];   
    PORT_RANGE portRange<s(1)>[12];   
}__attribute__ ((packed))  PdhCardRelation<s(0)>;(D1:PdhCardRelation:1)[[TYPENAME:PdhCardRelation]]

 


typedef struct
{    
    UINT8  portType<s(1)>;
    UINT8  portNo<s(1)>;
    UINT8  actualPortType<s(1)>;
    UINT16 mappingStrLen<s(1)>;
     
}__attribute__ ((packed))  ONE_PORT_MAPPING_T<s(0)>;(D1:ONE_PORT_MAPPING_T:1)[[TYPENAME:ONE_PORT_MAPPING_T]]

typedef struct
{
    UINT8 ucSlotNo<s(1)>;
    UINT8 ucPortNum<s(1)>;
     
}__attribute__ ((packed))  ONE_SLOT_MAPPING_T<s(0)>;(D1:ONE_SLOT_MAPPING_T:1)[[TYPENAME:ONE_SLOT_MAPPING_T]]

typedef struct
{
    UINT8 ucSlotNum<s(1)>;
         
}__attribute__ ((packed))  NE_MAPPING_T<s(0)>;(D1:NE_MAPPING_T:1)[[TYPENAME:NE_MAPPING_T]]

 


 

 
typedef void (*funcDCCPortStateChangeNew<s(0)>)TYPENAME:FUNC:(funcDCCPortStateChangeNew)(UINT32 inst<s(0)>, int port<s(0)>, int state<s(0)>);(D1:state:0)

PB_ERROR_CODE_T CTD_GetPdhIoCardInfoFromFuncCard<s(0)>(UINT32 funcCardSlotNo<s(0)>, UINT32 funcCardBoardStlye<s(0)>, PdhCardRelation *pPdhRelatedCard<s(0)>);(D1:pPdhRelatedCard:0)
PB_ERROR_CODE_T CTD_GetPdhFuncCardInfoFromIoCard<s(0)>(UINT32 ioCardSlotNo<s(0)>, UINT32 ioCardBoardStlye<s(0)>, PdhCardRelation *pPdhRelatedCard<s(0)>);(D1:pPdhRelatedCard:0)


PB_ERROR_CODE_T CTD_ifm_clrNeMappingSeachFlag<s(0)>(NE_MAPPING_T* pNeMapping<s(0)>);(D1:pNeMapping:0)
PB_ERROR_CODE_T CTD_ifm_GetNextMappingfromNe<s(0)>(NE_MAPPING_T* pNeMapping<s(0)>, UINT32* pSlotNo<s(0)>, UINT32* pPortType<s(0)>, UINT32* pPortNo<s(0)>, UINT32 *pMappingStrLen<s(0)>,
                                 UINT8 *pMappingStr<s(0)>);(D1:pMappingStr:0)
PB_ERROR_CODE_T CTD_ifm_clrSlotMappingSeachFlag<s(0)>(ONE_SLOT_MAPPING_T* pSlotMapping<s(0)>);(D1:pSlotMapping:0)
PB_ERROR_CODE_T CTD_ifm_GetNextMappingfromSlot<s(0)>(ONE_SLOT_MAPPING_T* pSlotMapping<s(0)>, UINT32* pSlotNo<s(0)>, UINT32* pPortType<s(0)>, UINT32* pPortNo<s(0)>, UINT32 *pMappingStrLen<s(0)>,
                                 UINT8 *pMappingStr<s(0)>);(D1:pMappingStr:0)
PB_ERROR_CODE_T CTD_ifm_GetSlotNumberFromNeMapping<s(0)>(NE_MAPPING_T *pNeMapping<s(0)>, UINT32 *pSlotNumber<s(0)>);(D1:pSlotNumber:0)
PB_ERROR_CODE_T CTD_ifm_GetPortNumberFromNeMapping<s(0)>(UINT32 slotNo<s(0)>, NE_MAPPING_T *pNeMapping<s(0)>, UINT32 *pPortNumber<s(0)>);(D1:pPortNumber:0)
PB_ERROR_CODE_T CTD_ifm_GetPortMappingFromNeMapping<s(0)>(UINT32 slotNo<s(0)>, UINT32 portType<s(0)>, UINT32 portNo<s(0)>, NE_MAPPING_T *pNeMapping<s(0)>,  
                              UINT32 *pPortMappingLen<s(0)>, UINT8 *pMappingStr<s(0)>);(D1:pMappingStr:0)
PB_ERROR_CODE_T CTD_ifm_GetPortNumberFromSlotMapping<s(0)>(ONE_SLOT_MAPPING_T *pSlotMapping<s(0)>,UINT32 *pSlotNo<s(0)>, UINT32 *pPortNumber<s(0)>);(D1:pPortNumber:0)
PB_ERROR_CODE_T CTD_ifm_GetPortMappingFromSlotMapping<s(0)>(UINT32 slotNo<s(0)>, UINT32 portType<s(0)>, UINT32 portNo<s(0)>, ONE_SLOT_MAPPING_T *pSlotMapping<s(0)>,  
                              UINT32 *pPortMappingLen<s(0)>, UINT8 *pMappingStr<s(0)>);(D1:pMappingStr:0)











 





























































































 
































typedef INT16 TEMPERATURE_T<s(0)>;(D1:TEMPERATURE_T:1)[[TYPENAME:TEMPERATURE_T]]

typedef enum {
  TEMPERATURE_STATE_NORMAL<s(0)>,
  TEMPERATURE_STATE_OVERHEAT<s(0)>,
  TEMPERATURE_STATE_UNDERHEAT<s(0)>
} TEMPERATURE_STATE_T<s(0)>;(D1:TEMPERATURE_STATE_T:1)[[TYPENAME:TEMPERATURE_STATE_T]]

typedef enum
{
  LED_TYPE_CRITICAL<s(0)>=0,
  LED_TYPE_MAJOR<s(0)>=1,
  LED_TYPE_MINOR<s(0)>=2,
  LED_TYPE_ACTIVE<s(0)>=3,
  LED_TYPE_FAULTY<s(0)>=4,
  LED_TYPE_FAN<s(0)>=5,
  LED_TYPE_POWER<s(0)>=6,
  LED_TYPE_PORTLINK<s(0)>=7,
  LED_TYPE_PORTALARM<s(0)>=8,
  LED_TYPE_CARDMISMATCH<s(0)>=9,
  LED_TYPE_STANDBY<s(0)>=10,
  LED_TYPE_CFCARD<s(0)>=11,
  LED_TYPE_USRLINK<s(0)>=12
} LED_TYPE_T<s(0)>;(D1:LED_TYPE_T:1)[[TYPENAME:LED_TYPE_T]]

typedef enum
{
  LED_STATE_UNKNOWN<s(0)> = -1,  
  LED_STATE_ON<s(0)> = 0,
  LED_STATE_OFF<s(0)> = 1,
  LED_STATE_BLINK<s(0)> = 2,
} LED_STATE_T<s(0)>;(D1:LED_STATE_T:1)[[TYPENAME:LED_STATE_T]]

typedef int BOARD_STYLE_T<s(0)>;(D1:BOARD_STYLE_T:1)[[TYPENAME:BOARD_STYLE_T]]

typedef enum {
  SDD_BOARD_ABSENT<s(0)> = 0,
  SDD_BOARD_PRESENT<s(0)> = 1,
  SDD_BOARD_UNKNOWN<s(0)> = 2
} BOARD_PRESENCE_T<s(0)>;(D1:BOARD_PRESENCE_T:1)[[TYPENAME:BOARD_PRESENCE_T]]

typedef enum {
  SDD_REBOOT_STATE_START<s(0)>    = 0,
  SDD_REBOOT_STATE_FINISH<s(0)>   = 1,
  SDD_REBOOT_STATE_UNKNOWN<s(0)>  = 2
} SDD_REBOOT_STATE_T<s(0)>;(D1:SDD_REBOOT_STATE_T:1)[[TYPENAME:SDD_REBOOT_STATE_T]]

typedef enum
{
  BOARD_EVENT_REMOVE<s(0)> = 0,
  BOARD_EVENT_INSERT<s(0)> = 1,
  BOARD_EVENT_LATCH_ATTACH<s(0)> = 2,
  BOARD_EVENT_LATCH_DETATCH<s(0)> = 3
} BOARD_EVENT_T<s(0)>;(D1:BOARD_EVENT_T:1)[[TYPENAME:BOARD_EVENT_T]]

 
typedef enum
{
    SDD_RESET_UNKNOWN<s(0)>       = 0,
    SDD_RESET_WARM<s(0)>   = 1,    
    SDD_RESET_COLD<s(0)>         = 2,    
    SDD_RESET_NE_WARM<s(0)>    = 3,    
    SDD_RESET_NE_COLD<s(0)>      = 4,     
    SDD_RESET_BOARD_PLUG<s(0)>	= 5		 
     
} SDD_RESET_REASON<s(0)>;(D1:SDD_RESET_REASON:1)[[TYPENAME:SDD_RESET_REASON]]

 
typedef enum
{
    SDD_BOARD_TYPE_EMPTY<s(0)>        = 0,
    SDD_BOARD_TYPE_MC<s(0)>           = 1,
    SDD_BOARD_TYPE_CC<s(0)>           = 2,
    SDD_BOARD_TYPE_CHASSIS<s(0)>      = 3,
    SDD_BOARD_TYPE_8STM16<s(0)>       = 4,
    SDD_BOARD_TYPE_8STM14<s(0)>       = 5,
    SDD_BOARD_TYPE_2STM64<s(0)>       = 6,
    SDD_BOARD_TYPE_8GET<s(0)>         = 7,
    SDD_BOARD_TYPE_10GEA<s(0)>        = 8,
    SDD_BOARD_TYPE_10GET<s(0)>        = 9,
    SDD_BOARD_TYPE_RPR<s(0)>          = 10,
    SDD_BOARD_TYPE_8STM1E<s(0)>       = 11,
    SDD_BOARD_TYPE_8STM1EIO<s(0)>     = 12,
    SDD_BOARD_TYPE_12E3DS3<s(0)>      = 13,
    SDD_BOARD_TYPE_12E3DS3IO<s(0)>    = 14,
    SDD_BOARD_TYPE_126E1<s(0)>        = 15,
    SDD_BOARD_TYPE_126E1IO<s(0)>      = 16,
    SDD_BOARD_TYPE_SI<s(0)>           = 17,
    SDD_BOARD_TYPE_OA<s(0)>           = 18,
    SDD_BOARD_TYPE_PWR<s(0)>          = 19,
    SDD_BOARD_TYPE_FAN<s(0)>          = 20,
    SDD_BOARD_TYPE_1OTU<s(0)>         = 21,
    SDD_BOARD_TYPE_10GEL2<s(0)>       = 22,
    SDD_BOARD_TYPE_8STM16M<s(0)>      = 23,
    SDD_BOARD_TYPE_16STM14M<s(0)>     = 24,
    SDD_BOARD_TYPE_2STM64M<s(0)>      = 25,
    SDD_BOARD_TYPE_EOS<s(0)>          = 26,
    SDD_BOARD_TYPE_GMPLS<s(0)>        = 27,
    SDD_BOARD_TYPE_DATAFABRIC_CONTROLLER<s(0)>        = 28,
    SDD_BOARD_TYPE_DATAFABRIC<s(0)>   = 29,
    SDD_BOARD_TYPE_BACKPLANE<s(0)>    = 30,
    SDD_BOARD_TYPE_TENGE<s(0)>        = 31,

    SDD_BOARD_TYPE_10GEL2_46<s(0)>    = 32,    

    SDD_BOARD_TYPE_MAX<s(0)>
} SDD_BOARD_TYPE_T<s(0)>;(D1:SDD_BOARD_TYPE_T:1)[[TYPENAME:SDD_BOARD_TYPE_T]]

typedef enum
{
    SDD_BUTTON_EVENT_TYPE_LEDTEST<s(0)>,
    SDD_BUTTON_EVENT_TYPE_ALARMCUTOFF<s(0)>,
    SDD_BUTTON_EVENT_TYPE_ALARMSUPPRESS<s(0)>
}SDD_BUTTON_EVENT_TYPE<s(0)>;(D1:SDD_BUTTON_EVENT_TYPE:1)[[TYPENAME:SDD_BUTTON_EVENT_TYPE]]

typedef enum 
{
  BUTTON_STATE_DOWN<s(0)>,
  BUTTON_STATE_UP<s(0)>,
} BUTTON_STATE_T<s(0)>;(D1:BUTTON_STATE_T:1)[[TYPENAME:BUTTON_STATE_T]]

typedef enum
{
  POWER_FAIL<s(0)>,
  POWER_OK<s(0)>,
  POWER_PRESENT<s(0)>,
  POWER_ABSENT<s(0)>
} POWER_STATUS_T<s(0)>;(D1:POWER_STATUS_T:1)[[TYPENAME:POWER_STATUS_T]]

typedef enum{
    FAN_STATUS_OK<s(0)>,
    FAN_STATUS_FAIL<s(0)>,
    FAN_STATUS_ABSENT<s(0)>,
    FAN_STATUS_PRESENT<s(0)>
}FAN_STATUS_T<s(0)>;(D1:FAN_STATUS_T:1)[[TYPENAME:FAN_STATUS_T]]

typedef enum
{
    TIMING_LINE_NULL<s(0)> = 0,
    TIMING_LINE_1<s(0)>    = 1,        
    TIMING_LINE_2<s(0)>    = 2            
        
}TIMING_LINE_T<s(0)>;(D1:TIMING_LINE_T:1)[[TYPENAME:TIMING_LINE_T]]

typedef enum 
{
    none<s(0)>=0,
    manre<s(0)>=1,
    mantest<s(0)>=2
} ALS_MODE_STATUS_T<s(0)>;(D1:ALS_MODE_STATUS_T:1)[[TYPENAME:ALS_MODE_STATUS_T]]

typedef enum
{
    PORT_STATE_UNKNOWN<s(0)> = -1,
    PORT_STATE_DIS<s(0)>,
    PORT_STATE_EN<s(0)>
} PORTADMIN_STATE_T<s(0)>;(D1:PORTADMIN_STATE_T:1)[[TYPENAME:PORTADMIN_STATE_T]]

typedef enum
{
    ALS_FUNC_UNKNOWN<s(0)> = -1,
    ALS_FUNC_DIS<s(0)>,
    ALS_FUNC_EN<s(0)>
}ALS_FUNC_STATE_T<s(0)>;(D1:ALS_FUNC_STATE_T:1)[[TYPENAME:ALS_FUNC_STATE_T]]

typedef struct
{
    TIMING_LINE_T port1_Line<s(1)>;
    TIMING_LINE_T port2_Line<s(1)>;
    TIMING_LINE_T port3_Line<s(1)>;
    TIMING_LINE_T port4_Line<s(1)>;
    TIMING_LINE_T port5_Line<s(1)>;
    TIMING_LINE_T port6_Line<s(1)>;
    TIMING_LINE_T port7_Line<s(1)>;
    TIMING_LINE_T port8_Line<s(1)>;
} TIMING_REF_T<s(0)>;(D1:TIMING_REF_T:1)[[TYPENAME:TIMING_REF_T]]


typedef enum
{
    LED_TEST_KNOWN<s(0)> = -1,
    LED_TEST_BEGIN<s(0)> = 0,
    LED_TEST_PROC<s(0)>  = 1,
    LED_TEST_END<s(0)>   = 2
} SDD_LED_TEST_STATE_T<s(0)>;(D1:SDD_LED_TEST_STATE_T:1)[[TYPENAME:SDD_LED_TEST_STATE_T]]

 
typedef void (*SDD_BOARD_EVENT_CBACK<s(0)>)TYPENAME:FUNC:(SDD_BOARD_EVENT_CBACK)(BOARD_EVENT_T event<s(0)>,
                                    SLOT_NUMBER_T slot<s(0)>,
                                    BOARD_STYLE_T cardType<s(0)>);(D1:cardType:0)

typedef void (*SDD_LATCH_EVENT_CBACK<s(0)>)TYPENAME:FUNC:(SDD_LATCH_EVENT_CBACK)(BOARD_EVENT_T event<s(0)>,
                                    SLOT_NUMBER_T slot<s(0)>,
                                    BOARD_STYLE_T cardType<s(0)>);(D1:cardType:0)

typedef void (*SDD_ENTITY_UPDATE_CBACK<s(0)>)TYPENAME:FUNC:(SDD_ENTITY_UPDATE_CBACK)(INT16 entityNum<s(0)>,
                                       ENTITY_INFO_T *pInfo<s(0)>);(D1:pInfo:0)


typedef void (*SDD_ONE_SECOND_TIMER_CBACK<s(0)>)TYPENAME:FUNC:(SDD_ONE_SECOND_TIMER_CBACK)(UINT32 counter<s(0)>);(D1:counter:0)

typedef void (*SDD_BUTTON_EVENT_CBACK<s(0)>)TYPENAME:FUNC:(SDD_BUTTON_EVENT_CBACK)(SDD_BUTTON_EVENT_TYPE buttonType<s(0)>,
                                      BUTTON_STATE_T oldState<s(0)>,
                                      BUTTON_STATE_T newState<s(0)>);(D1:newState:0)                                      







 


































































 


typedef unsigned int  HW_PORT_TYPE<s(0)>;(D1:HW_PORT_TYPE:1)[[TYPENAME:HW_PORT_TYPE]]      
































 


typedef unsigned int  HW_ACT_PORT_TYPE<s(0)>;(D1:HW_ACT_PORT_TYPE:1)[[TYPENAME:HW_ACT_PORT_TYPE]]      













 


typedef UINT32 SDH_TP_TYPE<s(0)>;(D1:SDH_TP_TYPE:1)[[TYPENAME:SDH_TP_TYPE]]   











































 


typedef UINT8 MAGUS_TP_TYPE<s(0)>;(D1:MAGUS_TP_TYPE:1)[[TYPENAME:MAGUS_TP_TYPE]]







 
typedef enum 
{
    TTI_LEN_16BYTE<s(0)>        = 0x1,
    TTI_LEN_64BYTE<s(0)>        = 0x2,
    TTI_LEN_FIXED1B<s(0)>       = 0x3,
    TTI_LEN_PROVISIONED1B<s(0)> = 0x4,
}TTI_LEN_T<s(0)>;(D1:TTI_LEN_T:1)[[TYPENAME:TTI_LEN_T]]




typedef int ePort_MAPPING_MODE<s(0)>;(D1:ePort_MAPPING_MODE:1)[[TYPENAME:ePort_MAPPING_MODE]]




typedef enum 
{
    PORT_LOOP_NONE<s(0)>     = 0x1,       
    PORT_LOOP_INWARD<s(0)>   = 0x2,       
    PORT_LOOP_OUTWARD<s(0)>  = 0x3        
} PORT_LOOPBACK_T<s(0)>;(D1:PORT_LOOPBACK_T:1)[[TYPENAME:PORT_LOOPBACK_T]]

typedef enum
{
    TTI_TYPE_TRANSMIT<s(0)>   = 0x0,
    TTI_TYPE_ACCEPTED<s(0)>   = 0x1,
    TTI_TYPE_CAPTURED<s(0)>   = 0x2,
    TTI_TYPE_EXPECTED<s(0)>   = 0x3
} TTI_TYPE_T<s(0)>;(D1:TTI_TYPE_T:1)[[TYPENAME:TTI_TYPE_T]]

typedef char TTI_STRING<s(0)>[64];(D1:TTI_STRING:1)[[TYPENAME:TTI_STRING]]

typedef enum
{
    TIM_DISABLED<s(0)>    = 0x0,
    TIM_ENABLED<s(0)>     = 0x1
} eTIM_MODE<s(0)>;(D1:eTIM_MODE:1)[[TYPENAME:eTIM_MODE]]

typedef enum 
{
    PSL_TYPE_TRANSMIT<s(0)>   = 0x0,
    PSL_TYPE_ACCEPTED<s(0)>   = 0x1,
    PSL_TYPE_CAPTURED<s(0)>   = 0x2,
    PSL_TYPE_EXPECTED<s(0)>   = 0x3
} PSL_TYPE_T<s(0)>;(D1:PSL_TYPE_T:1)[[TYPENAME:PSL_TYPE_T]]

typedef enum 
{
    PORT_MODE_INVALID<s(0)>   = 0x0,   
    PORT_MODE_AUTO<s(0)>      = 0x1,   
    PORT_MODE_MON<s(0)>       = 0x2,   
    PORT_MODE_NMON<s(0)>      = 0x3    
} PORT_MODE_T<s(0)>;(D1:PORT_MODE_T:1)[[TYPENAME:PORT_MODE_T]]

 
typedef enum 
{
    ALARM_SOURCE<s(0)>    = 0x0,
    ALARM_SINK<s(0)>      = 0x1
}ALARM_DIRECTION_T<s(0)>;(D1:ALARM_DIRECTION_T:1)[[TYPENAME:ALARM_DIRECTION_T]]

 
typedef struct
{
    UINT32  bip<s(1)>;
    UINT32  fc<s(1)>;
    BOOL    b_lof<s(1)>;
    BOOL    b_ses<s(1)>;
} RS_PMPARA_T<s(0)>;(D1:RS_PMPARA_T:1)[[TYPENAME:RS_PMPARA_T]]

typedef struct
{
    UINT32  bip<s(1)>;      
    UINT32  rei<s(1)>;      
    UINT32  fc<s(1)>;       
    UINT32  fefc<s(1)>;     
    BOOL    b_ses<s(1)>;    
    BOOL    b_fses<s(1)>;   
} MSHPLP_PMPARA_T<s(0)>;(D1:MSHPLP_PMPARA_T:1)[[TYPENAME:MSHPLP_PMPARA_T]]

typedef struct
{
    UINT32 npjc<s(1)>;
    UINT32 ppjc<s(1)>;
} AUTU_PMPARA_T<s(0)>;(D1:AUTU_PMPARA_T:1)[[TYPENAME:AUTU_PMPARA_T]]

typedef struct
{
    UINT32  bip<s(1)>;      
    UINT32  bei<s(1)>;      
    UINT32  fc<s(1)>;       
    UINT32  fefc<s(1)>;     
} OTU_PMPARA_T<s(0)>;(D1:OTU_PMPARA_T:1)[[TYPENAME:OTU_PMPARA_T]]

typedef struct
{
    UINT32  fec0<s(1)>;      
    UINT32  fec1<s(1)>;      
    UINT32  fecall<s(1)>;       
    UINT32  fecbyte<s(1)>;      
    UINT32  fecun<s(1)>;      
    UINT32  fc<s(1)>;     
} FEC_PMPARA_T<s(0)>;(D1:FEC_PMPARA_T:1)[[TYPENAME:FEC_PMPARA_T]]

typedef struct 
{
    int   nLaserIBias<s(1)>;
    float nVcc<s(1)>;                              
    int   nLaserTemp<s(1)>;
    int   nLaserTransPwr<s(1)>;
    int   nLaserRecvPwr<s(1)>;
    int   bCompliance8472<s(1)>;                    
    int   pbnNominalMBps<s(1)>;                     
    int   pbnWavelength<s(1)>;                      
    int   pbnLinkLength9125<s(1)>;                  
    int   pbnLinkLength50125<s(1)>;                 
    int   pbnLinkLength62125<s(1)>;                 
    int   pbnLinkLengthCopper<s(1)>;                
    char  pbsVendorName<s(1)>[20];                  
    char  pbsVendorPN<s(1)>[20];                    
    char  pbsVendorSN<s(1)>[20];                    
    char  pbsManuDate<s(1)>[16];                    
    PbSFFTranscCode_Tval pbnTransCode<s(1)>;        
    char  pbsVendorOUI<s(1)>[16];                   
    PbConnectorType_Tval pbnConnectorType<s(1)>;    
    int   pbnClLaserTemp<s(1)>;                    
    int   pbnTECCurrent<s(1)>;                     
    char  pbsSagPN<s(1)>[20];                      
} LASER_PARAMETER_T<s(0)>;(D1:LASER_PARAMETER_T:1)[[TYPENAME:LASER_PARAMETER_T]]

 
typedef enum 
{
    PDH_MAP_E1_VC12_TU12<s(0)>    = 0x0,
    PDH_MAP_DS1_VC11_TU11<s(0)>   = 0x1,
    PDH_MAP_DS1_VC11_TU12<s(0)>   = 0x2,
    PDH_MAP_E3_LOVC3_TU3<s(0)>    = 0x3,
    PDH_MAP_E3_HOVC3_AU3<s(0)>    = 0x4,
    PDH_MAP_DS3_LOVC3_TU3<s(0)>   = 0x5,
    PDH_MAP_DS3_HOVC3_AU3<s(0)>   = 0x6
} PDH_MAPPING_T<s(0)>;(D1:PDH_MAPPING_T:1)[[TYPENAME:PDH_MAPPING_T]]

typedef enum
{
    LINE_CODING_HDB3<s(0)>    = 0x0,
    LINE_CODING_CMI<s(0)>     = 0x1,
    LINE_CODING_AMI<s(0)>     = 0x2,
    LINE_CODING_B3ZS<s(0)>    = 0x3,
    LINE_CODING_B6ZS<s(0)>    = 0x4,
    LINE_CODING_B8ZS<s(0)>    = 0x5
}LINE_CODING_T<s(0)>;(D1:LINE_CODING_T:1)[[TYPENAME:LINE_CODING_T]]

typedef enum
{
    OHM_75_R<s(0)>  = 0x0,
    OHM_120_R<s(0)> = 0x1,
    OHM_100_R<s(0)> = 0x2,
    OHM_110_R<s(0)> = 0x3,
}PDH_OHM_TYPE_T<s(0)>;(D1:PDH_OHM_TYPE_T:1)[[TYPENAME:PDH_OHM_TYPE_T]]

typedef enum 
{
    PDH_MAP_OPTION_ASYNC<s(0)>    = 0x0,
    PDH_MAP_OPTION_BITSYNC<s(0)>  = 0x1,
    PDH_MAP_OPTION_BYTESYNC<s(0)> = 0x2
}PDH_MAP_OPTION_T<s(0)>;(D1:PDH_MAP_OPTION_T:1)[[TYPENAME:PDH_MAP_OPTION_T]]

 
typedef enum 
{
    E1_SA_BIT_4<s(0)>     = 0x0,
    E1_SA_BIT_5<s(0)>     = 0x1,
    E1_SA_BIT_6<s(0)>     = 0x2,
    E1_SA_BIT_7<s(0)>     = 0x3,
    E1_SA_BIT_8<s(0)>     = 0x4
}E1_SA_BIT_T<s(0)>;(D1:E1_SA_BIT_T:1)[[TYPENAME:E1_SA_BIT_T]]

typedef enum 
{
    PORT_STATE_ABSENT<s(0)>   = 0x0,
    PORT_STATE_UP<s(0)>       = 0x1,
    PORT_STATE_DOWN<s(0)>     = 0x2
} PORT_STATE_T<s(0)>;(D1:PORT_STATE_T:1)[[TYPENAME:PORT_STATE_T]]

typedef enum 
{
    LATCH_STATE_UNKNOWN<s(0)>     = 0x0,
    LATCH_STATE_CLOSE<s(0)>       = 0x1,
    LATCH_STATE_OPEN<s(0)>        = 0x2,
    LATCH_STATE_CARDFAIL<s(0)>    = 0x3,
    LATCH_STATE_CARD_REMOVE<s(0)> = 0x4,
    LATCH_STATE_CARD_INSERT<s(0)> = 0x5
}LATCH_STATE_T<s(0)>;(D1:LATCH_STATE_T:1)[[TYPENAME:LATCH_STATE_T]]

typedef enum
{
    EOW_TYPE_NULL<s(0)>   = 0x0,
    EOW_TYPE_E1<s(0)>     = 0x1,
    EOW_TYPE_E2<s(0)>     = 0x2,
    EOW_TYPE_F1<s(0)>     = 0x3
}EOW_TYPE_T<s(0)>;(D1:EOW_TYPE_T:1)[[TYPENAME:EOW_TYPE_T]]

typedef enum
{ 
    PDH_MODE_DS3<s(0)>  = 0x0,
    PDH_MODE_E3<s(0)>   = 0x1,
    PDH_MODE_E1<s(0)>   = 0x2,
    PDH_MODE_DS1<s(0)>  = 0x3
}PDH_PORT_MODE_T<s(0)>;(D1:PDH_PORT_MODE_T:1)[[TYPENAME:PDH_PORT_MODE_T]]

typedef enum
{
    E1_STRUCTURE_INVALID<s(0)>   = 0x0,
    E1_STRUCTURE_FRAMED<s(0)>    = 0x1,
    E1_STRUCTURE_UNFRAMED<s(0)>  = 0x2,
    E3_STRUCTURE_G751<s(0)>      = 0x3,
    E3_STRUCTURE_G832<s(0)>      = 0x4,
    E3_STRUCTURE_UNFRAMED<s(0)>  = 0x5,
    DS3_STRUCTURE_M13<s(0)>      = 0x6,
    DS3_STRUCTURE_CBIT<s(0)>     = 0x7,
    DS3_STRUCTURE_UNFRAMED<s(0)> = 0x8,
}PDH_FRAME_MODE_T<s(0)>;(D1:PDH_FRAME_MODE_T:1)[[TYPENAME:PDH_FRAME_MODE_T]]

 
typedef enum 
{
    PRBS_STATUS_NA<s(0)>          = 0x0,
    PRBS_STATUS_SYNCING<s(0)>     = 0x1,
    PRBS_STATUS_SYNC_SUCC<s(0)>   = 0x2,
    PRBS_STATUS_SYNC_FAIL<s(0)>   = 0x3,
    PRBS_STATUS_SYNC_ERROR<s(0)>  = 0x4
} PRBS_STATUS_T<s(0)>;(D1:PRBS_STATUS_T:1)[[TYPENAME:PRBS_STATUS_T]]

typedef enum 
{
    PRBS_MODE_NA<s(0)>      = 0x0,
    PRBS_MODE_POWER15<s(0)> = 0x1,
    PRBS_MODE_POWER20<s(0)> = 0x2,
    PRBS_MODE_POWER23<s(0)> = 0x3,
} PRBS_MODE_T<s(0)>;(D1:PRBS_MODE_T:1)[[TYPENAME:PRBS_MODE_T]]

typedef enum 
{
    SIGNAL_TYPE_NORMAL<s(0)>  = 0x1,      
    SIGNAL_TYPE_UNEQ<s(0)>    = 0x2,      
    SIGNAL_TYPE_AIS<s(0)>     = 0x3,      
    SIGNAL_TYPE_RDI<s(0)>     = 0x4,       
     
    SIGNAL_TYPE_PPIAIS<s(0)>  = 0x8
} SIGNAL_TYPE_T<s(0)>;(D1:SIGNAL_TYPE_T:1)[[TYPENAME:SIGNAL_TYPE_T]]

typedef enum 
{
    ALARM_INSERT_AUTO<s(0)>   = 0x0,
    ALARM_INSERT_FORCE<s(0)>  = 0x1,
}ALARM_INSERT_WAY_T<s(0)>;(D1:ALARM_INSERT_WAY_T:1)[[TYPENAME:ALARM_INSERT_WAY_T]]

typedef enum
{
    DCC_TYPE_NONE<s(0)>    = 0x0,
    DCC_TYPE_RS<s(0)>      = 0x1,
    DCC_TYPE_MS<s(0)>      = 0x2,
    DCC_TYPE_BOTH<s(0)>    = 0x3,
} DCC_TYPE_T<s(0)>;(D1:DCC_TYPE_T:1)[[TYPENAME:DCC_TYPE_T]]

typedef enum
{
    CTD_BOARD_EPGTYPE_ERROR<s(0)>         = 0x0,
    CTD_BOARD_EPGTYPE_NONE<s(0)>          = 0x1,
    CTD_BOARD_EPGTYPE_1TON_WORK<s(0)>     = 0x2,
    CTD_BOARD_EPGTYPE_1TON_PROT<s(0)>     = 0x3,
    CTD_BOARD_EPGTYPE_1PLUS1_WORK<s(0)>   = 0x4,
    CTD_BOARD_EPGTYPE_1PLUS1_PROT<s(0)>   = 0x5,
    CTD_BOARD_EPGTYPE_1TO1_WORK<s(0)>     = 0x6,
    CTD_BOARD_EPGTYPE_1TO1_PROT<s(0)>     = 0x7
} CTD_BOARD_EPGTYPE<s(0)>;(D1:CTD_BOARD_EPGTYPE:1)[[TYPENAME:CTD_BOARD_EPGTYPE]]

 
typedef enum
{
    CTD_LOCC_NONE<s(0)>    = 0x0,
    CTD_LOCC_20G<s(0)>     = 0x1,
    CTD_LOCC_40G<s(0)>     = 0x2,
}CTD_LOCC_MODE_T<s(0)>;(D1:CTD_LOCC_MODE_T:1)[[TYPENAME:CTD_LOCC_MODE_T]]

 
typedef enum
{
    CTD_CARD_UNKNOWN<s(0)>    = 0x0,
    CTD_CARD_ACTIVE<s(0)>     = 0x1,
    CTD_CARD_STANDBY<s(0)>    = 0x2,
}CTD_CARD_STATE_T<s(0)>;(D1:CTD_CARD_STATE_T:1)[[TYPENAME:CTD_CARD_STATE_T]]

 
typedef enum
{
    CTD_FEC_ERR_NONE<s(0)>    = 0x0,
    CTD_FEC_ERR_E3<s(0)>      = 0x3,
    CTD_FEC_ERR_E4<s(0)>      = 0x4,
    CTD_FEC_ERR_E5<s(0)>      = 0x5,
}CTD_FEC_INSERT_RATE_T<s(0)>;(D1:CTD_FEC_INSERT_RATE_T:1)[[TYPENAME:CTD_FEC_INSERT_RATE_T]]

 












 









 











typedef struct 
{
    char   *name<s(1)>;
    UINT32  style<s(1)>;           
    UINT32  option<s(1)>;          
    UINT32  totalPortNum<s(1)>;    
    UINT32  portIdRange<s(1)>[(29 ) ][2];   



    UINT32  dataPortNum<s(1)>[2];  
} CTD_BOARD_INFO_T<s(0)>;(D1:CTD_BOARD_INFO_T:1)[[TYPENAME:CTD_BOARD_INFO_T]]

 













































 
 






 


 













typedef UINT16 TU_TP_T<s(0)>;(D1:TU_TP_T:1)[[TYPENAME:TU_TP_T]]

 


 





























typedef UINT32 AU_TP_T<s(0)>;(D1:AU_TP_T:1)[[TYPENAME:AU_TP_T]]

 



 







typedef UINT32 COMPACT_TP_T<s(0)>;(D1:COMPACT_TP_T:1)[[TYPENAME:COMPACT_TP_T]]






 






 




 









 


typedef struct
{
     
    SDH_TP_TYPE eTpType<s(1)>;

     
    UINT32 E<s(1)>: 4,
           D<s(1)>: 4,
           C<s(1)>: 4,
           B<s(1)>: 4,
           A<s(1)>: 4,
           K<s(1)>: 4,
           L<s(1)>: 4,
           M<s(1)>: 4;        
}__attribute__ ((packed))  TP_INDEX_T<s(0)>;(D1:TP_INDEX_T:1)[[TYPENAME:TP_INDEX_T]]  

 


 
















typedef UINT16 SDH_TUG3_MAPPING_T<s(0)>;(D1:SDH_TUG3_MAPPING_T:1)[[TYPENAME:SDH_TUG3_MAPPING_T]]



typedef UINT8 SDH_TUG2_MAPPING_T<s(0)>;(D1:SDH_TUG2_MAPPING_T:1)[[TYPENAME:SDH_TUG2_MAPPING_T]]




 


typedef UINT16 SDH_VC3H_MAPPING_T<s(0)>;(D1:SDH_VC3H_MAPPING_T:1)[[TYPENAME:SDH_VC3H_MAPPING_T]]

 







 









typedef struct
{
    



    BOOL b_clr<s(1)>;
    SDH_TUG3_MAPPING_T tug3<s(1)>[3];
} SDH_VC4_MAPPING_T<s(0)>;(D1:SDH_VC4_MAPPING_T:1)[[TYPENAME:SDH_VC4_MAPPING_T]]

typedef struct
{
    



    BOOL b_au4<s(1)>;

    union
    {
         
        SDH_VC4_MAPPING_T vc4<s(1)>;
 
         
        SDH_VC3H_MAPPING_T vc3h<s(1)>[3];
    } hovc<s(0)>;
} SDH_AUG1_MAPPING_T<s(0)>;(D1:SDH_AUG1_MAPPING_T:1)[[TYPENAME:SDH_AUG1_MAPPING_T]]

typedef struct
{
    



    BOOL b_4c<s(1)>;
 
    SDH_AUG1_MAPPING_T aug1<s(1)>[4];
} SDH_AUG4_MAPPING_T<s(0)>;(D1:SDH_AUG4_MAPPING_T:1)[[TYPENAME:SDH_AUG4_MAPPING_T]]

typedef struct
{
    



    BOOL b_16c<s(1)>;
 
    SDH_AUG4_MAPPING_T aug4<s(1)>[4];
} SDH_AUG16_MAPPING_T<s(0)>;(D1:SDH_AUG16_MAPPING_T:1)[[TYPENAME:SDH_AUG16_MAPPING_T]]

typedef struct
{
    



    BOOL b_64c<s(1)>;

    SDH_AUG16_MAPPING_T aug16<s(1)>[4];
} SDH_AUG64_MAPPING_T<s(0)>;(D1:SDH_AUG64_MAPPING_T:1)[[TYPENAME:SDH_AUG64_MAPPING_T]]

typedef struct
{
    



    BOOL b_256c<s(1)>;

    SDH_AUG64_MAPPING_T aug64<s(1)>[4];
} SDH_AUG256_MAPPING_T<s(0)>;(D1:SDH_AUG256_MAPPING_T:1)[[TYPENAME:SDH_AUG256_MAPPING_T]]

extern void CTD_InitModule<s(0)>();(D1:CTD_InitModule:0)
extern UINT32 CTD_GetPortTotalNumber<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)
extern UINT32 CTD_GetPortNumber<s(0)>(SLOT_NUMBER_T slot<s(0)>, HW_PORT_TYPE type<s(0)>);(D1:type:0)
extern UINT32 CTD_GetPortBegin<s(0)>(SLOT_NUMBER_T slot<s(0)>, HW_PORT_TYPE type<s(0)>);(D1:type:0)
extern UINT32 CTD_GetBoardStyle<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)
extern UINT32 CTD_GetBoardOption<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)
extern PB_ERROR_CODE_T CTD_SetBoardInfo<s(0)>(SLOT_NUMBER_T slot<s(0)>, UINT32 ulStyle<s(0)>, UINT32 ulOption<s(0)>);(D1:ulOption:0)
extern PB_ERROR_CODE_T CTD_GetPortType<s(0)>(SLOT_NUMBER_T slot<s(0)>, UINT8 *pucTypeNum<s(0)>, HW_PORT_TYPE *pePortType<s(0)>);(D1:pePortType:0)
extern SLOT_NUMBER_T CTD_InstanceToSlot<s(0)>(INSTANCE_T inst<s(0)>);(D1:inst:0)
extern INSTANCE_T CTD_SlotToInstance<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)
extern UINT32 CTD_GetRelativePortId<s(0)>(SLOT_NUMBER_T slot<s(0)>, UINT32 port<s(0)>);(D1:port:0)
extern UINT32 CTD_GetAbsolutePortId<s(0)>(SLOT_NUMBER_T slot<s(0)>, HW_PORT_TYPE pType<s(0)>, UINT32 port<s(0)>);(D1:port:0)
extern CTD_BOARD_EPGTYPE CTD_GetBoardEpgType<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)
extern CARDTYPE_T CTD_BoardStyleToCardType<s(0)>(PbBoardStyle_Tval boardStyle<s(0)>);(D1:boardStyle:0)
extern PORT_LOOPBACK_T CTD_TransToCdhLoopType<s(0)>(pbPortLoopback_Tval  eLoopbackType<s(0)>);(D1:eLoopbackType:0)
extern PB_ERROR_CODE_T CTD_TransToCdhMap<s(0)>(PORT_MAPPING_T *pTug3Map<s(0)>, void *pCdhMap<s(0)>);(D1:pCdhMap:0)
extern PB_ERROR_CODE_T CTD_TransToCdhTp<s(0)>(const TP_INDEX_T *pTpIndex<s(0)>, COMPACT_TP_T *pTpId<s(0)>);(D1:pTpId:0)
extern SDH_TP_TYPE CTD_GetTpType<s(0)>(const TP_INDEX_T *pTpIndex<s(0)>);(D1:pTpIndex:0)
extern TTI_LEN_T CTD_TransToCdhTtiMode<s(0)>(PbTIModeType_Tval mode<s(0)>);(D1:mode:0)
extern SIGNAL_TYPE_T CTD_TransToCdhSigType<s(0)>(PbSignalType_Tval signalType<s(0)>);(D1:signalType:0)
extern LATCH_STATE_T CTD_TransToCdhLatchState<s(0)>(PbEpgFunctionCardStatus_Tval eState<s(0)>);(D1:eState:0)
extern PbEpgFunctionCardStatus_Tval CTD_TransToExLatchState<s(0)>(LATCH_STATE_T eState<s(0)>);(D1:eState:0)
extern PRBS_MODE_T CTD_TransToCdhPrbsMode<s(0)>(pbPRBSPattern_Tval prbsPattern<s(0)>);(D1:prbsPattern:0)
extern PbPortOperationStatus_Tval CTD_TransToExPortState<s(0)>(PORT_STATE_T cdhPortState<s(0)>);(D1:cdhPortState:0)
extern const char* CTD_GetLedStateName<s(0)>(LED_STATE_T state<s(0)>);(D1:state:0)
extern PDH_FRAME_MODE_T CTD_TransToCdhFrameMode<s(0)>(expectedFrameStructure_Tval eFrameMode<s(0)>);(D1:eFrameMode:0)
extern UINT32 CTD_TransToCdhPortType<s(0)>(HW_ACT_PORT_TYPE ePortType<s(0)>);(D1:ePortType:0)
extern PORT_LOOPBACK_T CTD_TransToOtuLoopType<s(0)>(pbOTUPortLoopback_Tval eLoopbackType<s(0)>);(D1:eLoopbackType:0)
extern CTD_FEC_INSERT_RATE_T CTD_TransToOtuFecErrRate<s(0)>(pbInsFecErrRate_Tval InsFecErrRate<s(0)>);(D1:InsFecErrRate:0)
extern CTD_CARD_STATE_T CTD_GetXcState<s(0)>();(D1:CTD_GetXcState:0)
extern PB_ERROR_CODE_T CTD_SetXcState<s(0)>(BOOL bCardState<s(0)>);(D1:bCardState:0)
extern const char* CTD_GetCardName<s(0)>(SLOT_NUMBER_T slot<s(0)>);(D1:slot:0)

extern CTD_BOARD_INFO_T ctd_boardInfo<s(0)>[];(D1:ctd_boardInfo:0)








 














































































































 


















 

 
 

 



















































 

 

 

























 

 

 




































 

 

 







 
































 








































 



 

	 












	 


















 






 



 






 



 


 




 




extern int *	__errno<s(0)>(void);(D1:__errno:0)























 









 

typedef struct obj_core<s(1)>  *OBJ_ID<s(0)>;(D1:OBJ_ID:1)[[TYPENAME:OBJ_ID]]		 


 

















 



extern STATUS 	objShow<s(0)> (OBJ_ID objId<s(0)>, int showType<s(0)>);(D1:showType:0)















 

 

 






















































 







 



typedef struct mem_part<s(1)> *PART_ID<s(0)>;(D1:PART_ID:1)[[TYPENAME:PART_ID]]

 

typedef struct
    {

    unsigned long numBytesFree<s(1)>,	    
		  numBlocksFree<s(1)>,    
		  maxBlockSizeFree<s(1)>, 
		  numBytesAlloc<s(1)>,    
		  numBlocksAlloc<s(1)>;   

    }  MEM_PART_STATS<s(0)>;(D1:MEM_PART_STATS:1)[[TYPENAME:MEM_PART_STATS]]


 

 



 




 




 






 









 

 

extern PART_ID memSysPartId<s(0)>;(D1:memSysPartId:0)

 

extern FUNCPTR  smMemPartOptionsSetRtn<s(0)>;(D1:smMemPartOptionsSetRtn:0)
extern FUNCPTR  smMemPartFindMaxRtn<s(0)>;(D1:smMemPartFindMaxRtn:0)
extern FUNCPTR  smMemPartReallocRtn<s(0)>;(D1:smMemPartReallocRtn:0)
extern FUNCPTR  smMemPartShowRtn<s(0)>;(D1:smMemPartShowRtn:0)

 



extern STATUS 	memInit<s(0)> (char *pPool<s(0)>, unsigned poolSize<s(0)>);(D1:poolSize:0)
extern STATUS 	memPartLibInit<s(0)> (char *pPool<s(0)>, unsigned poolSize<s(0)>);(D1:poolSize:0)
extern PART_ID 	memPartCreate<s(0)> (char *pPool<s(0)>, unsigned poolSize<s(0)>);(D1:poolSize:0)
extern void 	memPartInit<s(0)> (PART_ID partId<s(0)>, char *pPool<s(0)>, unsigned poolSize<s(0)>);(D1:poolSize:0)
extern STATUS 	memPartAddToPool<s(0)> (PART_ID partId<s(0)>, char *pPool<s(0)>,
				  unsigned poolSize<s(0)>);(D1:poolSize:0)
extern void 	memAddToPool<s(0)> (char *pPool<s(0)>, unsigned poolSize<s(0)>);(D1:poolSize:0)
extern void *	memPartAlloc<s(0)> (PART_ID partId<s(0)>, unsigned nBytes<s(0)>);(D1:nBytes:0)
extern void *   memPartAlignedAlloc<s(0)> (PART_ID partId<s(0)>, unsigned nBytes<s(0)>,
				     unsigned alignment<s(0)>);(D1:alignment:0)
extern void *	memalign<s(0)> (unsigned alignment<s(0)>, unsigned size<s(0)>);(D1:size:0)
extern void *   valloc<s(0)> (unsigned size<s(0)>);(D1:size:0)
extern STATUS 	memPartFree<s(0)> (PART_ID partId<s(0)>, char *pBlock<s(0)>);(D1:pBlock:0)
extern STATUS 	memPartOptionsSet<s(0)> (PART_ID partId<s(0)>, unsigned options<s(0)>);(D1:options:0)
extern int 	memFindMax<s(0)> (void);(D1:memFindMax:0)
extern int 	memPartFindMax<s(0)> (PART_ID partId<s(0)>);(D1:partId:0)
extern void *	memPartRealloc<s(0)> (PART_ID partId<s(0)>, char *pBlock<s(0)>, unsigned nBytes<s(0)>);(D1:nBytes:0)
extern void 	memOptionsSet<s(0)> (unsigned options<s(0)>);(D1:options:0)
extern STATUS 	cfree<s(0)> (char *pBlock<s(0)>);(D1:pBlock:0)
extern void 	memShowInit<s(0)> (void);(D1:memShowInit:0)
extern void 	memShow<s(0)> (int type<s(0)>);(D1:type:0)
extern STATUS 	memPartShow<s(0)> (PART_ID partId<s(0)>, int type<s(0)>);(D1:type:0)
extern STATUS   memPartInfoGet<s(0)> (PART_ID	partId<s(0)>, MEM_PART_STATS * ppartStats<s(0)>);(D1:ppartStats:0)












 






typedef struct obj_class<s(1)> *CLASS_ID<s(0)>;(D1:CLASS_ID:1)[[TYPENAME:CLASS_ID]]		 

extern CLASS_ID classClassId<s(0)>;(D1:classClassId:0)			 

 



extern STATUS 	classLibInit<s(0)> (void);(D1:classLibInit:0)
extern STATUS 	classMemPartIdSet<s(0)> (CLASS_ID classId<s(0)>, PART_ID memPartId<s(0)>);(D1:memPartId:0)
extern void 	classShowInit<s(0)> (void);(D1:classShowInit:0)
extern STATUS 	classShow<s(0)> (CLASS_ID classId<s(0)>, int level<s(0)>);(D1:level:0)



















 

 

 


























typedef struct obj_core<s(1)>		 
    {
    struct obj_class<s(1)> *pObjClass<s(0)>;	 
    } OBJ_CORE<s(0)>;(D1:OBJ_CORE:1)[[TYPENAME:OBJ_CORE]]






 



extern OBJ_ID 	objCreate<s(0)> (CLASS_ID classId<s(0)>, ...);(D1:classId:0)
extern STATUS 	objInit<s(0)> (CLASS_ID classId<s(0)>, OBJ_ID objId<s(0)>, ...);(D1:objId:0)
extern STATUS 	objDelete<s(0)> (OBJ_ID objId<s(0)>);(D1:objId:0)
extern STATUS 	objDestroy<s(0)> (OBJ_ID objId<s(0)>, BOOL dealloc<s(0)>, int timeout<s(0)>);(D1:timeout:0)
extern STATUS 	objFree<s(0)> (CLASS_ID classId<s(0)>, char *pObject<s(0)>);(D1:pObject:0)
extern STATUS 	objTerminate<s(0)> (OBJ_ID objId<s(0)>);(D1:objId:0)
extern void *	objAlloc<s(0)> (CLASS_ID classId<s(0)>);(D1:classId:0)
extern void *	objAllocExtra<s(0)> (CLASS_ID classId<s(0)>, unsigned nExtraBytes<s(0)>,
			       void ** ppExtra<s(0)>);(D1:ppExtra:0)
extern void 	objCoreInit<s(0)> (OBJ_CORE *pObjCore<s(0)>, CLASS_ID pObjClass<s(0)>);(D1:pObjClass:0)
extern void 	objCoreTerminate<s(0)> (OBJ_CORE *pObjCore<s(0)>);(D1:pObjCore:0)











 

 
 























 









typedef struct obj_class<s(1)>	 
    {
    OBJ_CORE		objCore<s(1)>;	 
    struct mem_part<s(1)>	*objPartId<s(0)>;	 
    unsigned		objSize<s(0)>;	 
    unsigned		objAllocCnt<s(0)>;	 
    unsigned		objFreeCnt<s(0)>;	 
    unsigned		objInitCnt<s(0)>;	 
    unsigned		objTerminateCnt<s(0)>; 
    int			coreOffset<s(0)>;	 
    FUNCPTR		createRtn<s(0)>;	 
    FUNCPTR		initRtn<s(0)>;	 
    FUNCPTR		destroyRtn<s(0)>;	 
    FUNCPTR		showRtn<s(0)>;	 
    FUNCPTR		instRtn<s(0)>;	 
    } OBJ_CLASS<s(0)>;(D1:OBJ_CLASS:1)[[TYPENAME:OBJ_CLASS]]


 



extern CLASS_ID	classCreate<s(0)> (unsigned objectSize<s(0)>, int coreOffset<s(0)>,
			     FUNCPTR createRtn<s(0)>, FUNCPTR initRtn<s(0)>,
			     FUNCPTR destroyRtn<s(0)>);(D1:destroyRtn:0)
extern STATUS	classInit<s(0)> (OBJ_CLASS *pObjClass<s(0)>, unsigned objectSize<s(0)>,
			   int coreOffset<s(0)>, FUNCPTR createRtn<s(0)>, FUNCPTR initRtn<s(0)>,
			   FUNCPTR destroyRtn<s(0)>);(D1:destroyRtn:0)
extern STATUS	classDestroy<s(0)> (CLASS_ID classId<s(0)>);(D1:classId:0)
extern STATUS	classInstConnect<s(0)> (CLASS_ID classId<s(0)>, FUNCPTR instRtn<s(0)>);(D1:instRtn:0)
extern STATUS	classShowConnect<s(0)> (CLASS_ID classId<s(0)>, FUNCPTR showRtn<s(0)>);(D1:showRtn:0)
extern STATUS   classInstrument<s(0)> ( OBJ_CLASS * pObjClass<s(0)>, 
				  OBJ_CLASS * pObjInstClass<s(0)> );(D1:pObjInstClass:0)











   









 








































 



 
 







 



 

typedef struct __va_list_tag<s(1)> {
  unsigned char gpr<s(1)>;		 


  unsigned char fpr<s(1)>;		 


  char *overflow_arg_area<s(1)>;	 

  char *reg_save_area<s(1)>;		 
} __va_list<s(0)>[1],(D1:__va_list:1) __gnuc_va_list<s(0)>[1];(D1:__gnuc_va_list:1)[[TYPENAME:__gnuc_va_list]]









 



 


typedef struct {
  long   __gp_save<s(1)>[8];		 
  double __fp_save<s(1)>[8];		 
} __va_regsave_t<s(0)>;(D1:__va_regsave_t:1)[[TYPENAME:__va_regsave_t]]

 
 









 









 























 
















 





















 
 















 




 

 

 

typedef __gnuc_va_list va_list<s(0)>;(D1:va_list:1)[[TYPENAME:va_list]]





























 

struct __sbuf<s(1)> 			 
    {
    uchar_t * _base<s(1)>;		 
    int	      _size<s(1)>;		 
    };

typedef	struct __sFILE<s(1)>
    {
    OBJ_CORE		objCore<s(1)>;	 
    uchar_t *		_p<s(1)>;		 
    int			_r<s(1)>;		 
    int			_w<s(1)>;		 
    short		_flags<s(1)>;		 
    short		_file<s(1)>;		 
    struct __sbuf<s(1)>	_bf<s(1)>;		 
    int			_lbfsize<s(0)>;	 
    struct __sbuf<s(1)>	_ub<s(1)>;		 
    uchar_t *		_up<s(0)>;		 
    int			_ur<s(0)>;		 
    uchar_t		_ubuf<s(0)>[3];	 
    uchar_t		_nbuf<s(0)>[1];	 
    struct __sbuf<s(1)>	_lb<s(1)>;		 
    int			_blksize<s(0)>;	 
    int			_offset<s(0)>;	 
    int			taskId<s(0)>;		 
    } FILE<s(0)>;(D1:FILE:1)[[TYPENAME:FILE]]

 

extern CLASS_ID fpClassId<s(0)>;(D1:fpClassId:0)		 

 

























































extern void	clearerr<s(0)> (FILE *);(D1:FILE:0)
extern int	fclose<s(0)> (FILE *);(D1:FILE:0)
extern int	feof<s(0)> (FILE *);(D1:FILE:0)
extern int	ferror<s(0)> (FILE *);(D1:FILE:0)
extern int	fflush<s(0)> (FILE *);(D1:FILE:0)
extern int	fgetc<s(0)> (FILE *);(D1:FILE:0)
extern int	fgetpos<s(0)> (FILE *, fpos_t *);(D1:fpos_t:0)
extern char *	fgets<s(0)> (char *, size_t, FILE *);(D1:FILE:0)
extern FILE *	fopen<s(0)> (const char *, const char *);(D1:fopen:0)
extern int	fprintf<s(0)> (FILE *, const char *, ...);(D1:FILE:0)
extern int	fputc<s(0)> (int, FILE *);(D1:FILE:0)
extern int	fputs<s(0)> (const char *, FILE *);(D1:FILE:0)
extern int	fread<s(0)> (void *, size_t, size_t, FILE *);(D1:FILE:0)
extern FILE *	freopen<s(0)> (const char *, const char *, FILE *);(D1:FILE:0)
extern int	fscanf<s(0)> (FILE *, const char *, ...);(D1:FILE:0)
extern int	fseek<s(0)> (FILE *, long, int);(D1:FILE:0)
extern int	fsetpos<s(0)> (FILE *, const fpos_t *);(D1:fpos_t:0)
extern long	ftell<s(0)> (FILE *);(D1:FILE:0)
extern int	fwrite<s(0)> (const void *, size_t, size_t, FILE *);(D1:FILE:0)
extern int	getc<s(0)> (FILE *);(D1:FILE:0)
extern int	getchar<s(0)> (void);(D1:getchar:0)
extern char *	gets<s(0)> (char *);(D1:gets:0)
extern void	perror<s(0)> (const char *);(D1:perror:0)
extern int	printf<s(0)> (const char *, ...);(D1:printf:0)
extern int	putc<s(0)> (int, FILE *);(D1:FILE:0)
extern int	putchar<s(0)> (int);(D1:putchar:0)
extern int	puts<s(0)> (const char *);(D1:puts:0)
extern int	remove<s(0)> (const char *);(D1:remove:0)
extern int	rename<s(0)>  (const char *, const char *);(D1:rename:0)
extern void	rewind<s(0)> (FILE *);(D1:FILE:0)
extern int	scanf<s(0)> (const char *, ...);(D1:scanf:0)
extern void	setbuf<s(0)> (FILE *, char *);(D1:FILE:0)
extern int	setvbuf<s(0)> (FILE *, char *, int, size_t);(D1:size_t:0)
extern int	sprintf<s(0)> (char *, const char *, ...);(D1:sprintf:0)
extern int	sscanf<s(0)> (const char *, const char *, ...);(D1:sscanf:0)
extern FILE *	tmpfile<s(0)> (void);(D1:tmpfile:0)
extern char *	tmpnam<s(0)> (char *);(D1:tmpnam:0)
extern int	ungetc<s(0)> (int, FILE *);(D1:FILE:0)
extern int	vfprintf<s(0)> (FILE *, const char *, va_list);(D1:va_list:0)
extern int	vprintf<s(0)> (const char *, va_list);(D1:va_list:0)
extern int	vsprintf<s(0)> (char *, const char *, va_list);(D1:va_list:0)
extern int	__srget<s(0)> (FILE *);(D1:FILE:0)		 
extern int	__swbuf<s(0)> (int, FILE *);(D1:FILE:0)		 

 

extern FILE *	fdopen<s(0)> (int, const char *);(D1:fdopen:0)
extern int	fileno<s(0)> (FILE *);(D1:FILE:0)

 

 



extern int	fdprintf<s(0)> (int fd<s(0)>, const char *fmt<s(0)>, ...);(D1:fmt:0)
extern int	vfdprintf<s(0)> (int fd<s(0)>, const char *fmt<s(0)>, va_list ap<s(0)>);(D1:ap:0)
extern int	printErr<s(0)> (const char *fmt<s(0)>, ...);(D1:fmt:0)
extern int	getw<s(0)> (FILE *);(D1:FILE:0)
extern int	putw<s(0)> (int, FILE *);(D1:FILE:0)
extern void	setbuffer<s(0)> (FILE *, char *, int);(D1:FILE:0)
extern int	setlinebuf<s(0)> (FILE *);(D1:FILE:0)
extern FILE *   stdioFp<s(0)> (int std<s(0)>);(D1:std:0)
extern STATUS   stdioShow<s(0)> (FILE * fp<s(0)>, int level<s(0)>);(D1:level:0)
extern STATUS   stdioShowInit<s(0)> (void);(D1:stdioShowInit:0)
extern STATUS   stdioInit<s(0)> (void);(D1:stdioInit:0)






 


extern FILE **	__stdin<s(0)>(void);(D1:__stdin:0)		 
extern FILE **	__stdout<s(0)>(void);(D1:__stdout:0)		 
extern FILE **	__stderr<s(0)>(void);(D1:__stderr:0)		 











 












































 


















 

























 












 






 






 












 















 






















 














 









    typedef void *ClientData<s(0)>;(D1:ClientData:1)[[TYPENAME:ClientData]]






 


















typedef struct Tcl_Interp<s(1)> {
    char *result<s(1)>;		 

    void (*freeProc<s(1)>)TYPENAME:FUNC:(freeProc)  (char *blockPtr<s(1)>)  ;
				 






    int errorLine<s(1)>;               


} Tcl_Interp<s(0)>;(D1:Tcl_Interp:0)

typedef struct Tcl_AsyncHandler_<s(1)> *Tcl_AsyncHandler<s(0)>;(D1:Tcl_AsyncHandler:1)[[TYPENAME:Tcl_AsyncHandler]]
typedef struct Tcl_Channel_<s(1)> *Tcl_Channel<s(0)>;(D1:Tcl_Channel:1)[[TYPENAME:Tcl_Channel]]
typedef struct Tcl_Command_<s(1)> *Tcl_Command<s(0)>;(D1:Tcl_Command:1)[[TYPENAME:Tcl_Command]]
typedef struct Tcl_Event<s(1)> Tcl_Event<s(1)>;(D1:Tcl_Event:1)[[TYPENAME:Tcl_Event]]
typedef struct Tcl_Pid_<s(1)> *Tcl_Pid<s(0)>;(D1:Tcl_Pid:1)[[TYPENAME:Tcl_Pid]]
typedef struct Tcl_RegExp_<s(1)> *Tcl_RegExp<s(0)>;(D1:Tcl_RegExp:1)[[TYPENAME:Tcl_RegExp]]
typedef struct Tcl_TimerToken_<s(1)> *Tcl_TimerToken<s(0)>;(D1:Tcl_TimerToken:1)[[TYPENAME:Tcl_TimerToken]]
typedef struct Tcl_Trace_<s(1)> *Tcl_Trace<s(0)>;(D1:Tcl_Trace:1)[[TYPENAME:Tcl_Trace]]
typedef struct Tcl_Var_<s(1)> *Tcl_Var<s(0)>;(D1:Tcl_Var:1)[[TYPENAME:Tcl_Var]]

 




























 



typedef enum {TCL_INT<s(0)>, TCL_DOUBLE<s(0)>, TCL_EITHER<s(0)>} Tcl_ValueType<s(0)>;(D1:Tcl_ValueType:1)[[TYPENAME:Tcl_ValueType]]
typedef struct Tcl_Value<s(1)> {
    Tcl_ValueType type<s(1)>;		 

    long intValue<s(1)>;		 
    double doubleValue<s(1)>;		 
} Tcl_Value<s(0)>;(D1:Tcl_Value:1)[[TYPENAME:Tcl_Value]]

 





struct Tcl_Obj<s(1)>;

 



typedef int (Tcl_AppInitProc<s(0)>)TYPENAME:FUNC:(Tcl_AppInitProc)  (Tcl_Interp<s(0)> *
                                           ^
                                 parse error at line(9884):column(44):symbol(Tcl_Interp)
