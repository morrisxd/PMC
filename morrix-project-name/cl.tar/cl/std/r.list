 














 
















 
























 

 

 





















































 




















 

 
 








 

























 

 

 












 













































 

 

 








 


















 










 

 

 








 





























































 













 

 










 
































































































































































































 



















 

 

 



























 




































































 

 

 































	
 



 


 

















 






 
































 






typedef	unsigned int	_RType<s(0)(0)(0)>[&];(D1:_RType:1)[[TYPENAME:_RType]]		 







































 

 

 
























 









 



















 
































 










 














 








 



 

 

























 

 
 




































 

 





































   































































 















 











 

 

 










 













































 

 

 



















 






















 







 

 




 


 





 




 





 


















 





 

 





















typedef int ptrdiff_t<s(0)(0)(0)>[&];(D1:ptrdiff_t:1)[[TYPENAME:ptrdiff_t]]









 




 

 


































typedef unsigned int size_t<s(0)(0)(0)>[&];(D1:size_t:1)[[TYPENAME:size_t]]






















 




 





























 


























typedef short unsigned int wchar_t<s(0)(0)(0)>[&];(D1:wchar_t:1)[[TYPENAME:wchar_t]]
























typedef unsigned int  wint_t<s(0)(0)(0)>[&];(D1:wint_t:1)[[TYPENAME:wint_t]]




 

 





 













 









 






struct __timer<s(1)(0)(1)>[&];































































 






 




















 










































































 






















































































































 






 









































typedef int ssize_t<s(0)(0)(0)>[&] ;(D1:ssize_t:1)[[TYPENAME:ssize_t]]




typedef unsigned long time_t<s(0)(0)(0)>[&] ;(D1:time_t:1)[[TYPENAME:time_t]]




typedef long fpos_t<s(0)(0)(0)>[&] ;(D1:fpos_t:1)[[TYPENAME:fpos_t]]




typedef signed char int8_t<s(0)(0)(0)>[&] ;(D1:int8_t:1)[[TYPENAME:int8_t]]




typedef unsigned char uint8_t<s(0)(0)(0)>[&] ;(D1:uint8_t:1)[[TYPENAME:uint8_t]]




typedef short int16_t<s(0)(0)(0)>[&] ;(D1:int16_t:1)[[TYPENAME:int16_t]]




typedef unsigned short uint16_t<s(0)(0)(0)>[&] ;(D1:uint16_t:1)[[TYPENAME:uint16_t]]




typedef long int32_t<s(0)(0)(0)>[&] ;(D1:int32_t:1)[[TYPENAME:int32_t]]




typedef unsigned long uint32_t<s(0)(0)(0)>[&] ;(D1:uint32_t:1)[[TYPENAME:uint32_t]]




typedef long long int64_t<s(0)(0)(0)>[&] ;(D1:int64_t:1)[[TYPENAME:int64_t]]




typedef unsigned long long uint64_t<s(0)(0)(0)>[&] ;(D1:uint64_t:1)[[TYPENAME:uint64_t]]



 

typedef unsigned char	uchar_t<s(0)(0)(0)>[&];(D1:uchar_t:1)[[TYPENAME:uchar_t]]
typedef unsigned short	ushort_t<s(0)(0)(0)>[&];(D1:ushort_t:1)[[TYPENAME:ushort_t]]
typedef unsigned int	uint_t<s(0)(0)(0)>[&];(D1:uint_t:1)[[TYPENAME:uint_t]]
typedef unsigned long	ulong_t<s(0)(0)(0)>[&];(D1:ulong_t:1)[[TYPENAME:ulong_t]]

typedef	struct	_quad<s(1)(0)(1)>[&] { long val<s(1)(1)(0)>[&][2]; } quad<s(0)(0)(0)>[&];(D1:quad:1)[[TYPENAME:quad]]
typedef	long	daddr_t<s(0)(0)(0)>[&];(D1:daddr_t:1)[[TYPENAME:daddr_t]]
typedef	char *	caddr_t<s(0)(0)(0)>[&];(D1:caddr_t:1)[[TYPENAME:caddr_t]]
typedef	char *	addr_t<s(0)(0)(0)>[&];(D1:addr_t:1)[[TYPENAME:addr_t]]
typedef	long	swblk_t<s(0)(0)(0)>[&];(D1:swblk_t:1)[[TYPENAME:swblk_t]]

 

typedef short		dev_t<s(0)(0)(0)>[&];(D1:dev_t:1)[[TYPENAME:dev_t]]
typedef unsigned short	gid_t<s(0)(0)(0)>[&];(D1:gid_t:1)[[TYPENAME:gid_t]]
typedef	unsigned long	ino_t<s(0)(0)(0)>[&];(D1:ino_t:1)[[TYPENAME:ino_t]]
typedef int		mode_t<s(0)(0)(0)>[&];(D1:mode_t:1)[[TYPENAME:mode_t]]
typedef unsigned long	nlink_t<s(0)(0)(0)>[&];(D1:nlink_t:1)[[TYPENAME:nlink_t]]
typedef long		off_t<s(0)(0)(0)>[&];(D1:off_t:1)[[TYPENAME:off_t]]
typedef int		pid_t<s(0)(0)(0)>[&];(D1:pid_t:1)[[TYPENAME:pid_t]]
typedef unsigned short	uid_t<s(0)(0)(0)>[&];(D1:uid_t:1)[[TYPENAME:uid_t]]















 

typedef	char		INT8<s(0)(0)(0)>[&];(D1:INT8:1)[[TYPENAME:INT8]]
typedef	short		INT16<s(0)(0)(0)>[&];(D1:INT16:1)[[TYPENAME:INT16]]
typedef	int		INT32<s(0)(0)(0)>[&];(D1:INT32:1)[[TYPENAME:INT32]]
typedef	long long	INT64<s(0)(0)(0)>[&];(D1:INT64:1)[[TYPENAME:INT64]]

typedef	unsigned char	UINT8<s(0)(0)(0)>[&];(D1:UINT8:1)[[TYPENAME:UINT8]]
typedef	unsigned short	UINT16<s(0)(0)(0)>[&];(D1:UINT16:1)[[TYPENAME:UINT16]]
typedef	unsigned int	UINT32<s(0)(0)(0)>[&];(D1:UINT32:1)[[TYPENAME:UINT32]]
typedef	unsigned long long UINT64<s(0)(0)(0)>[&];(D1:UINT64:1)[[TYPENAME:UINT64]]

typedef	unsigned char	UCHAR<s(0)(0)(0)>[&];(D1:UCHAR:1)[[TYPENAME:UCHAR]]
typedef unsigned short	USHORT<s(0)(0)(0)>[&];(D1:USHORT:1)[[TYPENAME:USHORT]]
typedef	unsigned int	UINT<s(0)(0)(0)>[&];(D1:UINT:1)[[TYPENAME:UINT]]
typedef unsigned long	ULONG<s(0)(0)(0)>[&];(D1:ULONG:1)[[TYPENAME:ULONG]]

typedef	int		BOOL<s(0)(0)(0)>[&];(D1:BOOL:1)[[TYPENAME:BOOL]]
typedef	int		STATUS<s(0)(0)(0)>[&];(D1:STATUS:1)[[TYPENAME:STATUS]]
typedef int 		ARGINT<s(0)(0)(0)>[&];(D1:ARGINT:1)[[TYPENAME:ARGINT]]

typedef void		VOID<s(0)(0)(0)>[&];(D1:VOID:1)[[TYPENAME:VOID]]







typedef int 		(*FUNCPTR<s(0)(0)(0)>[&])TYPENAME:FUNC:(FUNCPTR) ();(D1:FUNCPTR:0)	    
typedef void 		(*VOIDFUNCPTR<s(0)(0)(0)>[&])TYPENAME:FUNC:(VOIDFUNCPTR) ();(D1:VOIDFUNCPTR:0)  
typedef double 		(*DBLFUNCPTR<s(0)(0)(0)>[&])TYPENAME:FUNC:(DBLFUNCPTR) ();(D1:DBLFUNCPTR:0)   
typedef float 		(*FLTFUNCPTR<s(0)(0)(0)>[&])TYPENAME:FUNC:(FLTFUNCPTR) ();(D1:FLTFUNCPTR:0)   



 




typedef union
    {
    long pm_int<s(1)(1)(0)>[&];
    void *pm_v<s(1)(1)(0)>[&];
    const void *pm_cv<s(1)(1)(0)>[&];
    char *pm_c<s(1)(1)(0)>[&];
    unsigned char *pm_uc<s(1)(1)(0)>[&];

    signed char *pm_sc<s(1)(1)(0)>[&];
    const char *pm_cc<s(1)(1)(0)>[&];
    const unsigned char *pm_cuc<s(1)(1)(0)>[&];
    const signed char *pm_csc<s(1)(1)(0)>[&];
    short *pm_s<s(1)(1)(0)>[&];
    ushort_t<s(1)(1)(0)>[T] *pm_us<s(1)(1)(0)>[&];
    const short *pm_cs<s(1)(1)(0)>[&];
    const ushort_t<s(1)(1)(0)>[T] *pm_cus<s(1)(1)(0)>[&];
    int *pm_i<s(1)(1)(0)>[&];
    uint_t<s(1)(1)(0)>[T] *pm_ui<s(1)(1)(0)>[&];
    const int *pm_ci<s(1)(1)(0)>[&];
    const uint_t<s(1)(1)(0)>[T] *pm_cui<s(1)(1)(0)>[&];
    long *pm_l<s(1)(1)(0)>[&];
    ulong_t<s(1)(1)(0)>[T] *pm_ul<s(1)(1)(0)>[&];
    const long *pm_cl<s(1)(1)(0)>[&];
    const ulong_t<s(1)(1)(0)>[T] *pm_cul<s(1)(1)(0)>[&];

    int8_t<s(1)(1)(0)>[T] *pm_i8<s(1)(1)(0)>[&];
    uint8_t<s(1)(1)(0)>[T] *pm_ui8<s(1)(1)(0)>[&];
    const int8_t<s(1)(1)(0)>[T] *pm_ci8<s(1)(1)(0)>[&];
    const uint8_t<s(1)(1)(0)>[T] *pm_cui8<s(1)(1)(0)>[&];
    int16_t<s(1)(1)(0)>[T] *pm_i16<s(1)(1)(0)>[&];
    uint16_t<s(1)(1)(0)>[T] *pm_ui16<s(1)(1)(0)>[&];
    const int16_t<s(1)(1)(0)>[T] *pm_ci16<s(1)(1)(0)>[&];
    const uint16_t<s(1)(1)(0)>[T] *pm_cui16<s(1)(1)(0)>[&];
    int32_t<s(1)(1)(0)>[T] *pm_i32<s(1)(1)(0)>[&];
    uint32_t<s(1)(1)(0)>[T] *pm_ui32<s(1)(1)(0)>[&];
    const int32_t<s(1)(1)(0)>[T] *pm_ci32<s(1)(1)(0)>[&];
    const uint32_t<s(1)(1)(0)>[T] *pm_cui32<s(1)(1)(0)>[&];








    } pointer_mix_t<s(0)(0)(0)>[&];(D1:pointer_mix_t:1)[[TYPENAME:pointer_mix_t]]













 





 














typedef long	fd_mask<s(0)(0)(0)>[&];(D1:fd_mask:1)[[TYPENAME:fd_mask]]





typedef	struct fd_set<s(1)(0)(1)>[&]
    {
    fd_mask<s(1)(1)(0)>[T]	fds_bits<s(1)(1)(0)>[&][((unsigned int)((( 2048  )+((  (sizeof(fd_mask<s(1)(1)(0)>[T]) * 8 )  )-1)))/(unsigned int)(  (sizeof(fd_mask<s(1)(1)(0)>[T]) * 8 )  )) ];
    } fd_set<s(0)(0)(0)>[&];(D1:fd_set:1)[[TYPENAME:fd_set]]







 

typedef	unsigned char	u_char<s(0)(0)(0)>[&];(D1:u_char:1)[[TYPENAME:u_char]]
typedef	unsigned short	u_short<s(0)(0)(0)>[&];(D1:u_short:1)[[TYPENAME:u_short]]
typedef	unsigned int	u_int<s(0)(0)(0)>[&];(D1:u_int:1)[[TYPENAME:u_int]]
typedef	unsigned long	u_long<s(0)(0)(0)>[&];(D1:u_long:1)[[TYPENAME:u_long]]
typedef	unsigned short	ushort<s(0)(0)(0)>[&];(D1:ushort:1)[[TYPENAME:ushort]]


 

typedef char		TBOOL<s(0)(0)(0)>[&];(D1:TBOOL:1)[[TYPENAME:TBOOL]]		 


 
























typedef unsigned long INSTR<s(0)(0)(0)>[&];(D1:INSTR:1)[[TYPENAME:INSTR]]             
















 
















typedef unsigned int HANDLE<s(0)(0)(0)>[&];(D1:HANDLE:1)[[TYPENAME:HANDLE]]


 



typedef unsigned char UINT1<s(0)(0)(0)>[&];(D1:UINT1:1)[[TYPENAME:UINT1]]

typedef char INT1<s(0)(0)(0)>[&];(D1:INT1:1)[[TYPENAME:INT1]]

typedef unsigned short UINT2<s(0)(0)(0)>[&];(D1:UINT2:1)[[TYPENAME:UINT2]]

typedef short INT2<s(0)(0)(0)>[&];(D1:INT2:1)[[TYPENAME:INT2]]

typedef unsigned long UINT4<s(0)(0)(0)>[&];(D1:UINT4:1)[[TYPENAME:UINT4]]

typedef long INT4<s(0)(0)(0)>[&];(D1:INT4:1)[[TYPENAME:INT4]]

typedef unsigned short BOOLEAN<s(0)(0)(0)>[&];(D1:BOOLEAN:1)[[TYPENAME:BOOLEAN]]






 





typedef enum 
{
    DEV_NOT_INIT<s(0)(0)(0)>[&],
    DEV_FAIL<s(0)(0)(0)>[&],
    DEV_OK<s(0)(0)(0)>[&],
    DEV_MAX<s(0)(0)(0)>[&]
}DEVICE_STATUS_Tval<s(0)(0)(0)>[&];(D1:DEVICE_STATUS_Tval:1)[[TYPENAME:DEVICE_STATUS_Tval]]





 
typedef UINT32<s(0)(0)(0)>[T] INSTANCE_T<s(0)(0)(0)>[&];(D1:INSTANCE_T:1)[[TYPENAME:INSTANCE_T]] 

 

 














































typedef enum
{
    SLOT_NUMBER_NONE<s(0)(0)(0)>[&]    = 0,
    SLOT_NUMBER_LC1<s(0)(0)(0)>[&]     = 1,
    SLOT_NUMBER_LC2<s(0)(0)(0)>[&]     = 2,
    SLOT_NUMBER_LC3<s(0)(0)(0)>[&]     = 3,
    SLOT_NUMBER_LC4<s(0)(0)(0)>[&]     = 4,
    SLOT_NUMBER_LC5<s(0)(0)(0)>[&]     = 5,
    SLOT_NUMBER_LC6<s(0)(0)(0)>[&]     = 6,
    SLOT_NUMBER_HOCC1<s(0)(0)(0)>[&]   = 7,
    SLOT_NUMBER_HOCC2<s(0)(0)(0)>[&]   = 8,
    SLOT_NUMBER_SFC1<s(0)(0)(0)>[&]    = 9,
    SLOT_NUMBER_SFC2<s(0)(0)(0)>[&]    = 10,
    SLOT_NUMBER_CE1<s(0)(0)(0)>[&]     = 11,
    SLOT_NUMBER_CE2<s(0)(0)(0)>[&]     = 12,
    SLOT_NUMBER_CE3<s(0)(0)(0)>[&]     = 13,
    SLOT_NUMBER_CE4<s(0)(0)(0)>[&]     = 14,
    SLOT_NUMBER_CE5<s(0)(0)(0)>[&]     = 15,
    SLOT_NUMBER_CE6<s(0)(0)(0)>[&]     = 16,
    SLOT_NUMBER_SC1<s(0)(0)(0)>[&]     = 17,
    SLOT_NUMBER_SC2<s(0)(0)(0)>[&]     = 18,  
    SLOT_NUMBER_SI<s(0)(0)(0)>[&]      = 19,
    SLOT_NUMBER_SFM1<s(0)(0)(0)>[&]    = 20,
    SLOT_NUMBER_SFM2<s(0)(0)(0)>[&]    = 21,
    SLOT_NUMBER_IO1<s(0)(0)(0)>[&]     = 22,
    SLOT_NUMBER_IO2<s(0)(0)(0)>[&]     = 23,
    SLOT_NUMBER_IO3<s(0)(0)(0)>[&]     = 24,
    SLOT_NUMBER_IO4<s(0)(0)(0)>[&]     = 25,
    SLOT_NUMBER_IO5<s(0)(0)(0)>[&]     = 26,
    SLOT_NUMBER_IO6<s(0)(0)(0)>[&]     = 27,
    SLOT_NUMBER_IO7<s(0)(0)(0)>[&]     = 28,
    SLOT_NUMBER_IO8<s(0)(0)(0)>[&]     = 29,
    SLOT_NUMBER_IO9<s(0)(0)(0)>[&]     = 30,
    SLOT_NUMBER_IO10<s(0)(0)(0)>[&]    = 31,
    SLOT_NUMBER_IO11<s(0)(0)(0)>[&]    = 32,
    SLOT_NUMBER_IO12<s(0)(0)(0)>[&]    = 33,
    SLOT_NUMBER_IO13<s(0)(0)(0)>[&]    = 34,
    SLOT_NUMBER_IO14<s(0)(0)(0)>[&]    = 35,
    SLOT_NUMBER_IO15<s(0)(0)(0)>[&]    = 36,
    SLOT_NUMBER_PWR1<s(0)(0)(0)>[&]    = 37,
    SLOT_NUMBER_PWR2<s(0)(0)(0)>[&]    = 38,
    SLOT_NUMBER_FAN1<s(0)(0)(0)>[&]    = 39,
    SLOT_NUMBER_FAN2<s(0)(0)(0)>[&]    = 40,

    SLOT_NUMBER_MAX<s(0)(0)(0)>[&]     = 40
}SLOT_NUMBER_T<s(0)(0)(0)>[&];(D1:SLOT_NUMBER_T:1)[[TYPENAME:SLOT_NUMBER_T]]

 




 




 




 




 




typedef enum 
{
    CARDTYPE_UNKNOWN<s(0)(0)(0)>[&] = 0,
    
     
    CARDTYPE_SI<s(0)(0)(0)>[&],              
    CARDTYPE_SC<s(0)(0)(0)>[&],              
    CARDTYPE_HOCC<s(0)(0)(0)>[&],            
    CARDTYPE_LOCC<s(0)(0)(0)>[&],            
    CARDTYPE_LOCC_PMC<s(0)(0)(0)>[&],        
    CARDTYPE_LOCC_FPGA<s(0)(0)(0)>[&],       
    CARDTYPE_1_STM256<s(0)(0)(0)>[&],        
    CARDTYPE_2_STM64<s(0)(0)(0)>[&],         
     

    CARDTYPE_1_STM64<s(0)(0)(0)>[&],         
    CARDTYPE_8_STM16<s(0)(0)(0)>[&],         
    CARDTYPE_4_STM16<s(0)(0)(0)>[&],         
    CARDTYPE_2_STM16<s(0)(0)(0)>[&],         
    CARDTYPE_8_STM4<s(0)(0)(0)>[&],          
    CARDTYPE_8_STM1O<s(0)(0)(0)>[&],         
    CARDTYPE_8_STM1E_FUNC<s(0)(0)(0)>[&],    
    CARDTYPE_8_STM1E_CONN<s(0)(0)(0)>[&],    
    CARDTYPE_2_STM64M<s(0)(0)(0)>[&],        
    CARDTYPE_8_STM16M<s(0)(0)(0)>[&],        
    CARDTYPE_16_STM4M<s(0)(0)(0)>[&],        
    CARDTYPE_16_STM1EM<s(0)(0)(0)>[&],       
    CARDTYPE_16_STM1E_CONN<s(0)(0)(0)>[&],   
    CARDTYPE_12_E3DS3_FUNC<s(0)(0)(0)>[&],   
    CARDTYPE_12_E3DS3_CONN<s(0)(0)(0)>[&],   
    CARDTYPE_126_E1_FUNC<s(0)(0)(0)>[&],     
    CARDTYPE_126_E1_CONN<s(0)(0)(0)>[&],     
    CARDTYPE_13DBM_OA<s(0)(0)(0)>[&],        
    CARDTYPE_15DBM_OA<s(0)(0)(0)>[&],        
    CARDTYPE_18DBM_OA<s(0)(0)(0)>[&],        
    CARDTYPE_20DB_OA<s(0)(0)(0)>[&],         
    CARDTYPE_2_OTU<s(0)(0)(0)>[&],           
    CARDTYPE_1_OTU2<s(0)(0)(0)>[&],          
    
    CARDTYPE_SDH<s(0)(0)(0)>[&],             
    CARDTYPE_PDH<s(0)(0)(0)>[&],             
    CARDTYPE_CC<s(0)(0)(0)>[&],              
    CARDTYPE_DATA<s(0)(0)(0)>[&],            
    CARDTYPE_DATA_L2<s(0)(0)(0)>[&],         
    CARDTYPE_RPR<s(0)(0)(0)>[&],             
    CARDTYPE_OA<s(0)(0)(0)>[&],              
    CARDTYPE_OTU<s(0)(0)(0)>[&],             
    CARDTYPE_MAGUS<s(0)(0)(0)>[&],           
    
    CARDTYPE_FAN<s(0)(0)(0)>[&],             
    CARDTYPE_PWR<s(0)(0)(0)>[&],             
    
    CARD_TYPE_MAX<s(0)(0)(0)>[&]
} CARDTYPE_T<s(0)(0)(0)>[&];(D1:CARDTYPE_T:1)[[TYPENAME:CARDTYPE_T]]

typedef UINT32<s(0)(0)(0)>[T] ENTITY_T<s(0)(0)(0)>[&];(D1:ENTITY_T:1)[[TYPENAME:ENTITY_T]]

typedef enum
{
    ENTITY_STATE_EMPTY<s(0)(0)(0)>[&]  = 0,
    ENTITY_STATE_INIT<s(0)(0)(0)>[&]   = 1,
    ENTITY_STATE_ACTIVE<s(0)(0)(0)>[&] = 2
} ENTITY_STATE_T<s(0)(0)(0)>[&];(D1:ENTITY_STATE_T:1)[[TYPENAME:ENTITY_STATE_T]]

typedef struct
{
    ENTITY_T<s(1)(1)(0)>[T]   entity<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]       bPresent<s(1)(1)(0)>[&];
    CARDTYPE_T<s(1)(1)(0)>[T] cardType<s(1)(1)(0)>[&];
}ENTITY_INFO_T<s(0)(0)(0)>[&];(D1:ENTITY_INFO_T:1)[[TYPENAME:ENTITY_INFO_T]]

typedef int BOARD_OPTION_T<s(0)(0)(0)>[&];(D1:BOARD_OPTION_T:1)[[TYPENAME:BOARD_OPTION_T]]

 



 











 




 
























 


























































































 

























typedef enum 
{
    PB_OK<s(0)(0)(0)>[&] = 0,                       
    PB_ERROR<s(0)(0)(0)>[&],                
    PB_ERR_PARAM<s(0)(0)(0)>[&],            
    PB_ERR_NAPPL<s(0)(0)(0)>[&],            
    PB_ERR_NOTIMP<s(0)(0)(0)>[&],           
    PB_ERR_CONFLICT<s(0)(0)(0)>[&],         
    PB_ERR_TIMEOUT<s(0)(0)(0)>[&],          
    PB_ERR_TOOBIG<s(0)(0)(0)>[&],           
    PB_ERR_TOOMUCH<s(0)(0)(0)>[&],          
    PB_ERR_WRONGCALL<s(0)(0)(0)>[&],        
    PB_ERR_VERSION<s(0)(0)(0)>[&],          
    PB_ERR_NOSUCH<s(0)(0)(0)>[&],           
    PB_ERR_HARDWARE<s(0)(0)(0)>[&],         
    PB_ERR_MEMORY<s(0)(0)(0)>[&],           
    PB_ERR_BUSY<s(0)(0)(0)>[&],             
    PB_ERR_DRIVER_ERROR<s(0)(0)(0)>[&],     
    PB_ERR_HANDLE<s(0)(0)(0)>[&],           
    PB_ERR_BLOCK<s(0)(0)(0)>[&],            
    PB_ERR_STATE<s(0)(0)(0)>[&],            
    PB_ERR_COMM<s(0)(0)(0)>[&],             
    PB_ERR_MAX<s(0)(0)(0)>[&]
} PB_ERROR_CODE_T<s(0)(0)(0)>[&];(D1:PB_ERROR_CODE_T:1)[[TYPENAME:PB_ERROR_CODE_T]]

 

 
static __inline const char *CTD_StrError<s(0)(0)(0)>[&](int code<s(0)(0)(0)>[&])
{
    switch (code<s(0)(0)(0)>[&])
    {
        case PB_OK<s(0)(0)(0)>[&]:                    
            return "No error";
            
        case PB_ERROR<s(0)(0)(0)>[&]:                
            return "Unknown Error";
            
        case PB_ERR_PARAM<s(0)(0)(0)>[&]:            
            return "Incorrect Parameter";
            
        case PB_ERR_NAPPL<s(0)(0)(0)>[&]:            
            return "Not applicable";
            
        case PB_ERR_NOTIMP<s(0)(0)(0)>[&]:            
            return "Not Implemented";
            
        case PB_ERR_CONFLICT<s(0)(0)(0)>[&]:        
            return "Conflict to Exist Element";
            
        case PB_ERR_TIMEOUT<s(0)(0)(0)>[&]:        
            return "Operation Timeout";
            
        case PB_ERR_TOOBIG<s(0)(0)(0)>[&]:            
            return "Too Big";
            
        case PB_ERR_TOOMUCH<s(0)(0)(0)>[&]:        
            return "Too Many Elements";
            
        case PB_ERR_WRONGCALL<s(0)(0)(0)>[&]:        
            return "Incorrect Call";
            
        case PB_ERR_VERSION<s(0)(0)(0)>[&]:        
            return "version Mismatch";
            
        case PB_ERR_NOSUCH<s(0)(0)(0)>[&]:            
            return "No Such Element";
            
        case PB_ERR_HARDWARE<s(0)(0)(0)>[&]:        
            return "Hardware Error";
            
        case PB_ERR_MEMORY<s(0)(0)(0)>[&]:            
            return "Out of Memory";
            
        case PB_ERR_BUSY<s(0)(0)(0)>[&]:            
            return "Busy";
            
        case PB_ERR_DRIVER_ERROR<s(0)(0)(0)>[&]:    
            return "Driver Error";
            
        case PB_ERR_HANDLE<s(0)(0)(0)>[&]:            
            return "Invalid Handle";
            
        case PB_ERR_BLOCK<s(0)(0)(0)>[&]:            
            return "Blocked";
            
        case PB_ERR_STATE<s(0)(0)(0)>[&]:            
            return "Invalid state/status";
            
        case PB_ERR_COMM<s(0)(0)(0)>[&]:            
            return "Communication error";
            
        default: 
            return "Unknown error";
    }
}







 
















 






















 























 















































 

 

 




































 

 

 










































































 




 




 





 




 





 









 







 






 




























 

























 












 





 

 

 

 


















 









 
















 



















 

 

 

































































































 












































































































































 












 






 











 

typedef enum		 
    {
    SEM_EMPTY<s(0)(0)(0)>[&],			 
    SEM_FULL<s(0)(0)(0)>[&]			 
    } SEM_B_STATE<s(0)(0)(0)>[&];(D1:SEM_B_STATE:1)[[TYPENAME:SEM_B_STATE]]

typedef struct semaphore<s(1)(0)(1)>[&] *SEM_ID<s(0)(0)(0)>[&];(D1:SEM_ID:1)[[TYPENAME:SEM_ID]]

 



extern STATUS<s(0)(0)(0)>[T] 	semGive<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T] 	semTake<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern STATUS<s(0)(0)(0)>[T] 	semFlush<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T] 	semDelete<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern int 	semInfo<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int idList<s(0)(0)(0)>[&][], int maxTasks<s(0)(0)(0)>[&]);(D1:maxTasks:0)
extern STATUS<s(0)(0)(0)>[T] 	semBLibInit<s(0)(0)(0)>[&] (void);(D1:semBLibInit:0)
extern SEM_ID<s(0)(0)(0)>[T] 	semBCreate<s(0)(0)(0)>[&] (int options<s(0)(0)(0)>[&], SEM_B_STATE<s(0)(0)(0)>[T] initialState<s(0)(0)(0)>[&]);(D1:initialState:0)
extern STATUS<s(0)(0)(0)>[T] 	semCLibInit<s(0)(0)(0)>[&] (void);(D1:semCLibInit:0)
extern SEM_ID<s(0)(0)(0)>[T] 	semCCreate<s(0)(0)(0)>[&] (int options<s(0)(0)(0)>[&], int initialCount<s(0)(0)(0)>[&]);(D1:initialCount:0)
extern STATUS<s(0)(0)(0)>[T] 	semMLibInit<s(0)(0)(0)>[&] (void);(D1:semMLibInit:0)
extern SEM_ID<s(0)(0)(0)>[T] 	semMCreate<s(0)(0)(0)>[&] (int options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T]   semMGiveForce<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T] 	semOLibInit<s(0)(0)(0)>[&] (void);(D1:semOLibInit:0)
extern SEM_ID<s(0)(0)(0)>[T] 	semCreate<s(0)(0)(0)>[&] (void);(D1:semCreate:0)
extern void 	semShowInit<s(0)(0)(0)>[&] (void);(D1:semShowInit:0)
extern STATUS<s(0)(0)(0)>[T] 	semShow<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&]);(D1:level:0)














 



 
 




















 



 





 










 



 
 
    typedef struct {
        unsigned int flags<s(1)(1)(0)>[&][4];   
    } MIB_Flags_t<s(0)(0)(0)>[&];(D1:MIB_Flags_t:1)[[TYPENAME:MIB_Flags_t]]


 
    typedef struct {
        int oid_length<s(1)(1)(0)>[&];
        int oid_data<s(1)(1)(0)>[&][30 ];
    } OIDValue<s(0)(0)(0)>[&];(D1:OIDValue:1)[[TYPENAME:OIDValue]]

 
    typedef struct {
        int index<s(1)(1)(0)>[&];               
        int oid_length<s(1)(1)(0)>[&];
        int oid_data<s(1)(1)(0)>[&][30 ];    
    } MIBDid_t<s(0)(0)(0)>[&];(D1:MIBDid_t:1)[[TYPENAME:MIBDid_t]]
    typedef MIBDid_t<s(0)(0)(0)>[T] *MIBDID<s(0)(0)(0)>[&];(D1:MIBDID:1)[[TYPENAME:MIBDID]]    

 
    typedef struct {
        unsigned short year<s(1)(1)(0)>[&];
        unsigned char month<s(1)(1)(0)>[&];
        unsigned char day<s(1)(1)(0)>[&];
        unsigned char hour<s(1)(1)(0)>[&];
        unsigned char min<s(1)(1)(0)>[&];
        unsigned char sec<s(1)(1)(0)>[&];
        unsigned char dec_sec<s(1)(1)(0)>[&];
        unsigned char dir_utc<s(1)(1)(0)>[&];
        unsigned char hrs_utc<s(1)(1)(0)>[&];
        unsigned char min_utc<s(1)(1)(0)>[&];
        unsigned char padd<s(1)(1)(0)>[&];      
    } DateTime<s(0)(0)(0)>[&];(D1:DateTime:1)[[TYPENAME:DateTime]]


 



 





















 





















 
    void MibRegisterCallback<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *));(D1:MIBDID:0)
    void MibRegisterCallbackCheck<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr_check<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *));(D1:MIBDID:0)
    void MibRegisterCallbackPartial<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr_partial<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *), MIB_Flags_t<s(0)(0)(0)>[T]);(D1:MIB_Flags_t:0)

 
    void MibUnRegisterCallback<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *));(D1:MIBDID:0)
    void MibUnRegisterCallbackCheck<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr_check<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *));(D1:MIBDID:0)
    void MibUnRegisterCallbackPartial<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr_partial<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T], void *, int, void *));(D1:MIBDID:0)

 
    int MibLoadAFileByDid<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&]);(D1:did:0)

 
    int MibLoadTablesSequence<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] * list<s(0)(0)(0)>[&], int num_entries<s(0)(0)(0)>[&]);(D1:num_entries:0)

 
    void MibTableChangedFlag<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&]);(D1:did:0)
    void MibTblGrpChanged<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&]);(D1:type:0)
	void MibTblGrpChangedMirrored<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&], int saveFlag<s(0)(0)(0)>[&]);(D1:saveFlag:0)

 
    int MibGroupRegisterSema<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], SEM_ID<s(0)(0)(0)>[T] sema<s(0)(0)(0)>[&]);(D1:sema:0)

 
    int MibGroupRegisterRemote<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&], MIB_Flags_t<s(0)(0)(0)>[T] flags<s(0)(0)(0)>[&]));(D1:flags:0)

 
    int MibRegisterSlotFunc<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int (*fptr<s(0)(0)(0)>[&]) (MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&]), int distributed<s(0)(0)(0)>[&], int phys_log<s(0)(0)(0)>[&]);(D1:phys_log:0)

 
 
    int MibSetRemoteIntegerData<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int value<s(0)(0)(0)>[&]);(D1:value:0)
    int MibGetRemoteIntegerData<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&]);(D1:did:0)

    int MibSetRemoteChildData<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int oid<s(0)(0)(0)>[&], int value<s(0)(0)(0)>[&]);(D1:value:0)
    int MibGetRemoteChildData<s(0)(0)(0)>[&](MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], int oid<s(0)(0)(0)>[&]);(D1:oid:0)

 
    int MibAccessHandle<s(0)(0)(0)>[&](int type<s(0)(0)(0)>[&], MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&], int row_len<s(0)(0)(0)>[&], MIB_Flags_t<s(0)(0)(0)>[T] flags<s(0)(0)(0)>[&], int slot<s(0)(0)(0)>[&]);(D1:slot:0)
    int MibAccessHandle_NCB<s(0)(0)(0)>[&](int type<s(0)(0)(0)>[&], MIBDID<s(0)(0)(0)>[T] did<s(0)(0)(0)>[&], void *row<s(0)(0)(0)>[&], int row_len<s(0)(0)(0)>[&], MIB_Flags_t<s(0)(0)(0)>[T] flags<s(0)(0)(0)>[&], int slot<s(0)(0)(0)>[&]);(D1:slot:0)
 
void setMibIdApplNo<s(0)(0)(0)>[&](int mibIdBef<s(0)(0)(0)>[&],  int applNumberBef<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&]);(D1:type:0)
void clrMibIdApplNo<s(0)(0)(0)>[&](int mibIdAft<s(0)(0)(0)>[&], int applNumberAft<s(0)(0)(0)>[&],   int type<s(0)(0)(0)>[&]);(D1:type:0)

int MibFlagsCheck<s(0)(0)(0)>[&](MIB_Flags_t<s(0)(0)(0)>[T] flags_setpartial<s(0)(0)(0)>[&], MIB_Flags_t<s(0)(0)(0)>[T] flags_callback<s(0)(0)(0)>[&]);(D1:flags_callback:0)

int MibSetCleanFlagToFlash<s(0)(0)(0)>[&](int TLVtype<s(0)(0)(0)>[&], int delFlag<s(0)(0)(0)>[&]);(D1:delFlag:0)

 
int MibGetActiveScSlotNumber<s(0)(0)(0)>[&](int *pSlotNumber<s(0)(0)(0)>[&]);(D1:pSlotNumber:0)

    extern MIB_Flags_t<s(0)(0)(0)>[T] mibDefFlags<s(0)(0)(0)>[&];(D1:mibDefFlags:0)









typedef enum {
	PbApplState_initial<s(0)(0)(0)>[&] = 0,
	PbApplState_ready<s(0)(0)(0)>[&] = 1,
	PbApplState_active<s(0)(0)(0)>[&] = 2,
	PbApplState_standby<s(0)(0)(0)>[&] = 3,
	PbApplState_failed<s(0)(0)(0)>[&] = 4,
	PbApplState_diagnostic<s(0)(0)(0)>[&] = 5
} PbApplState_Tval<s(0)(0)(0)>[&];(D1:PbApplState_Tval:1)[[TYPENAME:PbApplState_Tval]]

typedef enum {
	PbSNCPSwitchReason_clearcmd<s(0)(0)(0)>[&] = 1,
	PbSNCPSwitchReason_lpcmd<s(0)(0)(0)>[&] = 2,
	PbSNCPSwitchReason_forcedswitch<s(0)(0)(0)>[&] = 3,
	PbSNCPSwitchReason_manualswitch<s(0)(0)(0)>[&] = 4,
	PbSNCPSwitchReason_signalfail<s(0)(0)(0)>[&] = 5,
	PbSNCPSwitchReason_signalfailclear<s(0)(0)(0)>[&] = 6,
	PbSNCPSwitchReason_noswitch<s(0)(0)(0)>[&] = 7,
	PbSNCPSwitchReason_signaldeg<s(0)(0)(0)>[&] = 8,
	PbSNCPSwitchReason_signalnormal<s(0)(0)(0)>[&] = 9
} PbSNCPSwitchReason_Tval<s(0)(0)(0)>[&];(D1:PbSNCPSwitchReason_Tval:1)[[TYPENAME:PbSNCPSwitchReason_Tval]]

typedef enum {
	PbTMSSquelchMode_clear<s(0)(0)(0)>[&] = 0,
	PbTMSSquelchMode_forceAIS<s(0)(0)(0)>[&] = 1,
	PbTMSSquelchMode_forceDNU<s(0)(0)(0)>[&] = 2,
	PbTMSSquelchMode_forceShutdown<s(0)(0)(0)>[&] = 3
} PbTMSSquelchMode_Tval<s(0)(0)(0)>[&];(D1:PbTMSSquelchMode_Tval:1)[[TYPENAME:PbTMSSquelchMode_Tval]]

typedef enum {
	EventCategory_management<s(0)(0)(0)>[&] = 1,
	EventCategory_software<s(0)(0)(0)>[&] = 2,
	EventCategory_hardware<s(0)(0)(0)>[&] = 3,
	EventCategory_indeterminate<s(0)(0)(0)>[&] = 4
} EventCategory_Tval<s(0)(0)(0)>[&];(D1:EventCategory_Tval:1)[[TYPENAME:EventCategory_Tval]]

typedef enum {
	PbXcFrom_cli<s(0)(0)(0)>[&] = 1,
	PbXcFrom_ems<s(0)(0)(0)>[&] = 2,
	PbXcFrom_snm<s(0)(0)(0)>[&] = 3,
	PbXcFrom_gmpls<s(0)(0)(0)>[&] = 4,
	PbXcFrom_rpr<s(0)(0)(0)>[&] = 5,
	PbXcFrom_sncp<s(0)(0)(0)>[&] = 6
} PbXcFrom_Tval<s(0)(0)(0)>[&];(D1:PbXcFrom_Tval:1)[[TYPENAME:PbXcFrom_Tval]]

typedef enum {
	RprTpNumberType_hex11110000<s(0)(0)(0)>[&] = 286326784,
	RprTpNumberType_hex11120000<s(0)(0)(0)>[&] = 286392320,
	RprTpNumberType_hex11130000<s(0)(0)(0)>[&] = 286457856,
	RprTpNumberType_hex11140000<s(0)(0)(0)>[&] = 286523392,
	RprTpNumberType_hex11210000<s(0)(0)(0)>[&] = 287375360,
	RprTpNumberType_hex11220000<s(0)(0)(0)>[&] = 287440896,
	RprTpNumberType_hex11230000<s(0)(0)(0)>[&] = 287506432,
	RprTpNumberType_hex11240000<s(0)(0)(0)>[&] = 287571968,
	RprTpNumberType_hex11310000<s(0)(0)(0)>[&] = 288423936,
	RprTpNumberType_hex11320000<s(0)(0)(0)>[&] = 288489472,
	RprTpNumberType_hex11330000<s(0)(0)(0)>[&] = 288555008,
	RprTpNumberType_hex11340000<s(0)(0)(0)>[&] = 288620544,
	RprTpNumberType_hex11410000<s(0)(0)(0)>[&] = 289472512,
	RprTpNumberType_hex11420000<s(0)(0)(0)>[&] = 289538048,
	RprTpNumberType_hex11430000<s(0)(0)(0)>[&] = 289603584,
	RprTpNumberType_hex11440000<s(0)(0)(0)>[&] = 289669120
} RprTpNumberType_Tval<s(0)(0)(0)>[&];(D1:RprTpNumberType_Tval:1)[[TYPENAME:RprTpNumberType_Tval]]

typedef enum {
	RprSvcFailReason_noerr<s(0)(0)(0)>[&] = 0,
	RprSvcFailReason_flowlimit<s(0)(0)(0)>[&] = 1,
	RprSvcFailReason_cannotadd<s(0)(0)(0)>[&] = 2,
	RprSvcFailReason_cannotdel<s(0)(0)(0)>[&] = 3,
	RprSvcFailReason_cannotreach<s(0)(0)(0)>[&] = 4,
	RprSvcFailReason_bandwidth<s(0)(0)(0)>[&] = 5,
	RprSvcFailReason_svctypeconflict<s(0)(0)(0)>[&] = 6,
	RprSvcFailReason_macconflict<s(0)(0)(0)>[&] = 7,
	RprSvcFailReason_cosconflict<s(0)(0)(0)>[&] = 8,
	RprSvcFailReason_autoringenconflict<s(0)(0)(0)>[&] = 9,
	RprSvcFailReason_ringselconflict<s(0)(0)(0)>[&] = 10,
	RprSvcFailReason_wrapenconflict<s(0)(0)(0)>[&] = 11,
	RprSvcFailReason_svcmodeconflict<s(0)(0)(0)>[&] = 12,
	RprSvcFailReason_ttlmodeconflict<s(0)(0)(0)>[&] = 13,
	RprSvcFailReason_manttlvalueconflict<s(0)(0)(0)>[&] = 14,
	RprSvcFailReason_activeconflict<s(0)(0)(0)>[&] = 15,
	RprSvcFailReason_inactive<s(0)(0)(0)>[&] = 16,
	RprSvcFailReason_other<s(0)(0)(0)>[&] = 17
} RprSvcFailReason_Tval<s(0)(0)(0)>[&];(D1:RprSvcFailReason_Tval:1)[[TYPENAME:RprSvcFailReason_Tval]]

typedef enum {
	PbMsspAgentState_init<s(0)(0)(0)>[&] = 0,
	PbMsspAgentState_ready<s(0)(0)(0)>[&] = 1,
	PbMsspAgentState_suspend<s(0)(0)(0)>[&] = 2
} PbMsspAgentState_Tval<s(0)(0)(0)>[&];(D1:PbMsspAgentState_Tval:1)[[TYPENAME:PbMsspAgentState_Tval]]

typedef enum {
	PbPmReportResp_noerr<s(0)(0)(0)>[&] = 0,
	PbPmReportResp_resource<s(0)(0)(0)>[&] = 1,
	PbPmReportResp_invalid<s(0)(0)(0)>[&] = 2,
	PbPmReportResp_conflict<s(0)(0)(0)>[&] = 3
} PbPmReportResp_Tval<s(0)(0)(0)>[&];(D1:PbPmReportResp_Tval:1)[[TYPENAME:PbPmReportResp_Tval]]

typedef enum {
	PbMsspLineRequest_signalDegradeRing<s(0)(0)(0)>[&] = 8,
	PbMsspLineRequest_signalFailRing<s(0)(0)(0)>[&] = 11,
	PbMsspLineRequest_clear<s(0)(0)(0)>[&] = 21
} PbMsspLineRequest_Tval<s(0)(0)(0)>[&];(D1:PbMsspLineRequest_Tval:1)[[TYPENAME:PbMsspLineRequest_Tval]]

typedef enum {
	PbEthInterfaceType_lan<s(0)(0)(0)>[&] = 1,
	PbEthInterfaceType_wan<s(0)(0)(0)>[&] = 2,
	PbEthInterfaceType_trunk<s(0)(0)(0)>[&] = 3
} PbEthInterfaceType_Tval<s(0)(0)(0)>[&];(D1:PbEthInterfaceType_Tval:1)[[TYPENAME:PbEthInterfaceType_Tval]]

typedef enum {
	PbTMSSetSa_sa4<s(0)(0)(0)>[&] = 4,
	PbTMSSetSa_sa5<s(0)(0)(0)>[&] = 5,
	PbTMSSetSa_sa6<s(0)(0)(0)>[&] = 6,
	PbTMSSetSa_sa7<s(0)(0)(0)>[&] = 7,
	PbTMSSetSa_sa8<s(0)(0)(0)>[&] = 8
} PbTMSSetSa_Tval<s(0)(0)(0)>[&];(D1:PbTMSSetSa_Tval:1)[[TYPENAME:PbTMSSetSa_Tval]]

typedef enum {
	RprSpan_east<s(0)(0)(0)>[&] = 1,
	RprSpan_west<s(0)(0)(0)>[&] = 2
} RprSpan_Tval<s(0)(0)(0)>[&];(D1:RprSpan_Tval:1)[[TYPENAME:RprSpan_Tval]]

typedef enum {
	PbLedColor_off<s(0)(0)(0)>[&] = 0,
	PbLedColor_green<s(0)(0)(0)>[&] = 1,
	PbLedColor_yellow<s(0)(0)(0)>[&] = 2,
	PbLedColor_red<s(0)(0)(0)>[&] = 3,
	PbLedColor_orange<s(0)(0)(0)>[&] = 4,
	PbLedColor_blinkingGreen<s(0)(0)(0)>[&] = 5,
	PbLedColor_blinkingYellow<s(0)(0)(0)>[&] = 6,
	PbLedColor_blinkingRed<s(0)(0)(0)>[&] = 7,
	PbLedColor_blinkingOrange<s(0)(0)(0)>[&] = 8
} PbLedColor_Tval<s(0)(0)(0)>[&];(D1:PbLedColor_Tval:1)[[TYPENAME:PbLedColor_Tval]]

typedef enum {
	PbSdhHpSignalLabel_unequipped<s(0)(0)(0)>[&] = 0,
	PbSdhHpSignalLabel_reserved<s(0)(0)(0)>[&] = 1,
	PbSdhHpSignalLabel_tugstructure<s(0)(0)(0)>[&] = 2,
	PbSdhHpSignalLabel_lockedtu<s(0)(0)(0)>[&] = 3,
	PbSdhHpSignalLabel_asynchronousvc3<s(0)(0)(0)>[&] = 4,
	PbSdhHpSignalLabel_asynchronousvc4<s(0)(0)(0)>[&] = 18,
	PbSdhHpSignalLabel_atm<s(0)(0)(0)>[&] = 19,
	PbSdhHpSignalLabel_mandqdb<s(0)(0)(0)>[&] = 20,
	PbSdhHpSignalLabel_fddi<s(0)(0)(0)>[&] = 21,
	PbSdhHpSignalLabel_hdlcppp<s(0)(0)(0)>[&] = 22,
	PbSdhHpSignalLabel_sdlsss<s(0)(0)(0)>[&] = 23,
	PbSdhHpSignalLabel_hdlclaps<s(0)(0)(0)>[&] = 24,
	PbSdhHpSignalLabel_sdlsrs<s(0)(0)(0)>[&] = 25,
	PbSdhHpSignalLabel_gig10<s(0)(0)(0)>[&] = 26,
	PbSdhHpSignalLabel_gfp<s(0)(0)(0)>[&] = 27,
	PbSdhHpSignalLabel_test<s(0)(0)(0)>[&] = 254,
	PbSdhHpSignalLabel_ais<s(0)(0)(0)>[&] = 255
} PbSdhHpSignalLabel_Tval<s(0)(0)(0)>[&];(D1:PbSdhHpSignalLabel_Tval:1)[[TYPENAME:PbSdhHpSignalLabel_Tval]]

typedef enum {
	PbTMSQLMode_passThrough<s(0)(0)(0)>[&] = 1,
	PbTMSQLMode_overWrite<s(0)(0)(0)>[&] = 2
} PbTMSQLMode_Tval<s(0)(0)(0)>[&];(D1:PbTMSQLMode_Tval:1)[[TYPENAME:PbTMSQLMode_Tval]]

typedef enum {
	PbTMSSignalStatus_normal<s(0)(0)(0)>[&] = 1,
	PbTMSSignalStatus_failed<s(0)(0)(0)>[&] = 2,
	PbTMSSignalStatus_na<s(0)(0)(0)>[&] = 3,
	PbTMSSignalStatus_holdoff<s(0)(0)(0)>[&] = 4,
	PbTMSSignalStatus_waitToRestore<s(0)(0)(0)>[&] = 5
} PbTMSSignalStatus_Tval<s(0)(0)(0)>[&];(D1:PbTMSSignalStatus_Tval:1)[[TYPENAME:PbTMSSignalStatus_Tval]]

typedef enum {
	AlarmSeverity_notInAlarm<s(0)(0)(0)>[&] = 0,
	AlarmSeverity_warning<s(0)(0)(0)>[&] = 1,
	AlarmSeverity_minor<s(0)(0)(0)>[&] = 2,
	AlarmSeverity_major<s(0)(0)(0)>[&] = 3,
	AlarmSeverity_critical<s(0)(0)(0)>[&] = 4,
	AlarmSeverity_indeterminate<s(0)(0)(0)>[&] = 5
} AlarmSeverity_Tval<s(0)(0)(0)>[&];(D1:AlarmSeverity_Tval:1)[[TYPENAME:AlarmSeverity_Tval]]

typedef enum {
	PbTpSegment_pm<s(0)(0)(0)>[&] = 0,
	PbTpSegment_tcm1<s(0)(0)(0)>[&] = 1,
	PbTpSegment_tcm2<s(0)(0)(0)>[&] = 2,
	PbTpSegment_tcm3<s(0)(0)(0)>[&] = 3,
	PbTpSegment_tcm4<s(0)(0)(0)>[&] = 4,
	PbTpSegment_tcm5<s(0)(0)(0)>[&] = 5,
	PbTpSegment_tcm6<s(0)(0)(0)>[&] = 6,
	PbTpSegment_sm<s(0)(0)(0)>[&] = 7,
	PbTpSegment_total<s(0)(0)(0)>[&] = 8
} PbTpSegment_Tval<s(0)(0)(0)>[&];(D1:PbTpSegment_Tval:1)[[TYPENAME:PbTpSegment_Tval]]

typedef enum {
	PbRspType_failed<s(0)(0)(0)>[&] = 1,
	PbRspType_okay<s(0)(0)(0)>[&] = 2
} PbRspType_Tval<s(0)(0)(0)>[&];(D1:PbRspType_Tval:1)[[TYPENAME:PbRspType_Tval]]

typedef enum {
	PbCpgCardStatus_none<s(0)(0)(0)>[&] = 0,
	PbCpgCardStatus_normal<s(0)(0)(0)>[&] = 1,
	PbCpgCardStatus_fail<s(0)(0)(0)>[&] = 2,
	PbCpgCardStatus_absent<s(0)(0)(0)>[&] = 3
} PbCpgCardStatus_Tval<s(0)(0)(0)>[&];(D1:PbCpgCardStatus_Tval:1)[[TYPENAME:PbCpgCardStatus_Tval]]

typedef enum {
	PbOnOff_on<s(0)(0)(0)>[&] = 1,
	PbOnOff_off<s(0)(0)(0)>[&] = 2
} PbOnOff_Tval<s(0)(0)(0)>[&];(D1:PbOnOff_Tval:1)[[TYPENAME:PbOnOff_Tval]]

typedef enum {
	IANAifType_other<s(0)(0)(0)>[&] = 1,
	IANAifType_regular1822<s(0)(0)(0)>[&] = 2,
	IANAifType_hdh1822<s(0)(0)(0)>[&] = 3,
	IANAifType_ddnX25<s(0)(0)(0)>[&] = 4,
	IANAifType_rfc877x25<s(0)(0)(0)>[&] = 5,
	IANAifType_ethernetCsmacd<s(0)(0)(0)>[&] = 6,
	IANAifType_iso88023Csmacd<s(0)(0)(0)>[&] = 7,
	IANAifType_iso88024TokenBus<s(0)(0)(0)>[&] = 8,
	IANAifType_iso88025TokenRing<s(0)(0)(0)>[&] = 9,
	IANAifType_iso88026Man<s(0)(0)(0)>[&] = 10,
	IANAifType_starLan<s(0)(0)(0)>[&] = 11,
	IANAifType_proteon10Mbit<s(0)(0)(0)>[&] = 12,
	IANAifType_proteon80Mbit<s(0)(0)(0)>[&] = 13,
	IANAifType_hyperchannel<s(0)(0)(0)>[&] = 14,
	IANAifType_fddi<s(0)(0)(0)>[&] = 15,
	IANAifType_lapb<s(0)(0)(0)>[&] = 16,
	IANAifType_sdlc<s(0)(0)(0)>[&] = 17,
	IANAifType_ds1<s(0)(0)(0)>[&] = 18,
	IANAifType_e1<s(0)(0)(0)>[&] = 19,
	IANAifType_basicISDN<s(0)(0)(0)>[&] = 20,
	IANAifType_primaryISDN<s(0)(0)(0)>[&] = 21,
	IANAifType_propPointToPointSerial<s(0)(0)(0)>[&] = 22,
	IANAifType_ppp<s(0)(0)(0)>[&] = 23,
	IANAifType_softwareLoopback<s(0)(0)(0)>[&] = 24,
	IANAifType_eon<s(0)(0)(0)>[&] = 25,
	IANAifType_ethernet3Mbit<s(0)(0)(0)>[&] = 26,
	IANAifType_nsip<s(0)(0)(0)>[&] = 27,
	IANAifType_slip<s(0)(0)(0)>[&] = 28,
	IANAifType_ultra<s(0)(0)(0)>[&] = 29,
	IANAifType_ds3<s(0)(0)(0)>[&] = 30,
	IANAifType_sip<s(0)(0)(0)>[&] = 31,
	IANAifType_frameRelay<s(0)(0)(0)>[&] = 32,
	IANAifType_rs232<s(0)(0)(0)>[&] = 33,
	IANAifType_para<s(0)(0)(0)>[&] = 34,
	IANAifType_arcnet<s(0)(0)(0)>[&] = 35,
	IANAifType_arcnetPlus<s(0)(0)(0)>[&] = 36,
	IANAifType_atm<s(0)(0)(0)>[&] = 37,
	IANAifType_miox25<s(0)(0)(0)>[&] = 38,
	IANAifType_sonet<s(0)(0)(0)>[&] = 39,
	IANAifType_x25ple<s(0)(0)(0)>[&] = 40,
	IANAifType_iso88022llc<s(0)(0)(0)>[&] = 41,
	IANAifType_localTalk<s(0)(0)(0)>[&] = 42,
	IANAifType_smdsDxi<s(0)(0)(0)>[&] = 43,
	IANAifType_frameRelayService<s(0)(0)(0)>[&] = 44,
	IANAifType_v35<s(0)(0)(0)>[&] = 45,
	IANAifType_hssi<s(0)(0)(0)>[&] = 46,
	IANAifType_hippi<s(0)(0)(0)>[&] = 47,
	IANAifType_modem<s(0)(0)(0)>[&] = 48,
	IANAifType_aal5<s(0)(0)(0)>[&] = 49,
	IANAifType_sonetPath<s(0)(0)(0)>[&] = 50,
	IANAifType_sonetVT<s(0)(0)(0)>[&] = 51,
	IANAifType_smdsIcip<s(0)(0)(0)>[&] = 52,
	IANAifType_propVirtual<s(0)(0)(0)>[&] = 53,
	IANAifType_propMultiplexor<s(0)(0)(0)>[&] = 54,
	IANAifType_ieee80212<s(0)(0)(0)>[&] = 55,
	IANAifType_fibreChannel<s(0)(0)(0)>[&] = 56,
	IANAifType_hippiInterface<s(0)(0)(0)>[&] = 57,
	IANAifType_frameRelayInterconnect<s(0)(0)(0)>[&] = 58,
	IANAifType_aflane8023<s(0)(0)(0)>[&] = 59,
	IANAifType_aflane8025<s(0)(0)(0)>[&] = 60,
	IANAifType_cctEmul<s(0)(0)(0)>[&] = 61,
	IANAifType_fastEther<s(0)(0)(0)>[&] = 62,
	IANAifType_isdn<s(0)(0)(0)>[&] = 63,
	IANAifType_v11<s(0)(0)(0)>[&] = 64,
	IANAifType_v36<s(0)(0)(0)>[&] = 65,
	IANAifType_g703at64k<s(0)(0)(0)>[&] = 66,
	IANAifType_g703at2mb<s(0)(0)(0)>[&] = 67,
	IANAifType_qllc<s(0)(0)(0)>[&] = 68,
	IANAifType_fastEtherFX<s(0)(0)(0)>[&] = 69,
	IANAifType_channel<s(0)(0)(0)>[&] = 70,
	IANAifType_ieee80211<s(0)(0)(0)>[&] = 71,
	IANAifType_ibm370parChan<s(0)(0)(0)>[&] = 72,
	IANAifType_escon<s(0)(0)(0)>[&] = 73,
	IANAifType_dlsw<s(0)(0)(0)>[&] = 74,
	IANAifType_isdns<s(0)(0)(0)>[&] = 75,
	IANAifType_isdnu<s(0)(0)(0)>[&] = 76,
	IANAifType_lapd<s(0)(0)(0)>[&] = 77,
	IANAifType_ipSwitch<s(0)(0)(0)>[&] = 78,
	IANAifType_rsrb<s(0)(0)(0)>[&] = 79,
	IANAifType_atmLogical<s(0)(0)(0)>[&] = 80,
	IANAifType_ds0<s(0)(0)(0)>[&] = 81,
	IANAifType_ds0Bundle<s(0)(0)(0)>[&] = 82,
	IANAifType_bsc<s(0)(0)(0)>[&] = 83,
	IANAifType_async<s(0)(0)(0)>[&] = 84,
	IANAifType_cnr<s(0)(0)(0)>[&] = 85,
	IANAifType_iso88025Dtr<s(0)(0)(0)>[&] = 86,
	IANAifType_eplrs<s(0)(0)(0)>[&] = 87,
	IANAifType_arap<s(0)(0)(0)>[&] = 88,
	IANAifType_propCnls<s(0)(0)(0)>[&] = 89,
	IANAifType_hostPad<s(0)(0)(0)>[&] = 90,
	IANAifType_termPad<s(0)(0)(0)>[&] = 91,
	IANAifType_frameRelayMPI<s(0)(0)(0)>[&] = 92,
	IANAifType_x213<s(0)(0)(0)>[&] = 93,
	IANAifType_adsl<s(0)(0)(0)>[&] = 94,
	IANAifType_radsl<s(0)(0)(0)>[&] = 95,
	IANAifType_sdsl<s(0)(0)(0)>[&] = 96,
	IANAifType_vdsl<s(0)(0)(0)>[&] = 97,
	IANAifType_iso88025CRFPInt<s(0)(0)(0)>[&] = 98,
	IANAifType_myrinet<s(0)(0)(0)>[&] = 99,
	IANAifType_voiceEM<s(0)(0)(0)>[&] = 100,
	IANAifType_voiceFXO<s(0)(0)(0)>[&] = 101,
	IANAifType_voiceFXS<s(0)(0)(0)>[&] = 102,
	IANAifType_voiceEncap<s(0)(0)(0)>[&] = 103,
	IANAifType_voiceOverIp<s(0)(0)(0)>[&] = 104,
	IANAifType_atmDxi<s(0)(0)(0)>[&] = 105,
	IANAifType_atmFuni<s(0)(0)(0)>[&] = 106,
	IANAifType_atmIma<s(0)(0)(0)>[&] = 107,
	IANAifType_pppMultilinkBundle<s(0)(0)(0)>[&] = 108,
	IANAifType_ipOverCdlc<s(0)(0)(0)>[&] = 109,
	IANAifType_ipOverClaw<s(0)(0)(0)>[&] = 110,
	IANAifType_stackToStack<s(0)(0)(0)>[&] = 111,
	IANAifType_virtualIpAddress<s(0)(0)(0)>[&] = 112,
	IANAifType_mpc<s(0)(0)(0)>[&] = 113,
	IANAifType_ipOverAtm<s(0)(0)(0)>[&] = 114,
	IANAifType_iso88025Fiber<s(0)(0)(0)>[&] = 115,
	IANAifType_tdlc<s(0)(0)(0)>[&] = 116,
	IANAifType_gigabitEthernet<s(0)(0)(0)>[&] = 117,
	IANAifType_hdlc<s(0)(0)(0)>[&] = 118,
	IANAifType_lapf<s(0)(0)(0)>[&] = 119,
	IANAifType_v37<s(0)(0)(0)>[&] = 120,
	IANAifType_x25mlp<s(0)(0)(0)>[&] = 121,
	IANAifType_x25huntGroup<s(0)(0)(0)>[&] = 122,
	IANAifType_transpHdlc<s(0)(0)(0)>[&] = 123,
	IANAifType_interleave<s(0)(0)(0)>[&] = 124,
	IANAifType_fast<s(0)(0)(0)>[&] = 125,
	IANAifType_ip<s(0)(0)(0)>[&] = 126,
	IANAifType_docsCableMaclayer<s(0)(0)(0)>[&] = 127,
	IANAifType_docsCableDownstream<s(0)(0)(0)>[&] = 128,
	IANAifType_docsCableUpstream<s(0)(0)(0)>[&] = 129,
	IANAifType_a12MppSwitch<s(0)(0)(0)>[&] = 130,
	IANAifType_tunnel<s(0)(0)(0)>[&] = 131,
	IANAifType_coffee<s(0)(0)(0)>[&] = 132,
	IANAifType_ces<s(0)(0)(0)>[&] = 133,
	IANAifType_atmSubInterface<s(0)(0)(0)>[&] = 134,
	IANAifType_l2vlan<s(0)(0)(0)>[&] = 135,
	IANAifType_l3ipvlan<s(0)(0)(0)>[&] = 136,
	IANAifType_l3ipxvlan<s(0)(0)(0)>[&] = 137,
	IANAifType_digitalPowerline<s(0)(0)(0)>[&] = 138,
	IANAifType_mediaMailOverIp<s(0)(0)(0)>[&] = 139,
	IANAifType_dtm<s(0)(0)(0)>[&] = 140,
	IANAifType_dcn<s(0)(0)(0)>[&] = 141,
	IANAifType_ipForward<s(0)(0)(0)>[&] = 142,
	IANAifType_msdsl<s(0)(0)(0)>[&] = 143,
	IANAifType_ieee1394<s(0)(0)(0)>[&] = 144,
	IANAifType_if_gsn<s(0)(0)(0)>[&] = 145,
	IANAifType_dvbRccMacLayer<s(0)(0)(0)>[&] = 146,
	IANAifType_dvbRccDownstream<s(0)(0)(0)>[&] = 147,
	IANAifType_dvbRccUpstream<s(0)(0)(0)>[&] = 148,
	IANAifType_atmVirtual<s(0)(0)(0)>[&] = 149,
	IANAifType_mplsTunnel<s(0)(0)(0)>[&] = 150,
	IANAifType_srp<s(0)(0)(0)>[&] = 151,
	IANAifType_voiceOverAtm<s(0)(0)(0)>[&] = 152,
	IANAifType_voiceOverFrameRelay<s(0)(0)(0)>[&] = 153,
	IANAifType_idsl<s(0)(0)(0)>[&] = 154,
	IANAifType_compositeLink<s(0)(0)(0)>[&] = 155,
	IANAifType_ss7SigLink<s(0)(0)(0)>[&] = 156,
	IANAifType_propWirelessP2P<s(0)(0)(0)>[&] = 157,
	IANAifType_frForward<s(0)(0)(0)>[&] = 158,
	IANAifType_rfc1483<s(0)(0)(0)>[&] = 159,
	IANAifType_usb<s(0)(0)(0)>[&] = 160,
	IANAifType_ieee8023adLag<s(0)(0)(0)>[&] = 161,
	IANAifType_bgppolicyaccounting<s(0)(0)(0)>[&] = 162,
	IANAifType_frf16MfrBundle<s(0)(0)(0)>[&] = 163,
	IANAifType_h323Gatekeeper<s(0)(0)(0)>[&] = 164,
	IANAifType_h323Proxy<s(0)(0)(0)>[&] = 165,
	IANAifType_mpls<s(0)(0)(0)>[&] = 166,
	IANAifType_mfSigLink<s(0)(0)(0)>[&] = 167,
	IANAifType_hdsl2<s(0)(0)(0)>[&] = 168,
	IANAifType_shdsl<s(0)(0)(0)>[&] = 169,
	IANAifType_ds1FDL<s(0)(0)(0)>[&] = 170,
	IANAifType_pos<s(0)(0)(0)>[&] = 171,
	IANAifType_dvbAsiIn<s(0)(0)(0)>[&] = 172,
	IANAifType_dvbAsiOut<s(0)(0)(0)>[&] = 173,
	IANAifType_plc<s(0)(0)(0)>[&] = 174,
	IANAifType_nfas<s(0)(0)(0)>[&] = 175,
	IANAifType_tr008<s(0)(0)(0)>[&] = 176,
	IANAifType_gr303RDT<s(0)(0)(0)>[&] = 177,
	IANAifType_gr303IDT<s(0)(0)(0)>[&] = 178,
	IANAifType_isup<s(0)(0)(0)>[&] = 179,
	IANAifType_propDocsWirelessMaclayer<s(0)(0)(0)>[&] = 180,
	IANAifType_propDocsWirelessDownstream<s(0)(0)(0)>[&] = 181,
	IANAifType_propDocsWirelessUpstream<s(0)(0)(0)>[&] = 182,
	IANAifType_hiperlan2<s(0)(0)(0)>[&] = 183,
	IANAifType_propBWAp2Mp<s(0)(0)(0)>[&] = 184,
	IANAifType_sonetOverheadChannel<s(0)(0)(0)>[&] = 185,
	IANAifType_digitalWrapperOverheadChannel<s(0)(0)(0)>[&] = 186,
	IANAifType_aal2<s(0)(0)(0)>[&] = 187,
	IANAifType_radioMAC<s(0)(0)(0)>[&] = 188,
	IANAifType_atmRadio<s(0)(0)(0)>[&] = 189,
	IANAifType_imt<s(0)(0)(0)>[&] = 190,
	IANAifType_mvl<s(0)(0)(0)>[&] = 191,
	IANAifType_reachDSL<s(0)(0)(0)>[&] = 192,
	IANAifType_frDlciEndPt<s(0)(0)(0)>[&] = 193,
	IANAifType_atmVciEndPt<s(0)(0)(0)>[&] = 194,
	IANAifType_opticalChannel<s(0)(0)(0)>[&] = 195,
	IANAifType_opticalTransport<s(0)(0)(0)>[&] = 196,
	IANAifType_propAtm<s(0)(0)(0)>[&] = 197,
	IANAifType_voiceOverCable<s(0)(0)(0)>[&] = 198,
	IANAifType_infiniband<s(0)(0)(0)>[&] = 199,
	IANAifType_teLink<s(0)(0)(0)>[&] = 200,
	IANAifType_q2931<s(0)(0)(0)>[&] = 201,
	IANAifType_virtualTg<s(0)(0)(0)>[&] = 202,
	IANAifType_sipTg<s(0)(0)(0)>[&] = 203,
	IANAifType_sipSig<s(0)(0)(0)>[&] = 204,
	IANAifType_docsCableUpstreamChannel<s(0)(0)(0)>[&] = 205,
	IANAifType_econet<s(0)(0)(0)>[&] = 206,
	IANAifType_pon155<s(0)(0)(0)>[&] = 207,
	IANAifType_pon622<s(0)(0)(0)>[&] = 208,
	IANAifType_bridge<s(0)(0)(0)>[&] = 209,
	IANAifType_linegroup<s(0)(0)(0)>[&] = 210,
	IANAifType_voiceEMFGD<s(0)(0)(0)>[&] = 211,
	IANAifType_voiceFGDEANA<s(0)(0)(0)>[&] = 212,
	IANAifType_voiceDID<s(0)(0)(0)>[&] = 213,
	IANAifType_mpegTransport<s(0)(0)(0)>[&] = 214,
	IANAifType_sixToFour<s(0)(0)(0)>[&] = 215,
	IANAifType_gtp<s(0)(0)(0)>[&] = 216,
	IANAifType_pdnEtherLoop1<s(0)(0)(0)>[&] = 217,
	IANAifType_pdnEtherLoop2<s(0)(0)(0)>[&] = 218,
	IANAifType_opticalChannelGroup<s(0)(0)(0)>[&] = 219,
	IANAifType_homepna<s(0)(0)(0)>[&] = 220,
	IANAifType_gfp<s(0)(0)(0)>[&] = 221,
	IANAifType_ciscoISLvlan<s(0)(0)(0)>[&] = 222,
	IANAifType_actelisMetaLOOP<s(0)(0)(0)>[&] = 223,
	IANAifType_fcipLink<s(0)(0)(0)>[&] = 224,
	IANAifType_rpr<s(0)(0)(0)>[&] = 225,
	IANAifType_qam<s(0)(0)(0)>[&] = 226,
	IANAifType_lmp<s(0)(0)(0)>[&] = 227,
	IANAifType_cblVectaStar<s(0)(0)(0)>[&] = 228,
	IANAifType_docsCableMCmtsDownstream<s(0)(0)(0)>[&] = 229,
	IANAifType_adsl2<s(0)(0)(0)>[&] = 230,
	IANAifType_macSecControlledIF<s(0)(0)(0)>[&] = 231,
	IANAifType_macSecUncontrolledIF<s(0)(0)(0)>[&] = 232,
	IANAifType_aviciOpticalEther<s(0)(0)(0)>[&] = 233,
	IANAifType_atmbond<s(0)(0)(0)>[&] = 234,
	IANAifType_voiceFGDOS<s(0)(0)(0)>[&] = 235,
	IANAifType_mocaVersion1<s(0)(0)(0)>[&] = 236,
	IANAifType_ieee80216WMAN<s(0)(0)(0)>[&] = 237,
	IANAifType_adsl2plus<s(0)(0)(0)>[&] = 238,
	IANAifType_dvbRcsMacLayer<s(0)(0)(0)>[&] = 239,
	IANAifType_dvbTdm<s(0)(0)(0)>[&] = 240,
	IANAifType_dvbRcsTdma<s(0)(0)(0)>[&] = 241,
	IANAifType_x86Laps<s(0)(0)(0)>[&] = 242,
	IANAifType_wwanPP<s(0)(0)(0)>[&] = 243,
	IANAifType_wwanPP2<s(0)(0)(0)>[&] = 244,
	IANAifType_voiceEBS<s(0)(0)(0)>[&] = 245,
	IANAifType_ifPwType<s(0)(0)(0)>[&] = 246,
	IANAifType_ilan<s(0)(0)(0)>[&] = 247,
	IANAifType_pip<s(0)(0)(0)>[&] = 248,
	IANAifType_aluELP<s(0)(0)(0)>[&] = 249
} IANAifType_Tval<s(0)(0)(0)>[&];(D1:IANAifType_Tval:1)[[TYPENAME:IANAifType_Tval]]

typedef enum {
	PbMsspSwitchStatus_idle<s(0)(0)(0)>[&] = 0,
	PbMsspSwitchStatus_bridge<s(0)(0)(0)>[&] = 1,
	PbMsspSwitchStatus_bridgeAndSwitch<s(0)(0)(0)>[&] = 2,
	PbMsspSwitchStatus_passthough<s(0)(0)(0)>[&] = 3
} PbMsspSwitchStatus_Tval<s(0)(0)(0)>[&];(D1:PbMsspSwitchStatus_Tval:1)[[TYPENAME:PbMsspSwitchStatus_Tval]]

typedef enum {
	PbMSPRestoreMode_revertive<s(0)(0)(0)>[&] = 1,
	PbMSPRestoreMode_nonrevertive<s(0)(0)(0)>[&] = 2
} PbMSPRestoreMode_Tval<s(0)(0)(0)>[&];(D1:PbMSPRestoreMode_Tval:1)[[TYPENAME:PbMSPRestoreMode_Tval]]

typedef enum {
	PbXcAction_up<s(0)(0)(0)>[&] = 0,
	PbXcAction_down<s(0)(0)(0)>[&] = 1,
	PbXcAction_delete<s(0)(0)(0)>[&] = 2
} PbXcAction_Tval<s(0)(0)(0)>[&];(D1:PbXcAction_Tval:1)[[TYPENAME:PbXcAction_Tval]]

typedef enum {
	PbSdhLpSignalLabel_unequipped<s(0)(0)(0)>[&] = 0,
	PbSdhLpSignalLabel_reserved<s(0)(0)(0)>[&] = 1,
	PbSdhLpSignalLabel_async<s(0)(0)(0)>[&] = 2,
	PbSdhLpSignalLabel_bitsync<s(0)(0)(0)>[&] = 3,
	PbSdhLpSignalLabel_bytesync<s(0)(0)(0)>[&] = 4,
	PbSdhLpSignalLabel_ext<s(0)(0)(0)>[&] = 5,
	PbSdhLpSignalLabel_test<s(0)(0)(0)>[&] = 6,
	PbSdhLpSignalLabel_ais<s(0)(0)(0)>[&] = 7
} PbSdhLpSignalLabel_Tval<s(0)(0)(0)>[&];(D1:PbSdhLpSignalLabel_Tval:1)[[TYPENAME:PbSdhLpSignalLabel_Tval]]

typedef enum {
	PbPortOperationStatus_up<s(0)(0)(0)>[&] = 1,
	PbPortOperationStatus_down<s(0)(0)(0)>[&] = 2,
	PbPortOperationStatus_absent<s(0)(0)(0)>[&] = 3,
	PbPortOperationStatus_na<s(0)(0)(0)>[&] = 4
} PbPortOperationStatus_Tval<s(0)(0)(0)>[&];(D1:PbPortOperationStatus_Tval:1)[[TYPENAME:PbPortOperationStatus_Tval]]

typedef enum {
	PbLacpPortClass_lAN<s(0)(0)(0)>[&] = 0,
	PbLacpPortClass_wAN<s(0)(0)(0)>[&] = 1
} PbLacpPortClass_Tval<s(0)(0)(0)>[&];(D1:PbLacpPortClass_Tval:1)[[TYPENAME:PbLacpPortClass_Tval]]

typedef enum {
	RprXcTableClass_oldTable<s(0)(0)(0)>[&] = 0,
	RprXcTableClass_newTable<s(0)(0)(0)>[&] = 1
} RprXcTableClass_Tval<s(0)(0)(0)>[&];(D1:RprXcTableClass_Tval:1)[[TYPENAME:RprXcTableClass_Tval]]

typedef enum {
	PbAlarmGroupType_psuA<s(0)(0)(0)>[&] = 1,
	PbAlarmGroupType_psuB<s(0)(0)(0)>[&] = 2,
	PbAlarmGroupType_fan1<s(0)(0)(0)>[&] = 3,
	PbAlarmGroupType_fan2<s(0)(0)(0)>[&] = 4,
	PbAlarmGroupType_tms_slot_a1<s(0)(0)(0)>[&] = 5,
	PbAlarmGroupType_tms_slot_a2<s(0)(0)(0)>[&] = 6,
	PbAlarmGroupType_almevt_logger<s(0)(0)(0)>[&] = 7,
	PbAlarmGroupType_slot_statistics<s(0)(0)(0)>[&] = 8,
	PbAlarmGroupType_ds3<s(0)(0)(0)>[&] = 9,
	PbAlarmGroupType_sonet_line<s(0)(0)(0)>[&] = 10,
	PbAlarmGroupType_sonet_path<s(0)(0)(0)>[&] = 11,
	PbAlarmGroupType_fdr<s(0)(0)(0)>[&] = 12,
	PbAlarmGroupType_node<s(0)(0)(0)>[&] = 13,
	PbAlarmGroupType_dget_agent<s(0)(0)(0)>[&] = 14,
	PbAlarmGroupType_dget_mgr<s(0)(0)(0)>[&] = 15,
	PbAlarmGroupType_fan3<s(0)(0)(0)>[&] = 16,
	PbAlarmGroupType_optics<s(0)(0)(0)>[&] = 17,
	PbAlarmGroupType_slot_intf<s(0)(0)(0)>[&] = 18,
	PbAlarmGroupType_path_aps<s(0)(0)(0)>[&] = 19,
	PbAlarmGroupType_power_circuit<s(0)(0)(0)>[&] = 20,
	PbAlarmGroupType_line_aps<s(0)(0)(0)>[&] = 21,
	PbAlarmGroupType_optical_signaling<s(0)(0)(0)>[&] = 22
} PbAlarmGroupType_Tval<s(0)(0)(0)>[&];(D1:PbAlarmGroupType_Tval:1)[[TYPENAME:PbAlarmGroupType_Tval]]

typedef enum {
	PBSNCPIntrusive_sncp_i<s(0)(0)(0)>[&] = 0,
	PBSNCPIntrusive_sncp_n<s(0)(0)(0)>[&] = 1
} PBSNCPIntrusive_Tval<s(0)(0)(0)>[&];(D1:PBSNCPIntrusive_Tval:1)[[TYPENAME:PBSNCPIntrusive_Tval]]

typedef enum {
	PbSNCPRestoreMode_revertive<s(0)(0)(0)>[&] = 1,
	PbSNCPRestoreMode_nonrevertive<s(0)(0)(0)>[&] = 2
} PbSNCPRestoreMode_Tval<s(0)(0)(0)>[&];(D1:PbSNCPRestoreMode_Tval:1)[[TYPENAME:PbSNCPRestoreMode_Tval]]

typedef enum {
	PbXcType_add<s(0)(0)(0)>[&] = 1,
	PbXcType_drop<s(0)(0)(0)>[&] = 2,
	PbXcType_passthrough<s(0)(0)(0)>[&] = 3
} PbXcType_Tval<s(0)(0)(0)>[&];(D1:PbXcType_Tval:1)[[TYPENAME:PbXcType_Tval]]

typedef enum {
	PbUpDown_up<s(0)(0)(0)>[&] = 1,
	PbUpDown_down<s(0)(0)(0)>[&] = 2
} PbUpDown_Tval<s(0)(0)(0)>[&];(D1:PbUpDown_Tval:1)[[TYPENAME:PbUpDown_Tval]]

typedef enum {
	PbMsspTrafficOrder_none<s(0)(0)(0)>[&] = 0,
	PbMsspTrafficOrder_high<s(0)(0)(0)>[&] = 1,
	PbMsspTrafficOrder_low<s(0)(0)(0)>[&] = 2
} PbMsspTrafficOrder_Tval<s(0)(0)(0)>[&];(D1:PbMsspTrafficOrder_Tval:1)[[TYPENAME:PbMsspTrafficOrder_Tval]]

typedef enum {
	PbXcFailReason_noerr<s(0)(0)(0)>[&] = 0,
	PbXcFailReason_resource<s(0)(0)(0)>[&] = 1,
	PbXcFailReason_block<s(0)(0)(0)>[&] = 2,
	PbXcFailReason_invalid<s(0)(0)(0)>[&] = 3,
	PbXcFailReason_conflict<s(0)(0)(0)>[&] = 4,
	PbXcFailReason_map<s(0)(0)(0)>[&] = 5,
	PbXcFailReason_interface<s(0)(0)(0)>[&] = 6,
	PbXcFailReason_locc<s(0)(0)(0)>[&] = 7
} PbXcFailReason_Tval<s(0)(0)(0)>[&];(D1:PbXcFailReason_Tval:1)[[TYPENAME:PbXcFailReason_Tval]]

typedef enum {
	IANAtunnelType_other<s(0)(0)(0)>[&] = 1,
	IANAtunnelType_direct<s(0)(0)(0)>[&] = 2,
	IANAtunnelType_gre<s(0)(0)(0)>[&] = 3,
	IANAtunnelType_minimal<s(0)(0)(0)>[&] = 4,
	IANAtunnelType_l2tp<s(0)(0)(0)>[&] = 5,
	IANAtunnelType_pptp<s(0)(0)(0)>[&] = 6,
	IANAtunnelType_l2f<s(0)(0)(0)>[&] = 7,
	IANAtunnelType_udp<s(0)(0)(0)>[&] = 8,
	IANAtunnelType_atmp<s(0)(0)(0)>[&] = 9,
	IANAtunnelType_msdp<s(0)(0)(0)>[&] = 10,
	IANAtunnelType_sixToFour<s(0)(0)(0)>[&] = 11,
	IANAtunnelType_sixOverFour<s(0)(0)(0)>[&] = 12,
	IANAtunnelType_isatap<s(0)(0)(0)>[&] = 13,
	IANAtunnelType_teredo<s(0)(0)(0)>[&] = 14
} IANAtunnelType_Tval<s(0)(0)(0)>[&];(D1:IANAtunnelType_Tval:1)[[TYPENAME:IANAtunnelType_Tval]]

typedef enum {
	PbEpgFunctionCardStatus_unknown<s(0)(0)(0)>[&] = 0,
	PbEpgFunctionCardStatus_latchoff<s(0)(0)(0)>[&] = 1,
	PbEpgFunctionCardStatus_latchon<s(0)(0)(0)>[&] = 2,
	PbEpgFunctionCardStatus_cardfail<s(0)(0)(0)>[&] = 3
} PbEpgFunctionCardStatus_Tval<s(0)(0)(0)>[&];(D1:PbEpgFunctionCardStatus_Tval:1)[[TYPENAME:PbEpgFunctionCardStatus_Tval]]

typedef enum {
	RouteStatus_inactive<s(0)(0)(0)>[&] = 1,
	RouteStatus_active<s(0)(0)(0)>[&] = 2,
	RouteStatus_invalid<s(0)(0)(0)>[&] = 3
} RouteStatus_Tval<s(0)(0)(0)>[&];(D1:RouteStatus_Tval:1)[[TYPENAME:RouteStatus_Tval]]

typedef enum {
	PbTMSMonitorMode_auto<s(0)(0)(0)>[&] = 0,
	PbTMSMonitorMode_yes<s(0)(0)(0)>[&] = 1,
	PbTMSMonitorMode_no<s(0)(0)(0)>[&] = 2
} PbTMSMonitorMode_Tval<s(0)(0)(0)>[&];(D1:PbTMSMonitorMode_Tval:1)[[TYPENAME:PbTMSMonitorMode_Tval]]

typedef enum {
	RprXcFailReason_noerr<s(0)(0)(0)>[&] = 0,
	RprXcFailReason_resource<s(0)(0)(0)>[&] = 1,
	RprXcFailReason_block<s(0)(0)(0)>[&] = 2,
	RprXcFailReason_invalid<s(0)(0)(0)>[&] = 3,
	RprXcFailReason_conflict<s(0)(0)(0)>[&] = 4,
	RprXcFailReason_map<s(0)(0)(0)>[&] = 5,
	RprXcFailReason_interface<s(0)(0)(0)>[&] = 6,
	RprXcFailReason_locc<s(0)(0)(0)>[&] = 7
} RprXcFailReason_Tval<s(0)(0)(0)>[&];(D1:RprXcFailReason_Tval:1)[[TYPENAME:RprXcFailReason_Tval]]

typedef enum {
	PbActualPortType_none<s(0)(0)(0)>[&] = 0,
	PbActualPortType_e1<s(0)(0)(0)>[&] = 1,
	PbActualPortType_ds1<s(0)(0)(0)>[&] = 2,
	PbActualPortType_e3<s(0)(0)(0)>[&] = 3,
	PbActualPortType_ds3<s(0)(0)(0)>[&] = 4,
	PbActualPortType_stm1<s(0)(0)(0)>[&] = 5,
	PbActualPortType_stm4<s(0)(0)(0)>[&] = 6
} PbActualPortType_Tval<s(0)(0)(0)>[&];(D1:PbActualPortType_Tval:1)[[TYPENAME:PbActualPortType_Tval]]

typedef enum {
	TruthValue_true<s(0)(0)(0)>[&] = 1,
	TruthValue_false<s(0)(0)(0)>[&] = 2
} TruthValue_Tval<s(0)(0)(0)>[&];(D1:TruthValue_Tval:1)[[TYPENAME:TruthValue_Tval]]

typedef enum {
	RprRingletID_ringlet0<s(0)(0)(0)>[&] = 0,
	RprRingletID_ringlet1<s(0)(0)(0)>[&] = 1
} RprRingletID_Tval<s(0)(0)(0)>[&];(D1:RprRingletID_Tval:1)[[TYPENAME:RprRingletID_Tval]]

typedef enum {
	PbMsspExternalCommand_exerciseRing<s(0)(0)(0)>[&] = 3,
	PbMsspExternalCommand_manualSwitchRing<s(0)(0)(0)>[&] = 6,
	PbMsspExternalCommand_forcedSwitchRing<s(0)(0)(0)>[&] = 13,
	PbMsspExternalCommand_lockoutProtection<s(0)(0)(0)>[&] = 15,
	PbMsspExternalCommand_clear<s(0)(0)(0)>[&] = 21,
	PbMsspExternalCommand_noCommand<s(0)(0)(0)>[&] = 23
} PbMsspExternalCommand_Tval<s(0)(0)(0)>[&];(D1:PbMsspExternalCommand_Tval:1)[[TYPENAME:PbMsspExternalCommand_Tval]]

typedef enum {
	PbPmMonitor_notMonitored<s(0)(0)(0)>[&] = 1,
	PbPmMonitor_monitored<s(0)(0)(0)>[&] = 2,
	PbPmMonitor_autoReport<s(0)(0)(0)>[&] = 3
} PbPmMonitor_Tval<s(0)(0)(0)>[&];(D1:PbPmMonitor_Tval:1)[[TYPENAME:PbPmMonitor_Tval]]

typedef enum {
	PbOkNotOk_failed<s(0)(0)(0)>[&] = 1,
	PbOkNotOk_okay<s(0)(0)(0)>[&] = 2
} PbOkNotOk_Tval<s(0)(0)(0)>[&];(D1:PbOkNotOk_Tval:1)[[TYPENAME:PbOkNotOk_Tval]]

typedef enum {
	PbMspChNumberType_nullchannel<s(0)(0)(0)>[&] = 0,
	PbMspChNumberType_workchannel1<s(0)(0)(0)>[&] = 1,
	PbMspChNumberType_workchannel2<s(0)(0)(0)>[&] = 2,
	PbMspChNumberType_workchannel3<s(0)(0)(0)>[&] = 3,
	PbMspChNumberType_workchannel4<s(0)(0)(0)>[&] = 4,
	PbMspChNumberType_workchannel5<s(0)(0)(0)>[&] = 5,
	PbMspChNumberType_workchannel6<s(0)(0)(0)>[&] = 6,
	PbMspChNumberType_workchannel7<s(0)(0)(0)>[&] = 7,
	PbMspChNumberType_workchannel8<s(0)(0)(0)>[&] = 8,
	PbMspChNumberType_workchannel9<s(0)(0)(0)>[&] = 9,
	PbMspChNumberType_workchannel10<s(0)(0)(0)>[&] = 10,
	PbMspChNumberType_workchannel11<s(0)(0)(0)>[&] = 11,
	PbMspChNumberType_workchannel12<s(0)(0)(0)>[&] = 12,
	PbMspChNumberType_workchannel13<s(0)(0)(0)>[&] = 13,
	PbMspChNumberType_workchannel14<s(0)(0)(0)>[&] = 14,
	PbMspChNumberType_extrafficchannel<s(0)(0)(0)>[&] = 15
} PbMspChNumberType_Tval<s(0)(0)(0)>[&];(D1:PbMspChNumberType_Tval:1)[[TYPENAME:PbMspChNumberType_Tval]]

typedef enum {
	PbMSPExCmdRslt_cmdRsltSucc<s(0)(0)(0)>[&] = 1,
	PbMSPExCmdRslt_cmdRsltLowPriority<s(0)(0)(0)>[&] = 2,
	PbMSPExCmdRslt_cmdRsltSwithToActive<s(0)(0)(0)>[&] = 3,
	PbMSPExCmdRslt_cmdSwitchFail<s(0)(0)(0)>[&] = 4
} PbMSPExCmdRslt_Tval<s(0)(0)(0)>[&];(D1:PbMSPExCmdRslt_Tval:1)[[TYPENAME:PbMSPExCmdRslt_Tval]]

typedef enum {
	PbTMSOutActType_auto<s(0)(0)(0)>[&] = 0,
	PbTMSOutActType_squelch<s(0)(0)(0)>[&] = 1
} PbTMSOutActType_Tval<s(0)(0)(0)>[&];(D1:PbTMSOutActType_Tval:1)[[TYPENAME:PbTMSOutActType_Tval]]

typedef enum {
	PBMSPChPriState_unknown<s(0)(0)(0)>[&] = 0,
	PBMSPChPriState_prihigh<s(0)(0)(0)>[&] = 1,
	PBMSPChPriState_prilow<s(0)(0)(0)>[&] = 2
} PBMSPChPriState_Tval<s(0)(0)(0)>[&];(D1:PBMSPChPriState_Tval:1)[[TYPENAME:PBMSPChPriState_Tval]]

typedef enum {
	PbPmTpStatusType_active<s(0)(0)(0)>[&] = 1,
	PbPmTpStatusType_inactive<s(0)(0)(0)>[&] = 2
} PbPmTpStatusType_Tval<s(0)(0)(0)>[&];(D1:PbPmTpStatusType_Tval:1)[[TYPENAME:PbPmTpStatusType_Tval]]

typedef enum {
	PbSncpFrom_cli<s(0)(0)(0)>[&] = 1,
	PbSncpFrom_ems<s(0)(0)(0)>[&] = 2,
	PbSncpFrom_snm<s(0)(0)(0)>[&] = 3,
	PbSncpFrom_gmpls<s(0)(0)(0)>[&] = 4
} PbSncpFrom_Tval<s(0)(0)(0)>[&];(D1:PbSncpFrom_Tval:1)[[TYPENAME:PbSncpFrom_Tval]]

typedef enum {
	RprXcMsgStatus_removed<s(0)(0)(0)>[&] = 0,
	RprXcMsgStatus_disabled<s(0)(0)(0)>[&] = 1,
	RprXcMsgStatus_ok<s(0)(0)(0)>[&] = 2,
	RprXcMsgStatus_failed<s(0)(0)(0)>[&] = 3
} RprXcMsgStatus_Tval<s(0)(0)(0)>[&];(D1:RprXcMsgStatus_Tval:1)[[TYPENAME:RprXcMsgStatus_Tval]]

typedef enum {
	PbUserAccessLevel_superUser<s(0)(0)(0)>[&] = 1,
	PbUserAccessLevel_administrative<s(0)(0)(0)>[&] = 2,
	PbUserAccessLevel_readOnly<s(0)(0)(0)>[&] = 3
} PbUserAccessLevel_Tval<s(0)(0)(0)>[&];(D1:PbUserAccessLevel_Tval:1)[[TYPENAME:PbUserAccessLevel_Tval]]

typedef enum {
	PbXcCapacity_vc11<s(0)(0)(0)>[&] = 1,
	PbXcCapacity_vc12<s(0)(0)(0)>[&] = 2,
	PbXcCapacity_vc2<s(0)(0)(0)>[&] = 3,
	PbXcCapacity_vc3<s(0)(0)(0)>[&] = 4,
	PbXcCapacity_vc4<s(0)(0)(0)>[&] = 5,
	PbXcCapacity_vc44c<s(0)(0)(0)>[&] = 6,
	PbXcCapacity_vc416c<s(0)(0)(0)>[&] = 7,
	PbXcCapacity_vc464c<s(0)(0)(0)>[&] = 8,
	PbXcCapacity_e1<s(0)(0)(0)>[&] = 9
} PbXcCapacity_Tval<s(0)(0)(0)>[&];(D1:PbXcCapacity_Tval:1)[[TYPENAME:PbXcCapacity_Tval]]

typedef enum {
	PbPortStatus_up<s(0)(0)(0)>[&] = 1,
	PbPortStatus_down<s(0)(0)(0)>[&] = 2
} PbPortStatus_Tval<s(0)(0)(0)>[&];(D1:PbPortStatus_Tval:1)[[TYPENAME:PbPortStatus_Tval]]

typedef enum {
	TypeMibUpDownLoadStatus_inactive<s(0)(0)(0)>[&] = 0,
	TypeMibUpDownLoadStatus_uploadPreparing<s(0)(0)(0)>[&] = 1,
	TypeMibUpDownLoadStatus_uploadPrepared<s(0)(0)(0)>[&] = 2,
	TypeMibUpDownLoadStatus_uploadPrepareFailed<s(0)(0)(0)>[&] = 3,
	TypeMibUpDownLoadStatus_uploadPrepareTimeout<s(0)(0)(0)>[&] = 4,
	TypeMibUpDownLoadStatus_uploading<s(0)(0)(0)>[&] = 5,
	TypeMibUpDownLoadStatus_uploaded<s(0)(0)(0)>[&] = 6,
	TypeMibUpDownLoadStatus_uploadCanceled<s(0)(0)(0)>[&] = 7,
	TypeMibUpDownLoadStatus_uploadingTimeout<s(0)(0)(0)>[&] = 8,
	TypeMibUpDownLoadStatus_uploadingFailed<s(0)(0)(0)>[&] = 9,
	TypeMibUpDownLoadStatus_downloadPreparing<s(0)(0)(0)>[&] = 21,
	TypeMibUpDownLoadStatus_downloadPrepared<s(0)(0)(0)>[&] = 22,
	TypeMibUpDownLoadStatus_downloadPrepareFailed<s(0)(0)(0)>[&] = 23,
	TypeMibUpDownLoadStatus_downloadPrepareTimeout<s(0)(0)(0)>[&] = 24,
	TypeMibUpDownLoadStatus_downloading<s(0)(0)(0)>[&] = 25,
	TypeMibUpDownLoadStatus_downloaded<s(0)(0)(0)>[&] = 26,
	TypeMibUpDownLoadStatus_downloadCanceled<s(0)(0)(0)>[&] = 27,
	TypeMibUpDownLoadStatus_downloadingTimeout<s(0)(0)(0)>[&] = 28,
	TypeMibUpDownLoadStatus_downloadingFailed<s(0)(0)(0)>[&] = 29
} TypeMibUpDownLoadStatus_Tval<s(0)(0)(0)>[&];(D1:TypeMibUpDownLoadStatus_Tval:1)[[TYPENAME:TypeMibUpDownLoadStatus_Tval]]

typedef enum {
	PbMsspNodeState_idle<s(0)(0)(0)>[&] = 0,
	PbMsspNodeState_passthough<s(0)(0)(0)>[&] = 1,
	PbMsspNodeState_switching<s(0)(0)(0)>[&] = 2,
	PbMsspNodeState_isolated<s(0)(0)(0)>[&] = 3
} PbMsspNodeState_Tval<s(0)(0)(0)>[&];(D1:PbMsspNodeState_Tval:1)[[TYPENAME:PbMsspNodeState_Tval]]

typedef enum {
	PbSNCPExCmdRslt_cmdRsltSucc<s(0)(0)(0)>[&] = 1,
	PbSNCPExCmdRslt_cmdRsltLowPriority<s(0)(0)(0)>[&] = 2,
	PbSNCPExCmdRslt_cmdRsltSwithToActive<s(0)(0)(0)>[&] = 3,
	PbSNCPExCmdRslt_cmdSwitchFail<s(0)(0)(0)>[&] = 4,
	PbSNCPExCmdRslt_cmdSwitchTimeout<s(0)(0)(0)>[&] = 5,
	PbSNCPExCmdRslt_cmdWaitCcRsp<s(0)(0)(0)>[&] = 6,
	PbSNCPExCmdRslt_cmdBadCommand<s(0)(0)(0)>[&] = 7
} PbSNCPExCmdRslt_Tval<s(0)(0)(0)>[&];(D1:PbSNCPExCmdRslt_Tval:1)[[TYPENAME:PbSNCPExCmdRslt_Tval]]

typedef enum {
	AlarmTypeID_spi_los<s(0)(0)(0)>[&] = 1,
	AlarmTypeID_rs_oof<s(0)(0)(0)>[&] = 2,
	AlarmTypeID_rs_lof<s(0)(0)(0)>[&] = 3,
	AlarmTypeID_rs_deg<s(0)(0)(0)>[&] = 4,
	AlarmTypeID_rs_tim<s(0)(0)(0)>[&] = 5,
	AlarmTypeID_rs_exc<s(0)(0)(0)>[&] = 6,
	AlarmTypeID_rs_dcf<s(0)(0)(0)>[&] = 7,
	AlarmTypeID_rs_tca<s(0)(0)(0)>[&] = 8,
	AlarmTypeID_ms_rdi<s(0)(0)(0)>[&] = 9,
	AlarmTypeID_ms_rei<s(0)(0)(0)>[&] = 10,
	AlarmTypeID_ms_ais<s(0)(0)(0)>[&] = 11,
	AlarmTypeID_ms_deg<s(0)(0)(0)>[&] = 12,
	AlarmTypeID_ms_exc<s(0)(0)(0)>[&] = 13,
	AlarmTypeID_ms_dcf<s(0)(0)(0)>[&] = 14,
	AlarmTypeID_ms_fop<s(0)(0)(0)>[&] = 15,
	AlarmTypeID_ms_tca<s(0)(0)(0)>[&] = 17,
	AlarmTypeID_au_lop<s(0)(0)(0)>[&] = 18,
	AlarmTypeID_au_ais<s(0)(0)(0)>[&] = 19,
	AlarmTypeID_au_tca<s(0)(0)(0)>[&] = 20,
	AlarmTypeID_hp_tim<s(0)(0)(0)>[&] = 21,
	AlarmTypeID_hp_uneq<s(0)(0)(0)>[&] = 22,
	AlarmTypeID_hp_rdi<s(0)(0)(0)>[&] = 23,
	AlarmTypeID_hp_plm<s(0)(0)(0)>[&] = 24,
	AlarmTypeID_hp_deg<s(0)(0)(0)>[&] = 25,
	AlarmTypeID_hp_lom<s(0)(0)(0)>[&] = 26,
	AlarmTypeID_hp_exc<s(0)(0)(0)>[&] = 27,
	AlarmTypeID_hp_tca<s(0)(0)(0)>[&] = 28,
	AlarmTypeID_hpv_lom<s(0)(0)(0)>[&] = 29,
	AlarmTypeID_hpv_sqm<s(0)(0)(0)>[&] = 30,
	AlarmTypeID_hpv_loa<s(0)(0)(0)>[&] = 31,
	AlarmTypeID_tu_lop<s(0)(0)(0)>[&] = 32,
	AlarmTypeID_tu_lom<s(0)(0)(0)>[&] = 33,
	AlarmTypeID_tu_ais<s(0)(0)(0)>[&] = 34,
	AlarmTypeID_tu_tca<s(0)(0)(0)>[&] = 35,
	AlarmTypeID_lp_tim<s(0)(0)(0)>[&] = 36,
	AlarmTypeID_lp_uneq<s(0)(0)(0)>[&] = 37,
	AlarmTypeID_lp_rdi<s(0)(0)(0)>[&] = 38,
	AlarmTypeID_lp_plm<s(0)(0)(0)>[&] = 39,
	AlarmTypeID_lp_deg<s(0)(0)(0)>[&] = 40,
	AlarmTypeID_lp_exc<s(0)(0)(0)>[&] = 41,
	AlarmTypeID_lp_rfi<s(0)(0)(0)>[&] = 42,
	AlarmTypeID_lpv_lom<s(0)(0)(0)>[&] = 43,
	AlarmTypeID_lpv_sqm<s(0)(0)(0)>[&] = 44,
	AlarmTypeID_lpv_loa<s(0)(0)(0)>[&] = 45,
	AlarmTypeID_lan_los<s(0)(0)(0)>[&] = 46,
	AlarmTypeID_lan_bbr<s(0)(0)(0)>[&] = 47,
	AlarmTypeID_lan_bpr<s(0)(0)(0)>[&] = 48,
	AlarmTypeID_set_lti<s(0)(0)(0)>[&] = 49,
	AlarmTypeID_set_lto<s(0)(0)(0)>[&] = 50,
	AlarmTypeID_set_trf<s(0)(0)(0)>[&] = 51,
	AlarmTypeID_set_deg<s(0)(0)(0)>[&] = 52,
	AlarmTypeID_set_ssmbm<s(0)(0)(0)>[&] = 53,
	AlarmTypeID_env_mdi<s(0)(0)(0)>[&] = 54,
	AlarmTypeID_env_oh<s(0)(0)(0)>[&] = 55,
	AlarmTypeID_eqp_uf<s(0)(0)(0)>[&] = 56,
	AlarmTypeID_eqp_ur<s(0)(0)(0)>[&] = 57,
	AlarmTypeID_eqp_pf<s(0)(0)(0)>[&] = 58,
	AlarmTypeID_wan_los<s(0)(0)(0)>[&] = 59,
	AlarmTypeID_wan_bbr<s(0)(0)(0)>[&] = 60,
	AlarmTypeID_wan_bpr<s(0)(0)(0)>[&] = 61,
	AlarmTypeID_tc_lcd<s(0)(0)(0)>[&] = 62,
	AlarmTypeID_vp_ais<s(0)(0)(0)>[&] = 63,
	AlarmTypeID_vp_rdi<s(0)(0)(0)>[&] = 64,
	AlarmTypeID_vp_loc<s(0)(0)(0)>[&] = 65,
	AlarmTypeID_vc_ais<s(0)(0)(0)>[&] = 66,
	AlarmTypeID_vc_rdi<s(0)(0)(0)>[&] = 67,
	AlarmTypeID_vc_loc<s(0)(0)(0)>[&] = 68,
	AlarmTypeID_ppi_los<s(0)(0)(0)>[&] = 69,
	AlarmTypeID_spi_dcf<s(0)(0)(0)>[&] = 70,
	AlarmTypeID_in_cer<s(0)(0)(0)>[&] = 71,
	AlarmTypeID_in_clr<s(0)(0)(0)>[&] = 72,
	AlarmTypeID_out_cer<s(0)(0)(0)>[&] = 73,
	AlarmTypeID_out_clr<s(0)(0)(0)>[&] = 74,
	AlarmTypeID_lp_tca<s(0)(0)(0)>[&] = 75,
	AlarmTypeID_set_scf<s(0)(0)(0)>[&] = 76,
	AlarmTypeID_eqp_ff<s(0)(0)(0)>[&] = 77,
	AlarmTypeID_spi_oop_tca<s(0)(0)(0)>[&] = 78,
	AlarmTypeID_spi_iop_tca<s(0)(0)(0)>[&] = 79,
	AlarmTypeID_spi_lb_tca<s(0)(0)(0)>[&] = 80,
	AlarmTypeID_spi_lt_tca<s(0)(0)(0)>[&] = 81,
	AlarmTypeID_spi_ta<s(0)(0)(0)>[&] = 82,
	AlarmTypeID_eqp_utm<s(0)(0)(0)>[&] = 83,
	AlarmTypeID_spi_lcd_slow<s(0)(0)(0)>[&] = 84,
	AlarmTypeID_spi_lcd_fast<s(0)(0)(0)>[&] = 85,
	AlarmTypeID_hpv_csf<s(0)(0)(0)>[&] = 86,
	AlarmTypeID_hpv_lfd<s(0)(0)(0)>[&] = 87,
	AlarmTypeID_lpv_csf<s(0)(0)(0)>[&] = 88,
	AlarmTypeID_lpv_lfd<s(0)(0)(0)>[&] = 89,
	AlarmTypeID_ppi_tca<s(0)(0)(0)>[&] = 90,
	AlarmTypeID_ppi_nslip<s(0)(0)(0)>[&] = 91,
	AlarmTypeID_ppi_pslip<s(0)(0)(0)>[&] = 92,
	AlarmTypeID_rs_tca_es15m<s(0)(0)(0)>[&] = 93,
	AlarmTypeID_rs_tca_es24h<s(0)(0)(0)>[&] = 94,
	AlarmTypeID_rs_tca_bbe15m<s(0)(0)(0)>[&] = 95,
	AlarmTypeID_rs_tca_bbe24h<s(0)(0)(0)>[&] = 96,
	AlarmTypeID_rs_tca_ses15m<s(0)(0)(0)>[&] = 97,
	AlarmTypeID_rs_tca_ses24h<s(0)(0)(0)>[&] = 98,
	AlarmTypeID_rs_tca_uas15m<s(0)(0)(0)>[&] = 99,
	AlarmTypeID_rs_tca_uas24h<s(0)(0)(0)>[&] = 100,
	AlarmTypeID_rs_tca_uap15m<s(0)(0)(0)>[&] = 101,
	AlarmTypeID_rs_tca_uap24h<s(0)(0)(0)>[&] = 102,
	AlarmTypeID_rs_tca_cses15m<s(0)(0)(0)>[&] = 103,
	AlarmTypeID_rs_tca_cses24h<s(0)(0)(0)>[&] = 104,
	AlarmTypeID_rs_tca_ofs15m<s(0)(0)(0)>[&] = 105,
	AlarmTypeID_rs_tca_ofs24h<s(0)(0)(0)>[&] = 106,
	AlarmTypeID_ms_tca_es15mn<s(0)(0)(0)>[&] = 107,
	AlarmTypeID_ms_tca_es15mf<s(0)(0)(0)>[&] = 108,
	AlarmTypeID_ms_tca_es24hn<s(0)(0)(0)>[&] = 109,
	AlarmTypeID_ms_tca_es24hf<s(0)(0)(0)>[&] = 110,
	AlarmTypeID_ms_tca_bbe15mn<s(0)(0)(0)>[&] = 111,
	AlarmTypeID_ms_tca_bbe15mf<s(0)(0)(0)>[&] = 112,
	AlarmTypeID_ms_tca_bbe24hn<s(0)(0)(0)>[&] = 113,
	AlarmTypeID_ms_tca_bbe24hf<s(0)(0)(0)>[&] = 114,
	AlarmTypeID_ms_tca_ses15mn<s(0)(0)(0)>[&] = 115,
	AlarmTypeID_ms_tca_ses15mf<s(0)(0)(0)>[&] = 116,
	AlarmTypeID_ms_tca_ses24hn<s(0)(0)(0)>[&] = 117,
	AlarmTypeID_ms_tca_ses24hf<s(0)(0)(0)>[&] = 118,
	AlarmTypeID_ms_tca_uas15mn<s(0)(0)(0)>[&] = 119,
	AlarmTypeID_ms_tca_uas15mf<s(0)(0)(0)>[&] = 120,
	AlarmTypeID_ms_tca_uas24hn<s(0)(0)(0)>[&] = 121,
	AlarmTypeID_ms_tca_uas24hf<s(0)(0)(0)>[&] = 122,
	AlarmTypeID_ms_tca_uap15mn<s(0)(0)(0)>[&] = 123,
	AlarmTypeID_ms_tca_uap15mf<s(0)(0)(0)>[&] = 124,
	AlarmTypeID_ms_tca_uap24hn<s(0)(0)(0)>[&] = 125,
	AlarmTypeID_ms_tca_uap24hf<s(0)(0)(0)>[&] = 126,
	AlarmTypeID_ms_tca_cses15mn<s(0)(0)(0)>[&] = 127,
	AlarmTypeID_ms_tca_cses15mf<s(0)(0)(0)>[&] = 128,
	AlarmTypeID_ms_tca_cses24hn<s(0)(0)(0)>[&] = 129,
	AlarmTypeID_ms_tca_cses24hf<s(0)(0)(0)>[&] = 130,
	AlarmTypeID_hp_tca_es15mn<s(0)(0)(0)>[&] = 131,
	AlarmTypeID_hp_tca_es15mf<s(0)(0)(0)>[&] = 132,
	AlarmTypeID_hp_tca_es24hn<s(0)(0)(0)>[&] = 133,
	AlarmTypeID_hp_tca_es24hf<s(0)(0)(0)>[&] = 134,
	AlarmTypeID_hp_tca_bbe15mn<s(0)(0)(0)>[&] = 135,
	AlarmTypeID_hp_tca_bbe15mf<s(0)(0)(0)>[&] = 136,
	AlarmTypeID_hp_tca_bbe24hn<s(0)(0)(0)>[&] = 137,
	AlarmTypeID_hp_tca_bbe24hf<s(0)(0)(0)>[&] = 138,
	AlarmTypeID_hp_tca_ses15mn<s(0)(0)(0)>[&] = 139,
	AlarmTypeID_hp_tca_ses15mf<s(0)(0)(0)>[&] = 140,
	AlarmTypeID_hp_tca_ses24hn<s(0)(0)(0)>[&] = 141,
	AlarmTypeID_hp_tca_ses24hf<s(0)(0)(0)>[&] = 142,
	AlarmTypeID_hp_tca_uas15mn<s(0)(0)(0)>[&] = 143,
	AlarmTypeID_hp_tca_uas15mf<s(0)(0)(0)>[&] = 144,
	AlarmTypeID_hp_tca_uas24hn<s(0)(0)(0)>[&] = 145,
	AlarmTypeID_hp_tca_uas24hf<s(0)(0)(0)>[&] = 146,
	AlarmTypeID_hp_tca_uap15mn<s(0)(0)(0)>[&] = 147,
	AlarmTypeID_hp_tca_uap15mf<s(0)(0)(0)>[&] = 148,
	AlarmTypeID_hp_tca_uap24hn<s(0)(0)(0)>[&] = 149,
	AlarmTypeID_hp_tca_uap24hf<s(0)(0)(0)>[&] = 150,
	AlarmTypeID_hp_tca_cses15mn<s(0)(0)(0)>[&] = 151,
	AlarmTypeID_hp_tca_cses15mf<s(0)(0)(0)>[&] = 152,
	AlarmTypeID_hp_tca_cses24hn<s(0)(0)(0)>[&] = 153,
	AlarmTypeID_hp_tca_cses24hf<s(0)(0)(0)>[&] = 154,
	AlarmTypeID_hp_tca_pjcp15m<s(0)(0)(0)>[&] = 155,
	AlarmTypeID_hp_tca_pjcp24h<s(0)(0)(0)>[&] = 156,
	AlarmTypeID_hp_tca_pjcn15m<s(0)(0)(0)>[&] = 157,
	AlarmTypeID_hp_tca_pjcn24h<s(0)(0)(0)>[&] = 158,
	AlarmTypeID_lp_tca_es15mn<s(0)(0)(0)>[&] = 159,
	AlarmTypeID_lp_tca_es15mf<s(0)(0)(0)>[&] = 160,
	AlarmTypeID_lp_tca_es24hn<s(0)(0)(0)>[&] = 161,
	AlarmTypeID_lp_tca_es24hf<s(0)(0)(0)>[&] = 162,
	AlarmTypeID_lp_tca_bbe15mn<s(0)(0)(0)>[&] = 163,
	AlarmTypeID_lp_tca_bbe15mf<s(0)(0)(0)>[&] = 164,
	AlarmTypeID_lp_tca_bbe24hn<s(0)(0)(0)>[&] = 165,
	AlarmTypeID_lp_tca_bbe24hf<s(0)(0)(0)>[&] = 166,
	AlarmTypeID_lp_tca_ses15mn<s(0)(0)(0)>[&] = 167,
	AlarmTypeID_lp_tca_ses15mf<s(0)(0)(0)>[&] = 168,
	AlarmTypeID_lp_tca_ses24hn<s(0)(0)(0)>[&] = 169,
	AlarmTypeID_lp_tca_ses24hf<s(0)(0)(0)>[&] = 170,
	AlarmTypeID_lp_tca_uas15mn<s(0)(0)(0)>[&] = 171,
	AlarmTypeID_lp_tca_uas15mf<s(0)(0)(0)>[&] = 172,
	AlarmTypeID_lp_tca_uas24hn<s(0)(0)(0)>[&] = 173,
	AlarmTypeID_lp_tca_uas24hf<s(0)(0)(0)>[&] = 174,
	AlarmTypeID_lp_tca_uap15mn<s(0)(0)(0)>[&] = 175,
	AlarmTypeID_lp_tca_uap15mf<s(0)(0)(0)>[&] = 176,
	AlarmTypeID_lp_tca_uap24hn<s(0)(0)(0)>[&] = 177,
	AlarmTypeID_lp_tca_uap24hf<s(0)(0)(0)>[&] = 178,
	AlarmTypeID_lp_tca_cses15mn<s(0)(0)(0)>[&] = 179,
	AlarmTypeID_lp_tca_cses15mf<s(0)(0)(0)>[&] = 180,
	AlarmTypeID_lp_tca_cses24hn<s(0)(0)(0)>[&] = 181,
	AlarmTypeID_lp_tca_cses24hf<s(0)(0)(0)>[&] = 182,
	AlarmTypeID_lp_tca_pjcp15m<s(0)(0)(0)>[&] = 183,
	AlarmTypeID_lp_tca_pjcp24h<s(0)(0)(0)>[&] = 184,
	AlarmTypeID_lp_tca_pjcn15m<s(0)(0)(0)>[&] = 185,
	AlarmTypeID_lp_tca_pjcn24h<s(0)(0)(0)>[&] = 186,
	AlarmTypeID_env_mdi1<s(0)(0)(0)>[&] = 187,
	AlarmTypeID_env_mdi2<s(0)(0)(0)>[&] = 188,
	AlarmTypeID_env_mdi3<s(0)(0)(0)>[&] = 189,
	AlarmTypeID_env_mdi4<s(0)(0)(0)>[&] = 190,
	AlarmTypeID_rpr_katoe<s(0)(0)(0)>[&] = 191,
	AlarmTypeID_rpr_katow<s(0)(0)(0)>[&] = 192,
	AlarmTypeID_rpr_dmac<s(0)(0)(0)>[&] = 193,
	AlarmTypeID_rpr_eres0<s(0)(0)(0)>[&] = 194,
	AlarmTypeID_rpr_eres1<s(0)(0)(0)>[&] = 195,
	AlarmTypeID_rpr_lrnc<s(0)(0)(0)>[&] = 196,
	AlarmTypeID_rpr_mmac<s(0)(0)(0)>[&] = 197,
	AlarmTypeID_rpr_mstn<s(0)(0)(0)>[&] = 198,
	AlarmTypeID_rpr_mscbe<s(0)(0)(0)>[&] = 199,
	AlarmTypeID_rpr_mscbw<s(0)(0)(0)>[&] = 200,
	AlarmTypeID_rpr_pmcfg<s(0)(0)(0)>[&] = 201,
	AlarmTypeID_rpr_tpincs<s(0)(0)(0)>[&] = 202,
	AlarmTypeID_rpr_tpinst<s(0)(0)(0)>[&] = 203,
	AlarmTypeID_oa_tf<s(0)(0)(0)>[&] = 211,
	AlarmTypeID_oa_los<s(0)(0)(0)>[&] = 212,
	AlarmTypeID_oa_bias<s(0)(0)(0)>[&] = 214,
	AlarmTypeID_oa_lth<s(0)(0)(0)>[&] = 215,
	AlarmTypeID_eqp_mismatch<s(0)(0)(0)>[&] = 216,
	AlarmTypeID_neg_slip_tca_15m<s(0)(0)(0)>[&] = 217,
	AlarmTypeID_neg_slip_tca_24h<s(0)(0)(0)>[&] = 218,
	AlarmTypeID_pos_slip_tca_15m<s(0)(0)(0)>[&] = 219,
	AlarmTypeID_pos_slip_tca_24h<s(0)(0)(0)>[&] = 220,
	AlarmTypeID_set_timedeg<s(0)(0)(0)>[&] = 221,
	AlarmTypeID_sfp_failure<s(0)(0)(0)>[&] = 222,
	AlarmTypeID_ecc1_failure<s(0)(0)(0)>[&] = 223,
	AlarmTypeID_sfp_mismatch<s(0)(0)(0)>[&] = 224,
	AlarmTypeID_ppi_ais<s(0)(0)(0)>[&] = 225,
	AlarmTypeID_oa_output_power_high<s(0)(0)(0)>[&] = 226,
	AlarmTypeID_oa_gain_high<s(0)(0)(0)>[&] = 227,
	AlarmTypeID_ecc2_failure<s(0)(0)(0)>[&] = 228,
	AlarmTypeID_memory_card_failure<s(0)(0)(0)>[&] = 229,
	AlarmTypeID_ppi_lof<s(0)(0)(0)>[&] = 230,
	AlarmTypeID_ppi_lom<s(0)(0)(0)>[&] = 231,
	AlarmTypeID_ppi_rdi<s(0)(0)(0)>[&] = 232,
	AlarmTypeID_hpvc_tlct<s(0)(0)(0)>[&] = 234,
	AlarmTypeID_lpvc_tlct<s(0)(0)(0)>[&] = 235,
	AlarmTypeID_ppi_tca_es15mn<s(0)(0)(0)>[&] = 236,
	AlarmTypeID_ppi_tca_es15mf<s(0)(0)(0)>[&] = 237,
	AlarmTypeID_ppi_tca_es24hn<s(0)(0)(0)>[&] = 238,
	AlarmTypeID_ppi_tca_es24hf<s(0)(0)(0)>[&] = 239,
	AlarmTypeID_ppi_tca_bbe15mn<s(0)(0)(0)>[&] = 240,
	AlarmTypeID_ppi_tca_bbe15mf<s(0)(0)(0)>[&] = 241,
	AlarmTypeID_ppi_tca_bbe24hn<s(0)(0)(0)>[&] = 242,
	AlarmTypeID_ppi_tca_bbe24hf<s(0)(0)(0)>[&] = 243,
	AlarmTypeID_ppi_tca_ses15mn<s(0)(0)(0)>[&] = 244,
	AlarmTypeID_ppi_tca_ses15mf<s(0)(0)(0)>[&] = 245,
	AlarmTypeID_ppi_tca_ses24hn<s(0)(0)(0)>[&] = 246,
	AlarmTypeID_ppi_tca_ses24hf<s(0)(0)(0)>[&] = 247,
	AlarmTypeID_ppi_tca_uas15mn<s(0)(0)(0)>[&] = 248,
	AlarmTypeID_ppi_tca_uas15mf<s(0)(0)(0)>[&] = 249,
	AlarmTypeID_ppi_tca_uas24hn<s(0)(0)(0)>[&] = 250,
	AlarmTypeID_ppi_tca_uas24hf<s(0)(0)(0)>[&] = 251,
	AlarmTypeID_loss_of_power_input<s(0)(0)(0)>[&] = 253,
	AlarmTypeID_env_mdi5<s(0)(0)(0)>[&] = 254,
	AlarmTypeID_env_mdi6<s(0)(0)(0)>[&] = 255,
	AlarmTypeID_env_mdi7<s(0)(0)(0)>[&] = 256,
	AlarmTypeID_env_mdi8<s(0)(0)(0)>[&] = 257,
	AlarmTypeID_sfp_absent<s(0)(0)(0)>[&] = 258,
	AlarmTypeID_memory_card_absent<s(0)(0)(0)>[&] = 259,
	AlarmTypeID_oa_pf<s(0)(0)(0)>[&] = 260,
	AlarmTypeID_sc_sw_version_mismatch<s(0)(0)(0)>[&] = 286,
	AlarmTypeID_hcoc9_dcf<s(0)(0)(0)>[&] = 287,
	AlarmTypeID_hcoc27_dcf<s(0)(0)(0)>[&] = 288,
	AlarmTypeID_unsuccessful_logins_exceeded<s(0)(0)(0)>[&] = 289,
	AlarmTypeID_log_occupancy_threshold<s(0)(0)(0)>[&] = 290,
	AlarmTypeID_log_is_full<s(0)(0)(0)>[&] = 291,
	AlarmTypeID_unauthorized_access<s(0)(0)(0)>[&] = 292,
	AlarmTypeID_communication_failure<s(0)(0)(0)>[&] = 293,
	AlarmTypeID_no_free_low_order_capacity<s(0)(0)(0)>[&] = 294,
	AlarmTypeID_low_order_capacity_mismatch<s(0)(0)(0)>[&] = 295,
	AlarmTypeID_pll_unlock<s(0)(0)(0)>[&] = 296,
	AlarmTypeID_account_expired_disabled<s(0)(0)(0)>[&] = 297,
	AlarmTypeID_vcxo_failure<s(0)(0)(0)>[&] = 298,
	AlarmTypeID_eq_fal<s(0)(0)(0)>[&] = 299,
	AlarmTypeID_tr_cim<s(0)(0)(0)>[&] = 300,
	AlarmTypeID_otu_lfa<s(0)(0)(0)>[&] = 301,
	AlarmTypeID_otu_lma<s(0)(0)(0)>[&] = 302,
	AlarmTypeID_sm_tim<s(0)(0)(0)>[&] = 303,
	AlarmTypeID_sm_iae<s(0)(0)(0)>[&] = 304,
	AlarmTypeID_sm_bdi<s(0)(0)(0)>[&] = 305,
	AlarmTypeID_opu_ptm<s(0)(0)(0)>[&] = 306,
	AlarmTypeID_loss_of_optical_input<s(0)(0)(0)>[&] = 307,
	AlarmTypeID_ld_fail<s(0)(0)(0)>[&] = 308,
	AlarmTypeID_optical_output_fail<s(0)(0)(0)>[&] = 309,
	AlarmTypeID_wavelength_control<s(0)(0)(0)>[&] = 310,
	AlarmTypeID_dcn_2m_los<s(0)(0)(0)>[&] = 311,
	AlarmTypeID_flash_util_over<s(0)(0)(0)>[&] = 312,
	AlarmTypeID_cfcard_util_over<s(0)(0)(0)>[&] = 313,
	AlarmTypeID_signal_error_fail<s(0)(0)(0)>[&] = 314,
	AlarmTypeID_latch_open<s(0)(0)(0)>[&] = 315,
	AlarmTypeID_otu_deg<s(0)(0)(0)>[&] = 316,
	AlarmTypeID_odu2_loflom<s(0)(0)(0)>[&] = 317,
	AlarmTypeID_odu2_ais<s(0)(0)(0)>[&] = 318,
	AlarmTypeID_odu2_lck<s(0)(0)(0)>[&] = 319,
	AlarmTypeID_odu2_oci<s(0)(0)(0)>[&] = 320,
	AlarmTypeID_odu2_tim<s(0)(0)(0)>[&] = 321,
	AlarmTypeID_odu2_bdi<s(0)(0)(0)>[&] = 322,
	AlarmTypeID_odu2_deg<s(0)(0)(0)>[&] = 323,
	AlarmTypeID_odu2_plm<s(0)(0)(0)>[&] = 324,
	AlarmTypeID_odu2_msim<s(0)(0)(0)>[&] = 325,
	AlarmTypeID_odu1_loflom<s(0)(0)(0)>[&] = 326,
	AlarmTypeID_odu1_ais<s(0)(0)(0)>[&] = 327,
	AlarmTypeID_odu1_lck<s(0)(0)(0)>[&] = 328,
	AlarmTypeID_odu1_oci<s(0)(0)(0)>[&] = 329,
	AlarmTypeID_odu1_tim<s(0)(0)(0)>[&] = 330,
	AlarmTypeID_odu1_bdi<s(0)(0)(0)>[&] = 331,
	AlarmTypeID_odu1_deg<s(0)(0)(0)>[&] = 332,
	AlarmTypeID_odu1_plm<s(0)(0)(0)>[&] = 333,
	AlarmTypeID_hpvc_plct<s(0)(0)(0)>[&] = 334,
	AlarmTypeID_lpvc_plct<s(0)(0)(0)>[&] = 335,
	AlarmTypeID_hpvc_plcr<s(0)(0)(0)>[&] = 336,
	AlarmTypeID_lpvc_plcr<s(0)(0)(0)>[&] = 337,
	AlarmTypeID_eqp_fan_failure<s(0)(0)(0)>[&] = 338
} AlarmTypeID_Tval<s(0)(0)(0)>[&];(D1:AlarmTypeID_Tval:1)[[TYPENAME:AlarmTypeID_Tval]]

typedef enum {
	RprXcCapacity_vc11<s(0)(0)(0)>[&] = 1,
	RprXcCapacity_vc12<s(0)(0)(0)>[&] = 2,
	RprXcCapacity_vc2<s(0)(0)(0)>[&] = 3,
	RprXcCapacity_vc3<s(0)(0)(0)>[&] = 4,
	RprXcCapacity_vc4<s(0)(0)(0)>[&] = 5,
	RprXcCapacity_vc44c<s(0)(0)(0)>[&] = 6,
	RprXcCapacity_vc416c<s(0)(0)(0)>[&] = 7,
	RprXcCapacity_vc464c<s(0)(0)(0)>[&] = 8,
	RprXcCapacity_e1<s(0)(0)(0)>[&] = 9
} RprXcCapacity_Tval<s(0)(0)(0)>[&];(D1:RprXcCapacity_Tval:1)[[TYPENAME:RprXcCapacity_Tval]]

typedef enum {
	PbTimeZone_eniwetok<s(0)(0)(0)>[&] = 0,
	PbTimeZone_midwayIsland<s(0)(0)(0)>[&] = 1,
	PbTimeZone_hawaii<s(0)(0)(0)>[&] = 2,
	PbTimeZone_alaska<s(0)(0)(0)>[&] = 3,
	PbTimeZone_pacificTime<s(0)(0)(0)>[&] = 4,
	PbTimeZone_arizona<s(0)(0)(0)>[&] = 5,
	PbTimeZone_mountainTime<s(0)(0)(0)>[&] = 10,
	PbTimeZone_centralAmerica<s(0)(0)(0)>[&] = 15,
	PbTimeZone_centralTime<s(0)(0)(0)>[&] = 20,
	PbTimeZone_mexico<s(0)(0)(0)>[&] = 25,
	PbTimeZone_saskatchewan<s(0)(0)(0)>[&] = 30,
	PbTimeZone_bogota<s(0)(0)(0)>[&] = 35,
	PbTimeZone_easternTime<s(0)(0)(0)>[&] = 40,
	PbTimeZone_indiana<s(0)(0)(0)>[&] = 45,
	PbTimeZone_atlantic<s(0)(0)(0)>[&] = 50,
	PbTimeZone_caracas<s(0)(0)(0)>[&] = 55,
	PbTimeZone_santiago<s(0)(0)(0)>[&] = 56,
	PbTimeZone_newfoundland<s(0)(0)(0)>[&] = 60,
	PbTimeZone_brasilia<s(0)(0)(0)>[&] = 65,
	PbTimeZone_buenosAires<s(0)(0)(0)>[&] = 70,
	PbTimeZone_greenland<s(0)(0)(0)>[&] = 73,
	PbTimeZone_midAtlantic<s(0)(0)(0)>[&] = 75,
	PbTimeZone_azores<s(0)(0)(0)>[&] = 80,
	PbTimeZone_capeVerdeIslands<s(0)(0)(0)>[&] = 83,
	PbTimeZone_casablanca<s(0)(0)(0)>[&] = 85,
	PbTimeZone_greenwich<s(0)(0)(0)>[&] = 90,
	PbTimeZone_amsterdam<s(0)(0)(0)>[&] = 95,
	PbTimeZone_belgrade<s(0)(0)(0)>[&] = 100,
	PbTimeZone_brussels<s(0)(0)(0)>[&] = 105,
	PbTimeZone_sarajevo<s(0)(0)(0)>[&] = 110,
	PbTimeZone_westCentralAfrica<s(0)(0)(0)>[&] = 115,
	PbTimeZone_athens<s(0)(0)(0)>[&] = 120,
	PbTimeZone_bucharest<s(0)(0)(0)>[&] = 125,
	PbTimeZone_cairo<s(0)(0)(0)>[&] = 130,
	PbTimeZone_harare<s(0)(0)(0)>[&] = 135,
	PbTimeZone_helsinki<s(0)(0)(0)>[&] = 140,
	PbTimeZone_jerusalem<s(0)(0)(0)>[&] = 145,
	PbTimeZone_baghdad<s(0)(0)(0)>[&] = 150,
	PbTimeZone_kuwait<s(0)(0)(0)>[&] = 155,
	PbTimeZone_moscow<s(0)(0)(0)>[&] = 158,
	PbTimeZone_nairobi<s(0)(0)(0)>[&] = 160,
	PbTimeZone_tehran<s(0)(0)(0)>[&] = 165,
	PbTimeZone_abuDhabi<s(0)(0)(0)>[&] = 170,
	PbTimeZone_baku<s(0)(0)(0)>[&] = 175,
	PbTimeZone_kabul<s(0)(0)(0)>[&] = 180,
	PbTimeZone_ekaterinburg<s(0)(0)(0)>[&] = 185,
	PbTimeZone_islamabad<s(0)(0)(0)>[&] = 190,
	PbTimeZone_calcutta<s(0)(0)(0)>[&] = 195,
	PbTimeZone_kathmandu<s(0)(0)(0)>[&] = 198,
	PbTimeZone_almaty<s(0)(0)(0)>[&] = 200,
	PbTimeZone_astana<s(0)(0)(0)>[&] = 201,
	PbTimeZone_sri<s(0)(0)(0)>[&] = 202,
	PbTimeZone_rangoony<s(0)(0)(0)>[&] = 205,
	PbTimeZone_bangkok<s(0)(0)(0)>[&] = 207,
	PbTimeZone_krasnoyarsk<s(0)(0)(0)>[&] = 208,
	PbTimeZone_beijing<s(0)(0)(0)>[&] = 210,
	PbTimeZone_irkutsk<s(0)(0)(0)>[&] = 212,
	PbTimeZone_kualaLumpur<s(0)(0)(0)>[&] = 215,
	PbTimeZone_perth<s(0)(0)(0)>[&] = 220,
	PbTimeZone_taipei<s(0)(0)(0)>[&] = 225,
	PbTimeZone_osaka<s(0)(0)(0)>[&] = 230,
	PbTimeZone_seoulr<s(0)(0)(0)>[&] = 235,
	PbTimeZone_yakutsk<s(0)(0)(0)>[&] = 240,
	PbTimeZone_adelaidei<s(0)(0)(0)>[&] = 245,
	PbTimeZone_darwin<s(0)(0)(0)>[&] = 250,
	PbTimeZone_brisbane<s(0)(0)(0)>[&] = 255,
	PbTimeZone_canberra<s(0)(0)(0)>[&] = 260,
	PbTimeZone_guam<s(0)(0)(0)>[&] = 265,
	PbTimeZone_hobart<s(0)(0)(0)>[&] = 270,
	PbTimeZone_vladivostok<s(0)(0)(0)>[&] = 275,
	PbTimeZone_magadan<s(0)(0)(0)>[&] = 280,
	PbTimeZone_auckland<s(0)(0)(0)>[&] = 285,
	PbTimeZone_fujiIslands<s(0)(0)(0)>[&] = 290,
	PbTimeZone_nuku<s(0)(0)(0)>[&] = 300
} PbTimeZone_Tval<s(0)(0)(0)>[&];(D1:PbTimeZone_Tval:1)[[TYPENAME:PbTimeZone_Tval]]

typedef enum {
	PbSecondaryStatus_none<s(0)(0)(0)>[&] = 1,
	PbSecondaryStatus_bsl_down<s(0)(0)(0)>[&] = 2,
	PbSecondaryStatus_bsl_adminDown<s(0)(0)(0)>[&] = 3,
	PbSecondaryStatus_bsl_HW_adminDown<s(0)(0)(0)>[&] = 4,
	PbSecondaryStatus_bsl_HW_adminTest<s(0)(0)(0)>[&] = 5,
	PbSecondaryStatus_bsl_HW_down<s(0)(0)(0)>[&] = 6,
	PbSecondaryStatus_bsl_notPresent<s(0)(0)(0)>[&] = 7,
	PbSecondaryStatus_sl_adminDown<s(0)(0)(0)>[&] = 8,
	PbSecondaryStatus_sl_adminTest<s(0)(0)(0)>[&] = 9,
	PbSecondaryStatus_hw_adminDown<s(0)(0)(0)>[&] = 10,
	PbSecondaryStatus_hw_adminTest<s(0)(0)(0)>[&] = 11,
	PbSecondaryStatus_hw_down<s(0)(0)(0)>[&] = 12,
	PbSecondaryStatus_nc_HW_removed<s(0)(0)(0)>[&] = 13,
	PbSecondaryStatus_nc_HW_adminDown<s(0)(0)(0)>[&] = 14,
	PbSecondaryStatus_nc_HW_adminTest<s(0)(0)(0)>[&] = 15,
	PbSecondaryStatus_nc_HW_down<s(0)(0)(0)>[&] = 16,
	PbSecondaryStatus_nc_SL_adminDown<s(0)(0)(0)>[&] = 17,
	PbSecondaryStatus_nc_SL_adminTest<s(0)(0)(0)>[&] = 18,
	PbSecondaryStatus_nc_SL_down<s(0)(0)(0)>[&] = 19,
	PbSecondaryStatus_nc_funcAdminDown<s(0)(0)(0)>[&] = 20,
	PbSecondaryStatus_hw_inactive<s(0)(0)(0)>[&] = 21
} PbSecondaryStatus_Tval<s(0)(0)(0)>[&];(D1:PbSecondaryStatus_Tval:1)[[TYPENAME:PbSecondaryStatus_Tval]]

typedef enum {
	PbLatchState_on<s(0)(0)(0)>[&] = 1,
	PbLatchState_off<s(0)(0)(0)>[&] = 2
} PbLatchState_Tval<s(0)(0)(0)>[&];(D1:PbLatchState_Tval:1)[[TYPENAME:PbLatchState_Tval]]

typedef enum {
	PbTMSOutState_normal<s(0)(0)(0)>[&] = 0,
	PbTMSOutState_ais<s(0)(0)(0)>[&] = 1,
	PbTMSOutState_dnu<s(0)(0)(0)>[&] = 2,
	PbTMSOutState_shutdown<s(0)(0)(0)>[&] = 3,
	PbTMSOutState_na<s(0)(0)(0)>[&] = 4
} PbTMSOutState_Tval<s(0)(0)(0)>[&];(D1:PbTMSOutState_Tval:1)[[TYPENAME:PbTMSOutState_Tval]]

typedef enum {
	RprProtectionStatus_noRequest<s(0)(0)(0)>[&] = 1,
	RprProtectionStatus_waitToRestore<s(0)(0)(0)>[&] = 2,
	RprProtectionStatus_manualSwitch<s(0)(0)(0)>[&] = 4,
	RprProtectionStatus_signalDegraded<s(0)(0)(0)>[&] = 8,
	RprProtectionStatus_signalFailed<s(0)(0)(0)>[&] = 16,
	RprProtectionStatus_forcedSwitch<s(0)(0)(0)>[&] = 32
} RprProtectionStatus_Tval<s(0)(0)(0)>[&];(D1:RprProtectionStatus_Tval:1)[[TYPENAME:RprProtectionStatus_Tval]]

typedef enum {
	PbSlotNumberType_none<s(0)(0)(0)>[&] = 0,
	PbSlotNumberType_lc1<s(0)(0)(0)>[&] = 1,
	PbSlotNumberType_lc2<s(0)(0)(0)>[&] = 2,
	PbSlotNumberType_lc3<s(0)(0)(0)>[&] = 3,
	PbSlotNumberType_lc4<s(0)(0)(0)>[&] = 4,
	PbSlotNumberType_lc5<s(0)(0)(0)>[&] = 5,
	PbSlotNumberType_lc6<s(0)(0)(0)>[&] = 6,
	PbSlotNumberType_hocc1<s(0)(0)(0)>[&] = 7,
	PbSlotNumberType_hocc2<s(0)(0)(0)>[&] = 8,
	PbSlotNumberType_sfc1<s(0)(0)(0)>[&] = 9,
	PbSlotNumberType_sfc2<s(0)(0)(0)>[&] = 10,
	PbSlotNumberType_ce1<s(0)(0)(0)>[&] = 11,
	PbSlotNumberType_ce2<s(0)(0)(0)>[&] = 12,
	PbSlotNumberType_ce3<s(0)(0)(0)>[&] = 13,
	PbSlotNumberType_ce4<s(0)(0)(0)>[&] = 14,
	PbSlotNumberType_ce5<s(0)(0)(0)>[&] = 15,
	PbSlotNumberType_ce6<s(0)(0)(0)>[&] = 16,
	PbSlotNumberType_sc1<s(0)(0)(0)>[&] = 17,
	PbSlotNumberType_sc2<s(0)(0)(0)>[&] = 18,
	PbSlotNumberType_si<s(0)(0)(0)>[&] = 19,
	PbSlotNumberType_sfm1<s(0)(0)(0)>[&] = 20,
	PbSlotNumberType_sfm2<s(0)(0)(0)>[&] = 21,
	PbSlotNumberType_io1<s(0)(0)(0)>[&] = 22,
	PbSlotNumberType_io2<s(0)(0)(0)>[&] = 23,
	PbSlotNumberType_io3<s(0)(0)(0)>[&] = 24,
	PbSlotNumberType_io4<s(0)(0)(0)>[&] = 25,
	PbSlotNumberType_io5<s(0)(0)(0)>[&] = 26,
	PbSlotNumberType_io6<s(0)(0)(0)>[&] = 27,
	PbSlotNumberType_io7<s(0)(0)(0)>[&] = 28,
	PbSlotNumberType_io8<s(0)(0)(0)>[&] = 29,
	PbSlotNumberType_io9<s(0)(0)(0)>[&] = 30,
	PbSlotNumberType_io10<s(0)(0)(0)>[&] = 31,
	PbSlotNumberType_io11<s(0)(0)(0)>[&] = 32,
	PbSlotNumberType_io12<s(0)(0)(0)>[&] = 33,
	PbSlotNumberType_io13<s(0)(0)(0)>[&] = 34,
	PbSlotNumberType_io14<s(0)(0)(0)>[&] = 35,
	PbSlotNumberType_io15<s(0)(0)(0)>[&] = 36,
	PbSlotNumberType_power1<s(0)(0)(0)>[&] = 37,
	PbSlotNumberType_power2<s(0)(0)(0)>[&] = 38,
	PbSlotNumberType_fan1<s(0)(0)(0)>[&] = 39,
	PbSlotNumberType_fan2<s(0)(0)(0)>[&] = 40
} PbSlotNumberType_Tval<s(0)(0)(0)>[&];(D1:PbSlotNumberType_Tval:1)[[TYPENAME:PbSlotNumberType_Tval]]

typedef enum {
	PbMsspNodeSide_west<s(0)(0)(0)>[&] = 0,
	PbMsspNodeSide_east<s(0)(0)(0)>[&] = 1
} PbMsspNodeSide_Tval<s(0)(0)(0)>[&];(D1:PbMsspNodeSide_Tval:1)[[TYPENAME:PbMsspNodeSide_Tval]]

typedef enum {
	PbSNCPChannelState_active<s(0)(0)(0)>[&] = 1,
	PbSNCPChannelState_standby<s(0)(0)(0)>[&] = 2
} PbSNCPChannelState_Tval<s(0)(0)(0)>[&];(D1:PbSNCPChannelState_Tval:1)[[TYPENAME:PbSNCPChannelState_Tval]]

typedef enum {
	SdhFtpCmndLastState_notApplicable<s(0)(0)(0)>[&] = 1,
	SdhFtpCmndLastState_success<s(0)(0)(0)>[&] = 2,
	SdhFtpCmndLastState_failed<s(0)(0)(0)>[&] = 3,
	SdhFtpCmndLastState_inProgress<s(0)(0)(0)>[&] = 4
} SdhFtpCmndLastState_Tval<s(0)(0)(0)>[&];(D1:SdhFtpCmndLastState_Tval:1)[[TYPENAME:SdhFtpCmndLastState_Tval]]

typedef enum {
	PbLinkGeneralType_networkLink<s(0)(0)(0)>[&] = 1,
	PbLinkGeneralType_offNetworkLink<s(0)(0)(0)>[&] = 2
} PbLinkGeneralType_Tval<s(0)(0)(0)>[&];(D1:PbLinkGeneralType_Tval:1)[[TYPENAME:PbLinkGeneralType_Tval]]

typedef enum {
	PbBoardFunction_none<s(0)(0)(0)>[&] = 0,
	PbBoardFunction_empty<s(0)(0)(0)>[&] = 1,
	PbBoardFunction_main<s(0)(0)(0)>[&] = 2305,
	PbBoardFunction_hocc<s(0)(0)(0)>[&] = 2306,
	PbBoardFunction_locc<s(0)(0)(0)>[&] = 2307,
	PbBoardFunction_e1x126<s(0)(0)(0)>[&] = 2308,
	PbBoardFunction_e1x63<s(0)(0)(0)>[&] = 2309,
	PbBoardFunction_stm_1ex8<s(0)(0)(0)>[&] = 2310,
	PbBoardFunction_e3ds3x12<s(0)(0)(0)>[&] = 2312,
	PbBoardFunction_stm_41x8<s(0)(0)(0)>[&] = 2320,
	PbBoardFunction_stm_1x8<s(0)(0)(0)>[&] = 2321,
	PbBoardFunction_stm_16x4<s(0)(0)(0)>[&] = 2322,
	PbBoardFunction_stm_16x8<s(0)(0)(0)>[&] = 2323,
	PbBoardFunction_e3ds3px12<s(0)(0)(0)>[&] = 2324,
	PbBoardFunction_stm_64x2<s(0)(0)(0)>[&] = 2325,
	PbBoardFunction_stm_64x1<s(0)(0)(0)>[&] = 2326,
	PbBoardFunction_oaBooster13dbm<s(0)(0)(0)>[&] = 2336,
	PbBoardFunction_oaBooster15dbm<s(0)(0)(0)>[&] = 2337,
	PbBoardFunction_oaBooster18dbm<s(0)(0)(0)>[&] = 2338,
	PbBoardFunction_oaPreamp20db<s(0)(0)(0)>[&] = 2340,
	PbBoardFunction_tengetx1<s(0)(0)(0)>[&] = 2342,
	PbBoardFunction_tengetx1_geax46<s(0)(0)(0)>[&] = 2343,
	PbBoardFunction_getx8<s(0)(0)(0)>[&] = 2344,
	PbBoardFunction_gex6_fegeax4<s(0)(0)(0)>[&] = 2345,
	PbBoardFunction_gex2_ferprx12<s(0)(0)(0)>[&] = 2352,
	PbBoardFunction_gex4_feax12<s(0)(0)(0)>[&] = 2353,
	PbBoardFunction_fetx12<s(0)(0)(0)>[&] = 2354,
	PbBoardFunction_fc2gx8<s(0)(0)(0)>[&] = 2355,
	PbBoardFunction_stm_256x1<s(0)(0)(0)>[&] = 2357,
	PbBoardFunction_fan<s(0)(0)(0)>[&] = 2358,
	PbBoardFunction_si_without_eow<s(0)(0)(0)>[&] = 2368,
	PbBoardFunction_stm_16x2<s(0)(0)(0)>[&] = 2369,
	PbBoardFunction_otu_2x1<s(0)(0)(0)>[&] = 2400,
	PbBoardFunction_tengex1_gex10l2<s(0)(0)(0)>[&] = 2440,
	PbBoardFunction_stm_16x8m<s(0)(0)(0)>[&] = 2441,
	PbBoardFunction_stm_41x16m<s(0)(0)(0)>[&] = 2448,
	PbBoardFunction_stm_64x2m<s(0)(0)(0)>[&] = 2449,
	PbBoardFunction_otu_2x2<s(0)(0)(0)>[&] = 2450,
	PbBoardFunction_chassis<s(0)(0)(0)>[&] = 4232,
	PbBoardFunction_cc<s(0)(0)(0)>[&] = 4240,
	PbBoardFunction_dataFabric_controller<s(0)(0)(0)>[&] = 4241,
	PbBoardFunction_dataFabric<s(0)(0)(0)>[&] = 4242,
	PbBoardFunction_si<s(0)(0)(0)>[&] = 4243,
	PbBoardFunction_power<s(0)(0)(0)>[&] = 4244,
	PbBoardFunction_chassis_fan_airFilter<s(0)(0)(0)>[&] = 4245,
	PbBoardFunction_fanTray<s(0)(0)(0)>[&] = 4246,
	PbBoardFunction_fanCircuitBoard<s(0)(0)(0)>[&] = 4247,
	PbBoardFunction_backplane<s(0)(0)(0)>[&] = 4248,
	PbBoardFunction_e1x21p_75<s(0)(0)(0)>[&] = 4352,
	PbBoardFunction_e1x21p_120<s(0)(0)(0)>[&] = 4353,
	PbBoardFunction_stm_1ex16<s(0)(0)(0)>[&] = 4354,
	PbBoardFunction_stm_1ex8p<s(0)(0)(0)>[&] = 4356,
	PbBoardFunction_e3ds3x6p<s(0)(0)(0)>[&] = 4358,
	PbBoardFunction_gex20<s(0)(0)(0)>[&] = 4359,
	PbBoardFunction_tengex2<s(0)(0)(0)>[&] = 4360,
	PbBoardFunction_gex10_eos<s(0)(0)(0)>[&] = 4361,
	PbBoardFunction_tengex2_eos<s(0)(0)(0)>[&] = 4368,
	PbBoardFunction_gmpls_load<s(0)(0)(0)>[&] = 983040
} PbBoardFunction_Tval<s(0)(0)(0)>[&];(D1:PbBoardFunction_Tval:1)[[TYPENAME:PbBoardFunction_Tval]]

typedef enum {
	PbYesNo_yes<s(0)(0)(0)>[&] = 1,
	PbYesNo_no<s(0)(0)(0)>[&] = 2
} PbYesNo_Tval<s(0)(0)(0)>[&];(D1:PbYesNo_Tval:1)[[TYPENAME:PbYesNo_Tval]]

typedef enum {
	PBMSPSignalState_signalunknown<s(0)(0)(0)>[&] = 0,
	PBMSPSignalState_signalfailhigh<s(0)(0)(0)>[&] = 1,
	PBMSPSignalState_signalfaillow<s(0)(0)(0)>[&] = 2,
	PBMSPSignalState_signaldeglhigh<s(0)(0)(0)>[&] = 3,
	PBMSPSignalState_signaldeglow<s(0)(0)(0)>[&] = 4,
	PBMSPSignalState_signalnormal<s(0)(0)(0)>[&] = 5
} PBMSPSignalState_Tval<s(0)(0)(0)>[&];(D1:PBMSPSignalState_Tval:1)[[TYPENAME:PBMSPSignalState_Tval]]

typedef enum {
	PbMSPSignalDirection_unidirection<s(0)(0)(0)>[&] = 1,
	PbMSPSignalDirection_bidirection<s(0)(0)(0)>[&] = 2
} PbMSPSignalDirection_Tval<s(0)(0)(0)>[&];(D1:PbMSPSignalDirection_Tval:1)[[TYPENAME:PbMSPSignalDirection_Tval]]

typedef enum {
	PbEpgCmdResult_ok<s(0)(0)(0)>[&] = 0,
	PbEpgCmdResult_failed<s(0)(0)(0)>[&] = 1
} PbEpgCmdResult_Tval<s(0)(0)(0)>[&];(D1:PbEpgCmdResult_Tval:1)[[TYPENAME:PbEpgCmdResult_Tval]]

typedef enum {
	TMSIfSdhQlType_sdh<s(0)(0)(0)>[&] = 1,
	TMSIfSdhQlType_sonet<s(0)(0)(0)>[&] = 2
} TMSIfSdhQlType_Tval<s(0)(0)(0)>[&];(D1:TMSIfSdhQlType_Tval:1)[[TYPENAME:TMSIfSdhQlType_Tval]]

typedef enum {
	PbChassisType_mw863<s(0)(0)(0)>[&] = 1,
	PbChassisType_mw808<s(0)(0)(0)>[&] = 2,
	PbChassisType_mw8100<s(0)(0)(0)>[&] = 3,
	PbChassisType_mw801<s(0)(0)(0)>[&] = 4,
	PbChassisType_hiT7035<s(0)(0)(0)>[&] = 5,
	PbChassisType_hiT7080<s(0)(0)(0)>[&] = 7,
	PbChassisType_hiT7065<s(0)(0)(0)>[&] = 8,
	PbChassisType_all<s(0)(0)(0)>[&] = 255
} PbChassisType_Tval<s(0)(0)(0)>[&];(D1:PbChassisType_Tval:1)[[TYPENAME:PbChassisType_Tval]]

typedef enum {
	PbMsspSwStatus_idle<s(0)(0)(0)>[&] = 0,
	PbMsspSwStatus_bridge<s(0)(0)(0)>[&] = 1,
	PbMsspSwStatus_bridgeAndSwitch<s(0)(0)(0)>[&] = 2,
	PbMsspSwStatus_passthough<s(0)(0)(0)>[&] = 3
} PbMsspSwStatus_Tval<s(0)(0)(0)>[&];(D1:PbMsspSwStatus_Tval:1)[[TYPENAME:PbMsspSwStatus_Tval]]

typedef enum {
	PbTMSQl_inv0<s(0)(0)(0)>[&] = 0,
	PbTMSQl_inv1<s(0)(0)(0)>[&] = 1,
	PbTMSQl_prc<s(0)(0)(0)>[&] = 2,
	PbTMSQl_inv3<s(0)(0)(0)>[&] = 3,
	PbTMSQl_ssut<s(0)(0)(0)>[&] = 4,
	PbTMSQl_inv5<s(0)(0)(0)>[&] = 5,
	PbTMSQl_inv6<s(0)(0)(0)>[&] = 6,
	PbTMSQl_inv7<s(0)(0)(0)>[&] = 7,
	PbTMSQl_ssul<s(0)(0)(0)>[&] = 8,
	PbTMSQl_inv9<s(0)(0)(0)>[&] = 9,
	PbTMSQl_inv10<s(0)(0)(0)>[&] = 10,
	PbTMSQl_sec<s(0)(0)(0)>[&] = 11,
	PbTMSQl_inv12<s(0)(0)(0)>[&] = 12,
	PbTMSQl_inv13<s(0)(0)(0)>[&] = 13,
	PbTMSQl_inv14<s(0)(0)(0)>[&] = 14,
	PbTMSQl_dnu<s(0)(0)(0)>[&] = 15,
	PbTMSQl_failed<s(0)(0)(0)>[&] = 16,
	PbTMSQl_nsupp<s(0)(0)(0)>[&] = 17,
	PbTMSQl_unc<s(0)(0)(0)>[&] = 18
} PbTMSQl_Tval<s(0)(0)(0)>[&];(D1:PbTMSQl_Tval:1)[[TYPENAME:PbTMSQl_Tval]]

typedef enum {
	TypeMibUpgFailedIndex_noError<s(0)(0)(0)>[&] = 0,
	TypeMibUpgFailedIndex_unKnown<s(0)(0)(0)>[&] = 1,
	TypeMibUpgFailedIndex_writeFlashFailed<s(0)(0)(0)>[&] = 2,
	TypeMibUpgFailedIndex_readFlashFailed<s(0)(0)(0)>[&] = 3,
	TypeMibUpgFailedIndex_flashFull<s(0)(0)(0)>[&] = 4,
	TypeMibUpgFailedIndex_flashError<s(0)(0)(0)>[&] = 5,
	TypeMibUpgFailedIndex_writeCfFailed<s(0)(0)(0)>[&] = 6,
	TypeMibUpgFailedIndex_readCfFailed<s(0)(0)(0)>[&] = 7,
	TypeMibUpgFailedIndex_cfFull<s(0)(0)(0)>[&] = 8,
	TypeMibUpgFailedIndex_cfError<s(0)(0)(0)>[&] = 9,
	TypeMibUpgFailedIndex_copyAscFlashFailed<s(0)(0)(0)>[&] = 10,
	TypeMibUpgFailedIndex_copyAscCfFailed<s(0)(0)(0)>[&] = 11,
	TypeMibUpgFailedIndex_copySscFlashFailed<s(0)(0)(0)>[&] = 12,
	TypeMibUpgFailedIndex_copySscCfFailed<s(0)(0)(0)>[&] = 13,
	TypeMibUpgFailedIndex_spawnTaskFailed<s(0)(0)(0)>[&] = 14,
	TypeMibUpgFailedIndex_paraInvalid<s(0)(0)(0)>[&] = 15,
	TypeMibUpgFailedIndex_writeRamdscFailed<s(0)(0)(0)>[&] = 16,
	TypeMibUpgFailedIndex_readRamdscFailed<s(0)(0)(0)>[&] = 17,
	TypeMibUpgFailedIndex_setMibFailed<s(0)(0)(0)>[&] = 18,
	TypeMibUpgFailedIndex_getMibFailed<s(0)(0)(0)>[&] = 19,
	TypeMibUpgFailedIndex_openDirFailed<s(0)(0)(0)>[&] = 20,
	TypeMibUpgFailedIndex_createDirFailed<s(0)(0)(0)>[&] = 21,
	TypeMibUpgFailedIndex_peerScOnline<s(0)(0)(0)>[&] = 22,
	TypeMibUpgFailedIndex_peerScOffline<s(0)(0)(0)>[&] = 23,
	TypeMibUpgFailedIndex_synRamdscFailed<s(0)(0)(0)>[&] = 24,
	TypeMibUpgFailedIndex_synFlashFailed<s(0)(0)(0)>[&] = 25,
	TypeMibUpgFailedIndex_synCfFailed<s(0)(0)(0)>[&] = 26,
	TypeMibUpgFailedIndex_msgCreateFailed<s(0)(0)(0)>[&] = 27,
	TypeMibUpgFailedIndex_msgSendFailed<s(0)(0)(0)>[&] = 28,
	TypeMibUpgFailedIndex_cmndStatusInvalid<s(0)(0)(0)>[&] = 29,
	TypeMibUpgFailedIndex_sscCopyTimeout<s(0)(0)(0)>[&] = 30,
	TypeMibUpgFailedIndex_createSemFailed<s(0)(0)(0)>[&] = 31,
	TypeMibUpgFailedIndex_mibHeadFileInvalid<s(0)(0)(0)>[&] = 32,
	TypeMibUpgFailedIndex_mibNeFileCheckSumInvalid<s(0)(0)(0)>[&] = 33,
	TypeMibUpgFailedIndex_mibGmFileCheckSumInvalid<s(0)(0)(0)>[&] = 34,
	TypeMibUpgFailedIndex_lcsFileInvalid<s(0)(0)(0)>[&] = 35,
	TypeMibUpgFailedIndex_dirCopyFailed<s(0)(0)(0)>[&] = 36,
	TypeMibUpgFailedIndex_dirDelFailed<s(0)(0)(0)>[&] = 37,
	TypeMibUpgFailedIndex_zipFileNotExist<s(0)(0)(0)>[&] = 38,
	TypeMibUpgFailedIndex_tarFileFailed<s(0)(0)(0)>[&] = 39,
	TypeMibUpgFailedIndex_zipFileFailed<s(0)(0)(0)>[&] = 40,
	TypeMibUpgFailedIndex_unzipFileFailed<s(0)(0)(0)>[&] = 41,
	TypeMibUpgFailedIndex_gsemTakeFailed<s(0)(0)(0)>[&] = 42,
	TypeMibUpgFailedIndex_gSaveFlagSetFailed<s(0)(0)(0)>[&] = 43,
	TypeMibUpgFailedIndex_dirRnameLoadTmpFailed<s(0)(0)(0)>[&] = 44,
	TypeMibUpgFailedIndex_dirRnameTmpLoadFailed<s(0)(0)(0)>[&] = 45,
	TypeMibUpgFailedIndex_dirRnameTmpBkupFailed<s(0)(0)(0)>[&] = 46,
	TypeMibUpgFailedIndex_dirRnameBkupActFailed<s(0)(0)(0)>[&] = 47,
	TypeMibUpgFailedIndex_mibIncSaveFailed<s(0)(0)(0)>[&] = 48,
	TypeMibUpgFailedIndex_mibAllSaveFailed<s(0)(0)(0)>[&] = 49,
	TypeMibUpgFailedIndex_mibSaveSwitchSetFailed<s(0)(0)(0)>[&] = 50,
	TypeMibUpgFailedIndex_scSwitch<s(0)(0)(0)>[&] = 51,
	TypeMibUpgFailedIndex_upgCommandRunning<s(0)(0)(0)>[&] = 52,
	TypeMibUpgFailedIndex_cfaSoftCopying<s(0)(0)(0)>[&] = 53,
	TypeMibUpgFailedIndex_psmMibCheckingFuncInvalid<s(0)(0)(0)>[&] = 54,
	TypeMibUpgFailedIndex_lcmMibCheckingFuncInvalid<s(0)(0)(0)>[&] = 55,
	TypeMibUpgFailedIndex_globleHeadFileInvalid<s(0)(0)(0)>[&] = 56,
	TypeMibUpgFailedIndex_neHeadfileFlagSetFailed<s(0)(0)(0)>[&] = 57,
	TypeMibUpgFailedIndex_psmHeadfileFlagSetFailed<s(0)(0)(0)>[&] = 58,
	TypeMibUpgFailedIndex_uploadPrepareTimeout<s(0)(0)(0)>[&] = 71,
	TypeMibUpgFailedIndex_uploadPrepareFailed<s(0)(0)(0)>[&] = 72,
	TypeMibUpgFailedIndex_uploadMidTimeout<s(0)(0)(0)>[&] = 73,
	TypeMibUpgFailedIndex_uploadMidFailed<s(0)(0)(0)>[&] = 74,
	TypeMibUpgFailedIndex_uploadCanceled<s(0)(0)(0)>[&] = 75,
	TypeMibUpgFailedIndex_downloadPrepareTimeout<s(0)(0)(0)>[&] = 81,
	TypeMibUpgFailedIndex_downloadPrepareFailed<s(0)(0)(0)>[&] = 82,
	TypeMibUpgFailedIndex_downloadMidTimeout<s(0)(0)(0)>[&] = 83,
	TypeMibUpgFailedIndex_downloadMidFailed<s(0)(0)(0)>[&] = 84,
	TypeMibUpgFailedIndex_downloadCanceled<s(0)(0)(0)>[&] = 85,
	TypeMibUpgFailedIndex_switchAscTimeout<s(0)(0)(0)>[&] = 91,
	TypeMibUpgFailedIndex_switchAscFailed<s(0)(0)(0)>[&] = 92,
	TypeMibUpgFailedIndex_switchAscCfFailed<s(0)(0)(0)>[&] = 93,
	TypeMibUpgFailedIndex_synTimeout<s(0)(0)(0)>[&] = 101,
	TypeMibUpgFailedIndex_synCanceled<s(0)(0)(0)>[&] = 102,
	TypeMibUpgFailedIndex_synFailed<s(0)(0)(0)>[&] = 103,
	TypeMibUpgFailedIndex_clearTimeout<s(0)(0)(0)>[&] = 111,
	TypeMibUpgFailedIndex_clearFailed<s(0)(0)(0)>[&] = 112,
	TypeMibUpgFailedIndex_ascMibClearSetFailed<s(0)(0)(0)>[&] = 113,
	TypeMibUpgFailedIndex_sscMibClearSetFailed<s(0)(0)(0)>[&] = 114,
	TypeMibUpgFailedIndex_mibCopyTimeout<s(0)(0)(0)>[&] = 121,
	TypeMibUpgFailedIndex_mibCopyFailed<s(0)(0)(0)>[&] = 122,
	TypeMibUpgFailedIndex_gmplsCopyFailed<s(0)(0)(0)>[&] = 123,
	TypeMibUpgFailedIndex_lcsynTimeout<s(0)(0)(0)>[&] = 131,
	TypeMibUpgFailedIndex_lcsSynFailed<s(0)(0)(0)>[&] = 132,
	TypeMibUpgFailedIndex_lcsDownTimeout<s(0)(0)(0)>[&] = 141,
	TypeMibUpgFailedIndex_lcsDownFailed<s(0)(0)(0)>[&] = 142
} TypeMibUpgFailedIndex_Tval<s(0)(0)(0)>[&];(D1:TypeMibUpgFailedIndex_Tval:1)[[TYPENAME:TypeMibUpgFailedIndex_Tval]]

typedef enum {
	PBSNCPAction_normal<s(0)(0)(0)>[&] = 0,
	PBSNCPAction_recfgw<s(0)(0)(0)>[&] = 1,
	PBSNCPAction_recfgp<s(0)(0)(0)>[&] = 2,
	PBSNCPAction_setmib<s(0)(0)(0)>[&] = 3
} PBSNCPAction_Tval<s(0)(0)(0)>[&];(D1:PBSNCPAction_Tval:1)[[TYPENAME:PBSNCPAction_Tval]]

typedef enum {
	PBMSPType_msponevsn<s(0)(0)(0)>[&] = 1,
	PBMSPType_msponeplusone<s(0)(0)(0)>[&] = 2
} PBMSPType_Tval<s(0)(0)(0)>[&];(D1:PBMSPType_Tval:1)[[TYPENAME:PBMSPType_Tval]]

typedef enum {
	PbAlmClassType_ne<s(0)(0)(0)>[&] = 1,
	PbAlmClassType_slot<s(0)(0)(0)>[&] = 2,
	PbAlmClassType_port<s(0)(0)(0)>[&] = 3,
	PbAlmClassType_tp<s(0)(0)(0)>[&] = 4
} PbAlmClassType_Tval<s(0)(0)(0)>[&];(D1:PbAlmClassType_Tval:1)[[TYPENAME:PbAlmClassType_Tval]]

typedef enum {
	RprSvcStatus_ok<s(0)(0)(0)>[&] = 0,
	RprSvcStatus_failed<s(0)(0)(0)>[&] = 1,
	RprSvcStatus_removed<s(0)(0)(0)>[&] = 2
} RprSvcStatus_Tval<s(0)(0)(0)>[&];(D1:RprSvcStatus_Tval:1)[[TYPENAME:RprSvcStatus_Tval]]

typedef enum {
	PbLowHigh_low<s(0)(0)(0)>[&] = 1,
	PbLowHigh_high<s(0)(0)(0)>[&] = 2
} PbLowHigh_Tval<s(0)(0)(0)>[&];(D1:PbLowHigh_Tval:1)[[TYPENAME:PbLowHigh_Tval]]

typedef enum {
	PBSNCPSignalState_normal<s(0)(0)(0)>[&] = 1,
	PBSNCPSignalState_failed<s(0)(0)(0)>[&] = 2,
	PBSNCPSignalState_degard<s(0)(0)(0)>[&] = 3
} PBSNCPSignalState_Tval<s(0)(0)(0)>[&];(D1:PBSNCPSignalState_Tval:1)[[TYPENAME:PBSNCPSignalState_Tval]]

typedef enum {
	PbSNCPSignalDirection_source<s(0)(0)(0)>[&] = 1,
	PbSNCPSignalDirection_sink<s(0)(0)(0)>[&] = 2
} PbSNCPSignalDirection_Tval<s(0)(0)(0)>[&];(D1:PbSNCPSignalDirection_Tval:1)[[TYPENAME:PbSNCPSignalDirection_Tval]]

typedef enum {
	PbCircuitDirection_bidirection<s(0)(0)(0)>[&] = 1,
	PbCircuitDirection_unidirection<s(0)(0)(0)>[&] = 2,
	PbCircuitDirection_multicast<s(0)(0)(0)>[&] = 3
} PbCircuitDirection_Tval<s(0)(0)(0)>[&];(D1:PbCircuitDirection_Tval:1)[[TYPENAME:PbCircuitDirection_Tval]]

typedef enum {
	RprRingType_closedRing<s(0)(0)(0)>[&] = 1,
	RprRingType_openRing<s(0)(0)(0)>[&] = 2
} RprRingType_Tval<s(0)(0)(0)>[&];(D1:RprRingType_Tval:1)[[TYPENAME:RprRingType_Tval]]

typedef enum {
	RprOamRinglet_default<s(0)(0)(0)>[&] = 1,
	RprOamRinglet_ringlet0<s(0)(0)(0)>[&] = 2,
	RprOamRinglet_ringlet1<s(0)(0)(0)>[&] = 3,
	RprOamRinglet_reverseRinglet<s(0)(0)(0)>[&] = 4
} RprOamRinglet_Tval<s(0)(0)(0)>[&];(D1:RprOamRinglet_Tval:1)[[TYPENAME:RprOamRinglet_Tval]]

typedef enum {
	PbColdRebootNodeState_false<s(0)(0)(0)>[&] = 0,
	PbColdRebootNodeState_truewithfpga<s(0)(0)(0)>[&] = 1,
	PbColdRebootNodeState_truewithoutfpga<s(0)(0)(0)>[&] = 2
} PbColdRebootNodeState_Tval<s(0)(0)(0)>[&];(D1:PbColdRebootNodeState_Tval:1)[[TYPENAME:PbColdRebootNodeState_Tval]]

typedef enum {
	RprServiceType_p2p<s(0)(0)(0)>[&] = 1,
	RprServiceType_mp2mp<s(0)(0)(0)>[&] = 2,
	RprServiceType_local<s(0)(0)(0)>[&] = 3
} RprServiceType_Tval<s(0)(0)(0)>[&];(D1:RprServiceType_Tval:1)[[TYPENAME:RprServiceType_Tval]]

typedef enum {
	TypeSoftUpgFailedIndex_noError<s(0)(0)(0)>[&] = 0,
	TypeSoftUpgFailedIndex_unKnown<s(0)(0)(0)>[&] = 1,
	TypeSoftUpgFailedIndex_commandTimeout<s(0)(0)(0)>[&] = 2,
	TypeSoftUpgFailedIndex_wrongNodeType<s(0)(0)(0)>[&] = 3,
	TypeSoftUpgFailedIndex_redunLoadError<s(0)(0)(0)>[&] = 4,
	TypeSoftUpgFailedIndex_writeFlashFailed<s(0)(0)(0)>[&] = 5,
	TypeSoftUpgFailedIndex_readFlashFailed<s(0)(0)(0)>[&] = 6,
	TypeSoftUpgFailedIndex_flashFull<s(0)(0)(0)>[&] = 7,
	TypeSoftUpgFailedIndex_flashError<s(0)(0)(0)>[&] = 8,
	TypeSoftUpgFailedIndex_writeCfFailed<s(0)(0)(0)>[&] = 9,
	TypeSoftUpgFailedIndex_readCfFailed<s(0)(0)(0)>[&] = 10,
	TypeSoftUpgFailedIndex_cfFull<s(0)(0)(0)>[&] = 11,
	TypeSoftUpgFailedIndex_cfError<s(0)(0)(0)>[&] = 12,
	TypeSoftUpgFailedIndex_copyAscFlashFailed<s(0)(0)(0)>[&] = 13,
	TypeSoftUpgFailedIndex_copyAscCfFailed<s(0)(0)(0)>[&] = 14,
	TypeSoftUpgFailedIndex_copySscFlashFailed<s(0)(0)(0)>[&] = 15,
	TypeSoftUpgFailedIndex_copySscCfFailed<s(0)(0)(0)>[&] = 16,
	TypeSoftUpgFailedIndex_spawnTaskFailed<s(0)(0)(0)>[&] = 17,
	TypeSoftUpgFailedIndex_parameterInvalid<s(0)(0)(0)>[&] = 18,
	TypeSoftUpgFailedIndex_writeRamdscFailed<s(0)(0)(0)>[&] = 19,
	TypeSoftUpgFailedIndex_readRamdscFailed<s(0)(0)(0)>[&] = 20,
	TypeSoftUpgFailedIndex_setUpgMibFailed<s(0)(0)(0)>[&] = 21,
	TypeSoftUpgFailedIndex_getUpgMibFailed<s(0)(0)(0)>[&] = 22,
	TypeSoftUpgFailedIndex_openUpgDirFailed<s(0)(0)(0)>[&] = 23,
	TypeSoftUpgFailedIndex_createUpgDirFailed<s(0)(0)(0)>[&] = 24,
	TypeSoftUpgFailedIndex_peerScOnline<s(0)(0)(0)>[&] = 25,
	TypeSoftUpgFailedIndex_peerScOffline<s(0)(0)(0)>[&] = 26,
	TypeSoftUpgFailedIndex_synRamdscFailed<s(0)(0)(0)>[&] = 27,
	TypeSoftUpgFailedIndex_synFlashFailed<s(0)(0)(0)>[&] = 28,
	TypeSoftUpgFailedIndex_synCfFailed<s(0)(0)(0)>[&] = 29,
	TypeSoftUpgFailedIndex_msgCreateFailed<s(0)(0)(0)>[&] = 30,
	TypeSoftUpgFailedIndex_msgSendFailed<s(0)(0)(0)>[&] = 31,
	TypeSoftUpgFailedIndex_cmndStatusInvalid<s(0)(0)(0)>[&] = 32,
	TypeSoftUpgFailedIndex_sscCopyTimeout<s(0)(0)(0)>[&] = 33,
	TypeSoftUpgFailedIndex_softInvalid<s(0)(0)(0)>[&] = 34,
	TypeSoftUpgFailedIndex_downRamFailed<s(0)(0)(0)>[&] = 35,
	TypeSoftUpgFailedIndex_downCfFailed<s(0)(0)(0)>[&] = 36,
	TypeSoftUpgFailedIndex_dirRnameLoadTmpFailed<s(0)(0)(0)>[&] = 37,
	TypeSoftUpgFailedIndex_dirRnameTmpLoadFailed<s(0)(0)(0)>[&] = 38,
	TypeSoftUpgFailedIndex_dirRnameTmpBkupFailed<s(0)(0)(0)>[&] = 39,
	TypeSoftUpgFailedIndex_dirRnameBkupActFailed<s(0)(0)(0)>[&] = 40,
	TypeSoftUpgFailedIndex_cfUnSurported<s(0)(0)(0)>[&] = 41,
	TypeSoftUpgFailedIndex_ramUnSurported<s(0)(0)(0)>[&] = 42,
	TypeSoftUpgFailedIndex_delDirFailed<s(0)(0)(0)>[&] = 43,
	TypeSoftUpgFailedIndex_copyDirFailed<s(0)(0)(0)>[&] = 44,
	TypeSoftUpgFailedIndex_copyFileFailed<s(0)(0)(0)>[&] = 45,
	TypeSoftUpgFailedIndex_openFileFailed<s(0)(0)(0)>[&] = 46,
	TypeSoftUpgFailedIndex_scSwitch<s(0)(0)(0)>[&] = 47,
	TypeSoftUpgFailedIndex_srootFileInvalid<s(0)(0)(0)>[&] = 48,
	TypeSoftUpgFailedIndex_crootFileInvalid<s(0)(0)(0)>[&] = 49,
	TypeSoftUpgFailedIndex_lrootFileInvalid<s(0)(0)(0)>[&] = 50,
	TypeSoftUpgFailedIndex_addHostServerFailed<s(0)(0)(0)>[&] = 51,
	TypeSoftUpgFailedIndex_delHostServerFailed<s(0)(0)(0)>[&] = 52,
	TypeSoftUpgFailedIndex_dirNameParseFailed<s(0)(0)(0)>[&] = 53,
	TypeSoftUpgFailedIndex_softVersionInvalid<s(0)(0)(0)>[&] = 54,
	TypeSoftUpgFailedIndex_createConnectFailed<s(0)(0)(0)>[&] = 55,
	TypeSoftUpgFailedIndex_openDataPipeFailed<s(0)(0)(0)>[&] = 56,
	TypeSoftUpgFailedIndex_headFileStructureInvalid<s(0)(0)(0)>[&] = 57,
	TypeSoftUpgFailedIndex_fileTypeInvalid<s(0)(0)(0)>[&] = 58,
	TypeSoftUpgFailedIndex_getReleaseDataFailed<s(0)(0)(0)>[&] = 59,
	TypeSoftUpgFailedIndex_diskStatusInvalid<s(0)(0)(0)>[&] = 60,
	TypeSoftUpgFailedIndex_diskSpaceNotEnough<s(0)(0)(0)>[&] = 61,
	TypeSoftUpgFailedIndex_getFileSizeFailed<s(0)(0)(0)>[&] = 62,
	TypeSoftUpgFailedIndex_createFileFailed<s(0)(0)(0)>[&] = 63,
	TypeSoftUpgFailedIndex_writeFileFailed<s(0)(0)(0)>[&] = 64,
	TypeSoftUpgFailedIndex_fileWithoutCrc<s(0)(0)(0)>[&] = 65,
	TypeSoftUpgFailedIndex_getFileNameFailed<s(0)(0)(0)>[&] = 66,
	TypeSoftUpgFailedIndex_crcBufferInvalid<s(0)(0)(0)>[&] = 67,
	TypeSoftUpgFailedIndex_crcChecksumInvalid<s(0)(0)(0)>[&] = 68,
	TypeSoftUpgFailedIndex_extractFileFailed<s(0)(0)(0)>[&] = 69,
	TypeSoftUpgFailedIndex_getTransDataFailed<s(0)(0)(0)>[&] = 70,
	TypeSoftUpgFailedIndex_writeTransDataFailed<s(0)(0)(0)>[&] = 71,
	TypeSoftUpgFailedIndex_mfmCommandRunning<s(0)(0)(0)>[&] = 72,
	TypeSoftUpgFailedIndex_cfaSoftCopying<s(0)(0)(0)>[&] = 73,
	TypeSoftUpgFailedIndex_versionQueryFailed<s(0)(0)(0)>[&] = 74,
	TypeSoftUpgFailedIndex_fileNotExiste<s(0)(0)(0)>[&] = 75,
	TypeSoftUpgFailedIndex_ftpConnectionFailed<s(0)(0)(0)>[&] = 101,
	TypeSoftUpgFailedIndex_ftpConnectionTimeout<s(0)(0)(0)>[&] = 102,
	TypeSoftUpgFailedIndex_downloadTimeout<s(0)(0)(0)>[&] = 103,
	TypeSoftUpgFailedIndex_downloadCanceled<s(0)(0)(0)>[&] = 104,
	TypeSoftUpgFailedIndex_downloadFailed<s(0)(0)(0)>[&] = 105,
	TypeSoftUpgFailedIndex_backupTimeout<s(0)(0)(0)>[&] = 111,
	TypeSoftUpgFailedIndex_backupCanceled<s(0)(0)(0)>[&] = 112,
	TypeSoftUpgFailedIndex_backupFailed<s(0)(0)(0)>[&] = 113,
	TypeSoftUpgFailedIndex_synchronizeTimeout<s(0)(0)(0)>[&] = 121,
	TypeSoftUpgFailedIndex_synchronizeCanceled<s(0)(0)(0)>[&] = 122,
	TypeSoftUpgFailedIndex_synchronizeFailed<s(0)(0)(0)>[&] = 123,
	TypeSoftUpgFailedIndex_switchTimeout<s(0)(0)(0)>[&] = 131,
	TypeSoftUpgFailedIndex_switchFailed<s(0)(0)(0)>[&] = 132,
	TypeSoftUpgFailedIndex_switchCfFailed<s(0)(0)(0)>[&] = 133
} TypeSoftUpgFailedIndex_Tval<s(0)(0)(0)>[&];(D1:TypeSoftUpgFailedIndex_Tval:1)[[TYPENAME:TypeSoftUpgFailedIndex_Tval]]

typedef enum {
	PbEpgSwitchRequest_clear<s(0)(0)(0)>[&] = 1,
	PbEpgSwitchRequest_lp<s(0)(0)(0)>[&] = 2,
	PbEpgSwitchRequest_fs_w<s(0)(0)(0)>[&] = 3,
	PbEpgSwitchRequest_fs_p<s(0)(0)(0)>[&] = 4,
	PbEpgSwitchRequest_uf_p<s(0)(0)(0)>[&] = 5,
	PbEpgSwitchRequest_uf_w<s(0)(0)(0)>[&] = 6,
	PbEpgSwitchRequest_lis_w<s(0)(0)(0)>[&] = 7,
	PbEpgSwitchRequest_lis_p<s(0)(0)(0)>[&] = 8,
	PbEpgSwitchRequest_ms_w<s(0)(0)(0)>[&] = 9,
	PbEpgSwitchRequest_ms_p<s(0)(0)(0)>[&] = 10,
	PbEpgSwitchRequest_wtr<s(0)(0)(0)>[&] = 11,
	PbEpgSwitchRequest_nr<s(0)(0)(0)>[&] = 12
} PbEpgSwitchRequest_Tval<s(0)(0)(0)>[&];(D1:PbEpgSwitchRequest_Tval:1)[[TYPENAME:PbEpgSwitchRequest_Tval]]

typedef enum {
	PbTMSStClkType_twoMHz<s(0)(0)(0)>[&] = 1,
	PbTMSStClkType_twoMbUnFramed<s(0)(0)(0)>[&] = 2,
	PbTMSStClkType_twoMbFramed<s(0)(0)(0)>[&] = 3
} PbTMSStClkType_Tval<s(0)(0)(0)>[&];(D1:PbTMSStClkType_Tval:1)[[TYPENAME:PbTMSStClkType_Tval]]

typedef enum {
	PbInSignalType_normal<s(0)(0)(0)>[&] = 1,
	PbInSignalType_ais<s(0)(0)(0)>[&] = 3
} PbInSignalType_Tval<s(0)(0)(0)>[&];(D1:PbInSignalType_Tval:1)[[TYPENAME:PbInSignalType_Tval]]

typedef enum {
	PbGmplsSncpDirection_forward<s(0)(0)(0)>[&] = 1,
	PbGmplsSncpDirection_reverse<s(0)(0)(0)>[&] = 2
} PbGmplsSncpDirection_Tval<s(0)(0)(0)>[&];(D1:PbGmplsSncpDirection_Tval:1)[[TYPENAME:PbGmplsSncpDirection_Tval]]

typedef enum {
	RprServiceCos_classC<s(0)(0)(0)>[&] = 0,
	RprServiceCos_classBEir<s(0)(0)(0)>[&] = 1,
	RprServiceCos_classBCir<s(0)(0)(0)>[&] = 2,
	RprServiceCos_classA<s(0)(0)(0)>[&] = 3
} RprServiceCos_Tval<s(0)(0)(0)>[&];(D1:RprServiceCos_Tval:1)[[TYPENAME:RprServiceCos_Tval]]

typedef enum {
	AlarmCategory_communication<s(0)(0)(0)>[&] = 1,
	AlarmCategory_qos<s(0)(0)(0)>[&] = 2,
	AlarmCategory_equipment<s(0)(0)(0)>[&] = 3,
	AlarmCategory_processerror<s(0)(0)(0)>[&] = 4,
	AlarmCategory_environment<s(0)(0)(0)>[&] = 5,
	AlarmCategory_security<s(0)(0)(0)>[&] = 6
} AlarmCategory_Tval<s(0)(0)(0)>[&];(D1:AlarmCategory_Tval:1)[[TYPENAME:AlarmCategory_Tval]]

typedef enum {
	RprXcRowStatus_free<s(0)(0)(0)>[&] = 0,
	RprXcRowStatus_used<s(0)(0)(0)>[&] = 1
} RprXcRowStatus_Tval<s(0)(0)(0)>[&];(D1:RprXcRowStatus_Tval:1)[[TYPENAME:RprXcRowStatus_Tval]]

typedef enum {
	PbUsageStatus_free<s(0)(0)(0)>[&] = 0,
	PbUsageStatus_sdh_occupied<s(0)(0)(0)>[&] = 1,
	PbUsageStatus_pdh_data_occupied<s(0)(0)(0)>[&] = 2,
	PbUsageStatus_gmpls_reserved<s(0)(0)(0)>[&] = 3,
	PbUsageStatus_unavailable<s(0)(0)(0)>[&] = 4
} PbUsageStatus_Tval<s(0)(0)(0)>[&];(D1:PbUsageStatus_Tval:1)[[TYPENAME:PbUsageStatus_Tval]]

typedef enum {
	PbBoardStyle_empty<s(0)(0)(0)>[&] = 0,
	PbBoardStyle_unknown<s(0)(0)(0)>[&] = 1,
	PbBoardStyle_main<s(0)(0)(0)>[&] = 2305,
	PbBoardStyle_hocc<s(0)(0)(0)>[&] = 2306,
	PbBoardStyle_locc_pmc<s(0)(0)(0)>[&] = 2307,
	PbBoardStyle_e1x126<s(0)(0)(0)>[&] = 2308,
	PbBoardStyle_e1px63<s(0)(0)(0)>[&] = 2309,
	PbBoardStyle_stm_1ex8<s(0)(0)(0)>[&] = 2310,
	PbBoardStyle_e3ds3x12<s(0)(0)(0)>[&] = 2312,
	PbBoardStyle_stm_41x8<s(0)(0)(0)>[&] = 2320,
	PbBoardStyle_stm_1x8<s(0)(0)(0)>[&] = 2321,
	PbBoardStyle_stm_16x4<s(0)(0)(0)>[&] = 2322,
	PbBoardStyle_stm_16x8<s(0)(0)(0)>[&] = 2323,
	PbBoardStyle_e3ds3px12<s(0)(0)(0)>[&] = 2324,
	PbBoardStyle_stm_64x2<s(0)(0)(0)>[&] = 2325,
	PbBoardStyle_stm_64x1<s(0)(0)(0)>[&] = 2326,
	PbBoardStyle_oaBooster13dbm<s(0)(0)(0)>[&] = 2336,
	PbBoardStyle_oaBooster15dbm<s(0)(0)(0)>[&] = 2337,
	PbBoardStyle_oaBooster18dbm<s(0)(0)(0)>[&] = 2338,
	PbBoardStyle_oaPreamp20db<s(0)(0)(0)>[&] = 2340,
	PbBoardStyle_tengetx1<s(0)(0)(0)>[&] = 2342,
	PbBoardStyle_tengetx1_geax46<s(0)(0)(0)>[&] = 2343,
	PbBoardStyle_getx8<s(0)(0)(0)>[&] = 2344,
	PbBoardStyle_gex6_fegeax4<s(0)(0)(0)>[&] = 2345,
	PbBoardStyle_gex2_ferprx12<s(0)(0)(0)>[&] = 2352,
	PbBoardStyle_gex4_feax12<s(0)(0)(0)>[&] = 2353,
	PbBoardStyle_fetx12<s(0)(0)(0)>[&] = 2354,
	PbBoardStyle_fc2gx8<s(0)(0)(0)>[&] = 2355,
	PbBoardStyle_locc<s(0)(0)(0)>[&] = 2356,
	PbBoardStyle_stm_256x1<s(0)(0)(0)>[&] = 2357,
	PbBoardStyle_fan<s(0)(0)(0)>[&] = 2358,
	PbBoardStyle_si_without_eow<s(0)(0)(0)>[&] = 2368,
	PbBoardStyle_stm_16x2<s(0)(0)(0)>[&] = 2369,
	PbBoardStyle_otu_2x1<s(0)(0)(0)>[&] = 2400,
	PbBoardStyle_tengex1_gex10l2<s(0)(0)(0)>[&] = 2440,
	PbBoardStyle_stm_16x8m<s(0)(0)(0)>[&] = 2441,
	PbBoardStyle_stm_41x16m<s(0)(0)(0)>[&] = 2448,
	PbBoardStyle_stm_64x2m<s(0)(0)(0)>[&] = 2449,
	PbBoardStyle_otu_2x2<s(0)(0)(0)>[&] = 2450,
	PbBoardStyle_chassis<s(0)(0)(0)>[&] = 4232,
	PbBoardStyle_cc<s(0)(0)(0)>[&] = 4240,
	PbBoardStyle_dataFabric_controller<s(0)(0)(0)>[&] = 4241,
	PbBoardStyle_dataFabric<s(0)(0)(0)>[&] = 4242,
	PbBoardStyle_si<s(0)(0)(0)>[&] = 4243,
	PbBoardStyle_power<s(0)(0)(0)>[&] = 4244,
	PbBoardStyle_chassis_fan_airFilter<s(0)(0)(0)>[&] = 4245,
	PbBoardStyle_fanTray<s(0)(0)(0)>[&] = 4246,
	PbBoardStyle_fanCircuitBoard<s(0)(0)(0)>[&] = 4247,
	PbBoardStyle_backplane<s(0)(0)(0)>[&] = 4248,
	PbBoardStyle_e1x21p_75<s(0)(0)(0)>[&] = 4352,
	PbBoardStyle_e1x21p_120<s(0)(0)(0)>[&] = 4353,
	PbBoardStyle_stm_1ex16<s(0)(0)(0)>[&] = 4354,
	PbBoardStyle_stm_1ex8p<s(0)(0)(0)>[&] = 4356,
	PbBoardStyle_e3ds3x6p<s(0)(0)(0)>[&] = 4358,
	PbBoardStyle_gex20<s(0)(0)(0)>[&] = 4359,
	PbBoardStyle_tengex2<s(0)(0)(0)>[&] = 4360,
	PbBoardStyle_gex10_eos<s(0)(0)(0)>[&] = 4361,
	PbBoardStyle_tengex2_eos<s(0)(0)(0)>[&] = 4368,
	PbBoardStyle_gmpls_load<s(0)(0)(0)>[&] = 983040
} PbBoardStyle_Tval<s(0)(0)(0)>[&];(D1:PbBoardStyle_Tval:1)[[TYPENAME:PbBoardStyle_Tval]]

typedef enum {
	TypeUpgradeCmnd_inactive<s(0)(0)(0)>[&] = 0,
	TypeUpgradeCmnd_activeScDownload<s(0)(0)(0)>[&] = 1,
	TypeUpgradeCmnd_activeScSwitch<s(0)(0)(0)>[&] = 2,
	TypeUpgradeCmnd_activeScBackup<s(0)(0)(0)>[&] = 3,
	TypeUpgradeCmnd_synchronizeBackup<s(0)(0)(0)>[&] = 4,
	TypeUpgradeCmnd_standbyScSwitch<s(0)(0)(0)>[&] = 5
} TypeUpgradeCmnd_Tval<s(0)(0)(0)>[&];(D1:TypeUpgradeCmnd_Tval:1)[[TYPENAME:TypeUpgradeCmnd_Tval]]

typedef enum {
	PbMSPCurrentReq_reqlockout<s(0)(0)(0)>[&] = 1,
	PbMSPCurrentReq_reqforcedswitch<s(0)(0)(0)>[&] = 2,
	PbMSPCurrentReq_reqsfhigh<s(0)(0)(0)>[&] = 3,
	PbMSPCurrentReq_reqsflow<s(0)(0)(0)>[&] = 4,
	PbMSPCurrentReq_reqsdhigh<s(0)(0)(0)>[&] = 5,
	PbMSPCurrentReq_reqsdlow<s(0)(0)(0)>[&] = 6,
	PbMSPCurrentReq_reqmannualswitch<s(0)(0)(0)>[&] = 7,
	PbMSPCurrentReq_reqwaittorestore<s(0)(0)(0)>[&] = 8,
	PbMSPCurrentReq_reqexercise<s(0)(0)(0)>[&] = 9,
	PbMSPCurrentReq_reqreverse<s(0)(0)(0)>[&] = 10,
	PbMSPCurrentReq_reqnorevert<s(0)(0)(0)>[&] = 11,
	PbMSPCurrentReq_reqnorequest<s(0)(0)(0)>[&] = 12
} PbMSPCurrentReq_Tval<s(0)(0)(0)>[&];(D1:PbMSPCurrentReq_Tval:1)[[TYPENAME:PbMSPCurrentReq_Tval]]

typedef enum {
	PbEnableDisable_enable<s(0)(0)(0)>[&] = 1,
	PbEnableDisable_disable<s(0)(0)(0)>[&] = 2
} PbEnableDisable_Tval<s(0)(0)(0)>[&];(D1:PbEnableDisable_Tval:1)[[TYPENAME:PbEnableDisable_Tval]]

typedef enum {
	Mssp4fLineRequest_signalDegradeRing<s(0)(0)(0)>[&] = 8,
	Mssp4fLineRequest_signalFailRing<s(0)(0)(0)>[&] = 11,
	Mssp4fLineRequest_clear<s(0)(0)(0)>[&] = 21
} Mssp4fLineRequest_Tval<s(0)(0)(0)>[&];(D1:Mssp4fLineRequest_Tval:1)[[TYPENAME:Mssp4fLineRequest_Tval]]

typedef enum {
	Mssp4fSwitchCommand_noRequest<s(0)(0)(0)>[&] = 0,
	Mssp4fSwitchCommand_reverseRequestRing<s(0)(0)(0)>[&] = 1,
	Mssp4fSwitchCommand_reverseRequestSpan<s(0)(0)(0)>[&] = 2,
	Mssp4fSwitchCommand_exerciserRing<s(0)(0)(0)>[&] = 3,
	Mssp4fSwitchCommand_exerciserSpan<s(0)(0)(0)>[&] = 4,
	Mssp4fSwitchCommand_waitToRestore<s(0)(0)(0)>[&] = 5,
	Mssp4fSwitchCommand_manualSwitchRing<s(0)(0)(0)>[&] = 6,
	Mssp4fSwitchCommand_manualSwitchSpan<s(0)(0)(0)>[&] = 7,
	Mssp4fSwitchCommand_signalDegradeRing<s(0)(0)(0)>[&] = 8,
	Mssp4fSwitchCommand_signalDegradeSpan<s(0)(0)(0)>[&] = 9,
	Mssp4fSwitchCommand_signalDegradeProtection<s(0)(0)(0)>[&] = 10,
	Mssp4fSwitchCommand_signalFailRing<s(0)(0)(0)>[&] = 11,
	Mssp4fSwitchCommand_signalFailSpan<s(0)(0)(0)>[&] = 12,
	Mssp4fSwitchCommand_forcedSwitchRing<s(0)(0)(0)>[&] = 13,
	Mssp4fSwitchCommand_forcedSwitchSpan<s(0)(0)(0)>[&] = 14,
	Mssp4fSwitchCommand_lockoutProtection<s(0)(0)(0)>[&] = 15
} Mssp4fSwitchCommand_Tval<s(0)(0)(0)>[&];(D1:Mssp4fSwitchCommand_Tval:1)[[TYPENAME:Mssp4fSwitchCommand_Tval]]

typedef enum {
	PbEthPortClass_lAN<s(0)(0)(0)>[&] = 1,
	PbEthPortClass_wAN<s(0)(0)(0)>[&] = 2,
	PbEthPortClass_tRUNK<s(0)(0)(0)>[&] = 3
} PbEthPortClass_Tval<s(0)(0)(0)>[&];(D1:PbEthPortClass_Tval:1)[[TYPENAME:PbEthPortClass_Tval]]

typedef enum {
	AlarmState_set<s(0)(0)(0)>[&] = 1,
	AlarmState_clear<s(0)(0)(0)>[&] = 2
} AlarmState_Tval<s(0)(0)(0)>[&];(D1:AlarmState_Tval:1)[[TYPENAME:AlarmState_Tval]]

typedef enum {
	SnmpSecurityLevel_noAuthNoPriv<s(0)(0)(0)>[&] = 1,
	SnmpSecurityLevel_authNoPriv<s(0)(0)(0)>[&] = 2,
	SnmpSecurityLevel_authPriv<s(0)(0)(0)>[&] = 3
} SnmpSecurityLevel_Tval<s(0)(0)(0)>[&];(D1:SnmpSecurityLevel_Tval:1)[[TYPENAME:SnmpSecurityLevel_Tval]]

typedef enum {
	PbMsspRequestSource_kByte<s(0)(0)(0)>[&] = 0,
	PbMsspRequestSource_line<s(0)(0)(0)>[&] = 1,
	PbMsspRequestSource_external<s(0)(0)(0)>[&] = 2
} PbMsspRequestSource_Tval<s(0)(0)(0)>[&];(D1:PbMsspRequestSource_Tval:1)[[TYPENAME:PbMsspRequestSource_Tval]]

typedef enum {
	PbSNCPCurrentReq_reqClear<s(0)(0)(0)>[&] = 1,
	PbSNCPCurrentReq_reqlockout<s(0)(0)(0)>[&] = 2,
	PbSNCPCurrentReq_reqforcedswitchtop<s(0)(0)(0)>[&] = 3,
	PbSNCPCurrentReq_reqforcedswitchtow<s(0)(0)(0)>[&] = 4,
	PbSNCPCurrentReq_reqsignalfail<s(0)(0)(0)>[&] = 5,
	PbSNCPCurrentReq_reqmannualswitchtop<s(0)(0)(0)>[&] = 6,
	PbSNCPCurrentReq_reqmannualswitchtow<s(0)(0)(0)>[&] = 7,
	PbSNCPCurrentReq_reqwaittorestore<s(0)(0)(0)>[&] = 8,
	PbSNCPCurrentReq_reqnorequest<s(0)(0)(0)>[&] = 9,
	PbSNCPCurrentReq_reqsignalDeg<s(0)(0)(0)>[&] = 10
} PbSNCPCurrentReq_Tval<s(0)(0)(0)>[&];(D1:PbSNCPCurrentReq_Tval:1)[[TYPENAME:PbSNCPCurrentReq_Tval]]

typedef enum {
	PbXcStatus_removed<s(0)(0)(0)>[&] = 0,
	PbXcStatus_disabled<s(0)(0)(0)>[&] = 1,
	PbXcStatus_ok<s(0)(0)(0)>[&] = 2,
	PbXcStatus_failed<s(0)(0)(0)>[&] = 3
} PbXcStatus_Tval<s(0)(0)(0)>[&];(D1:PbXcStatus_Tval:1)[[TYPENAME:PbXcStatus_Tval]]

typedef enum {
	EventTypeID_usr_login<s(0)(0)(0)>[&] = 1,
	EventTypeID_usr_logout<s(0)(0)(0)>[&] = 2,
	EventTypeID_usr_autologout<s(0)(0)(0)>[&] = 3,
	EventTypeID_usr_pwd_change<s(0)(0)(0)>[&] = 4,
	EventTypeID_unauthorized_login<s(0)(0)(0)>[&] = 5,
	EventTypeID_alarm_log_cleared<s(0)(0)(0)>[&] = 6,
	EventTypeID_event_log_cleared<s(0)(0)(0)>[&] = 7,
	EventTypeID_auto_acceptance<s(0)(0)(0)>[&] = 8,
	EventTypeID_card_booted<s(0)(0)(0)>[&] = 9,
	EventTypeID_card_reset<s(0)(0)(0)>[&] = 10,
	EventTypeID_card_disabled<s(0)(0)(0)>[&] = 11,
	EventTypeID_card_removed<s(0)(0)(0)>[&] = 12,
	EventTypeID_sfp_changed<s(0)(0)(0)>[&] = 13,
	EventTypeID_protection_switch_completed<s(0)(0)(0)>[&] = 14,
	EventTypeID_protection_switch_back_completed<s(0)(0)(0)>[&] = 15,
	EventTypeID_software_download_started<s(0)(0)(0)>[&] = 16,
	EventTypeID_software_download_completed<s(0)(0)(0)>[&] = 17,
	EventTypeID_software_upgrade_started<s(0)(0)(0)>[&] = 18,
	EventTypeID_software_upgrade_completed<s(0)(0)(0)>[&] = 19,
	EventTypeID_mib_upload_started<s(0)(0)(0)>[&] = 20,
	EventTypeID_mib_upload_completed<s(0)(0)(0)>[&] = 21,
	EventTypeID_mib_download_started<s(0)(0)(0)>[&] = 22,
	EventTypeID_mib_download_completed<s(0)(0)(0)>[&] = 23,
	EventTypeID_mib_backup_started<s(0)(0)(0)>[&] = 24,
	EventTypeID_mib_backup_completed<s(0)(0)(0)>[&] = 25,
	EventTypeID_mib_restore_started<s(0)(0)(0)>[&] = 26,
	EventTypeID_mib_restore_completed<s(0)(0)(0)>[&] = 27,
	EventTypeID_system_reset<s(0)(0)(0)>[&] = 28,
	EventTypeID_system_start<s(0)(0)(0)>[&] = 29,
	EventTypeID_tms_status<s(0)(0)(0)>[&] = 30,
	EventTypeID_tms_config<s(0)(0)(0)>[&] = 31,
	EventTypeID_port_down<s(0)(0)(0)>[&] = 32,
	EventTypeID_port_up<s(0)(0)(0)>[&] = 33,
	EventTypeID_msspring_state_change<s(0)(0)(0)>[&] = 34,
	EventTypeID_msspring_squelch<s(0)(0)(0)>[&] = 35,
	EventTypeID_cc_switch<s(0)(0)(0)>[&] = 36,
	EventTypeID_tca<s(0)(0)(0)>[&] = 37,
	EventTypeID_flash_full<s(0)(0)(0)>[&] = 38,
	EventTypeID_dcc_dll_status<s(0)(0)(0)>[&] = 39,
	EventTypeID_mib_check_failed<s(0)(0)(0)>[&] = 40,
	EventTypeID_mib_illegal_operation<s(0)(0)(0)>[&] = 41,
	EventTypeID_system_memory_usage<s(0)(0)(0)>[&] = 42,
	EventTypeID_sncp_switch_to_protect<s(0)(0)(0)>[&] = 43,
	EventTypeID_sncp_switch_to_work<s(0)(0)(0)>[&] = 44,
	EventTypeID_card_deleted<s(0)(0)(0)>[&] = 45,
	EventTypeID_system_time_changed<s(0)(0)(0)>[&] = 46,
	EventTypeID_positive_bit_slip<s(0)(0)(0)>[&] = 47,
	EventTypeID_negative_bit_slip<s(0)(0)(0)>[&] = 48,
	EventTypeID_latch_switch_opened<s(0)(0)(0)>[&] = 49,
	EventTypeID_sncp_switch<s(0)(0)(0)>[&] = 50,
	EventTypeID_tms_systiming_status<s(0)(0)(0)>[&] = 51,
	EventTypeID_tms_systiming_config<s(0)(0)(0)>[&] = 52,
	EventTypeID_epg_protectstate_change<s(0)(0)(0)>[&] = 53,
	EventTypeID_rpr_topo_changed<s(0)(0)(0)>[&] = 54,
	EventTypeID_mib_clear_started<s(0)(0)(0)>[&] = 57,
	EventTypeID_mib_clear_completed<s(0)(0)(0)>[&] = 58,
	EventTypeID_boot_image_is_not_identical<s(0)(0)(0)>[&] = 60,
	EventTypeID_rstp_topology_changed<s(0)(0)(0)>[&] = 61,
	EventTypeID_rstp_enabled<s(0)(0)(0)>[&] = 62,
	EventTypeID_rstp_disabled<s(0)(0)(0)>[&] = 63,
	EventTypeID_lcasso_changed<s(0)(0)(0)>[&] = 64,
	EventTypeID_lcassk_changed<s(0)(0)(0)>[&] = 65,
	EventTypeID_mib_file_is_failed<s(0)(0)(0)>[&] = 66,
	EventTypeID_free_space_is_not_enough_in_cf<s(0)(0)(0)>[&] = 67,
	EventTypeID_space_is_released_in_cf<s(0)(0)(0)>[&] = 68,
	EventTypeID_ntp_function_changed<s(0)(0)(0)>[&] = 69,
	EventTypeID_connect_to_ntp_server_failed<s(0)(0)(0)>[&] = 70,
	EventTypeID_connect_to_ntp_server_successfully<s(0)(0)(0)>[&] = 71,
	EventTypeID_primary_load_copy_succeeded<s(0)(0)(0)>[&] = 72,
	EventTypeID_primary_load_copy_failed<s(0)(0)(0)>[&] = 73,
	EventTypeID_lan_port_down_on_csf_alarm<s(0)(0)(0)>[&] = 74,
	EventTypeID_lan_port_recovered_on_csf_alarm_cleared<s(0)(0)(0)>[&] = 75,
	EventTypeID_lan_port_down_on_tlct_alarm<s(0)(0)(0)>[&] = 76,
	EventTypeID_lan_port_recovered_on_tlct_alarm_cleared<s(0)(0)(0)>[&] = 77,
	EventTypeID_lan_port_recovered_on_atls_disable<s(0)(0)(0)>[&] = 78,
	EventTypeID_provision_ssm_mode_changed<s(0)(0)(0)>[&] = 79,
	EventTypeID_ecc_dll_status<s(0)(0)(0)>[&] = 80,
	EventTypeID_software_image_loaded_location<s(0)(0)(0)>[&] = 81,
	EventTypeID_mib_loaded_location<s(0)(0)(0)>[&] = 82,
	EventTypeID_eow_software_download_started<s(0)(0)(0)>[&] = 83,
	EventTypeID_eow_software_download_completed<s(0)(0)(0)>[&] = 84,
	EventTypeID_eow_software_upgrade_started<s(0)(0)(0)>[&] = 85,
	EventTypeID_eow_software_upgrade_completed<s(0)(0)(0)>[&] = 86,
	EventTypeID_eow_box_present_status<s(0)(0)(0)>[&] = 87,
	EventTypeID_eow_box_linkup_status<s(0)(0)(0)>[&] = 88,
	EventTypeID_software_synchronization_started<s(0)(0)(0)>[&] = 89,
	EventTypeID_software_synchronization_statement<s(0)(0)(0)>[&] = 90,
	EventTypeID_mib_syn_started<s(0)(0)(0)>[&] = 91,
	EventTypeID_mib_syn_statement<s(0)(0)(0)>[&] = 92,
	EventTypeID_mib_copy_started<s(0)(0)(0)>[&] = 93,
	EventTypeID_mib_copy_statement<s(0)(0)(0)>[&] = 94,
	EventTypeID_card_mismatch<s(0)(0)(0)>[&] = 95,
	EventTypeID_lcs_download_started<s(0)(0)(0)>[&] = 96,
	EventTypeID_lcs_download_statement<s(0)(0)(0)>[&] = 97,
	EventTypeID_lcs_syn_started<s(0)(0)(0)>[&] = 98,
	EventTypeID_lcs_syn_statement<s(0)(0)(0)>[&] = 99,
	EventTypeID_software_is_different<s(0)(0)(0)>[&] = 101,
	EventTypeID_wr_error<s(0)(0)(0)>[&] = 102,
	EventTypeID_card_inserted<s(0)(0)(0)>[&] = 103,
	EventTypeID_sft_unstable_state<s(0)(0)(0)>[&] = 104,
	EventTypeID_sft_is_switching<s(0)(0)(0)>[&] = 105,
	EventTypeID_sft_switching_complete_by_present<s(0)(0)(0)>[&] = 106,
	EventTypeID_sft_switching_complete_by_external_command<s(0)(0)(0)>[&] = 107,
	EventTypeID_sft_switching_complete_by_unit_failure<s(0)(0)(0)>[&] = 108,
	EventTypeID_sft_switching_complete_by_latch_open<s(0)(0)(0)>[&] = 109,
	EventTypeID_sft_switching_failed<s(0)(0)(0)>[&] = 110,
	EventTypeID_sft_file_lost<s(0)(0)(0)>[&] = 111,
	EventTypeID_sft_ohw_error<s(0)(0)(0)>[&] = 112,
	EventTypeID_sft_pull_ool<s(0)(0)(0)>[&] = 113,
	EventTypeID_sft_gmpls_switch<s(0)(0)(0)>[&] = 114,
	EventTypeID_ms_got_write_authority<s(0)(0)(0)>[&] = 115,
	EventTypeID_ms_release_write_authority<s(0)(0)(0)>[&] = 116,
	EventTypeID_unauthorized_access<s(0)(0)(0)>[&] = 117,
	EventTypeID_si_ens_state<s(0)(0)(0)>[&] = 118,
	EventTypeID_si_erm_state<s(0)(0)(0)>[&] = 119,
	EventTypeID_mstp_port_change<s(0)(0)(0)>[&] = 120,
	EventTypeID_mstp_rstp_enable<s(0)(0)(0)>[&] = 121,
	EventTypeID_initialization_failure<s(0)(0)(0)>[&] = 122,
	EventTypeID_ocxo_failure<s(0)(0)(0)>[&] = 123,
	EventTypeID_vcxo_failure<s(0)(0)(0)>[&] = 124,
	EventTypeID_operation_mode_switch<s(0)(0)(0)>[&] = 125,
	EventTypeID_j0_mode_changed<s(0)(0)(0)>[&] = 126,
	EventTypeID_j0_value_changed<s(0)(0)(0)>[&] = 127,
	EventTypeID_boot_image_upgrade_completed<s(0)(0)(0)>[&] = 128,
	EventTypeID_boot_image_upgrade_failure<s(0)(0)(0)>[&] = 129,
	EventTypeID_pll_cannot_lock<s(0)(0)(0)>[&] = 130,
	EventTypeID_user_enabled<s(0)(0)(0)>[&] = 131,
	EventTypeID_user_disabled<s(0)(0)(0)>[&] = 132,
	EventTypeID_lcs_status_changed<s(0)(0)(0)>[&] = 133,
	EventTypeID_epg_switching_failure<s(0)(0)(0)>[&] = 134,
	EventTypeID_rpr_hardware_passthrough_setup<s(0)(0)(0)>[&] = 135,
	EventTypeID_rpr_hardware_passthrough_removed<s(0)(0)(0)>[&] = 136,
	EventTypeID_account_expired<s(0)(0)(0)>[&] = 137,
	EventTypeID_cpu_util_over<s(0)(0)(0)>[&] = 138,
	EventTypeID_mem_util_over<s(0)(0)(0)>[&] = 139,
	EventTypeID_gmpls_switch_success<s(0)(0)(0)>[&] = 140,
	EventTypeID_queue_over_flow<s(0)(0)(0)>[&] = 141,
	EventTypeID_dcn_mgmt_ethport_down<s(0)(0)(0)>[&] = 142,
	EventTypeID_dcn_mgmt_ethport_up<s(0)(0)(0)>[&] = 143,
	EventTypeID_mib_preserve_clear_started<s(0)(0)(0)>[&] = 144,
	EventTypeID_mib_preserve_clear_completed<s(0)(0)(0)>[&] = 145
} EventTypeID_Tval<s(0)(0)(0)>[&];(D1:EventTypeID_Tval:1)[[TYPENAME:EventTypeID_Tval]]

typedef enum {
	TmsRefSourceNum_reference1<s(0)(0)(0)>[&] = 1,
	TmsRefSourceNum_reference2<s(0)(0)(0)>[&] = 2,
	TmsRefSourceNum_reference3<s(0)(0)(0)>[&] = 3,
	TmsRefSourceNum_reference4<s(0)(0)(0)>[&] = 4
} TmsRefSourceNum_Tval<s(0)(0)(0)>[&];(D1:TmsRefSourceNum_Tval:1)[[TYPENAME:TmsRefSourceNum_Tval]]

typedef enum {
	PbSignalType_normal<s(0)(0)(0)>[&] = 1,
	PbSignalType_unequipped<s(0)(0)(0)>[&] = 2,
	PbSignalType_ais<s(0)(0)(0)>[&] = 3,
	PbSignalType_rdi<s(0)(0)(0)>[&] = 5
} PbSignalType_Tval<s(0)(0)(0)>[&];(D1:PbSignalType_Tval:1)[[TYPENAME:PbSignalType_Tval]]

typedef enum {
	PBSNCPAddRslt_succ<s(0)(0)(0)>[&] = 1,
	PBSNCPAddRslt_workTPError<s(0)(0)(0)>[&] = 2,
	PBSNCPAddRslt_workTPDuplicate<s(0)(0)(0)>[&] = 3,
	PBSNCPAddRslt_protTPDuplicate<s(0)(0)(0)>[&] = 4,
	PBSNCPAddRslt_protTPError<s(0)(0)(0)>[&] = 5,
	PBSNCPAddRslt_msProtTP<s(0)(0)(0)>[&] = 6,
	PBSNCPAddRslt_pcmTimeout<s(0)(0)(0)>[&] = 7,
	PBSNCPAddRslt_noFreeTbl<s(0)(0)(0)>[&] = 8,
	PBSNCPAddRslt_ccFail<s(0)(0)(0)>[&] = 9,
	PBSNCPAddRslt_ccTimeout<s(0)(0)(0)>[&] = 10,
	PBSNCPAddRslt_waitCCReq<s(0)(0)(0)>[&] = 11,
	PBSNCPAddRslt_waitCCResult<s(0)(0)(0)>[&] = 12,
	PBSNCPAddRslt_waitPCMResult<s(0)(0)(0)>[&] = 13,
	PBSNCPAddRslt_pcmFail<s(0)(0)(0)>[&] = 14,
	PBSNCPAddRslt_waitSPAReq<s(0)(0)(0)>[&] = 15,
	PBSNCPAddRslt_waitSPAResult<s(0)(0)(0)>[&] = 16,
	PBSNCPAddRslt_spaFail<s(0)(0)(0)>[&] = 17,
	PBSNCPAddRslt_spaTimeout<s(0)(0)(0)>[&] = 18
} PBSNCPAddRslt_Tval<s(0)(0)(0)>[&];(D1:PBSNCPAddRslt_Tval:1)[[TYPENAME:PBSNCPAddRslt_Tval]]

typedef enum {
	PbMsspTrafficDirection_rx<s(0)(0)(0)>[&] = 0,
	PbMsspTrafficDirection_tx<s(0)(0)(0)>[&] = 1
} PbMsspTrafficDirection_Tval<s(0)(0)(0)>[&];(D1:PbMsspTrafficDirection_Tval:1)[[TYPENAME:PbMsspTrafficDirection_Tval]]

typedef enum {
	PbCmndState_none<s(0)(0)(0)>[&] = 1,
	PbCmndState_running<s(0)(0)(0)>[&] = 2,
	PbCmndState_complete<s(0)(0)(0)>[&] = 3,
	PbCmndState_failed<s(0)(0)(0)>[&] = 4
} PbCmndState_Tval<s(0)(0)(0)>[&];(D1:PbCmndState_Tval:1)[[TYPENAME:PbCmndState_Tval]]

typedef enum {
	PbTIModeType_mode16Byte<s(0)(0)(0)>[&] = 1,
	PbTIModeType_mode64Byte<s(0)(0)(0)>[&] = 2,
	PbTIModeType_modeFixedOneByte<s(0)(0)(0)>[&] = 3,
	PbTIModeType_modeProvisionedOneByte<s(0)(0)(0)>[&] = 4,
	PbTIModeType_modeAutoTrace<s(0)(0)(0)>[&] = 5
} PbTIModeType_Tval<s(0)(0)(0)>[&];(D1:PbTIModeType_Tval:1)[[TYPENAME:PbTIModeType_Tval]]

typedef enum {
	PbCFCardState_notapplicable<s(0)(0)(0)>[&] = 0,
	PbCFCardState_mountedandnormal<s(0)(0)(0)>[&] = 1,
	PbCFCardState_removed<s(0)(0)(0)>[&] = 2,
	PbCFCardState_mountedbutfailed<s(0)(0)(0)>[&] = 3,
	PbCFCardState_mountednofreespace<s(0)(0)(0)>[&] = 4
} PbCFCardState_Tval<s(0)(0)(0)>[&];(D1:PbCFCardState_Tval:1)[[TYPENAME:PbCFCardState_Tval]]

typedef enum {
	PbSlotType_none<s(0)(0)(0)>[&] = 0,
	PbSlotType_mc<s(0)(0)(0)>[&] = 1,
	PbSlotType_lc<s(0)(0)(0)>[&] = 2,
	PbSlotType_ti<s(0)(0)(0)>[&] = 5,
	PbSlotType_to<s(0)(0)(0)>[&] = 6,
	PbSlotType_power<s(0)(0)(0)>[&] = 7,
	PbSlotType_fan<s(0)(0)(0)>[&] = 8,
	PbSlotType_si<s(0)(0)(0)>[&] = 10,
	PbSlotType_io<s(0)(0)(0)>[&] = 12,
	PbSlotType_cc<s(0)(0)(0)>[&] = 13,
	PbSlotType_sfc<s(0)(0)(0)>[&] = 14,
	PbSlotType_sfm<s(0)(0)(0)>[&] = 15,
	PbSlotType_ce<s(0)(0)(0)>[&] = 16
} PbSlotType_Tval<s(0)(0)(0)>[&];(D1:PbSlotType_Tval:1)[[TYPENAME:PbSlotType_Tval]]

typedef enum {
	PbPmUapType_nearend<s(0)(0)(0)>[&] = 1,
	PbPmUapType_farend<s(0)(0)(0)>[&] = 2
} PbPmUapType_Tval<s(0)(0)(0)>[&];(D1:PbPmUapType_Tval:1)[[TYPENAME:PbPmUapType_Tval]]

typedef enum {
	PbSFFTranscCode_unknown<s(0)(0)(0)>[&] = 0,
	PbSFFTranscCode_infiniband_1x_SX<s(0)(0)(0)>[&] = 1,
	PbSFFTranscCode_infiniband_1x_LX<s(0)(0)(0)>[&] = 2,
	PbSFFTranscCode_infiniband_1x_COP_ACT<s(0)(0)(0)>[&] = 3,
	PbSFFTranscCode_infiniband_1x_COP_PSV<s(0)(0)(0)>[&] = 4,
	PbSFFTranscCode_escon_MMF_1310NM_LED<s(0)(0)(0)>[&] = 5,
	PbSFFTranscCode_escon_SMF_1310NM_LASER<s(0)(0)(0)>[&] = 6,
	PbSFFTranscCode_sonet_oc48_SR<s(0)(0)(0)>[&] = 7,
	PbSFFTranscCode_sonet_oc48_SR1<s(0)(0)(0)>[&] = 8,
	PbSFFTranscCode_sonet_oc48_IR<s(0)(0)(0)>[&] = 9,
	PbSFFTranscCode_sonet_oc48_IR1<s(0)(0)(0)>[&] = 10,
	PbSFFTranscCode_sonet_oc48_IR2<s(0)(0)(0)>[&] = 11,
	PbSFFTranscCode_sonet_oc48_LR<s(0)(0)(0)>[&] = 12,
	PbSFFTranscCode_sonet_oc48_LR1<s(0)(0)(0)>[&] = 13,
	PbSFFTranscCode_sonet_oc48_LR2<s(0)(0)(0)>[&] = 14,
	PbSFFTranscCode_sonet_oc48_LR3<s(0)(0)(0)>[&] = 15,
	PbSFFTranscCode_sonet_oc12_SR<s(0)(0)(0)>[&] = 16,
	PbSFFTranscCode_sonet_oc12_SR1<s(0)(0)(0)>[&] = 17,
	PbSFFTranscCode_sonet_oc12_IR<s(0)(0)(0)>[&] = 18,
	PbSFFTranscCode_sonet_oc12_IR1<s(0)(0)(0)>[&] = 19,
	PbSFFTranscCode_sonet_oc12_IR2<s(0)(0)(0)>[&] = 20,
	PbSFFTranscCode_sonet_oc12_LR<s(0)(0)(0)>[&] = 21,
	PbSFFTranscCode_sonet_oc12_LR1<s(0)(0)(0)>[&] = 22,
	PbSFFTranscCode_sonet_oc12_LR2<s(0)(0)(0)>[&] = 23,
	PbSFFTranscCode_sonet_oc12_LR3<s(0)(0)(0)>[&] = 24,
	PbSFFTranscCode_sonet_oc3_SR<s(0)(0)(0)>[&] = 25,
	PbSFFTranscCode_sonet_oc3_SR1<s(0)(0)(0)>[&] = 26,
	PbSFFTranscCode_sonet_oc3_IR<s(0)(0)(0)>[&] = 27,
	PbSFFTranscCode_sonet_oc3_IR1<s(0)(0)(0)>[&] = 28,
	PbSFFTranscCode_sonet_oc3_IR2<s(0)(0)(0)>[&] = 29,
	PbSFFTranscCode_sonet_oc3_LR<s(0)(0)(0)>[&] = 30,
	PbSFFTranscCode_sonet_oc3_LR1<s(0)(0)(0)>[&] = 31,
	PbSFFTranscCode_sonet_oc3_LR2<s(0)(0)(0)>[&] = 32,
	PbSFFTranscCode_sonet_oc3_LR3<s(0)(0)(0)>[&] = 33,
	PbSFFTranscCode_ethernet_BASE_PX<s(0)(0)(0)>[&] = 34,
	PbSFFTranscCode_ethernet_BASE_BX10<s(0)(0)(0)>[&] = 35,
	PbSFFTranscCode_ethernet_100BASE_FX<s(0)(0)(0)>[&] = 36,
	PbSFFTranscCode_ethernet_100BASE_LX_LX10<s(0)(0)(0)>[&] = 37,
	PbSFFTranscCode_ethernet_1000BASE_T<s(0)(0)(0)>[&] = 38,
	PbSFFTranscCode_ethernet_1000BASE_CX<s(0)(0)(0)>[&] = 39,
	PbSFFTranscCode_ethernet_1000BASE_LX<s(0)(0)(0)>[&] = 40,
	PbSFFTranscCode_ethernet_1000BASE_SX<s(0)(0)(0)>[&] = 41,
	PbSFFTranscCode_fibre_CHANNEL<s(0)(0)(0)>[&] = 42,
	PbSFFTranscCode_max<s(0)(0)(0)>[&] = 43
} PbSFFTranscCode_Tval<s(0)(0)(0)>[&];(D1:PbSFFTranscCode_Tval:1)[[TYPENAME:PbSFFTranscCode_Tval]]

typedef enum {
	StorageType_other<s(0)(0)(0)>[&] = 1,
	StorageType_volatile<s(0)(0)(0)>[&] = 2,
	StorageType_nonVolatile<s(0)(0)(0)>[&] = 3,
	StorageType_permanent<s(0)(0)(0)>[&] = 4,
	StorageType_readOnly<s(0)(0)(0)>[&] = 5
} StorageType_Tval<s(0)(0)(0)>[&];(D1:StorageType_Tval:1)[[TYPENAME:StorageType_Tval]]

typedef enum {
	PbCommunityStringAccessLevel_readOnly<s(0)(0)(0)>[&] = 1,
	PbCommunityStringAccessLevel_readWrite<s(0)(0)(0)>[&] = 2
} PbCommunityStringAccessLevel_Tval<s(0)(0)(0)>[&];(D1:PbCommunityStringAccessLevel_Tval:1)[[TYPENAME:PbCommunityStringAccessLevel_Tval]]

typedef enum {
	PbDpnpSwitchEvent_w2p<s(0)(0)(0)>[&] = 1,
	PbDpnpSwitchEvent_w2m<s(0)(0)(0)>[&] = 2,
	PbDpnpSwitchEvent_p2w<s(0)(0)(0)>[&] = 3,
	PbDpnpSwitchEvent_p2m<s(0)(0)(0)>[&] = 4,
	PbDpnpSwitchEvent_m2w<s(0)(0)(0)>[&] = 5,
	PbDpnpSwitchEvent_m2p<s(0)(0)(0)>[&] = 6
} PbDpnpSwitchEvent_Tval<s(0)(0)(0)>[&];(D1:PbDpnpSwitchEvent_Tval:1)[[TYPENAME:PbDpnpSwitchEvent_Tval]]

typedef enum {
	PBSNCPWorkorProtToCC_protection<s(0)(0)(0)>[&] = 0,
	PBSNCPWorkorProtToCC_working<s(0)(0)(0)>[&] = 1,
	PBSNCPWorkorProtToCC_none<s(0)(0)(0)>[&] = 255
} PBSNCPWorkorProtToCC_Tval<s(0)(0)(0)>[&];(D1:PBSNCPWorkorProtToCC_Tval:1)[[TYPENAME:PBSNCPWorkorProtToCC_Tval]]

typedef enum {
	PbTPType_ospiTTP<s(0)(0)(0)>[&] = 1,
	PbTPType_rsDatacomCTP<s(0)(0)(0)>[&] = 2,
	PbTPType_rsTTP<s(0)(0)(0)>[&] = 3,
	PbTPType_msCTP<s(0)(0)(0)>[&] = 4,
	PbTPType_msDatacomCTP<s(0)(0)(0)>[&] = 5,
	PbTPType_msTTP<s(0)(0)(0)>[&] = 6,
	PbTPType_au4CTP<s(0)(0)(0)>[&] = 7,
	PbTPType_vc4TTP<s(0)(0)(0)>[&] = 8,
	PbTPType_tu12CTP<s(0)(0)(0)>[&] = 9,
	PbTPType_vc12TTP<s(0)(0)(0)>[&] = 10,
	PbTPType_ppiTTP<s(0)(0)(0)>[&] = 11,
	PbTPType_vc4xvTTP<s(0)(0)(0)>[&] = 12,
	PbTPType_vc12xvTTP<s(0)(0)(0)>[&] = 13,
	PbTPType_au416cCTP<s(0)(0)(0)>[&] = 14,
	PbTPType_vc416cTTP<s(0)(0)(0)>[&] = 15,
	PbTPType_au44cCTP<s(0)(0)(0)>[&] = 16,
	PbTPType_vc44cTTP<s(0)(0)(0)>[&] = 17,
	PbTPType_au3CTP<s(0)(0)(0)>[&] = 18,
	PbTPType_tu3CTP<s(0)(0)(0)>[&] = 19,
	PbTPType_hovc3TTP<s(0)(0)(0)>[&] = 20,
	PbTPType_lovc3TTP<s(0)(0)(0)>[&] = 21,
	PbTPType_tu11CTP<s(0)(0)(0)>[&] = 22,
	PbTPType_vc11TTP<s(0)(0)(0)>[&] = 23,
	PbTPType_lanTTP<s(0)(0)(0)>[&] = 24,
	PbTPType_wanTTP<s(0)(0)(0)>[&] = 25,
	PbTPType_au464cCTP<s(0)(0)(0)>[&] = 26,
	PbTPType_vc464cTTP<s(0)(0)(0)>[&] = 27,
	PbTPType_tcCTP<s(0)(0)(0)>[&] = 28,
	PbTPType_vpCTP<s(0)(0)(0)>[&] = 29,
	PbTPType_vcCTP<s(0)(0)(0)>[&] = 30,
	PbTPType_vc3xvTTP<s(0)(0)(0)>[&] = 31,
	PbTPType_vc4NIMTTP<s(0)(0)(0)>[&] = 32,
	PbTPType_vc12NIMTTP<s(0)(0)(0)>[&] = 33,
	PbTPType_vc416cNIMTTP<s(0)(0)(0)>[&] = 34,
	PbTPType_vc44cNIMTTP<s(0)(0)(0)>[&] = 35,
	PbTPType_hovc3NIMTTP<s(0)(0)(0)>[&] = 36,
	PbTPType_lovc3NIMTTP<s(0)(0)(0)>[&] = 37,
	PbTPType_vc11NIMTTP<s(0)(0)(0)>[&] = 38,
	PbTPType_vc464cNIMTTP<s(0)(0)(0)>[&] = 39,
	PbTPType_au4256cCTP<s(0)(0)(0)>[&] = 40,
	PbTPType_vc4256cTTP<s(0)(0)(0)>[&] = 41,
	PbTPType_vc4256cNIMTTP<s(0)(0)(0)>[&] = 42
} PbTPType_Tval<s(0)(0)(0)>[&];(D1:PbTPType_Tval:1)[[TYPENAME:PbTPType_Tval]]

typedef enum {
	PbMSPExternalCmd_cmdClear<s(0)(0)(0)>[&] = 1,
	PbMSPExternalCmd_cmdlockout<s(0)(0)(0)>[&] = 2,
	PbMSPExternalCmd_cmdforcedswitch<s(0)(0)(0)>[&] = 3,
	PbMSPExternalCmd_cmdmannualswitch<s(0)(0)(0)>[&] = 4,
	PbMSPExternalCmd_cmdexercise<s(0)(0)(0)>[&] = 5,
	PbMSPExternalCmd_cmdnocomand<s(0)(0)(0)>[&] = 6
} PbMSPExternalCmd_Tval<s(0)(0)(0)>[&];(D1:PbMSPExternalCmd_Tval:1)[[TYPENAME:PbMSPExternalCmd_Tval]]

typedef enum {
	TMSStClkOhm_seventyfive<s(0)(0)(0)>[&] = 1,
	TMSStClkOhm_onehundredtwenty<s(0)(0)(0)>[&] = 2
} TMSStClkOhm_Tval<s(0)(0)(0)>[&];(D1:TMSStClkOhm_Tval:1)[[TYPENAME:TMSStClkOhm_Tval]]

typedef enum {
	PbPmTableType_interval<s(0)(0)(0)>[&] = 1,
	PbPmTableType_intervalFe<s(0)(0)(0)>[&] = 2,
	PbPmTableType_day<s(0)(0)(0)>[&] = 3,
	PbPmTableType_dayFe<s(0)(0)(0)>[&] = 4
} PbPmTableType_Tval<s(0)(0)(0)>[&];(D1:PbPmTableType_Tval:1)[[TYPENAME:PbPmTableType_Tval]]

typedef enum {
	PbPortType_lan<s(0)(0)(0)>[&] = 1,
	PbPortType_console<s(0)(0)(0)>[&] = 2,
	PbPortType_stm1<s(0)(0)(0)>[&] = 3,
	PbPortType_stm4<s(0)(0)(0)>[&] = 4,
	PbPortType_stm16<s(0)(0)(0)>[&] = 5,
	PbPortType_stm64<s(0)(0)(0)>[&] = 6,
	PbPortType_fe<s(0)(0)(0)>[&] = 7,
	PbPortType_ge<s(0)(0)(0)>[&] = 8,
	PbPortType_e1<s(0)(0)(0)>[&] = 9,
	PbPortType_e3ds3<s(0)(0)(0)>[&] = 10,
	PbPortType_ti<s(0)(0)(0)>[&] = 11,
	PbPortType_to<s(0)(0)(0)>[&] = 12,
	PbPortType_vstm1<s(0)(0)(0)>[&] = 13,
	PbPortType_vstm4<s(0)(0)(0)>[&] = 14,
	PbPortType_vstm16<s(0)(0)(0)>[&] = 15,
	PbPortType_vlan<s(0)(0)(0)>[&] = 16,
	PbPortType_vwan<s(0)(0)(0)>[&] = 17,
	PbPortType_e1ds1<s(0)(0)(0)>[&] = 18,
	PbPortType_ivstm1<s(0)(0)(0)>[&] = 19,
	PbPortType_rprclient<s(0)(0)(0)>[&] = 20,
	PbPortType_rprline<s(0)(0)(0)>[&] = 21,
	PbPortType_oa<s(0)(0)(0)>[&] = 22,
	PbPortType_stm1or4<s(0)(0)(0)>[&] = 23,
	PbPortType_stm256<s(0)(0)(0)>[&] = 24,
	PbPortType_tenge<s(0)(0)(0)>[&] = 25,
	PbPortType_fiber_channel<s(0)(0)(0)>[&] = 26,
	PbPortType_vstm64<s(0)(0)(0)>[&] = 27,
	PbPortType_otu2<s(0)(0)(0)>[&] = 28,
	PbPortType_na<s(0)(0)(0)>[&] = 29
} PbPortType_Tval<s(0)(0)(0)>[&];(D1:PbPortType_Tval:1)[[TYPENAME:PbPortType_Tval]]

typedef enum {
	PbSncpCircuitDirection_bidirection<s(0)(0)(0)>[&] = 1,
	PbSncpCircuitDirection_unidirection<s(0)(0)(0)>[&] = 2
} PbSncpCircuitDirection_Tval<s(0)(0)(0)>[&];(D1:PbSncpCircuitDirection_Tval:1)[[TYPENAME:PbSncpCircuitDirection_Tval]]

typedef enum {
	PbPmPortStatusType_normal<s(0)(0)(0)>[&] = 1,
	PbPmPortStatusType_working<s(0)(0)(0)>[&] = 2,
	PbPmPortStatusType_protect<s(0)(0)(0)>[&] = 3
} PbPmPortStatusType_Tval<s(0)(0)(0)>[&];(D1:PbPmPortStatusType_Tval:1)[[TYPENAME:PbPmPortStatusType_Tval]]

typedef enum {
	PbTpMaintenanceType_normal<s(0)(0)(0)>[&] = 1,
	PbTpMaintenanceType_lck<s(0)(0)(0)>[&] = 5,
	PbTpMaintenanceType_oci<s(0)(0)(0)>[&] = 6,
	PbTpMaintenanceType_ais<s(0)(0)(0)>[&] = 7
} PbTpMaintenanceType_Tval<s(0)(0)(0)>[&];(D1:PbTpMaintenanceType_Tval:1)[[TYPENAME:PbTpMaintenanceType_Tval]]

typedef enum {
	PbMSPSwitchReason_clearcmd<s(0)(0)(0)>[&] = 1,
	PbMSPSwitchReason_lpcmd<s(0)(0)(0)>[&] = 2,
	PbMSPSwitchReason_forcedswitch<s(0)(0)(0)>[&] = 3,
	PbMSPSwitchReason_manualswitch<s(0)(0)(0)>[&] = 4,
	PbMSPSwitchReason_signalfail<s(0)(0)(0)>[&] = 5,
	PbMSPSwitchReason_signalfailclear<s(0)(0)(0)>[&] = 6,
	PbMSPSwitchReason_signaldeg<s(0)(0)(0)>[&] = 7,
	PbMSPSwitchReason_signaldegclear<s(0)(0)(0)>[&] = 8,
	PbMSPSwitchReason_noswitch<s(0)(0)(0)>[&] = 9
} PbMSPSwitchReason_Tval<s(0)(0)(0)>[&];(D1:PbMSPSwitchReason_Tval:1)[[TYPENAME:PbMSPSwitchReason_Tval]]

typedef enum {
	PbGmplsCcDirection_forward<s(0)(0)(0)>[&] = 1,
	PbGmplsCcDirection_reverse<s(0)(0)(0)>[&] = 2
} PbGmplsCcDirection_Tval<s(0)(0)(0)>[&];(D1:PbGmplsCcDirection_Tval:1)[[TYPENAME:PbGmplsCcDirection_Tval]]

typedef enum {
	EthPortClass_lan<s(0)(0)(0)>[&] = 0,
	EthPortClass_wan<s(0)(0)(0)>[&] = 1,
	EthPortClass_trunk<s(0)(0)(0)>[&] = 2
} EthPortClass_Tval<s(0)(0)(0)>[&];(D1:EthPortClass_Tval:1)[[TYPENAME:EthPortClass_Tval]]

typedef enum {
	TypeMibCmnd_inactive<s(0)(0)(0)>[&] = 0,
	TypeMibCmnd_activeScMibUpload<s(0)(0)(0)>[&] = 1,
	TypeMibCmnd_activeScMibDownload<s(0)(0)(0)>[&] = 2,
	TypeMibCmnd_activeScMibSwitch<s(0)(0)(0)>[&] = 3,
	TypeMibCmnd_standbyScMibSwitch<s(0)(0)(0)>[&] = 4,
	TypeMibCmnd_synchronizeMibBackup<s(0)(0)(0)>[&] = 5,
	TypeMibCmnd_activeScMibClear<s(0)(0)(0)>[&] = 6,
	TypeMibCmnd_activeScMibCopy<s(0)(0)(0)>[&] = 7,
	TypeMibCmnd_downloadLicense<s(0)(0)(0)>[&] = 8,
	TypeMibCmnd_synchronizeLicense<s(0)(0)(0)>[&] = 9,
	TypeMibCmnd_activeScMibPreserveClear<s(0)(0)(0)>[&] = 10
} TypeMibCmnd_Tval<s(0)(0)(0)>[&];(D1:TypeMibCmnd_Tval:1)[[TYPENAME:TypeMibCmnd_Tval]]

typedef enum {
	RowStatus_active<s(0)(0)(0)>[&] = 1,
	RowStatus_notInService<s(0)(0)(0)>[&] = 2,
	RowStatus_notReady<s(0)(0)(0)>[&] = 3,
	RowStatus_createAndGo<s(0)(0)(0)>[&] = 4,
	RowStatus_createAndWait<s(0)(0)(0)>[&] = 5,
	RowStatus_destroy<s(0)(0)(0)>[&] = 6
} RowStatus_Tval<s(0)(0)(0)>[&];(D1:RowStatus_Tval:1)[[TYPENAME:RowStatus_Tval]]

typedef enum {
	PbSNCPExternalCmd_cmdClear<s(0)(0)(0)>[&] = 1,
	PbSNCPExternalCmd_cmdlockout<s(0)(0)(0)>[&] = 2,
	PbSNCPExternalCmd_cmdforcedswitchtop<s(0)(0)(0)>[&] = 3,
	PbSNCPExternalCmd_cmdforcedswitchtow<s(0)(0)(0)>[&] = 4,
	PbSNCPExternalCmd_cmdmannualswitchtop<s(0)(0)(0)>[&] = 5,
	PbSNCPExternalCmd_cmdmannualswitchtow<s(0)(0)(0)>[&] = 6,
	PbSNCPExternalCmd_cmdnocomand<s(0)(0)(0)>[&] = 7
} PbSNCPExternalCmd_Tval<s(0)(0)(0)>[&];(D1:PbSNCPExternalCmd_Tval:1)[[TYPENAME:PbSNCPExternalCmd_Tval]]

typedef enum {
	RprProtectionType_steering<s(0)(0)(0)>[&] = 1,
	RprProtectionType_wrap<s(0)(0)(0)>[&] = 2,
	RprProtectionType_disable<s(0)(0)(0)>[&] = 3
} RprProtectionType_Tval<s(0)(0)(0)>[&];(D1:RprProtectionType_Tval:1)[[TYPENAME:RprProtectionType_Tval]]

typedef enum {
	PbNodeMode_standalone<s(0)(0)(0)>[&] = 1,
	PbNodeMode_subservient<s(0)(0)(0)>[&] = 2
} PbNodeMode_Tval<s(0)(0)(0)>[&];(D1:PbNodeMode_Tval:1)[[TYPENAME:PbNodeMode_Tval]]

typedef enum {
	PbAcDc_ac<s(0)(0)(0)>[&] = 1,
	PbAcDc_dc<s(0)(0)(0)>[&] = 2
} PbAcDc_Tval<s(0)(0)(0)>[&];(D1:PbAcDc_Tval:1)[[TYPENAME:PbAcDc_Tval]]

typedef enum {
	PbMsspRequest_noRequest<s(0)(0)(0)>[&] = 0,
	PbMsspRequest_reverseRequestRing<s(0)(0)(0)>[&] = 1,
	PbMsspRequest_reverseRequestSpan<s(0)(0)(0)>[&] = 2,
	PbMsspRequest_exerciserRing<s(0)(0)(0)>[&] = 3,
	PbMsspRequest_exerciserSpan<s(0)(0)(0)>[&] = 4,
	PbMsspRequest_waitToRestore<s(0)(0)(0)>[&] = 5,
	PbMsspRequest_manualSwitchRing<s(0)(0)(0)>[&] = 6,
	PbMsspRequest_manualSwitchSpan<s(0)(0)(0)>[&] = 7,
	PbMsspRequest_signalDegradeRing<s(0)(0)(0)>[&] = 8,
	PbMsspRequest_signalDegradeSpan<s(0)(0)(0)>[&] = 9,
	PbMsspRequest_signalDegradeProtection<s(0)(0)(0)>[&] = 10,
	PbMsspRequest_signalFailRing<s(0)(0)(0)>[&] = 11,
	PbMsspRequest_signalFailSpan<s(0)(0)(0)>[&] = 12,
	PbMsspRequest_forcedSwitchRing<s(0)(0)(0)>[&] = 13,
	PbMsspRequest_forcedSwitchSpan<s(0)(0)(0)>[&] = 14,
	PbMsspRequest_lockoutProtection<s(0)(0)(0)>[&] = 15
} PbMsspRequest_Tval<s(0)(0)(0)>[&];(D1:PbMsspRequest_Tval:1)[[TYPENAME:PbMsspRequest_Tval]]

typedef enum {
	PbConnectorType_unknown<s(0)(0)(0)>[&] = 0,
	PbConnectorType_sc<s(0)(0)(0)>[&] = 1,
	PbConnectorType_fiber_1_copper<s(0)(0)(0)>[&] = 2,
	PbConnectorType_fiber_2_copper<s(0)(0)(0)>[&] = 3,
	PbConnectorType_bnctnc<s(0)(0)(0)>[&] = 4,
	PbConnectorType_fiber_coax<s(0)(0)(0)>[&] = 5,
	PbConnectorType_fiber_jack<s(0)(0)(0)>[&] = 6,
	PbConnectorType_lc<s(0)(0)(0)>[&] = 7,
	PbConnectorType_mtrj<s(0)(0)(0)>[&] = 8,
	PbConnectorType_mu<s(0)(0)(0)>[&] = 9,
	PbConnectorType_sg<s(0)(0)(0)>[&] = 10,
	PbConnectorType_optical_pigtail<s(0)(0)(0)>[&] = 11,
	PbConnectorType_hssdc<s(0)(0)(0)>[&] = 32,
	PbConnectorType_copper_pigtail<s(0)(0)(0)>[&] = 33,
	PbConnectorType_unspecified<s(0)(0)(0)>[&] = 256
} PbConnectorType_Tval<s(0)(0)(0)>[&];(D1:PbConnectorType_Tval:1)[[TYPENAME:PbConnectorType_Tval]]

typedef enum {
	PbBoardProperty_none<s(0)(0)(0)>[&] = 0,
	PbBoardProperty_all<s(0)(0)(0)>[&] = 1,
	PbBoardProperty_hiT7065sc<s(0)(0)(0)>[&] = 2,
	PbBoardProperty_hiT7065cc<s(0)(0)(0)>[&] = 4,
	PbBoardProperty_hiT7065lc<s(0)(0)(0)>[&] = 8
} PbBoardProperty_Tval<s(0)(0)(0)>[&];(D1:PbBoardProperty_Tval:1)[[TYPENAME:PbBoardProperty_Tval]]

 




 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSonetSdh_Did<s(0)(0)(0)>[&];(D1:pbSonetSdh_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPortConfigTable_Did<s(0)(0)(0)>[&];(D1:pbPortConfigTable_Did:0)

   
typedef enum {
	pbPortMode_auto<s(0)(0)(0)>[&]=1,
	pbPortMode_mon<s(0)(0)(0)>[&]=2,
	pbPortMode_nmon<s(0)(0)(0)>[&]=3
} pbPortMode_Tval<s(0)(0)(0)>[&];(D1:pbPortMode_Tval:1)[[TYPENAME:pbPortMode_Tval]]

typedef enum {
	pbPdhPortMap_async<s(0)(0)(0)>[&]=1,
	pbPdhPortMap_byte<s(0)(0)(0)>[&]=2,
	pbPdhPortMap_none<s(0)(0)(0)>[&]=3
} pbPdhPortMap_Tval<s(0)(0)(0)>[&];(D1:pbPdhPortMap_Tval:1)[[TYPENAME:pbPdhPortMap_Tval]]

typedef enum {
	pbPortLoopback_none<s(0)(0)(0)>[&]=1,
	pbPortLoopback_outward<s(0)(0)(0)>[&]=2,
	pbPortLoopback_inward<s(0)(0)(0)>[&]=3
} pbPortLoopback_Tval<s(0)(0)(0)>[&];(D1:pbPortLoopback_Tval:1)[[TYPENAME:pbPortLoopback_Tval]]

typedef enum {
	pbFecMode_correction<s(0)(0)(0)>[&]=1,
	pbFecMode_disable<s(0)(0)(0)>[&]=2
} pbFecMode_Tval<s(0)(0)(0)>[&];(D1:pbFecMode_Tval:1)[[TYPENAME:pbFecMode_Tval]]

typedef enum {
	pbImpedance_ohm75<s(0)(0)(0)>[&]=0,
	pbImpedance_ohm120<s(0)(0)(0)>[&]=1,
	pbImpedance_ohm100<s(0)(0)(0)>[&]=2,
	pbImpedance_ohm110<s(0)(0)(0)>[&]=3
} pbImpedance_Tval<s(0)(0)(0)>[&];(D1:pbImpedance_Tval:1)[[TYPENAME:pbImpedance_Tval]]

typedef enum {
	pbCodeType_hdb3<s(0)(0)(0)>[&]=0,
	pbCodeType_ami<s(0)(0)(0)>[&]=1,
	pbCodeType_bypass<s(0)(0)(0)>[&]=2,
	pbCodeType_cdrbypass<s(0)(0)(0)>[&]=3,
	pbCodeType_b3zs<s(0)(0)(0)>[&]=4
} pbCodeType_Tval<s(0)(0)(0)>[&];(D1:pbCodeType_Tval:1)[[TYPENAME:pbCodeType_Tval]]

typedef enum {
	pbHaulType_e175ohm<s(0)(0)(0)>[&]=0,
	pbHaulType_e1120ohm<s(0)(0)(0)>[&]=1,
	pbHaulType_dsx1133ft<s(0)(0)(0)>[&]=2,
	pbHaulType_dsx1266ft<s(0)(0)(0)>[&]=3,
	pbHaulType_dsx1399ft<s(0)(0)(0)>[&]=4,
	pbHaulType_dsx1533ft<s(0)(0)(0)>[&]=5,
	pbHaulType_dsx1655ft<s(0)(0)(0)>[&]=6,
	pbHaulType_j10655ft<s(0)(0)(0)>[&]=7,
	pbHaulType_ds10<s(0)(0)(0)>[&]=8,
	pbHaulType_ds175<s(0)(0)(0)>[&]=9,
	pbHaulType_ds115<s(0)(0)(0)>[&]=10,
	pbHaulType_ds1225<s(0)(0)(0)>[&]=11,
	pbHaulType_ds111xx<s(0)(0)(0)>[&]=12
} pbHaulType_Tval<s(0)(0)(0)>[&];(D1:pbHaulType_Tval:1)[[TYPENAME:pbHaulType_Tval]]

typedef enum {
	pbRetimingStatus_disable<s(0)(0)(0)>[&]=0,
	pbRetimingStatus_enable<s(0)(0)(0)>[&]=1
} pbRetimingStatus_Tval<s(0)(0)(0)>[&];(D1:pbRetimingStatus_Tval:1)[[TYPENAME:pbRetimingStatus_Tval]]

typedef enum {
	pbPortAlsMode_no_command<s(0)(0)(0)>[&]=0,
	pbPortAlsMode_manual_restart<s(0)(0)(0)>[&]=1,
	pbPortAlsMode_manual_test<s(0)(0)(0)>[&]=2
} pbPortAlsMode_Tval<s(0)(0)(0)>[&];(D1:pbPortAlsMode_Tval:1)[[TYPENAME:pbPortAlsMode_Tval]]

typedef enum {
	expectedFrameStructure_none<s(0)(0)(0)>[&]=0,
	expectedFrameStructure_e1_framed<s(0)(0)(0)>[&]=1,
	expectedFrameStructure_e1_unframed<s(0)(0)(0)>[&]=2,
	expectedFrameStructure_e3_G751<s(0)(0)(0)>[&]=3,
	expectedFrameStructure_e3_G832<s(0)(0)(0)>[&]=4,
	expectedFrameStructure_ds3_M13<s(0)(0)(0)>[&]=5,
	expectedFrameStructure_ds3_CBit<s(0)(0)(0)>[&]=6,
	expectedFrameStructure_e3_unframed<s(0)(0)(0)>[&]=7,
	expectedFrameStructure_ds3_unframed<s(0)(0)(0)>[&]=8
} expectedFrameStructure_Tval<s(0)(0)(0)>[&];(D1:expectedFrameStructure_Tval:1)[[TYPENAME:expectedFrameStructure_Tval]]

typedef enum {
	crcMultiframeDetector_activated<s(0)(0)(0)>[&]=1,
	crcMultiframeDetector_deactivated<s(0)(0)(0)>[&]=2
} crcMultiframeDetector_Tval<s(0)(0)(0)>[&];(D1:crcMultiframeDetector_Tval:1)[[TYPENAME:crcMultiframeDetector_Tval]]

typedef enum {
	portClassification_nongmpls<s(0)(0)(0)>[&]=0,
	portClassification_inni<s(0)(0)(0)>[&]=1,
	portClassification_enni<s(0)(0)(0)>[&]=2,
	portClassification_uni10<s(0)(0)(0)>[&]=3,
	portClassification_uni20<s(0)(0)(0)>[&]=4
} portClassification_Tval<s(0)(0)(0)>[&];(D1:portClassification_Tval:1)[[TYPENAME:portClassification_Tval]]

typedef enum {
	portOperationLock_none<s(0)(0)(0)>[&]=1,
	portOperationLock_nms<s(0)(0)(0)>[&]=2,
	portOperationLock_gmpls<s(0)(0)(0)>[&]=3
} portOperationLock_Tval<s(0)(0)(0)>[&];(D1:portOperationLock_Tval:1)[[TYPENAME:portOperationLock_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                          
	int		pbPortNo<s(1)(1)(0)>[&];                                                       
	char		pbPortLabel<s(1)(1)(0)>[&][64];   
	pbPortMode_Tval<s(1)(1)(0)>[T] pbPortMode<s(1)(1)(0)>[&];   
	pbPdhPortMap_Tval<s(1)(1)(0)>[T] pbPdhPortMap<s(1)(1)(0)>[&];   
	PbPortStatus_Tval<s(1)(1)(0)>[T] pbPortAdminStatus<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbPortMapRefresh<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPortAutoLaserShutdown<s(1)(1)(0)>[&];   
	pbPortLoopback_Tval<s(1)(1)(0)>[T] pbPortLoopback<s(1)(1)(0)>[&];   
	pbFecMode_Tval<s(1)(1)(0)>[T] pbFecMode<s(1)(1)(0)>[&];   
	PbActualPortType_Tval<s(1)(1)(0)>[T] pbActualPortType<s(1)(1)(0)>[&];   
	pbImpedance_Tval<s(1)(1)(0)>[T] pbImpedance<s(1)(1)(0)>[&];   
	pbCodeType_Tval<s(1)(1)(0)>[T] pbCodeType<s(1)(1)(0)>[&];   
	pbHaulType_Tval<s(1)(1)(0)>[T] pbHaulType<s(1)(1)(0)>[&];   
	pbRetimingStatus_Tval<s(1)(1)(0)>[T] pbRetimingStatus<s(1)(1)(0)>[&];   
	pbPortAlsMode_Tval<s(1)(1)(0)>[T] pbPortAlsMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPortAlarmDisable<s(1)(1)(0)>[&];   
	expectedFrameStructure_Tval<s(1)(1)(0)>[T] expectedFrameStructure<s(1)(1)(0)>[&];
	crcMultiframeDetector_Tval<s(1)(1)(0)>[T] crcMultiframeDetector<s(1)(1)(0)>[&];
	portClassification_Tval<s(1)(1)(0)>[T] portClassification<s(1)(1)(0)>[&];
	PbUsageStatus_Tval<s(1)(1)(0)>[T] portUsageStatus<s(1)(1)(0)>[&];
	int		portMappingString_len<s(1)(1)(0)>[&];
	char		portMappingString<s(1)(1)(0)>[&][384];
	portOperationLock_Tval<s(1)(1)(0)>[T] portOperationLock<s(1)(1)(0)>[&];
}MIBpbPortConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbPortConfigTable_t:1)[[TYPENAME:MIBpbPortConfigTable_t]]































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPortStatusTable_Did<s(0)(0)(0)>[&];(D1:pbPortStatusTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                               
	int		pbPortNo<s(1)(1)(0)>[&];                                            
	int		pbPortStatus<s(1)(1)(0)>[&];   
	PbPortOperationStatus_Tval<s(1)(1)(0)>[T] pbPortOperStatus<s(1)(1)(0)>[&];   
	int		pbLaserIBias<s(1)(1)(0)>[&];   
	int		pbLaserRecvPwr<s(1)(1)(0)>[&];   
	int		pbLaserTransPwr<s(1)(1)(0)>[&];   
	int		pbLaserTemp<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbCompliance8472<s(1)(1)(0)>[&];   
	int		pbnNominalMBps<s(1)(1)(0)>[&];   
	int		pbnWavelength<s(1)(1)(0)>[&];   
	int		pbnLinkLength9125<s(1)(1)(0)>[&];   
	int		pbnLinkLength50125<s(1)(1)(0)>[&];   
	int		pbnLinkLength62125<s(1)(1)(0)>[&];   
	int		pbnLinkLengthCopper<s(1)(1)(0)>[&];   
	char		pbsVendorName<s(1)(1)(0)>[&][20];   
	char		pbsVendorPN<s(1)(1)(0)>[&][20];   
	char		pbsVendorSN<s(1)(1)(0)>[&][20];   
	char		pbsManuDate<s(1)(1)(0)>[&][16];   
	PbSFFTranscCode_Tval<s(1)(1)(0)>[T] pbnTransCode<s(1)(1)(0)>[&];   
	char		pbsVendorOUI<s(1)(1)(0)>[&][16];   
	PbConnectorType_Tval<s(1)(1)(0)>[T] pbnConnectorType<s(1)(1)(0)>[&];   
	int		pbnClLaserTemp<s(1)(1)(0)>[&];
	int		pbnTECCurrent<s(1)(1)(0)>[&];
	char		pbsSAGPartNumber<s(1)(1)(0)>[&][20];
}MIBpbPortStatusTable_t<s(0)(0)(0)>[&];(D1:MIBpbPortStatusTable_t:1)[[TYPENAME:MIBpbPortStatusTable_t]]

































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPortHoTpReserveTable_Did<s(0)(0)(0)>[&];(D1:pbPortHoTpReserveTable_Did:0)

   
typedef enum {
	tpOperationLock_none<s(0)(0)(0)>[&]=1,
	tpOperationLock_nms<s(0)(0)(0)>[&]=2,
	tpOperationLock_gmpls<s(0)(0)(0)>[&]=3
} tpOperationLock_Tval<s(0)(0)(0)>[&];(D1:tpOperationLock_Tval:1)[[TYPENAME:tpOperationLock_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                
	int		vc4ReservationStatus_len<s(1)(1)(0)>[&];
	char		vc4ReservationStatus<s(1)(1)(0)>[&][256];   
	int		vc4ReservationOperate_len<s(1)(1)(0)>[&];
	char		vc4ReservationOperate<s(1)(1)(0)>[&][257];   
	tpOperationLock_Tval<s(1)(1)(0)>[T] tpOperationLock<s(1)(1)(0)>[&];   
}MIBpbPortHoTpReserveTable_t<s(0)(0)(0)>[&];(D1:MIBpbPortHoTpReserveTable_t:1)[[TYPENAME:MIBpbPortHoTpReserveTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbTPConfigTable_Did<s(0)(0)(0)>[&];(D1:pbTPConfigTable_Did:0)

   
typedef enum {
	pbSdMode_poisson<s(0)(0)(0)>[&]=1,
	pbSdMode_bursty<s(0)(0)(0)>[&]=2
} pbSdMode_Tval<s(0)(0)(0)>[&];(D1:pbSdMode_Tval:1)[[TYPENAME:pbSdMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                              
	int		pbTpIndex<s(1)(1)(0)>[&];                                                      
	TruthValue_Tval<s(1)(1)(0)>[T] pbMonitored<s(1)(1)(0)>[&];   
	PbSignalType_Tval<s(1)(1)(0)>[T] pbOutSignalType<s(1)(1)(0)>[&];
	PbInSignalType_Tval<s(1)(1)(0)>[T] pbInSignalType<s(1)(1)(0)>[&];   
	int		pbTransPsl<s(1)(1)(0)>[&];   
	int		pbExpPsl<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSLEnable<s(1)(1)(0)>[&];   
	int		pbSLAccept<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbTtiEnabled<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbTimAisDis<s(1)(1)(0)>[&];
	PbTIModeType_Tval<s(1)(1)(0)>[T] pbTtiTransmitMode<s(1)(1)(0)>[&];   
	PbTIModeType_Tval<s(1)(1)(0)>[T] pbTtiReceiveMode<s(1)(1)(0)>[&];   
	int		pbTtiOctetTransmitted_len<s(1)(1)(0)>[&];
	char		pbTtiOctetTransmitted<s(1)(1)(0)>[&][65];   
	int		pbTtiOctetExpected_len<s(1)(1)(0)>[&];
	char		pbTtiOctetExpected<s(1)(1)(0)>[&][65];   
	int		pbTtiOctetAccepted_len<s(1)(1)(0)>[&];
	char		pbTtiOctetAccepted<s(1)(1)(0)>[&][65];   
	pbSdMode_Tval<s(1)(1)(0)>[T] pbSdMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbBurstyEnable<s(1)(1)(0)>[&];   
	int		pbBurstyPeriod<s(1)(1)(0)>[&];   
	int		pbBurstyPercent<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbDegEnable<s(1)(1)(0)>[&];   
	int		pbDegThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbExcEnable<s(1)(1)(0)>[&];   
	int		pbExcThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAISEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRDIEnable<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmNearEnd15minMonitored<s(1)(1)(0)>[&];
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmFarEnd15minMonitored<s(1)(1)(0)>[&];
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmNearEnd24hrMonitored<s(1)(1)(0)>[&];
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmFarEnd24hrMonitored<s(1)(1)(0)>[&];
}MIBpbTPConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbTPConfigTable_t:1)[[TYPENAME:MIBpbTPConfigTable_t]]








































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOTUPortConfigTable_Did<s(0)(0)(0)>[&];(D1:pbOTUPortConfigTable_Did:0)

   
typedef enum {
	pbOTUPortMode_auto<s(0)(0)(0)>[&]=1,
	pbOTUPortMode_mon<s(0)(0)(0)>[&]=2,
	pbOTUPortMode_nmon<s(0)(0)(0)>[&]=3
} pbOTUPortMode_Tval<s(0)(0)(0)>[&];(D1:pbOTUPortMode_Tval:1)[[TYPENAME:pbOTUPortMode_Tval]]

typedef enum {
	pbOTUPortLoopback_none<s(0)(0)(0)>[&]=1,
	pbOTUPortLoopback_outward<s(0)(0)(0)>[&]=2,
	pbOTUPortLoopback_inward<s(0)(0)(0)>[&]=3
} pbOTUPortLoopback_Tval<s(0)(0)(0)>[&];(D1:pbOTUPortLoopback_Tval:1)[[TYPENAME:pbOTUPortLoopback_Tval]]

typedef enum {
	pbInsFecErrRate_errE3<s(0)(0)(0)>[&]=3,
	pbInsFecErrRate_errE4<s(0)(0)(0)>[&]=4,
	pbInsFecErrRate_errE5<s(0)(0)(0)>[&]=5
} pbInsFecErrRate_Tval<s(0)(0)(0)>[&];(D1:pbInsFecErrRate_Tval:1)[[TYPENAME:pbInsFecErrRate_Tval]]

typedef enum {
	pbOTUFecMode_rsfec<s(0)(0)(0)>[&]=0,
	pbOTUFecMode_ufec<s(0)(0)(0)>[&]=1
} pbOTUFecMode_Tval<s(0)(0)(0)>[&];(D1:pbOTUFecMode_Tval:1)[[TYPENAME:pbOTUFecMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                               
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	char		pbOTUPortLabel<s(1)(1)(0)>[&][65];   
	pbOTUPortMode_Tval<s(1)(1)(0)>[T] pbOTUPortMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUPortAlarmDisable<s(1)(1)(0)>[&];   
	pbOTUPortLoopback_Tval<s(1)(1)(0)>[T] pbOTUPortLoopback<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbInsFecErrEnable<s(1)(1)(0)>[&];   
	pbInsFecErrRate_Tval<s(1)(1)(0)>[T] pbInsFecErrRate<s(1)(1)(0)>[&];   
	int		pbWaveLengthId<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSMTimAlmEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSMTimActEnable<s(1)(1)(0)>[&];   
	int		pbSMTxTti_len<s(1)(1)(0)>[&];
	char		pbSMTxTti<s(1)(1)(0)>[&][65];   
	int		pbSMExpTti_len<s(1)(1)(0)>[&];
	char		pbSMExpTti<s(1)(1)(0)>[&][65];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPTAlmEnable<s(1)(1)(0)>[&];   
	int		pbTxPt<s(1)(1)(0)>[&];   
	int		pbExpPt<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbCIDAlmEnable<s(1)(1)(0)>[&];   
	int		pbTxChannelId<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAutoAdjustManulStopEnable<s(1)(1)(0)>[&];   
	int		pbPortPathMapping_len<s(1)(1)(0)>[&];
	char		pbPortPathMapping<s(1)(1)(0)>[&][9];   
	pbOTUFecMode_Tval<s(1)(1)(0)>[T] pbOTUFecMode<s(1)(1)(0)>[&];   
	PbPortStatus_Tval<s(1)(1)(0)>[T] pbOTUPortAdminStatus<s(1)(1)(0)>[&];   
	PbUsageStatus_Tval<s(1)(1)(0)>[T] pbOTUPortUsageStatus<s(1)(1)(0)>[&];   
}MIBpbOTUPortConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbOTUPortConfigTable_t:1)[[TYPENAME:MIBpbOTUPortConfigTable_t]]
































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPRBSPortHisTable_Did<s(0)(0)(0)>[&];(D1:pbPRBSPortHisTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	unsigned int	pbPRBSHisErrorSeconds<s(1)(1)(0)>[&];   
	int		pbPRBSHisMeanError<s(1)(1)(0)>[&];
	char		pbPRBSTrapTimeStamp<s(1)(1)(0)>[&][15];   
	PbActualPortType_Tval<s(1)(1)(0)>[T] pbPRBSHisActualPortType<s(1)(1)(0)>[&];   
}MIBpbPRBSPortHisTable_t<s(0)(0)(0)>[&];(D1:MIBpbPRBSPortHisTable_t:1)[[TYPENAME:MIBpbPRBSPortHisTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPRBSPortCurTable_Did<s(0)(0)(0)>[&];(D1:pbPRBSPortCurTable_Did:0)

   
typedef enum {
	pbPRBSPattern_na<s(0)(0)(0)>[&]=0,
	pbPRBSPattern_power15<s(0)(0)(0)>[&]=1,
	pbPRBSPattern_power20<s(0)(0)(0)>[&]=2,
	pbPRBSPattern_power23<s(0)(0)(0)>[&]=3
} pbPRBSPattern_Tval<s(0)(0)(0)>[&];(D1:pbPRBSPattern_Tval:1)[[TYPENAME:pbPRBSPattern_Tval]]

typedef enum {
	pbPRBSStatus_na<s(0)(0)(0)>[&]=0,
	pbPRBSStatus_syncing<s(0)(0)(0)>[&]=1,
	pbPRBSStatus_syncSucc<s(0)(0)(0)>[&]=2,
	pbPRBSStatus_syncFail<s(0)(0)(0)>[&]=3,
	pbPRBSStatus_syncError<s(0)(0)(0)>[&]=4
} pbPRBSStatus_Tval<s(0)(0)(0)>[&];(D1:pbPRBSStatus_Tval:1)[[TYPENAME:pbPRBSStatus_Tval]]

typedef enum {
	prbsMode_normal<s(0)(0)(0)>[&]=0,
	prbsMode_invert<s(0)(0)(0)>[&]=1
} prbsMode_Tval<s(0)(0)(0)>[&];(D1:prbsMode_Tval:1)[[TYPENAME:prbsMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                         
	int		pbPortNo<s(1)(1)(0)>[&];                                              
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                 
	TruthValue_Tval<s(1)(1)(0)>[T] pbPRBSEnable<s(1)(1)(0)>[&];   
	pbPRBSPattern_Tval<s(1)(1)(0)>[T] pbPRBSPattern<s(1)(1)(0)>[&];   
	unsigned int	pbPRBSErrorBlocks<s(1)(1)(0)>[&];   
	unsigned int	pbPRBSErrorSeconds<s(1)(1)(0)>[&];   
	pbPRBSStatus_Tval<s(1)(1)(0)>[T] pbPRBSStatus<s(1)(1)(0)>[&];   
	PbActualPortType_Tval<s(1)(1)(0)>[T] pbPRBSActualPortType<s(1)(1)(0)>[&];   
	prbsMode_Tval<s(1)(1)(0)>[T] prbsMode<s(1)(1)(0)>[&];   
}MIBpbPRBSPortCurTable_t<s(0)(0)(0)>[&];(D1:MIBpbPRBSPortCurTable_t:1)[[TYPENAME:MIBpbPRBSPortCurTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOTUPortStatusTable_Did<s(0)(0)(0)>[&];(D1:pbOTUPortStatusTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                   
	int		pbPortNo<s(1)(1)(0)>[&];                                
	int		pbSMRxTti_len<s(1)(1)(0)>[&];
	char		pbSMRxTti<s(1)(1)(0)>[&][65];   
	int		pbRxPt<s(1)(1)(0)>[&];   
	int		pbRxChannelId<s(1)(1)(0)>[&];   
}MIBpbOTUPortStatusTable_t<s(0)(0)(0)>[&];(D1:MIBpbOTUPortStatusTable_t:1)[[TYPENAME:MIBpbOTUPortStatusTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOTUTPConfigTable_Did<s(0)(0)(0)>[&];(D1:pbOTUTPConfigTable_Did:0)

   
typedef enum {
	pbOTUTpType_none<s(0)(0)(0)>[&]=0,
	pbOTUTpType_otu1<s(0)(0)(0)>[&]=1,
	pbOTUTpType_otu2<s(0)(0)(0)>[&]=2,
	pbOTUTpType_odu21<s(0)(0)(0)>[&]=3,
	pbOTUTpType_otu3<s(0)(0)(0)>[&]=4,
	pbOTUTpType_odu31<s(0)(0)(0)>[&]=5,
	pbOTUTpType_odu32<s(0)(0)(0)>[&]=6,
	pbOTUTpType_odu321<s(0)(0)(0)>[&]=7,
	pbOTUTpType_otu4<s(0)(0)(0)>[&]=8,
	pbOTUTpType_odu41<s(0)(0)(0)>[&]=9,
	pbOTUTpType_odu42<s(0)(0)(0)>[&]=10,
	pbOTUTpType_odu421<s(0)(0)(0)>[&]=11,
	pbOTUTpType_odu43<s(0)(0)(0)>[&]=12,
	pbOTUTpType_odu431<s(0)(0)(0)>[&]=13,
	pbOTUTpType_odu432<s(0)(0)(0)>[&]=14,
	pbOTUTpType_odu4321<s(0)(0)(0)>[&]=15
} pbOTUTpType_Tval<s(0)(0)(0)>[&];(D1:pbOTUTpType_Tval:1)[[TYPENAME:pbOTUTpType_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                             
	int		pbPortNo<s(1)(1)(0)>[&];                                                          
	int		pbOTUTpChannelId<s(1)(1)(0)>[&];                                                     
	PbTpSegment_Tval<s(1)(1)(0)>[T] pbOTUTpSegment<s(1)(1)(0)>[&];                                           
	pbOTUTpType_Tval<s(1)(1)(0)>[T] pbOTUTpType<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUMonitored<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUTimAlmEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUTimActEnable<s(1)(1)(0)>[&];   
	int		pbOTUTxTti_len<s(1)(1)(0)>[&];
	char		pbOTUTxTti<s(1)(1)(0)>[&][65];   
	int		pbOTUExpTti_len<s(1)(1)(0)>[&];
	char		pbOTUExpTti<s(1)(1)(0)>[&][65];   
	int		pbOTURxTti_len<s(1)(1)(0)>[&];
	char		pbOTURxTti<s(1)(1)(0)>[&][65];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUDegEnable<s(1)(1)(0)>[&];   
	int		pbOTUDegThreshold<s(1)(1)(0)>[&];   
	int		pbOTUDegIntervals<s(1)(1)(0)>[&];   
	PbTpMaintenanceType_Tval<s(1)(1)(0)>[T] pbOTUSendMaintenanceType<s(1)(1)(0)>[&];   
	PbTpMaintenanceType_Tval<s(1)(1)(0)>[T] pbOTURecvMaintenanceType<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUPlmAlmEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUMsimAlmEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbOTUPtAlmEnable<s(1)(1)(0)>[&];   
	int		pbOTUTxPt<s(1)(1)(0)>[&];   
	int		pbOTUExpPt<s(1)(1)(0)>[&];   
	int		pbOTURxPt<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmOTUNearEnd15minMonitored<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmOTUFarEnd15minMonitored<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmOTUNearEnd24hrMonitored<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pmOTUFarEnd24hrMonitored<s(1)(1)(0)>[&];   
}MIBpbOTUTPConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbOTUTPConfigTable_t:1)[[TYPENAME:MIBpbOTUTPConfigTable_t]]


































 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSonetModule_Did<s(0)(0)(0)>[&];(D1:pbSonetModule_Did:0)

   
















 



typedef struct
{
        UINT32<s(1)(1)(0)>[T]  ulPortId<s(1)(1)(0)>[&];       
        PbPortType_Tval<s(1)(1)(0)>[T] ulPortType<s(1)(1)(0)>[&];

         

        UINT32<s(1)(1)(0)>[T]  ulTug3Num<s(1)(1)(0)>[&];
        
        UINT16<s(1)(1)(0)>[T] ausTug3Mapping<s(1)(1)(0)>[&][192 ];
}PORT_TUG3_MAPPING_T<s(0)(0)(0)>[&];(D1:PORT_TUG3_MAPPING_T:1)[[TYPENAME:PORT_TUG3_MAPPING_T]]  

 
typedef struct
{
        UINT32<s(1)(1)(0)>[T]  ulPortId<s(1)(1)(0)>[&];       
        PbPortType_Tval<s(1)(1)(0)>[T] ulPortType<s(1)(1)(0)>[&];

        UINT32<s(1)(1)(0)>[T]  ulTug3Num<s(1)(1)(0)>[&];

        UINT16<s(1)(1)(0)>[T] ausTug3Mapping<s(1)(1)(0)>[&][1];    
}MSG_PORT_TUG3_MAPPING_T<s(0)(0)(0)>[&];(D1:MSG_PORT_TUG3_MAPPING_T:1)[[TYPENAME:MSG_PORT_TUG3_MAPPING_T]]  

 






















 
















 














 





















typedef struct
{
        UINT32<s(1)(1)(0)>[T]  nPortId<s(1)(1)(0)>[&];     

         
        PbPortOperationStatus_Tval<s(1)(1)(0)>[T] eLaserOn<s(1)(1)(0)>[&];    

 
        
        int         nLaserIBias<s(1)(1)(0)>[&];
        int         nLaserRecvPwr<s(1)(1)(0)>[&];
        int         nLaserTransPwr<s(1)(1)(0)>[&];
        int         nLaserTemp<s(1)(1)(0)>[&];

  

	TruthValue_Tval<s(1)(1)(0)>[T] pbCompliance8472<s(1)(1)(0)>[&];   
	int		pbnNominalMBps<s(1)(1)(0)>[&];   
	int		pbnWavelength<s(1)(1)(0)>[&];   
	int		pbnLinkLength9125<s(1)(1)(0)>[&];   
	int		pbnLinkLength50125<s(1)(1)(0)>[&];   
	int		pbnLinkLength62125<s(1)(1)(0)>[&];   
	int		pbnLinkLengthCopper<s(1)(1)(0)>[&];   
	char		pbsVendorName<s(1)(1)(0)>[&][20];   
	char		pbsVendorPN<s(1)(1)(0)>[&][20];   
	char		pbsVendorSN<s(1)(1)(0)>[&][20];   
	char		pbsManuDate<s(1)(1)(0)>[&][16];   
	PbSFFTranscCode_Tval<s(1)(1)(0)>[T] pbnTransCode<s(1)(1)(0)>[&];   
	char		pbsVendorOUI<s(1)(1)(0)>[&][16];   
	PbConnectorType_Tval<s(1)(1)(0)>[T] pbnConnectorType<s(1)(1)(0)>[&];  
    int     pbnClLaserTemp<s(1)(1)(0)>[&];  
    int     pbnTECCurrent<s(1)(1)(0)>[&];   
    char    pbsSagPN<s(1)(1)(0)>[&][20];  
}__attribute__ ((packed))  PORT_STATUS_T<s(0)(0)(0)>[&];(D1:PORT_STATUS_T:1)[[TYPENAME:PORT_STATUS_T]]  

 


 



























typedef struct
{
    UINT8<s(1)(1)(0)>[T]  slotNo<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  portNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] mappingStrLen<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  mappingStr<s(1)(1)(0)>[&][0];
}__attribute__ ((packed))  PORT_MAPPING_T<s(0)(0)(0)>[&];(D1:PORT_MAPPING_T:1)[[TYPENAME:PORT_MAPPING_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]  slotNo<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  portNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] mappingStrLen<s(1)(1)(0)>[&];    
}__attribute__ ((packed))  CTD_MAPPING_T<s(0)(0)(0)>[&];(D1:CTD_MAPPING_T:1)[[TYPENAME:CTD_MAPPING_T]]

 






 














typedef struct
{
    UINT32<s(1)(1)(0)>[T] SlotNo<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] BoardStyle<s(1)(1)(0)>[&];
}__attribute__ ((packed))  SLOT_ATTRIB<s(0)(0)(0)>[&];(D1:SLOT_ATTRIB:1)[[TYPENAME:SLOT_ATTRIB]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T] PortNo_Min<s(1)(1)(0)>[&];  
	UINT32<s(1)(1)(0)>[T] PortNo_Max<s(1)(1)(0)>[&];  
}__attribute__ ((packed))  PORT_RANGE<s(0)(0)(0)>[&];(D1:PORT_RANGE:1)[[TYPENAME:PORT_RANGE]]

typedef struct
{
    SLOT_ATTRIB<s(1)(1)(0)>[T] slotAttrib<s(1)(1)(0)>[&][13];  
}__attribute__ ((packed))  PdhCardFuncToIoSuit<s(0)(0)(0)>[&];(D1:PdhCardFuncToIoSuit:1)[[TYPENAME:PdhCardFuncToIoSuit]]

typedef struct
{
    SLOT_ATTRIB<s(1)(1)(0)>[T] slotAttrib<s(1)(1)(0)>[&][2]; 
    PORT_RANGE<s(1)(1)(0)>[T] portRange<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PdhCardIoToFuncSuit<s(0)(0)(0)>[&];(D1:PdhCardIoToFuncSuit:1)[[TYPENAME:PdhCardIoToFuncSuit]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T] number<s(1)(1)(0)>[&];             
    SLOT_ATTRIB<s(1)(1)(0)>[T] cardInfo<s(1)(1)(0)>[&][12];   
    PORT_RANGE<s(1)(1)(0)>[T] portRange<s(1)(1)(0)>[&][12];   
}__attribute__ ((packed))  PdhCardRelation<s(0)(0)(0)>[&];(D1:PdhCardRelation:1)[[TYPENAME:PdhCardRelation]]

 


typedef struct
{    
    UINT8<s(1)(1)(0)>[T]  portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  portNo<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  actualPortType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] mappingStrLen<s(1)(1)(0)>[&];
     
}__attribute__ ((packed))  ONE_PORT_MAPPING_T<s(0)(0)(0)>[&];(D1:ONE_PORT_MAPPING_T:1)[[TYPENAME:ONE_PORT_MAPPING_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T] ucSlotNo<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] ucPortNum<s(1)(1)(0)>[&];
     
}__attribute__ ((packed))  ONE_SLOT_MAPPING_T<s(0)(0)(0)>[&];(D1:ONE_SLOT_MAPPING_T:1)[[TYPENAME:ONE_SLOT_MAPPING_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T] ucSlotNum<s(1)(1)(0)>[&];
         
}__attribute__ ((packed))  NE_MAPPING_T<s(0)(0)(0)>[&];(D1:NE_MAPPING_T:1)[[TYPENAME:NE_MAPPING_T]]

 


 

 
typedef void (*funcDCCPortStateChangeNew<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcDCCPortStateChangeNew)(UINT32<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], int state<s(0)(0)(0)>[&]);(D1:state:0)

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_GetPdhIoCardInfoFromFuncCard<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] funcCardSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] funcCardBoardStlye<s(0)(0)(0)>[&], PdhCardRelation<s(0)(0)(0)>[T] *pPdhRelatedCard<s(0)(0)(0)>[&]);(D1:pPdhRelatedCard:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_GetPdhFuncCardInfoFromIoCard<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] ioCardSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ioCardBoardStlye<s(0)(0)(0)>[&], PdhCardRelation<s(0)(0)(0)>[T] *pPdhRelatedCard<s(0)(0)(0)>[&]);(D1:pPdhRelatedCard:0)


PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_clrNeMappingSeachFlag<s(0)(0)(0)>[&](NE_MAPPING_T<s(0)(0)(0)>[T]* pNeMapping<s(0)(0)(0)>[&]);(D1:pNeMapping:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetNextMappingfromNe<s(0)(0)(0)>[&](NE_MAPPING_T<s(0)(0)(0)>[T]* pNeMapping<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pPortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pPortNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] *pMappingStrLen<s(0)(0)(0)>[&],
                                 UINT8<s(0)(0)(0)>[T] *pMappingStr<s(0)(0)(0)>[&]);(D1:pMappingStr:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_clrSlotMappingSeachFlag<s(0)(0)(0)>[&](ONE_SLOT_MAPPING_T<s(0)(0)(0)>[T]* pSlotMapping<s(0)(0)(0)>[&]);(D1:pSlotMapping:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetNextMappingfromSlot<s(0)(0)(0)>[&](ONE_SLOT_MAPPING_T<s(0)(0)(0)>[T]* pSlotMapping<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pPortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pPortNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] *pMappingStrLen<s(0)(0)(0)>[&],
                                 UINT8<s(0)(0)(0)>[T] *pMappingStr<s(0)(0)(0)>[&]);(D1:pMappingStr:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetSlotNumberFromNeMapping<s(0)(0)(0)>[&](NE_MAPPING_T<s(0)(0)(0)>[T] *pNeMapping<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] *pSlotNumber<s(0)(0)(0)>[&]);(D1:pSlotNumber:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetPortNumberFromNeMapping<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slotNo<s(0)(0)(0)>[&], NE_MAPPING_T<s(0)(0)(0)>[T] *pNeMapping<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] *pPortNumber<s(0)(0)(0)>[&]);(D1:pPortNumber:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetPortMappingFromNeMapping<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portNo<s(0)(0)(0)>[&], NE_MAPPING_T<s(0)(0)(0)>[T] *pNeMapping<s(0)(0)(0)>[&],  
                              UINT32<s(0)(0)(0)>[T] *pPortMappingLen<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] *pMappingStr<s(0)(0)(0)>[&]);(D1:pMappingStr:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetPortNumberFromSlotMapping<s(0)(0)(0)>[&](ONE_SLOT_MAPPING_T<s(0)(0)(0)>[T] *pSlotMapping<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] *pSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] *pPortNumber<s(0)(0)(0)>[&]);(D1:pPortNumber:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_ifm_GetPortMappingFromSlotMapping<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portNo<s(0)(0)(0)>[&], ONE_SLOT_MAPPING_T<s(0)(0)(0)>[T] *pSlotMapping<s(0)(0)(0)>[&],  
                              UINT32<s(0)(0)(0)>[T] *pPortMappingLen<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] *pMappingStr<s(0)(0)(0)>[&]);(D1:pMappingStr:0)











 





























































































 
































typedef INT16<s(0)(0)(0)>[T] TEMPERATURE_T<s(0)(0)(0)>[&];(D1:TEMPERATURE_T:1)[[TYPENAME:TEMPERATURE_T]]

typedef enum {
  TEMPERATURE_STATE_NORMAL<s(0)(0)(0)>[&],
  TEMPERATURE_STATE_OVERHEAT<s(0)(0)(0)>[&],
  TEMPERATURE_STATE_UNDERHEAT<s(0)(0)(0)>[&]
} TEMPERATURE_STATE_T<s(0)(0)(0)>[&];(D1:TEMPERATURE_STATE_T:1)[[TYPENAME:TEMPERATURE_STATE_T]]

typedef enum
{
  LED_TYPE_CRITICAL<s(0)(0)(0)>[&]=0,
  LED_TYPE_MAJOR<s(0)(0)(0)>[&]=1,
  LED_TYPE_MINOR<s(0)(0)(0)>[&]=2,
  LED_TYPE_ACTIVE<s(0)(0)(0)>[&]=3,
  LED_TYPE_FAULTY<s(0)(0)(0)>[&]=4,
  LED_TYPE_FAN<s(0)(0)(0)>[&]=5,
  LED_TYPE_POWER<s(0)(0)(0)>[&]=6,
  LED_TYPE_PORTLINK<s(0)(0)(0)>[&]=7,
  LED_TYPE_PORTALARM<s(0)(0)(0)>[&]=8,
  LED_TYPE_CARDMISMATCH<s(0)(0)(0)>[&]=9,
  LED_TYPE_STANDBY<s(0)(0)(0)>[&]=10,
  LED_TYPE_CFCARD<s(0)(0)(0)>[&]=11,
  LED_TYPE_USRLINK<s(0)(0)(0)>[&]=12
} LED_TYPE_T<s(0)(0)(0)>[&];(D1:LED_TYPE_T:1)[[TYPENAME:LED_TYPE_T]]

typedef enum
{
  LED_STATE_UNKNOWN<s(0)(0)(0)>[&] = -1,  
  LED_STATE_ON<s(0)(0)(0)>[&] = 0,
  LED_STATE_OFF<s(0)(0)(0)>[&] = 1,
  LED_STATE_BLINK<s(0)(0)(0)>[&] = 2,
} LED_STATE_T<s(0)(0)(0)>[&];(D1:LED_STATE_T:1)[[TYPENAME:LED_STATE_T]]

typedef int BOARD_STYLE_T<s(0)(0)(0)>[&];(D1:BOARD_STYLE_T:1)[[TYPENAME:BOARD_STYLE_T]]

typedef enum {
  SDD_BOARD_ABSENT<s(0)(0)(0)>[&] = 0,
  SDD_BOARD_PRESENT<s(0)(0)(0)>[&] = 1,
  SDD_BOARD_UNKNOWN<s(0)(0)(0)>[&] = 2
} BOARD_PRESENCE_T<s(0)(0)(0)>[&];(D1:BOARD_PRESENCE_T:1)[[TYPENAME:BOARD_PRESENCE_T]]

typedef enum {
  SDD_REBOOT_STATE_START<s(0)(0)(0)>[&]    = 0,
  SDD_REBOOT_STATE_FINISH<s(0)(0)(0)>[&]   = 1,
  SDD_REBOOT_STATE_UNKNOWN<s(0)(0)(0)>[&]  = 2
} SDD_REBOOT_STATE_T<s(0)(0)(0)>[&];(D1:SDD_REBOOT_STATE_T:1)[[TYPENAME:SDD_REBOOT_STATE_T]]

typedef enum
{
  BOARD_EVENT_REMOVE<s(0)(0)(0)>[&] = 0,
  BOARD_EVENT_INSERT<s(0)(0)(0)>[&] = 1,
  BOARD_EVENT_LATCH_ATTACH<s(0)(0)(0)>[&] = 2,
  BOARD_EVENT_LATCH_DETATCH<s(0)(0)(0)>[&] = 3
} BOARD_EVENT_T<s(0)(0)(0)>[&];(D1:BOARD_EVENT_T:1)[[TYPENAME:BOARD_EVENT_T]]

 
typedef enum
{
    SDD_RESET_UNKNOWN<s(0)(0)(0)>[&]       = 0,
    SDD_RESET_WARM<s(0)(0)(0)>[&]   = 1,    
    SDD_RESET_COLD<s(0)(0)(0)>[&]         = 2,    
    SDD_RESET_NE_WARM<s(0)(0)(0)>[&]    = 3,    
    SDD_RESET_NE_COLD<s(0)(0)(0)>[&]      = 4,     
    SDD_RESET_BOARD_PLUG<s(0)(0)(0)>[&]	= 5		 
     
} SDD_RESET_REASON<s(0)(0)(0)>[&];(D1:SDD_RESET_REASON:1)[[TYPENAME:SDD_RESET_REASON]]

 
typedef enum
{
    SDD_BOARD_TYPE_EMPTY<s(0)(0)(0)>[&]        = 0,
    SDD_BOARD_TYPE_MC<s(0)(0)(0)>[&]           = 1,
    SDD_BOARD_TYPE_CC<s(0)(0)(0)>[&]           = 2,
    SDD_BOARD_TYPE_CHASSIS<s(0)(0)(0)>[&]      = 3,
    SDD_BOARD_TYPE_8STM16<s(0)(0)(0)>[&]       = 4,
    SDD_BOARD_TYPE_8STM14<s(0)(0)(0)>[&]       = 5,
    SDD_BOARD_TYPE_2STM64<s(0)(0)(0)>[&]       = 6,
    SDD_BOARD_TYPE_8GET<s(0)(0)(0)>[&]         = 7,
    SDD_BOARD_TYPE_10GEA<s(0)(0)(0)>[&]        = 8,
    SDD_BOARD_TYPE_10GET<s(0)(0)(0)>[&]        = 9,
    SDD_BOARD_TYPE_RPR<s(0)(0)(0)>[&]          = 10,
    SDD_BOARD_TYPE_8STM1E<s(0)(0)(0)>[&]       = 11,
    SDD_BOARD_TYPE_8STM1EIO<s(0)(0)(0)>[&]     = 12,
    SDD_BOARD_TYPE_12E3DS3<s(0)(0)(0)>[&]      = 13,
    SDD_BOARD_TYPE_12E3DS3IO<s(0)(0)(0)>[&]    = 14,
    SDD_BOARD_TYPE_126E1<s(0)(0)(0)>[&]        = 15,
    SDD_BOARD_TYPE_126E1IO<s(0)(0)(0)>[&]      = 16,
    SDD_BOARD_TYPE_SI<s(0)(0)(0)>[&]           = 17,
    SDD_BOARD_TYPE_OA<s(0)(0)(0)>[&]           = 18,
    SDD_BOARD_TYPE_PWR<s(0)(0)(0)>[&]          = 19,
    SDD_BOARD_TYPE_FAN<s(0)(0)(0)>[&]          = 20,
    SDD_BOARD_TYPE_1OTU<s(0)(0)(0)>[&]         = 21,
    SDD_BOARD_TYPE_10GEL2<s(0)(0)(0)>[&]       = 22,
    SDD_BOARD_TYPE_8STM16M<s(0)(0)(0)>[&]      = 23,
    SDD_BOARD_TYPE_16STM14M<s(0)(0)(0)>[&]     = 24,
    SDD_BOARD_TYPE_2STM64M<s(0)(0)(0)>[&]      = 25,
    SDD_BOARD_TYPE_EOS<s(0)(0)(0)>[&]          = 26,
    SDD_BOARD_TYPE_GMPLS<s(0)(0)(0)>[&]        = 27,
    SDD_BOARD_TYPE_DATAFABRIC_CONTROLLER<s(0)(0)(0)>[&]        = 28,
    SDD_BOARD_TYPE_DATAFABRIC<s(0)(0)(0)>[&]   = 29,
    SDD_BOARD_TYPE_BACKPLANE<s(0)(0)(0)>[&]    = 30,
    SDD_BOARD_TYPE_TENGE<s(0)(0)(0)>[&]        = 31,

    SDD_BOARD_TYPE_10GEL2_46<s(0)(0)(0)>[&]    = 32,    

    SDD_BOARD_TYPE_MAX<s(0)(0)(0)>[&]
} SDD_BOARD_TYPE_T<s(0)(0)(0)>[&];(D1:SDD_BOARD_TYPE_T:1)[[TYPENAME:SDD_BOARD_TYPE_T]]

typedef enum
{
    SDD_BUTTON_EVENT_TYPE_LEDTEST<s(0)(0)(0)>[&],
    SDD_BUTTON_EVENT_TYPE_ALARMCUTOFF<s(0)(0)(0)>[&],
    SDD_BUTTON_EVENT_TYPE_ALARMSUPPRESS<s(0)(0)(0)>[&]
}SDD_BUTTON_EVENT_TYPE<s(0)(0)(0)>[&];(D1:SDD_BUTTON_EVENT_TYPE:1)[[TYPENAME:SDD_BUTTON_EVENT_TYPE]]

typedef enum 
{
  BUTTON_STATE_DOWN<s(0)(0)(0)>[&],
  BUTTON_STATE_UP<s(0)(0)(0)>[&],
} BUTTON_STATE_T<s(0)(0)(0)>[&];(D1:BUTTON_STATE_T:1)[[TYPENAME:BUTTON_STATE_T]]

typedef enum
{
  POWER_FAIL<s(0)(0)(0)>[&],
  POWER_OK<s(0)(0)(0)>[&],
  POWER_PRESENT<s(0)(0)(0)>[&],
  POWER_ABSENT<s(0)(0)(0)>[&]
} POWER_STATUS_T<s(0)(0)(0)>[&];(D1:POWER_STATUS_T:1)[[TYPENAME:POWER_STATUS_T]]

typedef enum{
    FAN_STATUS_OK<s(0)(0)(0)>[&],
    FAN_STATUS_FAIL<s(0)(0)(0)>[&],
    FAN_STATUS_ABSENT<s(0)(0)(0)>[&],
    FAN_STATUS_PRESENT<s(0)(0)(0)>[&]
}FAN_STATUS_T<s(0)(0)(0)>[&];(D1:FAN_STATUS_T:1)[[TYPENAME:FAN_STATUS_T]]

typedef enum
{
    TIMING_LINE_NULL<s(0)(0)(0)>[&] = 0,
    TIMING_LINE_1<s(0)(0)(0)>[&]    = 1,        
    TIMING_LINE_2<s(0)(0)(0)>[&]    = 2            
        
}TIMING_LINE_T<s(0)(0)(0)>[&];(D1:TIMING_LINE_T:1)[[TYPENAME:TIMING_LINE_T]]

typedef enum 
{
    none<s(0)(0)(0)>[&]=0,
    manre<s(0)(0)(0)>[&]=1,
    mantest<s(0)(0)(0)>[&]=2
} ALS_MODE_STATUS_T<s(0)(0)(0)>[&];(D1:ALS_MODE_STATUS_T:1)[[TYPENAME:ALS_MODE_STATUS_T]]

typedef enum
{
    PORT_STATE_UNKNOWN<s(0)(0)(0)>[&] = -1,
    PORT_STATE_DIS<s(0)(0)(0)>[&],
    PORT_STATE_EN<s(0)(0)(0)>[&]
} PORTADMIN_STATE_T<s(0)(0)(0)>[&];(D1:PORTADMIN_STATE_T:1)[[TYPENAME:PORTADMIN_STATE_T]]

typedef enum
{
    ALS_FUNC_UNKNOWN<s(0)(0)(0)>[&] = -1,
    ALS_FUNC_DIS<s(0)(0)(0)>[&],
    ALS_FUNC_EN<s(0)(0)(0)>[&]
}ALS_FUNC_STATE_T<s(0)(0)(0)>[&];(D1:ALS_FUNC_STATE_T:1)[[TYPENAME:ALS_FUNC_STATE_T]]

typedef struct
{
    TIMING_LINE_T<s(1)(1)(0)>[T] port1_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port2_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port3_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port4_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port5_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port6_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port7_Line<s(1)(1)(0)>[&];
    TIMING_LINE_T<s(1)(1)(0)>[T] port8_Line<s(1)(1)(0)>[&];
} TIMING_REF_T<s(0)(0)(0)>[&];(D1:TIMING_REF_T:1)[[TYPENAME:TIMING_REF_T]]


typedef enum
{
    LED_TEST_KNOWN<s(0)(0)(0)>[&] = -1,
    LED_TEST_BEGIN<s(0)(0)(0)>[&] = 0,
    LED_TEST_PROC<s(0)(0)(0)>[&]  = 1,
    LED_TEST_END<s(0)(0)(0)>[&]   = 2
} SDD_LED_TEST_STATE_T<s(0)(0)(0)>[&];(D1:SDD_LED_TEST_STATE_T:1)[[TYPENAME:SDD_LED_TEST_STATE_T]]

 
typedef void (*SDD_BOARD_EVENT_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_BOARD_EVENT_CBACK)(BOARD_EVENT_T<s(0)(0)(0)>[T] event<s(0)(0)(0)>[&],
                                    SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&],
                                    BOARD_STYLE_T<s(0)(0)(0)>[T] cardType<s(0)(0)(0)>[&]);(D1:cardType:0)

typedef void (*SDD_LATCH_EVENT_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_LATCH_EVENT_CBACK)(BOARD_EVENT_T<s(0)(0)(0)>[T] event<s(0)(0)(0)>[&],
                                    SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&],
                                    BOARD_STYLE_T<s(0)(0)(0)>[T] cardType<s(0)(0)(0)>[&]);(D1:cardType:0)

typedef void (*SDD_ENTITY_UPDATE_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_ENTITY_UPDATE_CBACK)(INT16<s(0)(0)(0)>[T] entityNum<s(0)(0)(0)>[&],
                                       ENTITY_INFO_T<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&]);(D1:pInfo:0)


typedef void (*SDD_ONE_SECOND_TIMER_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_ONE_SECOND_TIMER_CBACK)(UINT32<s(0)(0)(0)>[T] counter<s(0)(0)(0)>[&]);(D1:counter:0)

typedef void (*SDD_BUTTON_EVENT_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_BUTTON_EVENT_CBACK)(SDD_BUTTON_EVENT_TYPE<s(0)(0)(0)>[T] buttonType<s(0)(0)(0)>[&],
                                      BUTTON_STATE_T<s(0)(0)(0)>[T] oldState<s(0)(0)(0)>[&],
                                      BUTTON_STATE_T<s(0)(0)(0)>[T] newState<s(0)(0)(0)>[&]);(D1:newState:0)                                      







 


































































 


typedef unsigned int  HW_PORT_TYPE<s(0)(0)(0)>[&];(D1:HW_PORT_TYPE:1)[[TYPENAME:HW_PORT_TYPE]]      
































 


typedef unsigned int  HW_ACT_PORT_TYPE<s(0)(0)(0)>[&];(D1:HW_ACT_PORT_TYPE:1)[[TYPENAME:HW_ACT_PORT_TYPE]]      













 


typedef UINT32<s(0)(0)(0)>[T] SDH_TP_TYPE<s(0)(0)(0)>[&];(D1:SDH_TP_TYPE:1)[[TYPENAME:SDH_TP_TYPE]]   











































 


typedef UINT8<s(0)(0)(0)>[T] MAGUS_TP_TYPE<s(0)(0)(0)>[&];(D1:MAGUS_TP_TYPE:1)[[TYPENAME:MAGUS_TP_TYPE]]







 
typedef enum 
{
    TTI_LEN_16BYTE<s(0)(0)(0)>[&]        = 0x1,
    TTI_LEN_64BYTE<s(0)(0)(0)>[&]        = 0x2,
    TTI_LEN_FIXED1B<s(0)(0)(0)>[&]       = 0x3,
    TTI_LEN_PROVISIONED1B<s(0)(0)(0)>[&] = 0x4,
}TTI_LEN_T<s(0)(0)(0)>[&];(D1:TTI_LEN_T:1)[[TYPENAME:TTI_LEN_T]]




typedef int ePort_MAPPING_MODE<s(0)(0)(0)>[&];(D1:ePort_MAPPING_MODE:1)[[TYPENAME:ePort_MAPPING_MODE]]




typedef enum 
{
    PORT_LOOP_NONE<s(0)(0)(0)>[&]     = 0x1,       
    PORT_LOOP_INWARD<s(0)(0)(0)>[&]   = 0x2,       
    PORT_LOOP_OUTWARD<s(0)(0)(0)>[&]  = 0x3        
} PORT_LOOPBACK_T<s(0)(0)(0)>[&];(D1:PORT_LOOPBACK_T:1)[[TYPENAME:PORT_LOOPBACK_T]]

typedef enum
{
    TTI_TYPE_TRANSMIT<s(0)(0)(0)>[&]   = 0x0,
    TTI_TYPE_ACCEPTED<s(0)(0)(0)>[&]   = 0x1,
    TTI_TYPE_CAPTURED<s(0)(0)(0)>[&]   = 0x2,
    TTI_TYPE_EXPECTED<s(0)(0)(0)>[&]   = 0x3
} TTI_TYPE_T<s(0)(0)(0)>[&];(D1:TTI_TYPE_T:1)[[TYPENAME:TTI_TYPE_T]]

typedef char TTI_STRING<s(0)(0)(0)>[&][64];(D1:TTI_STRING:1)[[TYPENAME:TTI_STRING]]

typedef enum
{
    TIM_DISABLED<s(0)(0)(0)>[&]    = 0x0,
    TIM_ENABLED<s(0)(0)(0)>[&]     = 0x1
} eTIM_MODE<s(0)(0)(0)>[&];(D1:eTIM_MODE:1)[[TYPENAME:eTIM_MODE]]

typedef enum 
{
    PSL_TYPE_TRANSMIT<s(0)(0)(0)>[&]   = 0x0,
    PSL_TYPE_ACCEPTED<s(0)(0)(0)>[&]   = 0x1,
    PSL_TYPE_CAPTURED<s(0)(0)(0)>[&]   = 0x2,
    PSL_TYPE_EXPECTED<s(0)(0)(0)>[&]   = 0x3
} PSL_TYPE_T<s(0)(0)(0)>[&];(D1:PSL_TYPE_T:1)[[TYPENAME:PSL_TYPE_T]]

typedef enum 
{
    PORT_MODE_INVALID<s(0)(0)(0)>[&]   = 0x0,   
    PORT_MODE_AUTO<s(0)(0)(0)>[&]      = 0x1,   
    PORT_MODE_MON<s(0)(0)(0)>[&]       = 0x2,   
    PORT_MODE_NMON<s(0)(0)(0)>[&]      = 0x3    
} PORT_MODE_T<s(0)(0)(0)>[&];(D1:PORT_MODE_T:1)[[TYPENAME:PORT_MODE_T]]

 
typedef enum 
{
    ALARM_SOURCE<s(0)(0)(0)>[&]    = 0x0,
    ALARM_SINK<s(0)(0)(0)>[&]      = 0x1
}ALARM_DIRECTION_T<s(0)(0)(0)>[&];(D1:ALARM_DIRECTION_T:1)[[TYPENAME:ALARM_DIRECTION_T]]

 
typedef struct
{
    UINT32<s(1)(1)(0)>[T]  bip<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  fc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]    b_lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]    b_ses<s(1)(1)(0)>[&];
} RS_PMPARA_T<s(0)(0)(0)>[&];(D1:RS_PMPARA_T:1)[[TYPENAME:RS_PMPARA_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T]  bip<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  rei<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fc<s(1)(1)(0)>[&];       
    UINT32<s(1)(1)(0)>[T]  fefc<s(1)(1)(0)>[&];     
    BOOL<s(1)(1)(0)>[T]    b_ses<s(1)(1)(0)>[&];    
    BOOL<s(1)(1)(0)>[T]    b_fses<s(1)(1)(0)>[&];   
} MSHPLP_PMPARA_T<s(0)(0)(0)>[&];(D1:MSHPLP_PMPARA_T:1)[[TYPENAME:MSHPLP_PMPARA_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T] npjc<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] ppjc<s(1)(1)(0)>[&];
} AUTU_PMPARA_T<s(0)(0)(0)>[&];(D1:AUTU_PMPARA_T:1)[[TYPENAME:AUTU_PMPARA_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T]  bip<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  bei<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fc<s(1)(1)(0)>[&];       
    UINT32<s(1)(1)(0)>[T]  fefc<s(1)(1)(0)>[&];     
} OTU_PMPARA_T<s(0)(0)(0)>[&];(D1:OTU_PMPARA_T:1)[[TYPENAME:OTU_PMPARA_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T]  fec0<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fec1<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fecall<s(1)(1)(0)>[&];       
    UINT32<s(1)(1)(0)>[T]  fecbyte<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fecun<s(1)(1)(0)>[&];      
    UINT32<s(1)(1)(0)>[T]  fc<s(1)(1)(0)>[&];     
} FEC_PMPARA_T<s(0)(0)(0)>[&];(D1:FEC_PMPARA_T:1)[[TYPENAME:FEC_PMPARA_T]]

typedef struct 
{
    int   nLaserIBias<s(1)(1)(0)>[&];
    float nVcc<s(1)(1)(0)>[&];                              
    int   nLaserTemp<s(1)(1)(0)>[&];
    int   nLaserTransPwr<s(1)(1)(0)>[&];
    int   nLaserRecvPwr<s(1)(1)(0)>[&];
    int   bCompliance8472<s(1)(1)(0)>[&];                    
    int   pbnNominalMBps<s(1)(1)(0)>[&];                     
    int   pbnWavelength<s(1)(1)(0)>[&];                      
    int   pbnLinkLength9125<s(1)(1)(0)>[&];                  
    int   pbnLinkLength50125<s(1)(1)(0)>[&];                 
    int   pbnLinkLength62125<s(1)(1)(0)>[&];                 
    int   pbnLinkLengthCopper<s(1)(1)(0)>[&];                
    char  pbsVendorName<s(1)(1)(0)>[&][20];                  
    char  pbsVendorPN<s(1)(1)(0)>[&][20];                    
    char  pbsVendorSN<s(1)(1)(0)>[&][20];                    
    char  pbsManuDate<s(1)(1)(0)>[&][16];                    
    PbSFFTranscCode_Tval<s(1)(1)(0)>[T] pbnTransCode<s(1)(1)(0)>[&];        
    char  pbsVendorOUI<s(1)(1)(0)>[&][16];                   
    PbConnectorType_Tval<s(1)(1)(0)>[T] pbnConnectorType<s(1)(1)(0)>[&];    
    int   pbnClLaserTemp<s(1)(1)(0)>[&];                    
    int   pbnTECCurrent<s(1)(1)(0)>[&];                     
    char  pbsSagPN<s(1)(1)(0)>[&][20];                      
} LASER_PARAMETER_T<s(0)(0)(0)>[&];(D1:LASER_PARAMETER_T:1)[[TYPENAME:LASER_PARAMETER_T]]

 
typedef enum 
{
    PDH_MAP_E1_VC12_TU12<s(0)(0)(0)>[&]    = 0x0,
    PDH_MAP_DS1_VC11_TU11<s(0)(0)(0)>[&]   = 0x1,
    PDH_MAP_DS1_VC11_TU12<s(0)(0)(0)>[&]   = 0x2,
    PDH_MAP_E3_LOVC3_TU3<s(0)(0)(0)>[&]    = 0x3,
    PDH_MAP_E3_HOVC3_AU3<s(0)(0)(0)>[&]    = 0x4,
    PDH_MAP_DS3_LOVC3_TU3<s(0)(0)(0)>[&]   = 0x5,
    PDH_MAP_DS3_HOVC3_AU3<s(0)(0)(0)>[&]   = 0x6
} PDH_MAPPING_T<s(0)(0)(0)>[&];(D1:PDH_MAPPING_T:1)[[TYPENAME:PDH_MAPPING_T]]

typedef enum
{
    LINE_CODING_HDB3<s(0)(0)(0)>[&]    = 0x0,
    LINE_CODING_CMI<s(0)(0)(0)>[&]     = 0x1,
    LINE_CODING_AMI<s(0)(0)(0)>[&]     = 0x2,
    LINE_CODING_B3ZS<s(0)(0)(0)>[&]    = 0x3,
    LINE_CODING_B6ZS<s(0)(0)(0)>[&]    = 0x4,
    LINE_CODING_B8ZS<s(0)(0)(0)>[&]    = 0x5
}LINE_CODING_T<s(0)(0)(0)>[&];(D1:LINE_CODING_T:1)[[TYPENAME:LINE_CODING_T]]

typedef enum
{
    OHM_75_R<s(0)(0)(0)>[&]  = 0x0,
    OHM_120_R<s(0)(0)(0)>[&] = 0x1,
    OHM_100_R<s(0)(0)(0)>[&] = 0x2,
    OHM_110_R<s(0)(0)(0)>[&] = 0x3,
}PDH_OHM_TYPE_T<s(0)(0)(0)>[&];(D1:PDH_OHM_TYPE_T:1)[[TYPENAME:PDH_OHM_TYPE_T]]

typedef enum 
{
    PDH_MAP_OPTION_ASYNC<s(0)(0)(0)>[&]    = 0x0,
    PDH_MAP_OPTION_BITSYNC<s(0)(0)(0)>[&]  = 0x1,
    PDH_MAP_OPTION_BYTESYNC<s(0)(0)(0)>[&] = 0x2
}PDH_MAP_OPTION_T<s(0)(0)(0)>[&];(D1:PDH_MAP_OPTION_T:1)[[TYPENAME:PDH_MAP_OPTION_T]]

 
typedef enum 
{
    E1_SA_BIT_4<s(0)(0)(0)>[&]     = 0x0,
    E1_SA_BIT_5<s(0)(0)(0)>[&]     = 0x1,
    E1_SA_BIT_6<s(0)(0)(0)>[&]     = 0x2,
    E1_SA_BIT_7<s(0)(0)(0)>[&]     = 0x3,
    E1_SA_BIT_8<s(0)(0)(0)>[&]     = 0x4
}E1_SA_BIT_T<s(0)(0)(0)>[&];(D1:E1_SA_BIT_T:1)[[TYPENAME:E1_SA_BIT_T]]

typedef enum 
{
    PORT_STATE_ABSENT<s(0)(0)(0)>[&]   = 0x0,
    PORT_STATE_UP<s(0)(0)(0)>[&]       = 0x1,
    PORT_STATE_DOWN<s(0)(0)(0)>[&]     = 0x2
} PORT_STATE_T<s(0)(0)(0)>[&];(D1:PORT_STATE_T:1)[[TYPENAME:PORT_STATE_T]]

typedef enum 
{
    LATCH_STATE_UNKNOWN<s(0)(0)(0)>[&]     = 0x0,
    LATCH_STATE_CLOSE<s(0)(0)(0)>[&]       = 0x1,
    LATCH_STATE_OPEN<s(0)(0)(0)>[&]        = 0x2,
    LATCH_STATE_CARDFAIL<s(0)(0)(0)>[&]    = 0x3,
    LATCH_STATE_CARD_REMOVE<s(0)(0)(0)>[&] = 0x4,
    LATCH_STATE_CARD_INSERT<s(0)(0)(0)>[&] = 0x5
}LATCH_STATE_T<s(0)(0)(0)>[&];(D1:LATCH_STATE_T:1)[[TYPENAME:LATCH_STATE_T]]

typedef enum
{
    EOW_TYPE_NULL<s(0)(0)(0)>[&]   = 0x0,
    EOW_TYPE_E1<s(0)(0)(0)>[&]     = 0x1,
    EOW_TYPE_E2<s(0)(0)(0)>[&]     = 0x2,
    EOW_TYPE_F1<s(0)(0)(0)>[&]     = 0x3
}EOW_TYPE_T<s(0)(0)(0)>[&];(D1:EOW_TYPE_T:1)[[TYPENAME:EOW_TYPE_T]]

typedef enum
{ 
    PDH_MODE_DS3<s(0)(0)(0)>[&]  = 0x0,
    PDH_MODE_E3<s(0)(0)(0)>[&]   = 0x1,
    PDH_MODE_E1<s(0)(0)(0)>[&]   = 0x2,
    PDH_MODE_DS1<s(0)(0)(0)>[&]  = 0x3
}PDH_PORT_MODE_T<s(0)(0)(0)>[&];(D1:PDH_PORT_MODE_T:1)[[TYPENAME:PDH_PORT_MODE_T]]

typedef enum
{
    E1_STRUCTURE_INVALID<s(0)(0)(0)>[&]   = 0x0,
    E1_STRUCTURE_FRAMED<s(0)(0)(0)>[&]    = 0x1,
    E1_STRUCTURE_UNFRAMED<s(0)(0)(0)>[&]  = 0x2,
    E3_STRUCTURE_G751<s(0)(0)(0)>[&]      = 0x3,
    E3_STRUCTURE_G832<s(0)(0)(0)>[&]      = 0x4,
    E3_STRUCTURE_UNFRAMED<s(0)(0)(0)>[&]  = 0x5,
    DS3_STRUCTURE_M13<s(0)(0)(0)>[&]      = 0x6,
    DS3_STRUCTURE_CBIT<s(0)(0)(0)>[&]     = 0x7,
    DS3_STRUCTURE_UNFRAMED<s(0)(0)(0)>[&] = 0x8,
}PDH_FRAME_MODE_T<s(0)(0)(0)>[&];(D1:PDH_FRAME_MODE_T:1)[[TYPENAME:PDH_FRAME_MODE_T]]

 
typedef enum 
{
    PRBS_STATUS_NA<s(0)(0)(0)>[&]          = 0x0,
    PRBS_STATUS_SYNCING<s(0)(0)(0)>[&]     = 0x1,
    PRBS_STATUS_SYNC_SUCC<s(0)(0)(0)>[&]   = 0x2,
    PRBS_STATUS_SYNC_FAIL<s(0)(0)(0)>[&]   = 0x3,
    PRBS_STATUS_SYNC_ERROR<s(0)(0)(0)>[&]  = 0x4
} PRBS_STATUS_T<s(0)(0)(0)>[&];(D1:PRBS_STATUS_T:1)[[TYPENAME:PRBS_STATUS_T]]

typedef enum 
{
    PRBS_MODE_NA<s(0)(0)(0)>[&]      = 0x0,
    PRBS_MODE_POWER15<s(0)(0)(0)>[&] = 0x1,
    PRBS_MODE_POWER20<s(0)(0)(0)>[&] = 0x2,
    PRBS_MODE_POWER23<s(0)(0)(0)>[&] = 0x3,
} PRBS_MODE_T<s(0)(0)(0)>[&];(D1:PRBS_MODE_T:1)[[TYPENAME:PRBS_MODE_T]]

typedef enum 
{
    SIGNAL_TYPE_NORMAL<s(0)(0)(0)>[&]  = 0x1,      
    SIGNAL_TYPE_UNEQ<s(0)(0)(0)>[&]    = 0x2,      
    SIGNAL_TYPE_AIS<s(0)(0)(0)>[&]     = 0x3,      
    SIGNAL_TYPE_RDI<s(0)(0)(0)>[&]     = 0x4,       
     
    SIGNAL_TYPE_PPIAIS<s(0)(0)(0)>[&]  = 0x8
} SIGNAL_TYPE_T<s(0)(0)(0)>[&];(D1:SIGNAL_TYPE_T:1)[[TYPENAME:SIGNAL_TYPE_T]]

typedef enum 
{
    ALARM_INSERT_AUTO<s(0)(0)(0)>[&]   = 0x0,
    ALARM_INSERT_FORCE<s(0)(0)(0)>[&]  = 0x1,
}ALARM_INSERT_WAY_T<s(0)(0)(0)>[&];(D1:ALARM_INSERT_WAY_T:1)[[TYPENAME:ALARM_INSERT_WAY_T]]

typedef enum
{
    DCC_TYPE_NONE<s(0)(0)(0)>[&]    = 0x0,
    DCC_TYPE_RS<s(0)(0)(0)>[&]      = 0x1,
    DCC_TYPE_MS<s(0)(0)(0)>[&]      = 0x2,
    DCC_TYPE_BOTH<s(0)(0)(0)>[&]    = 0x3,
} DCC_TYPE_T<s(0)(0)(0)>[&];(D1:DCC_TYPE_T:1)[[TYPENAME:DCC_TYPE_T]]

typedef enum
{
    CTD_BOARD_EPGTYPE_ERROR<s(0)(0)(0)>[&]         = 0x0,
    CTD_BOARD_EPGTYPE_NONE<s(0)(0)(0)>[&]          = 0x1,
    CTD_BOARD_EPGTYPE_1TON_WORK<s(0)(0)(0)>[&]     = 0x2,
    CTD_BOARD_EPGTYPE_1TON_PROT<s(0)(0)(0)>[&]     = 0x3,
    CTD_BOARD_EPGTYPE_1PLUS1_WORK<s(0)(0)(0)>[&]   = 0x4,
    CTD_BOARD_EPGTYPE_1PLUS1_PROT<s(0)(0)(0)>[&]   = 0x5,
    CTD_BOARD_EPGTYPE_1TO1_WORK<s(0)(0)(0)>[&]     = 0x6,
    CTD_BOARD_EPGTYPE_1TO1_PROT<s(0)(0)(0)>[&]     = 0x7
} CTD_BOARD_EPGTYPE<s(0)(0)(0)>[&];(D1:CTD_BOARD_EPGTYPE:1)[[TYPENAME:CTD_BOARD_EPGTYPE]]

 
typedef enum
{
    CTD_LOCC_NONE<s(0)(0)(0)>[&]    = 0x0,
    CTD_LOCC_20G<s(0)(0)(0)>[&]     = 0x1,
    CTD_LOCC_40G<s(0)(0)(0)>[&]     = 0x2,
}CTD_LOCC_MODE_T<s(0)(0)(0)>[&];(D1:CTD_LOCC_MODE_T:1)[[TYPENAME:CTD_LOCC_MODE_T]]

 
typedef enum
{
    CTD_CARD_UNKNOWN<s(0)(0)(0)>[&]    = 0x0,
    CTD_CARD_ACTIVE<s(0)(0)(0)>[&]     = 0x1,
    CTD_CARD_STANDBY<s(0)(0)(0)>[&]    = 0x2,
}CTD_CARD_STATE_T<s(0)(0)(0)>[&];(D1:CTD_CARD_STATE_T:1)[[TYPENAME:CTD_CARD_STATE_T]]

 
typedef enum
{
    CTD_FEC_ERR_NONE<s(0)(0)(0)>[&]    = 0x0,
    CTD_FEC_ERR_E3<s(0)(0)(0)>[&]      = 0x3,
    CTD_FEC_ERR_E4<s(0)(0)(0)>[&]      = 0x4,
    CTD_FEC_ERR_E5<s(0)(0)(0)>[&]      = 0x5,
}CTD_FEC_INSERT_RATE_T<s(0)(0)(0)>[&];(D1:CTD_FEC_INSERT_RATE_T:1)[[TYPENAME:CTD_FEC_INSERT_RATE_T]]

 












 









 











typedef struct 
{
    char   *name<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  style<s(1)(1)(0)>[&];           
    UINT32<s(1)(1)(0)>[T]  option<s(1)(1)(0)>[&];          
    UINT32<s(1)(1)(0)>[T]  totalPortNum<s(1)(1)(0)>[&];    
    UINT32<s(1)(1)(0)>[T]  portIdRange<s(1)(1)(0)>[&][(29 ) ][2];   



    UINT32<s(1)(1)(0)>[T]  dataPortNum<s(1)(1)(0)>[&][2];  
} CTD_BOARD_INFO_T<s(0)(0)(0)>[&];(D1:CTD_BOARD_INFO_T:1)[[TYPENAME:CTD_BOARD_INFO_T]]

 













































 
 






 


 













typedef UINT16<s(0)(0)(0)>[T] TU_TP_T<s(0)(0)(0)>[&];(D1:TU_TP_T:1)[[TYPENAME:TU_TP_T]]

 


 





























typedef UINT32<s(0)(0)(0)>[T] AU_TP_T<s(0)(0)(0)>[&];(D1:AU_TP_T:1)[[TYPENAME:AU_TP_T]]

 



 







typedef UINT32<s(0)(0)(0)>[T] COMPACT_TP_T<s(0)(0)(0)>[&];(D1:COMPACT_TP_T:1)[[TYPENAME:COMPACT_TP_T]]






 






 




 









 


typedef struct
{
     
    SDH_TP_TYPE<s(1)(1)(0)>[T] eTpType<s(1)(1)(0)>[&];

     
    UINT32<s(1)(1)(0)>[T] E<s(1)(1)(0)>[&]: 4,
           D<s(1)(1)(0)>[&]: 4,
           C<s(1)(1)(0)>[&]: 4,
           B<s(1)(1)(0)>[&]: 4,
           A<s(1)(1)(0)>[&]: 4,
           K<s(1)(1)(0)>[&]: 4,
           L<s(1)(1)(0)>[&]: 4,
           M<s(1)(1)(0)>[&]: 4;        
}__attribute__ ((packed))  TP_INDEX_T<s(0)(0)(0)>[&];(D1:TP_INDEX_T:1)[[TYPENAME:TP_INDEX_T]]  

 


 
















typedef UINT16<s(0)(0)(0)>[T] SDH_TUG3_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_TUG3_MAPPING_T:1)[[TYPENAME:SDH_TUG3_MAPPING_T]]



typedef UINT8<s(0)(0)(0)>[T] SDH_TUG2_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_TUG2_MAPPING_T:1)[[TYPENAME:SDH_TUG2_MAPPING_T]]




 


typedef UINT16<s(0)(0)(0)>[T] SDH_VC3H_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_VC3H_MAPPING_T:1)[[TYPENAME:SDH_VC3H_MAPPING_T]]

 







 









typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_clr<s(1)(1)(0)>[&];
    SDH_TUG3_MAPPING_T<s(1)(1)(0)>[T] tug3<s(1)(1)(0)>[&][3];
} SDH_VC4_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_VC4_MAPPING_T:1)[[TYPENAME:SDH_VC4_MAPPING_T]]

typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_au4<s(1)(1)(0)>[&];

    union
    {
         
        SDH_VC4_MAPPING_T<s(2)(1)(0)>[T] vc4<s(2)(1)(0)>[&];
 
         
        SDH_VC3H_MAPPING_T<s(2)(1)(0)>[T] vc3h<s(2)(1)(0)>[&][3];
    } hovc<s(1)(0)(0)>[&];
} SDH_AUG1_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_AUG1_MAPPING_T:1)[[TYPENAME:SDH_AUG1_MAPPING_T]]

typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_4c<s(1)(1)(0)>[&];
 
    SDH_AUG1_MAPPING_T<s(1)(1)(0)>[T] aug1<s(1)(1)(0)>[&][4];
} SDH_AUG4_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_AUG4_MAPPING_T:1)[[TYPENAME:SDH_AUG4_MAPPING_T]]

typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_16c<s(1)(1)(0)>[&];
 
    SDH_AUG4_MAPPING_T<s(1)(1)(0)>[T] aug4<s(1)(1)(0)>[&][4];
} SDH_AUG16_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_AUG16_MAPPING_T:1)[[TYPENAME:SDH_AUG16_MAPPING_T]]

typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_64c<s(1)(1)(0)>[&];

    SDH_AUG16_MAPPING_T<s(1)(1)(0)>[T] aug16<s(1)(1)(0)>[&][4];
} SDH_AUG64_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_AUG64_MAPPING_T:1)[[TYPENAME:SDH_AUG64_MAPPING_T]]

typedef struct
{
    



    BOOL<s(1)(1)(0)>[T] b_256c<s(1)(1)(0)>[&];

    SDH_AUG64_MAPPING_T<s(1)(1)(0)>[T] aug64<s(1)(1)(0)>[&][4];
} SDH_AUG256_MAPPING_T<s(0)(0)(0)>[&];(D1:SDH_AUG256_MAPPING_T:1)[[TYPENAME:SDH_AUG256_MAPPING_T]]

extern void CTD_InitModule<s(0)(0)(0)>[&]();(D1:CTD_InitModule:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetPortTotalNumber<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetPortNumber<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetPortBegin<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetBoardStyle<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetBoardOption<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_SetBoardInfo<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulStyle<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulOption<s(0)(0)(0)>[&]);(D1:ulOption:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_GetPortType<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] *pucTypeNum<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] *pePortType<s(0)(0)(0)>[&]);(D1:pePortType:0)
extern SLOT_NUMBER_T<s(0)(0)(0)>[T] CTD_InstanceToSlot<s(0)(0)(0)>[&](INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&]);(D1:inst:0)
extern INSTANCE_T<s(0)(0)(0)>[T] CTD_SlotToInstance<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetRelativePortId<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&]);(D1:port:0)
extern UINT32<s(0)(0)(0)>[T] CTD_GetAbsolutePortId<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] pType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&]);(D1:port:0)
extern CTD_BOARD_EPGTYPE<s(0)(0)(0)>[T] CTD_GetBoardEpgType<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern CARDTYPE_T<s(0)(0)(0)>[T] CTD_BoardStyleToCardType<s(0)(0)(0)>[&](PbBoardStyle_Tval<s(0)(0)(0)>[T] boardStyle<s(0)(0)(0)>[&]);(D1:boardStyle:0)
extern PORT_LOOPBACK_T<s(0)(0)(0)>[T] CTD_TransToCdhLoopType<s(0)(0)(0)>[&](pbPortLoopback_Tval<s(0)(0)(0)>[T]  eLoopbackType<s(0)(0)(0)>[&]);(D1:eLoopbackType:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_TransToCdhMap<s(0)(0)(0)>[&](PORT_MAPPING_T<s(0)(0)(0)>[T] *pTug3Map<s(0)(0)(0)>[&], void *pCdhMap<s(0)(0)(0)>[&]);(D1:pCdhMap:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_TransToCdhTp<s(0)(0)(0)>[&](const TP_INDEX_T<s(0)(0)(0)>[T] *pTpIndex<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] *pTpId<s(0)(0)(0)>[&]);(D1:pTpId:0)
extern SDH_TP_TYPE<s(0)(0)(0)>[T] CTD_GetTpType<s(0)(0)(0)>[&](const TP_INDEX_T<s(0)(0)(0)>[T] *pTpIndex<s(0)(0)(0)>[&]);(D1:pTpIndex:0)
extern TTI_LEN_T<s(0)(0)(0)>[T] CTD_TransToCdhTtiMode<s(0)(0)(0)>[&](PbTIModeType_Tval<s(0)(0)(0)>[T] mode<s(0)(0)(0)>[&]);(D1:mode:0)
extern SIGNAL_TYPE_T<s(0)(0)(0)>[T] CTD_TransToCdhSigType<s(0)(0)(0)>[&](PbSignalType_Tval<s(0)(0)(0)>[T] signalType<s(0)(0)(0)>[&]);(D1:signalType:0)
extern LATCH_STATE_T<s(0)(0)(0)>[T] CTD_TransToCdhLatchState<s(0)(0)(0)>[&](PbEpgFunctionCardStatus_Tval<s(0)(0)(0)>[T] eState<s(0)(0)(0)>[&]);(D1:eState:0)
extern PbEpgFunctionCardStatus_Tval<s(0)(0)(0)>[T] CTD_TransToExLatchState<s(0)(0)(0)>[&](LATCH_STATE_T<s(0)(0)(0)>[T] eState<s(0)(0)(0)>[&]);(D1:eState:0)
extern PRBS_MODE_T<s(0)(0)(0)>[T] CTD_TransToCdhPrbsMode<s(0)(0)(0)>[&](pbPRBSPattern_Tval<s(0)(0)(0)>[T] prbsPattern<s(0)(0)(0)>[&]);(D1:prbsPattern:0)
extern PbPortOperationStatus_Tval<s(0)(0)(0)>[T] CTD_TransToExPortState<s(0)(0)(0)>[&](PORT_STATE_T<s(0)(0)(0)>[T] cdhPortState<s(0)(0)(0)>[&]);(D1:cdhPortState:0)
extern const char* CTD_GetLedStateName<s(0)(0)(0)>[&](LED_STATE_T<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)
extern PDH_FRAME_MODE_T<s(0)(0)(0)>[T] CTD_TransToCdhFrameMode<s(0)(0)(0)>[&](expectedFrameStructure_Tval<s(0)(0)(0)>[T] eFrameMode<s(0)(0)(0)>[&]);(D1:eFrameMode:0)
extern UINT32<s(0)(0)(0)>[T] CTD_TransToCdhPortType<s(0)(0)(0)>[&](HW_ACT_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&]);(D1:ePortType:0)
extern PORT_LOOPBACK_T<s(0)(0)(0)>[T] CTD_TransToOtuLoopType<s(0)(0)(0)>[&](pbOTUPortLoopback_Tval<s(0)(0)(0)>[T] eLoopbackType<s(0)(0)(0)>[&]);(D1:eLoopbackType:0)
extern CTD_FEC_INSERT_RATE_T<s(0)(0)(0)>[T] CTD_TransToOtuFecErrRate<s(0)(0)(0)>[&](pbInsFecErrRate_Tval<s(0)(0)(0)>[T] InsFecErrRate<s(0)(0)(0)>[&]);(D1:InsFecErrRate:0)
extern CTD_CARD_STATE_T<s(0)(0)(0)>[T] CTD_GetXcState<s(0)(0)(0)>[&]();(D1:CTD_GetXcState:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CTD_SetXcState<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] bCardState<s(0)(0)(0)>[&]);(D1:bCardState:0)
extern const char* CTD_GetCardName<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)

extern CTD_BOARD_INFO_T<s(0)(0)(0)>[T] ctd_boardInfo<s(0)(0)(0)>[&][];(D1:ctd_boardInfo:0)








 














































































































 


















 

 
 

 



















































 

 

 

























 

 

 




































 

 

 







 
































 








































 



 

	 












	 


















 






 



 






 



 


 




 




extern int *	__errno<s(0)(0)(0)>[&](void);(D1:__errno:0)























 









 

typedef struct obj_core<s(1)(0)(1)>[&]  *OBJ_ID<s(0)(0)(0)>[&];(D1:OBJ_ID:1)[[TYPENAME:OBJ_ID]]		 


 

















 



extern STATUS<s(0)(0)(0)>[T] 	objShow<s(0)(0)(0)>[&] (OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&], int showType<s(0)(0)(0)>[&]);(D1:showType:0)















 

 

 






















































 







 



typedef struct mem_part<s(1)(0)(1)>[&] *PART_ID<s(0)(0)(0)>[&];(D1:PART_ID:1)[[TYPENAME:PART_ID]]

 

typedef struct
    {

    unsigned long numBytesFree<s(1)(1)(0)>[&],	    
		  numBlocksFree<s(1)(1)(0)>[&],    
		  maxBlockSizeFree<s(1)(1)(0)>[&], 
		  numBytesAlloc<s(1)(1)(0)>[&],    
		  numBlocksAlloc<s(1)(1)(0)>[&];   

    }  MEM_PART_STATS<s(0)(0)(0)>[&];(D1:MEM_PART_STATS:1)[[TYPENAME:MEM_PART_STATS]]


 

 



 




 




 






 









 

 

extern PART_ID<s(0)(0)(0)>[T] memSysPartId<s(0)(0)(0)>[&];(D1:memSysPartId:0)

 

extern FUNCPTR<s(0)(0)(0)>[T]  smMemPartOptionsSetRtn<s(0)(0)(0)>[&];(D1:smMemPartOptionsSetRtn:0)
extern FUNCPTR<s(0)(0)(0)>[T]  smMemPartFindMaxRtn<s(0)(0)(0)>[&];(D1:smMemPartFindMaxRtn:0)
extern FUNCPTR<s(0)(0)(0)>[T]  smMemPartReallocRtn<s(0)(0)(0)>[&];(D1:smMemPartReallocRtn:0)
extern FUNCPTR<s(0)(0)(0)>[T]  smMemPartShowRtn<s(0)(0)(0)>[&];(D1:smMemPartShowRtn:0)

 



extern STATUS<s(0)(0)(0)>[T] 	memInit<s(0)(0)(0)>[&] (char *pPool<s(0)(0)(0)>[&], unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern STATUS<s(0)(0)(0)>[T] 	memPartLibInit<s(0)(0)(0)>[&] (char *pPool<s(0)(0)(0)>[&], unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern PART_ID<s(0)(0)(0)>[T] 	memPartCreate<s(0)(0)(0)>[&] (char *pPool<s(0)(0)(0)>[&], unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern void 	memPartInit<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], char *pPool<s(0)(0)(0)>[&], unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern STATUS<s(0)(0)(0)>[T] 	memPartAddToPool<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], char *pPool<s(0)(0)(0)>[&],
				  unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern void 	memAddToPool<s(0)(0)(0)>[&] (char *pPool<s(0)(0)(0)>[&], unsigned poolSize<s(0)(0)(0)>[&]);(D1:poolSize:0)
extern void *	memPartAlloc<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], unsigned nBytes<s(0)(0)(0)>[&]);(D1:nBytes:0)
extern void *   memPartAlignedAlloc<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], unsigned nBytes<s(0)(0)(0)>[&],
				     unsigned alignment<s(0)(0)(0)>[&]);(D1:alignment:0)
extern void *	memalign<s(0)(0)(0)>[&] (unsigned alignment<s(0)(0)(0)>[&], unsigned size<s(0)(0)(0)>[&]);(D1:size:0)
extern void *   valloc<s(0)(0)(0)>[&] (unsigned size<s(0)(0)(0)>[&]);(D1:size:0)
extern STATUS<s(0)(0)(0)>[T] 	memPartFree<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], char *pBlock<s(0)(0)(0)>[&]);(D1:pBlock:0)
extern STATUS<s(0)(0)(0)>[T] 	memPartOptionsSet<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], unsigned options<s(0)(0)(0)>[&]);(D1:options:0)
extern int 	memFindMax<s(0)(0)(0)>[&] (void);(D1:memFindMax:0)
extern int 	memPartFindMax<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&]);(D1:partId:0)
extern void *	memPartRealloc<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], char *pBlock<s(0)(0)(0)>[&], unsigned nBytes<s(0)(0)(0)>[&]);(D1:nBytes:0)
extern void 	memOptionsSet<s(0)(0)(0)>[&] (unsigned options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T] 	cfree<s(0)(0)(0)>[&] (char *pBlock<s(0)(0)(0)>[&]);(D1:pBlock:0)
extern void 	memShowInit<s(0)(0)(0)>[&] (void);(D1:memShowInit:0)
extern void 	memShow<s(0)(0)(0)>[&] (int type<s(0)(0)(0)>[&]);(D1:type:0)
extern STATUS<s(0)(0)(0)>[T] 	memPartShow<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T] partId<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&]);(D1:type:0)
extern STATUS<s(0)(0)(0)>[T]   memPartInfoGet<s(0)(0)(0)>[&] (PART_ID<s(0)(0)(0)>[T]	partId<s(0)(0)(0)>[&], MEM_PART_STATS<s(0)(0)(0)>[T] * ppartStats<s(0)(0)(0)>[&]);(D1:ppartStats:0)












 






typedef struct obj_class<s(1)(0)(1)>[&] *CLASS_ID<s(0)(0)(0)>[&];(D1:CLASS_ID:1)[[TYPENAME:CLASS_ID]]		 

extern CLASS_ID<s(0)(0)(0)>[T] classClassId<s(0)(0)(0)>[&];(D1:classClassId:0)			 

 



extern STATUS<s(0)(0)(0)>[T] 	classLibInit<s(0)(0)(0)>[&] (void);(D1:classLibInit:0)
extern STATUS<s(0)(0)(0)>[T] 	classMemPartIdSet<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], PART_ID<s(0)(0)(0)>[T] memPartId<s(0)(0)(0)>[&]);(D1:memPartId:0)
extern void 	classShowInit<s(0)(0)(0)>[&] (void);(D1:classShowInit:0)
extern STATUS<s(0)(0)(0)>[T] 	classShow<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&]);(D1:level:0)



















 

 

 


























typedef struct obj_core<s(1)(0)(1)>[&]		 
    {
    struct obj_class<s(2)(1)(1)>[&] *pObjClass<s(1)(1)(0)>[&];	 
    } OBJ_CORE<s(0)(0)(0)>[&];(D1:OBJ_CORE:1)[[TYPENAME:OBJ_CORE]]






 



extern OBJ_ID<s(0)(0)(0)>[T] 	objCreate<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], ...);(D1:classId:0)
extern STATUS<s(0)(0)(0)>[T] 	objInit<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&], ...);(D1:objId:0)
extern STATUS<s(0)(0)(0)>[T] 	objDelete<s(0)(0)(0)>[&] (OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&]);(D1:objId:0)
extern STATUS<s(0)(0)(0)>[T] 	objDestroy<s(0)(0)(0)>[&] (OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] dealloc<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern STATUS<s(0)(0)(0)>[T] 	objFree<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], char *pObject<s(0)(0)(0)>[&]);(D1:pObject:0)
extern STATUS<s(0)(0)(0)>[T] 	objTerminate<s(0)(0)(0)>[&] (OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&]);(D1:objId:0)
extern void *	objAlloc<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&]);(D1:classId:0)
extern void *	objAllocExtra<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], unsigned nExtraBytes<s(0)(0)(0)>[&],
			       void ** ppExtra<s(0)(0)(0)>[&]);(D1:ppExtra:0)
extern void 	objCoreInit<s(0)(0)(0)>[&] (OBJ_CORE<s(0)(0)(0)>[T] *pObjCore<s(0)(0)(0)>[&], CLASS_ID<s(0)(0)(0)>[T] pObjClass<s(0)(0)(0)>[&]);(D1:pObjClass:0)
extern void 	objCoreTerminate<s(0)(0)(0)>[&] (OBJ_CORE<s(0)(0)(0)>[T] *pObjCore<s(0)(0)(0)>[&]);(D1:pObjCore:0)











 

 
 























 









typedef struct obj_class<s(1)(0)(1)>[&]	 
    {
    OBJ_CORE<s(1)(1)(0)>[T]		objCore<s(1)(1)(0)>[&];	 
    struct mem_part<s(2)(1)(1)>[&]	*objPartId<s(1)(1)(0)>[&];	 
    unsigned		objSize<s(1)(1)(0)>[&];	 
    unsigned		objAllocCnt<s(1)(1)(0)>[&];	 
    unsigned		objFreeCnt<s(1)(1)(0)>[&];	 
    unsigned		objInitCnt<s(1)(1)(0)>[&];	 
    unsigned		objTerminateCnt<s(1)(1)(0)>[&]; 
    int			coreOffset<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		createRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		initRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		destroyRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		showRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		instRtn<s(1)(1)(0)>[&];	 
    } OBJ_CLASS<s(0)(0)(0)>[&];(D1:OBJ_CLASS:1)[[TYPENAME:OBJ_CLASS]]


 



extern CLASS_ID<s(0)(0)(0)>[T]	classCreate<s(0)(0)(0)>[&] (unsigned objectSize<s(0)(0)(0)>[&], int coreOffset<s(0)(0)(0)>[&],
			     FUNCPTR<s(0)(0)(0)>[T] createRtn<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] initRtn<s(0)(0)(0)>[&],
			     FUNCPTR<s(0)(0)(0)>[T] destroyRtn<s(0)(0)(0)>[&]);(D1:destroyRtn:0)
extern STATUS<s(0)(0)(0)>[T]	classInit<s(0)(0)(0)>[&] (OBJ_CLASS<s(0)(0)(0)>[T] *pObjClass<s(0)(0)(0)>[&], unsigned objectSize<s(0)(0)(0)>[&],
			   int coreOffset<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] createRtn<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] initRtn<s(0)(0)(0)>[&],
			   FUNCPTR<s(0)(0)(0)>[T] destroyRtn<s(0)(0)(0)>[&]);(D1:destroyRtn:0)
extern STATUS<s(0)(0)(0)>[T]	classDestroy<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&]);(D1:classId:0)
extern STATUS<s(0)(0)(0)>[T]	classInstConnect<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] instRtn<s(0)(0)(0)>[&]);(D1:instRtn:0)
extern STATUS<s(0)(0)(0)>[T]	classShowConnect<s(0)(0)(0)>[&] (CLASS_ID<s(0)(0)(0)>[T] classId<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] showRtn<s(0)(0)(0)>[&]);(D1:showRtn:0)
extern STATUS<s(0)(0)(0)>[T]   classInstrument<s(0)(0)(0)>[&] ( OBJ_CLASS<s(0)(0)(0)>[T] * pObjClass<s(0)(0)(0)>[&], 
				  OBJ_CLASS<s(0)(0)(0)>[T] * pObjInstClass<s(0)(0)(0)>[&] );(D1:pObjInstClass:0)











   









 








































 



 
 







 



 

typedef struct __va_list_tag<s(1)(0)(1)>[&] {
  unsigned char gpr<s(1)(1)(0)>[&];		 


  unsigned char fpr<s(1)(1)(0)>[&];		 


  char *overflow_arg_area<s(1)(1)(0)>[&];	 

  char *reg_save_area<s(1)(1)(0)>[&];		 
} __va_list<s(0)(0)(0)>[&][1],(D1:__va_list:1) __gnuc_va_list<s(0)(0)(0)>[&][1];(D1:__gnuc_va_list:1)[[TYPENAME:__gnuc_va_list]]









 



 


typedef struct {
  long   __gp_save<s(1)(1)(0)>[&][8];		 
  double __fp_save<s(1)(1)(0)>[&][8];		 
} __va_regsave_t<s(0)(0)(0)>[&];(D1:__va_regsave_t:1)[[TYPENAME:__va_regsave_t]]

 
 









 









 























 
















 





















 
 















 




 

 

 

typedef __gnuc_va_list<s(0)(0)(0)>[T] va_list<s(0)(0)(0)>[&];(D1:va_list:1)[[TYPENAME:va_list]]





























 

struct __sbuf<s(1)(0)(1)>[&] 			 
    {
    uchar_t<s(1)(1)(0)>[T] * _base<s(1)(1)(0)>[&];		 
    int	      _size<s(1)(1)(0)>[&];		 
    };

typedef	struct __sFILE<s(1)(0)(1)>[&]
    {
    OBJ_CORE<s(1)(1)(0)>[T]		objCore<s(1)(1)(0)>[&];	 
    uchar_t<s(1)(1)(0)>[T] *		_p<s(1)(1)(0)>[&];		 
    int			_r<s(1)(1)(0)>[&];		 
    int			_w<s(1)(1)(0)>[&];		 
    short		_flags<s(1)(1)(0)>[&];		 
    short		_file<s(1)(1)(0)>[&];		 
    struct __sbuf<s(2)(1)(1)>[&]	_bf<s(2)(1)(1)>[&];		 
    int			_lbfsize<s(1)(1)(0)>[&];	 
    struct __sbuf<s(2)(1)(1)>[&]	_ub<s(2)(1)(1)>[&];		 
    uchar_t<s(1)(1)(0)>[T] *		_up<s(1)(1)(0)>[&];		 
    int			_ur<s(1)(1)(0)>[&];		 
    uchar_t<s(1)(1)(0)>[T]		_ubuf<s(1)(1)(0)>[&][3];	 
    uchar_t<s(1)(1)(0)>[T]		_nbuf<s(1)(1)(0)>[&][1];	 
    struct __sbuf<s(2)(1)(1)>[&]	_lb<s(2)(1)(1)>[&];		 
    int			_blksize<s(1)(1)(0)>[&];	 
    int			_offset<s(1)(1)(0)>[&];	 
    int			taskId<s(1)(1)(0)>[&];		 
    } FILE<s(0)(0)(0)>[&];(D1:FILE:1)[[TYPENAME:FILE]]

 

extern CLASS_ID<s(0)(0)(0)>[T] fpClassId<s(0)(0)(0)>[&];(D1:fpClassId:0)		 

 

























































extern void	clearerr<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fclose<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	feof<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	ferror<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fflush<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fgetc<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fgetpos<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, fpos_t<s(0)(0)(0)>[T] *);(D1:fpos_t:0)
extern char *	fgets<s(0)(0)(0)>[&] (char *, size_t<s(0)(0)(0)>[T], FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern FILE<s(0)(0)(0)>[T] *	fopen<s(0)(0)(0)>[&] (const char *, const char *);(D1:fopen:0)
extern int	fprintf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, const char *, ...);(D1:FILE:0)
extern int	fputc<s(0)(0)(0)>[&] (int, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fputs<s(0)(0)(0)>[&] (const char *, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fread<s(0)(0)(0)>[&] (void *, size_t<s(0)(0)(0)>[T], size_t<s(0)(0)(0)>[T], FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern FILE<s(0)(0)(0)>[T] *	freopen<s(0)(0)(0)>[&] (const char *, const char *, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fscanf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, const char *, ...);(D1:FILE:0)
extern int	fseek<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, long, int);(D1:FILE:0)
extern int	fsetpos<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, const fpos_t<s(0)(0)(0)>[T] *);(D1:fpos_t:0)
extern long	ftell<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	fwrite<s(0)(0)(0)>[&] (const void *, size_t<s(0)(0)(0)>[T], size_t<s(0)(0)(0)>[T], FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	getc<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	getchar<s(0)(0)(0)>[&] (void);(D1:getchar:0)
extern char *	gets<s(0)(0)(0)>[&] (char *);(D1:gets:0)
extern void	perror<s(0)(0)(0)>[&] (const char *);(D1:perror:0)
extern int	printf<s(0)(0)(0)>[&] (const char *, ...);(D1:printf:0)
extern int	putc<s(0)(0)(0)>[&] (int, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	putchar<s(0)(0)(0)>[&] (int);(D1:putchar:0)
extern int	puts<s(0)(0)(0)>[&] (const char *);(D1:puts:0)
extern int	remove<s(0)(0)(0)>[&] (const char *);(D1:remove:0)
extern int	rename<s(0)(0)(0)>[&]  (const char *, const char *);(D1:rename:0)
extern void	rewind<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	scanf<s(0)(0)(0)>[&] (const char *, ...);(D1:scanf:0)
extern void	setbuf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, char *);(D1:FILE:0)
extern int	setvbuf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, char *, int, size_t<s(0)(0)(0)>[T]);(D1:size_t:0)
extern int	sprintf<s(0)(0)(0)>[&] (char *, const char *, ...);(D1:sprintf:0)
extern int	sscanf<s(0)(0)(0)>[&] (const char *, const char *, ...);(D1:sscanf:0)
extern FILE<s(0)(0)(0)>[T] *	tmpfile<s(0)(0)(0)>[&] (void);(D1:tmpfile:0)
extern char *	tmpnam<s(0)(0)(0)>[&] (char *);(D1:tmpnam:0)
extern int	ungetc<s(0)(0)(0)>[&] (int, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	vfprintf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, const char *, va_list<s(0)(0)(0)>[T]);(D1:va_list:0)
extern int	vprintf<s(0)(0)(0)>[&] (const char *, va_list<s(0)(0)(0)>[T]);(D1:va_list:0)
extern int	vsprintf<s(0)(0)(0)>[&] (char *, const char *, va_list<s(0)(0)(0)>[T]);(D1:va_list:0)
extern int	__srget<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)		 
extern int	__swbuf<s(0)(0)(0)>[&] (int, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)		 

 

extern FILE<s(0)(0)(0)>[T] *	fdopen<s(0)(0)(0)>[&] (int, const char *);(D1:fdopen:0)
extern int	fileno<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)

 

 



extern int	fdprintf<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&], const char *fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)
extern int	vfdprintf<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&], const char *fmt<s(0)(0)(0)>[&], va_list<s(0)(0)(0)>[T] ap<s(0)(0)(0)>[&]);(D1:ap:0)
extern int	printErr<s(0)(0)(0)>[&] (const char *fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)
extern int	getw<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern int	putw<s(0)(0)(0)>[&] (int, FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern void	setbuffer<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *, char *, int);(D1:FILE:0)
extern int	setlinebuf<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] *);(D1:FILE:0)
extern FILE<s(0)(0)(0)>[T] *   stdioFp<s(0)(0)(0)>[&] (int std<s(0)(0)(0)>[&]);(D1:std:0)
extern STATUS<s(0)(0)(0)>[T]   stdioShow<s(0)(0)(0)>[&] (FILE<s(0)(0)(0)>[T] * fp<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&]);(D1:level:0)
extern STATUS<s(0)(0)(0)>[T]   stdioShowInit<s(0)(0)(0)>[&] (void);(D1:stdioShowInit:0)
extern STATUS<s(0)(0)(0)>[T]   stdioInit<s(0)(0)(0)>[&] (void);(D1:stdioInit:0)






 


extern FILE<s(0)(0)(0)>[T] **	__stdin<s(0)(0)(0)>[&](void);(D1:__stdin:0)		 
extern FILE<s(0)(0)(0)>[T] **	__stdout<s(0)(0)(0)>[&](void);(D1:__stdout:0)		 
extern FILE<s(0)(0)(0)>[T] **	__stderr<s(0)(0)(0)>[&](void);(D1:__stderr:0)		 











 












































 


















 

























 












 






 






 












 















 






















 














 









    typedef void *ClientData<s(0)(0)(0)>[&];(D1:ClientData:1)[[TYPENAME:ClientData]]






 


















typedef struct Tcl_Interp<s(1)(0)(1)>[&] {
    char *result<s(1)(1)(0)>[&];		 

    void (*freeProc<s(1)(1)(0)>[&])  (char *blockPtr<s(1)(1)(0)>[&])  ;
				 






    int errorLine<s(1)(1)(0)>[&];               


} Tcl_Interp<s(0)(0)(0)>[&];(D1:Tcl_Interp:1)[[TYPENAME:Tcl_Interp]]

typedef struct Tcl_AsyncHandler_<s(1)(0)(1)>[&] *Tcl_AsyncHandler<s(0)(0)(0)>[&];(D1:Tcl_AsyncHandler:1)[[TYPENAME:Tcl_AsyncHandler]]
typedef struct Tcl_Channel_<s(1)(0)(1)>[&] *Tcl_Channel<s(0)(0)(0)>[&];(D1:Tcl_Channel:1)[[TYPENAME:Tcl_Channel]]
typedef struct Tcl_Command_<s(1)(0)(1)>[&] *Tcl_Command<s(0)(0)(0)>[&];(D1:Tcl_Command:1)[[TYPENAME:Tcl_Command]]
typedef struct Tcl_Event<s(1)(0)(1)>[&] Tcl_Event<s(1)(0)(1)>[&];(D1:Tcl_Event:1)[[TYPENAME:Tcl_Event]]
typedef struct Tcl_Pid_<s(1)(0)(1)>[&] *Tcl_Pid<s(0)(0)(0)>[&];(D1:Tcl_Pid:1)[[TYPENAME:Tcl_Pid]]
typedef struct Tcl_RegExp_<s(1)(0)(1)>[&] *Tcl_RegExp<s(0)(0)(0)>[&];(D1:Tcl_RegExp:1)[[TYPENAME:Tcl_RegExp]]
typedef struct Tcl_TimerToken_<s(1)(0)(1)>[&] *Tcl_TimerToken<s(0)(0)(0)>[&];(D1:Tcl_TimerToken:1)[[TYPENAME:Tcl_TimerToken]]
typedef struct Tcl_Trace_<s(1)(0)(1)>[&] *Tcl_Trace<s(0)(0)(0)>[&];(D1:Tcl_Trace:1)[[TYPENAME:Tcl_Trace]]
typedef struct Tcl_Var_<s(1)(0)(1)>[&] *Tcl_Var<s(0)(0)(0)>[&];(D1:Tcl_Var:1)[[TYPENAME:Tcl_Var]]

 




























 



typedef enum {TCL_INT<s(0)(0)(0)>[&], TCL_DOUBLE<s(0)(0)(0)>[&], TCL_EITHER<s(0)(0)(0)>[&]} Tcl_ValueType<s(0)(0)(0)>[&];(D1:Tcl_ValueType:1)[[TYPENAME:Tcl_ValueType]]
typedef struct Tcl_Value<s(1)(0)(1)>[&] {
    Tcl_ValueType<s(1)(1)(0)>[T] type<s(1)(1)(0)>[&];		 

    long intValue<s(1)(1)(0)>[&];		 
    double doubleValue<s(1)(1)(0)>[&];		 
} Tcl_Value<s(0)(0)(0)>[&];(D1:Tcl_Value:1)[[TYPENAME:Tcl_Value]]

 





struct Tcl_Obj<s(1)(0)(1)>[&];

 



typedef int (Tcl_AppInitProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_AppInitProc)  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
typedef int (Tcl_AsyncProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_AsyncProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int code<s(0)(0)(0)>[&])  ;(D1:code:0)
typedef void (Tcl_ChannelProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_ChannelProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&])  ;(D1:mask:0)
typedef void (Tcl_CloseProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_CloseProc)  (ClientData<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&])  ;(D1:data:0)
typedef void (Tcl_CmdDeleteProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_CmdDeleteProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef int (Tcl_CmdProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_CmdProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int argc<s(0)(0)(0)>[&], char *argv<s(0)(0)(0)>[&][])  ;(D1:argv:0)
typedef void (Tcl_CmdTraceProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_CmdTraceProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&], char *command<s(0)(0)(0)>[&], Tcl_CmdProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
	ClientData<s(0)(0)(0)>[T] cmdClientData<s(0)(0)(0)>[&], int argc<s(0)(0)(0)>[&], char *argv<s(0)(0)(0)>[&][])  ;(D1:argv:0)
typedef void (Tcl_DupInternalRepProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DupInternalRepProc)  (struct Tcl_Obj<s(1)(0)(1)>[&] *srcPtr<s(0)(0)(0)>[&], 
        struct Tcl_Obj<s(1)(0)(1)>[&] *dupPtr<s(0)(0)(0)>[&])  ;(D1:dupPtr:0)
typedef int (Tcl_EventProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_EventProc)  (Tcl_Event<s(0)(0)(0)>[T] *evPtr<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
typedef void (Tcl_EventCheckProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_EventCheckProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
typedef int (Tcl_EventDeleteProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_EventDeleteProc)  (Tcl_Event<s(0)(0)(0)>[T] *evPtr<s(0)(0)(0)>[&],
        ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef void (Tcl_EventSetupProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_EventSetupProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
typedef void (Tcl_ExitProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_ExitProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef void (Tcl_FileProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_FileProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&])  ;(D1:mask:0)
typedef void (Tcl_FileFreeProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_FileFreeProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef void (Tcl_FreeInternalRepProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_FreeInternalRepProc)  (struct Tcl_Obj<s(1)(0)(1)>[&] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
typedef void (Tcl_FreeProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_FreeProc)  (char *blockPtr<s(0)(0)(0)>[&])  ;(D1:blockPtr:0)
typedef void (Tcl_IdleProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_IdleProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef void (Tcl_InterpDeleteProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_InterpDeleteProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
typedef int (Tcl_MathProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_MathProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Value<s(0)(0)(0)>[T] *args<s(0)(0)(0)>[&], Tcl_Value<s(0)(0)(0)>[T] *resultPtr<s(0)(0)(0)>[&])  ;(D1:resultPtr:0)
typedef void (Tcl_NamespaceDeleteProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_NamespaceDeleteProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef int (Tcl_ObjCmdProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_ObjCmdProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int objc<s(0)(0)(0)>[&], struct Tcl_Obj<s(1)(0)(1)>[&] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
typedef int (Tcl_PackageInitProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_PackageInitProc)  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
typedef void (Tcl_TcpAcceptProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_TcpAcceptProc)  (ClientData<s(0)(0)(0)>[T] callbackData<s(0)(0)(0)>[&],
        Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], char *address<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])  ;(D1:port:0)
typedef void (Tcl_TimerProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_TimerProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
typedef int (Tcl_SetFromAnyProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_SetFromAnyProc)  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
	struct Tcl_Obj<s(1)(0)(1)>[&] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
typedef void (Tcl_UpdateStringProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_UpdateStringProc)  (struct Tcl_Obj<s(1)(0)(1)>[&] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
typedef char *(Tcl_VarTraceProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_VarTraceProc)  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
	Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)

 





typedef struct Tcl_ObjType<s(1)(0)(1)>[&] {
    char *name<s(1)(1)(0)>[&];			 
    Tcl_FreeInternalRepProc<s(1)(1)(0)>[T] *freeIntRepProc<s(1)(1)(0)>[&];
				 


    Tcl_DupInternalRepProc<s(1)(1)(0)>[T] *dupIntRepProc<s(1)(1)(0)>[&];
    				 

    Tcl_UpdateStringProc<s(1)(1)(0)>[T] *updateStringProc<s(1)(1)(0)>[&];
    				 

    Tcl_SetFromAnyProc<s(1)(1)(0)>[T] *setFromAnyProc<s(1)(1)(0)>[&];
    				 



} Tcl_ObjType<s(0)(0)(0)>[&];(D1:Tcl_ObjType:1)[[TYPENAME:Tcl_ObjType]]

 





typedef struct Tcl_Obj<s(1)(0)(1)>[&] {
    int refCount<s(1)(1)(0)>[&];		 
    char *bytes<s(1)(1)(0)>[&];		 










    int length<s(1)(1)(0)>[&];			 

    Tcl_ObjType<s(1)(1)(0)>[T] *typePtr<s(1)(1)(0)>[&];	 



    union {			 
	long longValue<s(2)(1)(0)>[&];		 
	double doubleValue<s(2)(1)(0)>[&];	 
	void  *otherValuePtr<s(2)(1)(0)>[&];	 
	struct {		 
	    void  *ptr1<s(3)(1)(0)>[&];
	    void  *ptr2<s(3)(1)(0)>[&];
	} twoPtrValue<s(2)(0)(0)>[&];
    } internalRep<s(1)(0)(0)>[&];
} Tcl_Obj<s(0)(0)(0)>[&];(D1:Tcl_Obj:1)[[TYPENAME:Tcl_Obj]]

 










extern  void		Tcl_IncrRefCount<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  void		Tcl_DecrRefCount<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  int		Tcl_IsShared<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)

















 





extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewBooleanObj<s(0)(0)(0)>[&]  (int boolValue<s(0)(0)(0)>[&])  ;(D1:boolValue:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewDoubleObj<s(0)(0)(0)>[&]  (double doubleValue<s(0)(0)(0)>[&])  ;(D1:doubleValue:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewIntObj<s(0)(0)(0)>[&]  (int intValue<s(0)(0)(0)>[&])  ;(D1:intValue:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewListObj<s(0)(0)(0)>[&]  (int objc<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewLongObj<s(0)(0)(0)>[&]  (long longValue<s(0)(0)(0)>[&])  ;(D1:longValue:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewObj<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_NewObj:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_NewStringObj<s(0)(0)(0)>[&]  (char *bytes<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&])  ;(D1:length:0)



 





typedef struct Tcl_Namespace<s(1)(0)(1)>[&] {
    char *name<s(1)(1)(0)>[&];                  



    char *fullName<s(1)(1)(0)>[&];              

    ClientData<s(1)(1)(0)>[T] clientData<s(1)(1)(0)>[&];       

    Tcl_NamespaceDeleteProc<s(1)(1)(0)>[T]* deleteProc<s(1)(1)(0)>[&];
                                 

    struct Tcl_Namespace<s(2)(1)(1)>[&]* parentPtr<s(1)(1)(0)>[&];
                                 


} Tcl_Namespace<s(0)(0)(0)>[&];(D1:Tcl_Namespace:1)[[TYPENAME:Tcl_Namespace]]

 





















typedef struct Tcl_CallFrame<s(1)(0)(1)>[&] {
    Tcl_Namespace<s(1)(1)(0)>[T] *nsPtr<s(1)(1)(0)>[&];
    int dummy1<s(1)(1)(0)>[&];
    int dummy2<s(1)(1)(0)>[&];
    char *dummy3<s(1)(1)(0)>[&];
    char *dummy4<s(1)(1)(0)>[&];
    char *dummy5<s(1)(1)(0)>[&];
    int dummy6<s(1)(1)(0)>[&];
    char *dummy7<s(1)(1)(0)>[&];
    char *dummy8<s(1)(1)(0)>[&];
    int dummy9<s(1)(1)(0)>[&];
    char* dummy10<s(1)(1)(0)>[&];
} Tcl_CallFrame<s(0)(0)(0)>[&];(D1:Tcl_CallFrame:1)[[TYPENAME:Tcl_CallFrame]]

 













     
typedef struct Tcl_CmdInfo<s(1)(0)(1)>[&] {
    int isNativeObjectProc<s(1)(1)(0)>[&];	  



    Tcl_ObjCmdProc<s(1)(1)(0)>[T] *objProc<s(1)(1)(0)>[&];	  
    ClientData<s(1)(1)(0)>[T] objClientData<s(1)(1)(0)>[&];	  
    Tcl_CmdProc<s(1)(1)(0)>[T] *proc<s(1)(1)(0)>[&];		  
    ClientData<s(1)(1)(0)>[T] clientData<s(1)(1)(0)>[&];	  
    Tcl_CmdDeleteProc<s(1)(1)(0)>[T] *deleteProc<s(1)(1)(0)>[&];
                                  

    ClientData<s(1)(1)(0)>[T] deleteData<s(1)(1)(0)>[&];	  

    Tcl_Namespace<s(1)(1)(0)>[T] *namespacePtr<s(1)(1)(0)>[&];  




} Tcl_CmdInfo<s(0)(0)(0)>[&];(D1:Tcl_CmdInfo:1)[[TYPENAME:Tcl_CmdInfo]]

 






typedef struct Tcl_DString<s(1)(0)(1)>[&] {
    char *string<s(1)(1)(0)>[&];		 

    int length<s(1)(1)(0)>[&];			 

    int spaceAvl<s(1)(1)(0)>[&];		 

    char staticSpace<s(1)(1)(0)>[&][200 ];
				 

} Tcl_DString<s(0)(0)(0)>[&];(D1:Tcl_DString:1)[[TYPENAME:Tcl_DString]]





 




 



 







 






 








 








 















 









 





extern  char *		Tcl_Alloc<s(0)(0)(0)>[&]  (unsigned int size<s(0)(0)(0)>[&])  ;(D1:size:0)
extern  void		Tcl_Free<s(0)(0)(0)>[&]  (char *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  char *		Tcl_Realloc<s(0)(0)(0)>[&]  (char *ptr<s(0)(0)(0)>[&],
			    unsigned int size<s(0)(0)(0)>[&])  ;(D1:size:0)

















 









 





typedef struct Tcl_HashEntry<s(1)(0)(1)>[&] {
    struct Tcl_HashEntry<s(2)(1)(1)>[&] *nextPtr<s(1)(1)(0)>[&];	 


    struct Tcl_HashTable<s(2)(1)(1)>[&] *tablePtr<s(1)(1)(0)>[&];	 
    struct Tcl_HashEntry<s(2)(1)(1)>[&] **bucketPtr<s(1)(1)(0)>[&];	 


    ClientData<s(1)(1)(0)>[T] clientData<s(1)(1)(0)>[&];		 

    union {				 
	char *oneWordValue<s(2)(1)(0)>[&];		 
	int words<s(2)(1)(0)>[&][1];			 



	char string<s(2)(1)(0)>[&][4];			 


    } key<s(1)(0)(0)>[&];				 
} Tcl_HashEntry<s(0)(0)(0)>[&];(D1:Tcl_HashEntry:1)[[TYPENAME:Tcl_HashEntry]]

 






typedef struct Tcl_HashTable<s(1)(0)(1)>[&] {
    Tcl_HashEntry<s(1)(1)(0)>[T] **buckets<s(1)(1)(0)>[&];		 


    Tcl_HashEntry<s(1)(1)(0)>[T] *staticBuckets<s(1)(1)(0)>[&][4 ];
					 

    int numBuckets<s(1)(1)(0)>[&];			 

    int numEntries<s(1)(1)(0)>[&];			 

    int rebuildSize<s(1)(1)(0)>[&];			 

    int downShift<s(1)(1)(0)>[&];			 


    int mask<s(1)(1)(0)>[&];				 

    int keyType<s(1)(1)(0)>[&];			 





    Tcl_HashEntry<s(1)(1)(0)>[T] *(*findProc<s(1)(1)(0)>[&])  (struct Tcl_HashTable<s(2)(1)(1)>[&] *tablePtr<s(1)(1)(0)>[&], 
	    const  char *key<s(1)(1)(0)>[&])  ;
    Tcl_HashEntry<s(1)(1)(0)>[T] *(*createProc<s(1)(1)(0)>[&])  (struct Tcl_HashTable<s(2)(1)(1)>[&] *tablePtr<s(1)(1)(0)>[&],
	    const  char *key<s(1)(1)(0)>[&], int *newPtr<s(1)(1)(0)>[&])  ;
} Tcl_HashTable<s(0)(0)(0)>[&];(D1:Tcl_HashTable:1)[[TYPENAME:Tcl_HashTable]]

 




typedef struct Tcl_HashSearch<s(1)(0)(1)>[&] {
    Tcl_HashTable<s(1)(1)(0)>[T] *tablePtr<s(1)(1)(0)>[&];		 
    int nextIndex<s(1)(1)(0)>[&];			 

    Tcl_HashEntry<s(1)(1)(0)>[T] *nextEntryPtr<s(1)(1)(0)>[&];	 

} Tcl_HashSearch<s(0)(0)(0)>[&];(D1:Tcl_HashSearch:1)[[TYPENAME:Tcl_HashSearch]]

 






 









 









 











 









struct Tcl_Event<s(1)(0)(1)> {
    Tcl_EventProc<s(1)(1)(0)>[T] *proc<s(1)(1)(0)>[&];	 
    struct Tcl_Event<s(2)(1)(1)> *nextPtr<s(1)(1)(0)>[&];	 
};

 



typedef enum {
    TCL_QUEUE_TAIL<s(0)(0)(0)>[&], TCL_QUEUE_HEAD<s(0)(0)(0)>[&], TCL_QUEUE_MARK<s(0)(0)(0)>[&]
} Tcl_QueuePosition<s(0)(0)(0)>[&];(D1:Tcl_QueuePosition:1)[[TYPENAME:Tcl_QueuePosition]]

 







 






typedef struct Tcl_Time<s(1)(0)(1)>[&] {
    long sec<s(1)(1)(0)>[&];			 
    long usec<s(1)(1)(0)>[&];			 
} Tcl_Time<s(0)(0)(0)>[&];(D1:Tcl_Time:1)[[TYPENAME:Tcl_Time]]

 








 










 



typedef int	(Tcl_DriverBlockModeProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverBlockModeProc)  (
		    ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])  ;(D1:mode:0)
typedef int	(Tcl_DriverCloseProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverCloseProc)  (ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&],
		    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
typedef int	(Tcl_DriverInputProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverInputProc)  (ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&],
		    char *buf<s(0)(0)(0)>[&], int toRead<s(0)(0)(0)>[&], int *errorCodePtr<s(0)(0)(0)>[&])  ;(D1:errorCodePtr:0)
typedef int	(Tcl_DriverOutputProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverOutputProc)  (ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&],
		    char *buf<s(0)(0)(0)>[&], int toWrite<s(0)(0)(0)>[&], int *errorCodePtr<s(0)(0)(0)>[&])  ;(D1:errorCodePtr:0)
typedef int	(Tcl_DriverSeekProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverSeekProc)  (ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&],
		    long offset<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&], int *errorCodePtr<s(0)(0)(0)>[&])  ;(D1:errorCodePtr:0)
typedef int	(Tcl_DriverSetOptionProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverSetOptionProc)  (
		    ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
	            char *optionName<s(0)(0)(0)>[&], char *value<s(0)(0)(0)>[&])  ;(D1:value:0)
typedef int	(Tcl_DriverGetOptionProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverGetOptionProc)  (
		    ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
		    char *optionName<s(0)(0)(0)>[&], Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
typedef void	(Tcl_DriverWatchProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverWatchProc)  (
		    ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&])  ;(D1:mask:0)
typedef int	(Tcl_DriverGetHandleProc<s(0)(0)(0)>[&])TYPENAME:FUNC:(Tcl_DriverGetHandleProc)  (
		    ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], int direction<s(0)(0)(0)>[&],
		    ClientData<s(0)(0)(0)>[T] *handlePtr<s(0)(0)(0)>[&])  ;(D1:handlePtr:0)

 



typedef enum Tcl_EolTranslation<s(0)(0)(0)>[&] {
    TCL_TRANSLATE_AUTO<s(0)(0)(0)>[&],			 
    TCL_TRANSLATE_CR<s(0)(0)(0)>[&],			 
    TCL_TRANSLATE_LF<s(0)(0)(0)>[&],			 
    TCL_TRANSLATE_CRLF<s(0)(0)(0)>[&]			 
} Tcl_EolTranslation<s(0)(0)(0)>[&];(D1:Tcl_EolTranslation:1)[[TYPENAME:Tcl_EolTranslation]]

 







typedef struct Tcl_ChannelType<s(1)(0)(1)>[&] {
    char *typeName<s(1)(1)(0)>[&];			 


    Tcl_DriverBlockModeProc<s(1)(1)(0)>[T] *blockModeProc<s(1)(1)(0)>[&];
    					 

    Tcl_DriverCloseProc<s(1)(1)(0)>[T] *closeProc<s(1)(1)(0)>[&];	 

    Tcl_DriverInputProc<s(1)(1)(0)>[T] *inputProc<s(1)(1)(0)>[&];	 

    Tcl_DriverOutputProc<s(1)(1)(0)>[T] *outputProc<s(1)(1)(0)>[&];	 

    Tcl_DriverSeekProc<s(1)(1)(0)>[T] *seekProc<s(1)(1)(0)>[&];	 

    Tcl_DriverSetOptionProc<s(1)(1)(0)>[T] *setOptionProc<s(1)(1)(0)>[&];
    					 
    Tcl_DriverGetOptionProc<s(1)(1)(0)>[T] *getOptionProc<s(1)(1)(0)>[&];
    					 
    Tcl_DriverWatchProc<s(1)(1)(0)>[T] *watchProc<s(1)(1)(0)>[&];	 

    Tcl_DriverGetHandleProc<s(1)(1)(0)>[T] *getHandleProc<s(1)(1)(0)>[&];
					 

} Tcl_ChannelType<s(0)(0)(0)>[&];(D1:Tcl_ChannelType:1)[[TYPENAME:Tcl_ChannelType]]

 









 



typedef enum Tcl_PathType<s(0)(0)(0)>[&] {
    TCL_PATH_ABSOLUTE<s(0)(0)(0)>[&],
    TCL_PATH_RELATIVE<s(0)(0)(0)>[&],
    TCL_PATH_VOLUME_RELATIVE<s(0)(0)(0)>[&]
} Tcl_PathType<s(0)(0)(0)>[&];(D1:Tcl_PathType:1)[[TYPENAME:Tcl_PathType]]

 



extern  void		Tcl_AddErrorInfo<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *message<s(0)(0)(0)>[&])  ;(D1:message:0)
extern  void		Tcl_AddObjErrorInfo<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *message<s(0)(0)(0)>[&], int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  void		Tcl_AllowExceptions<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  int		Tcl_AppendAllObjTypes<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  void		Tcl_AppendElement<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  void		Tcl_AppendResult<s(0)(0)(0)>[&]  
			    ( Tcl_Interp<s(0)(0)(0)>[T] *   interp<s(0)(0)(0)>[&] , ...)   ;(D1:interp:0)
extern  void		Tcl_AppendToObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    char *bytes<s(0)(0)(0)>[&], int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  void		Tcl_AppendStringsToObj<s(0)(0)(0)>[&]  
			    ( Tcl_Obj<s(0)(0)(0)>[T] *   interp<s(0)(0)(0)>[&] , ...)   ;(D1:interp:0)
extern  int		Tcl_AppInit<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  Tcl_AsyncHandler<s(0)(0)(0)>[T]	Tcl_AsyncCreate<s(0)(0)(0)>[&]  (Tcl_AsyncProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_AsyncDelete<s(0)(0)(0)>[&]  (Tcl_AsyncHandler<s(0)(0)(0)>[T] async<s(0)(0)(0)>[&])  ;(D1:async:0)
extern  int		Tcl_AsyncInvoke<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    int code<s(0)(0)(0)>[&])  ;(D1:code:0)
extern  void		Tcl_AsyncMark<s(0)(0)(0)>[&]  (Tcl_AsyncHandler<s(0)(0)(0)>[T] async<s(0)(0)(0)>[&])  ;(D1:async:0)
extern  int		Tcl_AsyncReady<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_AsyncReady:0)
extern  void		Tcl_BackgroundError<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  char		Tcl_Backslash<s(0)(0)(0)>[&]  (const  char *src<s(0)(0)(0)>[&],
			    int *readPtr<s(0)(0)(0)>[&])  ;(D1:readPtr:0)
extern  int		Tcl_BadChannelOption<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *optionName<s(0)(0)(0)>[&], char *optionList<s(0)(0)(0)>[&])  ;(D1:optionList:0)
extern  void		Tcl_CallWhenDeleted<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_InterpDeleteProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_CancelIdleCall<s(0)(0)(0)>[&]  (Tcl_IdleProc<s(0)(0)(0)>[T] *idleProc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)



extern  int		Tcl_Close<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
        		    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_CommandComplete<s(0)(0)(0)>[&]  (char *cmd<s(0)(0)(0)>[&])  ;(D1:cmd:0)
extern  char *		Tcl_Concat<s(0)(0)(0)>[&]  (int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&])  ;(D1:argv:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_ConcatObj<s(0)(0)(0)>[&]  (int objc<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
extern  int		Tcl_ConvertCountedElement<s(0)(0)(0)>[&]  (const  char *src<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&], char *dst<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_ConvertElement<s(0)(0)(0)>[&]  (const  char *src<s(0)(0)(0)>[&],
			    char *dst<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_ConvertToType<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], Tcl_ObjType<s(0)(0)(0)>[T] *typePtr<s(0)(0)(0)>[&])  ;(D1:typePtr:0)
extern  int		Tcl_CreateAlias<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *slave<s(0)(0)(0)>[&],
			    char *slaveCmd<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] *target<s(0)(0)(0)>[&],
        		    char *targetCmd<s(0)(0)(0)>[&], int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&])  ;(D1:argv:0)
extern  int		Tcl_CreateAliasObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *slave<s(0)(0)(0)>[&],
			    char *slaveCmd<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] *target<s(0)(0)(0)>[&],
        		    char *targetCmd<s(0)(0)(0)>[&], int objc<s(0)(0)(0)>[&],
		            Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_CreateChannel<s(0)(0)(0)>[&]  (
    			    Tcl_ChannelType<s(0)(0)(0)>[T] *typePtr<s(0)(0)(0)>[&], char *chanName<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] instanceData<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&])  ;(D1:mask:0)
extern  void		Tcl_CreateChannelHandler<s(0)(0)(0)>[&]  (
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&],
                            Tcl_ChannelProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_CreateCloseHandler<s(0)(0)(0)>[&]  (
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], Tcl_CloseProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  Tcl_Command<s(0)(0)(0)>[T]	Tcl_CreateCommand<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *cmdName<s(0)(0)(0)>[&], Tcl_CmdProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
			    Tcl_CmdDeleteProc<s(0)(0)(0)>[T] *deleteProc<s(0)(0)(0)>[&])  ;(D1:deleteProc:0)
extern  void		Tcl_CreateEventSource<s(0)(0)(0)>[&]  (
			    Tcl_EventSetupProc<s(0)(0)(0)>[T] *setupProc<s(0)(0)(0)>[&],
			    Tcl_EventCheckProc<s(0)(0)(0)>[T] *checkProc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_CreateExitHandler<s(0)(0)(0)>[&]  (Tcl_ExitProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_CreateFileHandler<s(0)(0)(0)>[&]  (
    			    int fd<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&], Tcl_FileProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  Tcl_Interp<s(0)(0)(0)>[T] *	Tcl_CreateInterp<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_CreateInterp:0)
extern  void		Tcl_CreateMathFunc<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *name<s(0)(0)(0)>[&], int numArgs<s(0)(0)(0)>[&], Tcl_ValueType<s(0)(0)(0)>[T] *argTypes<s(0)(0)(0)>[&],
			    Tcl_MathProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  Tcl_Command<s(0)(0)(0)>[T]	Tcl_CreateObjCommand<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], char *cmdName<s(0)(0)(0)>[&],
			    Tcl_ObjCmdProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
			    Tcl_CmdDeleteProc<s(0)(0)(0)>[T] *deleteProc<s(0)(0)(0)>[&])  ;(D1:deleteProc:0)
extern  Tcl_Interp<s(0)(0)(0)>[T] *	Tcl_CreateSlave<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
		            char *slaveName<s(0)(0)(0)>[&], int isSafe<s(0)(0)(0)>[&])  ;(D1:isSafe:0)
extern  Tcl_TimerToken<s(0)(0)(0)>[T]	Tcl_CreateTimerHandler<s(0)(0)(0)>[&]  (int milliseconds<s(0)(0)(0)>[&],
			    Tcl_TimerProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  Tcl_Trace<s(0)(0)(0)>[T]	Tcl_CreateTrace<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    int level<s(0)(0)(0)>[&], Tcl_CmdTraceProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  char *		Tcl_DbCkalloc<s(0)(0)(0)>[&]  (unsigned int size<s(0)(0)(0)>[&],
			    char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  int		Tcl_DbCkfree<s(0)(0)(0)>[&]  (char *ptr<s(0)(0)(0)>[&],
			    char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  char *		Tcl_DbCkrealloc<s(0)(0)(0)>[&]  (char *ptr<s(0)(0)(0)>[&],
			    unsigned int size<s(0)(0)(0)>[&], char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  void		Tcl_DbDecrRefCount<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  void		Tcl_DbIncrRefCount<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  int		Tcl_DbIsShared<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewBooleanObj<s(0)(0)(0)>[&]  (int boolValue<s(0)(0)(0)>[&],
                            char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewDoubleObj<s(0)(0)(0)>[&]  (double doubleValue<s(0)(0)(0)>[&],
                            char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewListObj<s(0)(0)(0)>[&]  (int objc<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][], char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewLongObj<s(0)(0)(0)>[&]  (long longValue<s(0)(0)(0)>[&],
                            char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewObj<s(0)(0)(0)>[&]  (char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DbNewStringObj<s(0)(0)(0)>[&]  (char *bytes<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&], char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&])  ;(D1:line:0)
extern  void		Tcl_DeleteAssocData<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
                            char *name<s(0)(0)(0)>[&])  ;(D1:name:0)
extern  int		Tcl_DeleteCommand<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *cmdName<s(0)(0)(0)>[&])  ;(D1:cmdName:0)
extern  int		Tcl_DeleteCommandFromToken<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Command<s(0)(0)(0)>[T] command<s(0)(0)(0)>[&])  ;(D1:command:0)
extern  void		Tcl_DeleteChannelHandler<s(0)(0)(0)>[&]  (
    			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], Tcl_ChannelProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_DeleteCloseHandler<s(0)(0)(0)>[&]  (
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], Tcl_CloseProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_DeleteEvents<s(0)(0)(0)>[&]  (
			    Tcl_EventDeleteProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_DeleteEventSource<s(0)(0)(0)>[&]  (
			    Tcl_EventSetupProc<s(0)(0)(0)>[T] *setupProc<s(0)(0)(0)>[&],
			    Tcl_EventCheckProc<s(0)(0)(0)>[T] *checkProc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_DeleteExitHandler<s(0)(0)(0)>[&]  (Tcl_ExitProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_DeleteFileHandler<s(0)(0)(0)>[&]  (int fd<s(0)(0)(0)>[&])  ;(D1:fd:0)
extern  void		Tcl_DeleteHashEntry<s(0)(0)(0)>[&]  (
			    Tcl_HashEntry<s(0)(0)(0)>[T] *entryPtr<s(0)(0)(0)>[&])  ;(D1:entryPtr:0)
extern  void		Tcl_DeleteHashTable<s(0)(0)(0)>[&]  (
			    Tcl_HashTable<s(0)(0)(0)>[T] *tablePtr<s(0)(0)(0)>[&])  ;(D1:tablePtr:0)
extern  void		Tcl_DeleteInterp<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  void		Tcl_DeleteTimerHandler<s(0)(0)(0)>[&]  (
			    Tcl_TimerToken<s(0)(0)(0)>[T] token<s(0)(0)(0)>[&])  ;(D1:token:0)
extern  void		Tcl_DeleteTrace<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Trace<s(0)(0)(0)>[T] trace<s(0)(0)(0)>[&])  ;(D1:trace:0)
extern  void		Tcl_DetachPids<s(0)(0)(0)>[&]  (int numPids<s(0)(0)(0)>[&], Tcl_Pid<s(0)(0)(0)>[T] *pidPtr<s(0)(0)(0)>[&])  ;(D1:pidPtr:0)
extern  void		Tcl_DontCallWhenDeleted<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_InterpDeleteProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  int		Tcl_DoOneEvent<s(0)(0)(0)>[&]  (int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  void		Tcl_DoWhenIdle<s(0)(0)(0)>[&]  (Tcl_IdleProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  char *		Tcl_DStringAppend<s(0)(0)(0)>[&]  (Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&],
			    const  char *string<s(0)(0)(0)>[&], int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  char *		Tcl_DStringAppendElement<s(0)(0)(0)>[&]  (
			    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&], const  char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  void		Tcl_DStringEndSublist<s(0)(0)(0)>[&]  (Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  void		Tcl_DStringFree<s(0)(0)(0)>[&]  (Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  void		Tcl_DStringGetResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  void		Tcl_DStringInit<s(0)(0)(0)>[&]  (Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  void		Tcl_DStringResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  void		Tcl_DStringSetLength<s(0)(0)(0)>[&]  (Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  void		Tcl_DStringStartSublist<s(0)(0)(0)>[&]  (
			    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_DuplicateObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  int		Tcl_Eof<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  char *		Tcl_ErrnoId<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_ErrnoId:0)
extern  char *		Tcl_ErrnoMsg<s(0)(0)(0)>[&]  (int err<s(0)(0)(0)>[&])  ;(D1:err:0)
extern  int		Tcl_Eval<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  int		Tcl_EvalFile<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *fileName<s(0)(0)(0)>[&])  ;(D1:fileName:0)
extern  void		Tcl_EventuallyFree<s(0)(0)(0)>[&]  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&],
			    Tcl_FreeProc<s(0)(0)(0)>[T] *freeProc<s(0)(0)(0)>[&])  ;(D1:freeProc:0)
extern  int		Tcl_EvalObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  void		Tcl_Exit<s(0)(0)(0)>[&]  (int status<s(0)(0)(0)>[&])  ;(D1:status:0)
extern  int		Tcl_ExposeCommand<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
        		    char *hiddenCmdToken<s(0)(0)(0)>[&], char *cmdName<s(0)(0)(0)>[&])  ;(D1:cmdName:0)
extern  int		Tcl_ExprBoolean<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], int *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprBooleanObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], int *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprDouble<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], double *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprDoubleObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], double *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprLong<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], long *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprLongObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], long *ptr<s(0)(0)(0)>[&])  ;(D1:ptr:0)
extern  int		Tcl_ExprObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] **resultPtrPtr<s(0)(0)(0)>[&])  ;(D1:resultPtrPtr:0)
extern  int		Tcl_ExprString<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  void		Tcl_Finalize<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_Finalize:0)
extern  void		Tcl_FindExecutable<s(0)(0)(0)>[&]  (char *argv0<s(0)(0)(0)>[&])  ;(D1:argv0:0)
extern  Tcl_HashEntry<s(0)(0)(0)>[T] *	Tcl_FirstHashEntry<s(0)(0)(0)>[&]  (
			    Tcl_HashTable<s(0)(0)(0)>[T] *tablePtr<s(0)(0)(0)>[&],
			    Tcl_HashSearch<s(0)(0)(0)>[T] *searchPtr<s(0)(0)(0)>[&])  ;(D1:searchPtr:0)
extern  int		Tcl_Flush<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  void		TclFreeObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  void		Tcl_FreeResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  int		Tcl_GetAlias<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
       			    char *slaveCmd<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] **targetInterpPtr<s(0)(0)(0)>[&],
                            char **targetCmdPtr<s(0)(0)(0)>[&], int *argcPtr<s(0)(0)(0)>[&],
			    char ***argvPtr<s(0)(0)(0)>[&])  ;(D1:argvPtr:0)
extern  int		Tcl_GetAliasObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
       			    char *slaveCmd<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] **targetInterpPtr<s(0)(0)(0)>[&],
                            char **targetCmdPtr<s(0)(0)(0)>[&], int *objcPtr<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] ***objv<s(0)(0)(0)>[&])  ;(D1:objv:0)
extern  ClientData<s(0)(0)(0)>[T]	Tcl_GetAssocData<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
                            char *name<s(0)(0)(0)>[&], Tcl_InterpDeleteProc<s(0)(0)(0)>[T] **procPtr<s(0)(0)(0)>[&])  ;(D1:procPtr:0)
extern  int		Tcl_GetBoolean<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], int *boolPtr<s(0)(0)(0)>[&])  ;(D1:boolPtr:0)
extern  int		Tcl_GetBooleanFromObj<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    int *boolPtr<s(0)(0)(0)>[&])  ;(D1:boolPtr:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_GetChannel<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
	        	    char *chanName<s(0)(0)(0)>[&], int *modePtr<s(0)(0)(0)>[&])  ;(D1:modePtr:0)
extern  int		Tcl_GetChannelBufferSize<s(0)(0)(0)>[&]  (
    			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_GetChannelHandle<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
	        	    int direction<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] *handlePtr<s(0)(0)(0)>[&])  ;(D1:handlePtr:0)
extern  ClientData<s(0)(0)(0)>[T]	Tcl_GetChannelInstanceData<s(0)(0)(0)>[&]  (
    			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_GetChannelMode<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  char *		Tcl_GetChannelName<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_GetChannelOption<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], char *optionName<s(0)(0)(0)>[&],
			    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  Tcl_ChannelType<s(0)(0)(0)>[T] * Tcl_GetChannelType<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_GetCommandInfo<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *cmdName<s(0)(0)(0)>[&], Tcl_CmdInfo<s(0)(0)(0)>[T] *infoPtr<s(0)(0)(0)>[&])  ;(D1:infoPtr:0)
extern  char *		Tcl_GetCommandName<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Command<s(0)(0)(0)>[T] command<s(0)(0)(0)>[&])  ;(D1:command:0)
extern  char *		Tcl_GetCwd<s(0)(0)(0)>[&]  (char *buf<s(0)(0)(0)>[&], int len<s(0)(0)(0)>[&])  ;(D1:len:0)
extern  int		Tcl_GetDouble<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], double *doublePtr<s(0)(0)(0)>[&])  ;(D1:doublePtr:0)
extern  int		Tcl_GetDoubleFromObj<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    double *doublePtr<s(0)(0)(0)>[&])  ;(D1:doublePtr:0)
extern  int		Tcl_GetErrno<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_GetErrno:0)
extern  int		Tcl_GetErrorLine<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  char *		Tcl_GetHostName<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_GetHostName:0)
extern  int		Tcl_GetIndexFromObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], char **tablePtr<s(0)(0)(0)>[&], char *msg<s(0)(0)(0)>[&],
			    int flags<s(0)(0)(0)>[&], int *indexPtr<s(0)(0)(0)>[&])  ;(D1:indexPtr:0)
extern  int		Tcl_GetInt<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], int *intPtr<s(0)(0)(0)>[&])  ;(D1:intPtr:0)
extern  int		Tcl_GetInterpPath<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *askInterp<s(0)(0)(0)>[&],
			    Tcl_Interp<s(0)(0)(0)>[T] *slaveInterp<s(0)(0)(0)>[&])  ;(D1:slaveInterp:0)
extern  int		Tcl_GetIntFromObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], int *intPtr<s(0)(0)(0)>[&])  ;(D1:intPtr:0)
extern  int		Tcl_GetLongFromObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], long *longPtr<s(0)(0)(0)>[&])  ;(D1:longPtr:0)
extern  Tcl_Interp<s(0)(0)(0)>[T] *	Tcl_GetMaster<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_GetObjResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  Tcl_ObjType<s(0)(0)(0)>[T] *	Tcl_GetObjType<s(0)(0)(0)>[&]  (char *typeName<s(0)(0)(0)>[&])  ;(D1:typeName:0)
extern  int		Tcl_GetOpenFile<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], int write<s(0)(0)(0)>[&], int checkUsage<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] *filePtr<s(0)(0)(0)>[&])  ;(D1:filePtr:0)
extern  Tcl_Command<s(0)(0)(0)>[T]	Tcl_GetOriginalCommand<s(0)(0)(0)>[&]  (
			    Tcl_Command<s(0)(0)(0)>[T] command<s(0)(0)(0)>[&])  ;(D1:command:0)
extern  Tcl_PathType<s(0)(0)(0)>[T]	Tcl_GetPathType<s(0)(0)(0)>[&]  (char *path<s(0)(0)(0)>[&])  ;(D1:path:0)
extern  int		Tcl_Gets<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
        		    Tcl_DString<s(0)(0)(0)>[T] *dsPtr<s(0)(0)(0)>[&])  ;(D1:dsPtr:0)
extern  int		Tcl_GetsObj<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
        		    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  int		Tcl_GetServiceMode<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_GetServiceMode:0)
extern  Tcl_Interp<s(0)(0)(0)>[T] *	Tcl_GetSlave<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *slaveName<s(0)(0)(0)>[&])  ;(D1:slaveName:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_GetStdChannel<s(0)(0)(0)>[&]  (int type<s(0)(0)(0)>[&])  ;(D1:type:0)
extern  char *		Tcl_GetStringFromObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    int *lengthPtr<s(0)(0)(0)>[&])  ;(D1:lengthPtr:0)
extern  char *		Tcl_GetStringResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  char *		Tcl_GetVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  char *		Tcl_GetVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_GlobalEval<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *command<s(0)(0)(0)>[&])  ;(D1:command:0)
extern  int		Tcl_GlobalEvalObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  char *		Tcl_HashStats<s(0)(0)(0)>[&]  (Tcl_HashTable<s(0)(0)(0)>[T] *tablePtr<s(0)(0)(0)>[&])  ;(D1:tablePtr:0)
extern  int		Tcl_HideCommand<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
		            char *cmdName<s(0)(0)(0)>[&], char *hiddenCmdToken<s(0)(0)(0)>[&])  ;(D1:hiddenCmdToken:0)
extern  int		Tcl_Init<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  void		Tcl_InitHashTable<s(0)(0)(0)>[&]  (Tcl_HashTable<s(0)(0)(0)>[T] *tablePtr<s(0)(0)(0)>[&],
			    int keyType<s(0)(0)(0)>[&])  ;(D1:keyType:0)
extern  void		Tcl_InitMemory<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  int		Tcl_InputBlocked<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_InputBuffered<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_InterpDeleted<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  int		Tcl_IsSafe<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  void		Tcl_InvalidateStringRep<s(0)(0)(0)>[&]  (
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  char *		Tcl_JoinPath<s(0)(0)(0)>[&]  (int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&],
			    Tcl_DString<s(0)(0)(0)>[T] *resultPtr<s(0)(0)(0)>[&])  ;(D1:resultPtr:0)
extern  int		Tcl_LinkVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], char *addr<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&])  ;(D1:type:0)
extern  int		Tcl_ListObjAppendList<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&], 
			    Tcl_Obj<s(0)(0)(0)>[T] *elemListPtr<s(0)(0)(0)>[&])  ;(D1:elemListPtr:0)
extern  int		Tcl_ListObjAppendElement<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&])  ;(D1:objPtr:0)
extern  int		Tcl_ListObjGetElements<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&],
			    int *objcPtr<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] ***objvPtr<s(0)(0)(0)>[&])  ;(D1:objvPtr:0)
extern  int		Tcl_ListObjIndex<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&], int index<s(0)(0)(0)>[&], 
			    Tcl_Obj<s(0)(0)(0)>[T] **objPtrPtr<s(0)(0)(0)>[&])  ;(D1:objPtrPtr:0)
extern  int		Tcl_ListObjLength<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&], int *intPtr<s(0)(0)(0)>[&])  ;(D1:intPtr:0)
extern  int		Tcl_ListObjReplace<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *listPtr<s(0)(0)(0)>[&], int first<s(0)(0)(0)>[&], int count<s(0)(0)(0)>[&],
			    int objc<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
extern  void		Tcl_Main<s(0)(0)(0)>[&]  (int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&], int fd<s(0)(0)(0)>[&],
			    Tcl_AppInitProc<s(0)(0)(0)>[T] *appInitProc<s(0)(0)(0)>[&])  ;(D1:appInitProc:0)
 
extern  int		Tcl_MakeSafe<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_MakeTcpClientChannel<s(0)(0)(0)>[&]  (
    			    ClientData<s(0)(0)(0)>[T] tcpSocket<s(0)(0)(0)>[&])  ;(D1:tcpSocket:0)
extern  char *		Tcl_Merge<s(0)(0)(0)>[&]  (int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&])  ;(D1:argv:0)
extern  Tcl_HashEntry<s(0)(0)(0)>[T] *	Tcl_NextHashEntry<s(0)(0)(0)>[&]  (
			    Tcl_HashSearch<s(0)(0)(0)>[T] *searchPtr<s(0)(0)(0)>[&])  ;(D1:searchPtr:0)
extern  void		Tcl_NotifyChannel<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] channel<s(0)(0)(0)>[&],
			    int mask<s(0)(0)(0)>[&])  ;(D1:mask:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_ObjGetVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *part1Ptr<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *part2Ptr<s(0)(0)(0)>[&],
			    int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  Tcl_Obj<s(0)(0)(0)>[T] *	Tcl_ObjSetVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *part1Ptr<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] *part2Ptr<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *newValuePtr<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_OpenCommandChannel<s(0)(0)(0)>[&]  (
    			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&],
			    int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_OpenFileChannel<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
        		    char *fileName<s(0)(0)(0)>[&], char *modeString<s(0)(0)(0)>[&],
                            int permissions<s(0)(0)(0)>[&])  ;(D1:permissions:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_OpenTcpClient<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    int port<s(0)(0)(0)>[&], char *address<s(0)(0)(0)>[&], char *myaddr<s(0)(0)(0)>[&],
		            int myport<s(0)(0)(0)>[&], int async<s(0)(0)(0)>[&])  ;(D1:async:0)
extern  Tcl_Channel<s(0)(0)(0)>[T]	Tcl_OpenTcpServer<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
		            int port<s(0)(0)(0)>[&], char *host<s(0)(0)(0)>[&],
        		    Tcl_TcpAcceptProc<s(0)(0)(0)>[T] *acceptProc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] callbackData<s(0)(0)(0)>[&])  ;(D1:callbackData:0)
extern  char *		Tcl_ParseVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], char **termPtr<s(0)(0)(0)>[&])  ;(D1:termPtr:0)
extern  int		Tcl_PkgProvide<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *name<s(0)(0)(0)>[&], char *version<s(0)(0)(0)>[&])  ;(D1:version:0)
extern  char *		Tcl_PkgRequire<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *name<s(0)(0)(0)>[&], char *version<s(0)(0)(0)>[&], int exact<s(0)(0)(0)>[&])  ;(D1:exact:0)
extern  char *		Tcl_PosixError<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  void		Tcl_Preserve<s(0)(0)(0)>[&]  (ClientData<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&])  ;(D1:data:0)
extern  void		Tcl_PrintDouble<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    double value<s(0)(0)(0)>[&], char *dst<s(0)(0)(0)>[&])  ;(D1:dst:0)
extern  int		Tcl_PutEnv<s(0)(0)(0)>[&]  (const  char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  void		Tcl_QueueEvent<s(0)(0)(0)>[&]  (Tcl_Event<s(0)(0)(0)>[T] *evPtr<s(0)(0)(0)>[&],
			    Tcl_QueuePosition<s(0)(0)(0)>[T] position<s(0)(0)(0)>[&])  ;(D1:position:0)
extern  int		Tcl_Read<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
	        	    char *bufPtr<s(0)(0)(0)>[&], int toRead<s(0)(0)(0)>[&])  ;(D1:toRead:0)
extern  void		Tcl_ReapDetachedProcs<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_ReapDetachedProcs:0)
extern  int		Tcl_RecordAndEval<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *cmd<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_RecordAndEvalObj<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *cmdPtr<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  Tcl_RegExp<s(0)(0)(0)>[T]	Tcl_RegExpCompile<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&])  ;(D1:string:0)
extern  int		Tcl_RegExpExec<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_RegExp<s(0)(0)(0)>[T] regexp<s(0)(0)(0)>[&], char *string<s(0)(0)(0)>[&], char *start<s(0)(0)(0)>[&])  ;(D1:start:0)
extern  int		Tcl_RegExpMatch<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], char *pattern<s(0)(0)(0)>[&])  ;(D1:pattern:0)
extern  void		Tcl_RegExpRange<s(0)(0)(0)>[&]  (Tcl_RegExp<s(0)(0)(0)>[T] regexp<s(0)(0)(0)>[&],
			    int index<s(0)(0)(0)>[&], char **startPtr<s(0)(0)(0)>[&], char **endPtr<s(0)(0)(0)>[&])  ;(D1:endPtr:0)
extern  void		Tcl_RegisterChannel<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
	        	    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  void		Tcl_RegisterObjType<s(0)(0)(0)>[&]  (
			    Tcl_ObjType<s(0)(0)(0)>[T] *typePtr<s(0)(0)(0)>[&])  ;(D1:typePtr:0)
extern  void		Tcl_Release<s(0)(0)(0)>[&]  (ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_RestartIdleTimer<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_RestartIdleTimer:0)
extern  void		Tcl_ResetResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)

extern  int		Tcl_ScanCountedElement<s(0)(0)(0)>[&]  (const  char *string<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&], int *flagPtr<s(0)(0)(0)>[&])  ;(D1:flagPtr:0)
extern  int		Tcl_ScanElement<s(0)(0)(0)>[&]  (const  char *string<s(0)(0)(0)>[&],
			    int *flagPtr<s(0)(0)(0)>[&])  ;(D1:flagPtr:0)
extern  int		Tcl_Seek<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
        		    int offset<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])  ;(D1:mode:0)
extern  int		Tcl_ServiceAll<s(0)(0)(0)>[&]  (void)  ;(D1:Tcl_ServiceAll:0)
extern  int		Tcl_ServiceEvent<s(0)(0)(0)>[&]  (int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  void		Tcl_SetAssocData<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
                            char *name<s(0)(0)(0)>[&], Tcl_InterpDeleteProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
                            ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_SetBooleanObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    int boolValue<s(0)(0)(0)>[&])  ;(D1:boolValue:0)
extern  void		Tcl_SetChannelBufferSize<s(0)(0)(0)>[&]  (
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], int sz<s(0)(0)(0)>[&])  ;(D1:sz:0)
extern  int		Tcl_SetChannelOption<s(0)(0)(0)>[&]  (
			    Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
	        	    char *optionName<s(0)(0)(0)>[&], char *newValue<s(0)(0)(0)>[&])  ;(D1:newValue:0)
extern  int		Tcl_SetCommandInfo<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *cmdName<s(0)(0)(0)>[&], Tcl_CmdInfo<s(0)(0)(0)>[T] *infoPtr<s(0)(0)(0)>[&])  ;(D1:infoPtr:0)
extern  void		Tcl_SetDoubleObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    double doubleValue<s(0)(0)(0)>[&])  ;(D1:doubleValue:0)
extern  void		Tcl_SetErrno<s(0)(0)(0)>[&]  (int err<s(0)(0)(0)>[&])  ;(D1:err:0)
extern  void		Tcl_SetErrorCode<s(0)(0)(0)>[&]  
    			    ( Tcl_Interp<s(0)(0)(0)>[T] *   arg1<s(0)(0)(0)>[&] , ...)   ;(D1:arg1:0)
extern  void		Tcl_SetIntObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    int intValue<s(0)(0)(0)>[&])  ;(D1:intValue:0)
extern  void		Tcl_SetListObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    int objc<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][])  ;(D1:objv:0)
extern  void		Tcl_SetLongObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    long longValue<s(0)(0)(0)>[&])  ;(D1:longValue:0)
extern  void		Tcl_SetMaxBlockTime<s(0)(0)(0)>[&]  (Tcl_Time<s(0)(0)(0)>[T] *timePtr<s(0)(0)(0)>[&])  ;(D1:timePtr:0)
extern  void		Tcl_SetObjErrorCode<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *errorObjPtr<s(0)(0)(0)>[&])  ;(D1:errorObjPtr:0)
extern  void		Tcl_SetObjLength<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&],
			    int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  void		Tcl_SetObjResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Obj<s(0)(0)(0)>[T] *resultObjPtr<s(0)(0)(0)>[&])  ;(D1:resultObjPtr:0)
extern  void		Tcl_SetPanicProc<s(0)(0)(0)>[&]  (void (*proc<s(0)(0)(0)>[&])
			     ( char *    format<s(0)(0)(0)>[&] , ...)   )  ;(D1:format:0)
extern  int		Tcl_SetRecursionLimit<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    int depth<s(0)(0)(0)>[&])  ;(D1:depth:0)
extern  void		Tcl_SetResult<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *string<s(0)(0)(0)>[&], Tcl_FreeProc<s(0)(0)(0)>[T] *freeProc<s(0)(0)(0)>[&])  ;(D1:freeProc:0)
extern  int		Tcl_SetServiceMode<s(0)(0)(0)>[&]  (int mode<s(0)(0)(0)>[&])  ;(D1:mode:0)
extern  void		Tcl_SetStdChannel<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] channel<s(0)(0)(0)>[&],
			    int type<s(0)(0)(0)>[&])  ;(D1:type:0)
extern  void		Tcl_SetStringObj<s(0)(0)(0)>[&]  (Tcl_Obj<s(0)(0)(0)>[T] *objPtr<s(0)(0)(0)>[&], 
			    char *bytes<s(0)(0)(0)>[&], int length<s(0)(0)(0)>[&])  ;(D1:length:0)
extern  void		Tcl_SetTimer<s(0)(0)(0)>[&]  (Tcl_Time<s(0)(0)(0)>[T] *timePtr<s(0)(0)(0)>[&])  ;(D1:timePtr:0)
extern  char *		Tcl_SetVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], char *newValue<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  char *		Tcl_SetVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], char *newValue<s(0)(0)(0)>[&],
			    int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  char *		Tcl_SignalId<s(0)(0)(0)>[&]  (int sig<s(0)(0)(0)>[&])  ;(D1:sig:0)
extern  char *		Tcl_SignalMsg<s(0)(0)(0)>[&]  (int sig<s(0)(0)(0)>[&])  ;(D1:sig:0)
extern  void		Tcl_Sleep<s(0)(0)(0)>[&]  (int ms<s(0)(0)(0)>[&])  ;(D1:ms:0)
extern  void		Tcl_SourceRCFile<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&])  ;(D1:interp:0)
extern  int		Tcl_SplitList<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *list<s(0)(0)(0)>[&], int *argcPtr<s(0)(0)(0)>[&], char ***argvPtr<s(0)(0)(0)>[&])  ;(D1:argvPtr:0)
extern  void		Tcl_SplitPath<s(0)(0)(0)>[&]  (char *path<s(0)(0)(0)>[&],
			    int *argcPtr<s(0)(0)(0)>[&], char ***argvPtr<s(0)(0)(0)>[&])  ;(D1:argvPtr:0)
extern  void		Tcl_StaticPackage<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *pkgName<s(0)(0)(0)>[&], Tcl_PackageInitProc<s(0)(0)(0)>[T] *initProc<s(0)(0)(0)>[&],
			    Tcl_PackageInitProc<s(0)(0)(0)>[T] *safeInitProc<s(0)(0)(0)>[&])  ;(D1:safeInitProc:0)
extern  int		Tcl_StringMatch<s(0)(0)(0)>[&]  (char *string<s(0)(0)(0)>[&],
			    char *pattern<s(0)(0)(0)>[&])  ;(D1:pattern:0)
extern  int		Tcl_Tell<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)

extern  int		Tcl_TraceVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&], Tcl_VarTraceProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  int		Tcl_TraceVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&],
			    Tcl_VarTraceProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  char *		Tcl_TranslateFileName<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *name<s(0)(0)(0)>[&], Tcl_DString<s(0)(0)(0)>[T] *bufferPtr<s(0)(0)(0)>[&])  ;(D1:bufferPtr:0)
extern  int		Tcl_Ungets<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&], char *str<s(0)(0)(0)>[&],
			    int len<s(0)(0)(0)>[&], int atHead<s(0)(0)(0)>[&])  ;(D1:atHead:0)
extern  void		Tcl_UnlinkVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&])  ;(D1:varName:0)
extern  int		Tcl_UnregisterChannel<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&])  ;(D1:chan:0)
extern  int		Tcl_UnsetVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_UnsetVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  void		Tcl_UntraceVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&], Tcl_VarTraceProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_UntraceVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&],
			    Tcl_VarTraceProc<s(0)(0)(0)>[T] *proc<s(0)(0)(0)>[&], ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&])  ;(D1:clientData:0)
extern  void		Tcl_UpdateLinkedVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&])  ;(D1:varName:0)
extern  int		Tcl_UpVar<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *frameName<s(0)(0)(0)>[&], char *varName<s(0)(0)(0)>[&],
			    char *localName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_UpVar2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *frameName<s(0)(0)(0)>[&], char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&],
			    char *localName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&])  ;(D1:flags:0)
extern  int		Tcl_VarEval<s(0)(0)(0)>[&]  
    			    ( Tcl_Interp<s(0)(0)(0)>[T] *   interp<s(0)(0)(0)>[&] , ...)   ;(D1:interp:0)
extern  ClientData<s(0)(0)(0)>[T]	Tcl_VarTraceInfo<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *varName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&],
			    Tcl_VarTraceProc<s(0)(0)(0)>[T] *procPtr<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] prevClientData<s(0)(0)(0)>[&])  ;(D1:prevClientData:0)
extern  ClientData<s(0)(0)(0)>[T]	Tcl_VarTraceInfo2<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    char *part1<s(0)(0)(0)>[&], char *part2<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&],
			    Tcl_VarTraceProc<s(0)(0)(0)>[T] *procPtr<s(0)(0)(0)>[&],
			    ClientData<s(0)(0)(0)>[T] prevClientData<s(0)(0)(0)>[&])  ;(D1:prevClientData:0)
extern  int		Tcl_WaitForEvent<s(0)(0)(0)>[&]  (Tcl_Time<s(0)(0)(0)>[T] *timePtr<s(0)(0)(0)>[&])  ;(D1:timePtr:0)
extern  Tcl_Pid<s(0)(0)(0)>[T]		Tcl_WaitPid<s(0)(0)(0)>[&]  (Tcl_Pid<s(0)(0)(0)>[T] pid<s(0)(0)(0)>[&], int *statPtr<s(0)(0)(0)>[&], 
			    int options<s(0)(0)(0)>[&])  ;(D1:options:0)
extern  int		Tcl_Write<s(0)(0)(0)>[&]  (Tcl_Channel<s(0)(0)(0)>[T] chan<s(0)(0)(0)>[&],
			    char *s<s(0)(0)(0)>[&], int slen<s(0)(0)(0)>[&])  ;(D1:slen:0)
extern  void		Tcl_WrongNumArgs<s(0)(0)(0)>[&]  (Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&],
			    int objc<s(0)(0)(0)>[&], Tcl_Obj<s(0)(0)(0)>[T] * const  objv<s(0)(0)(0)>[&][], char *message<s(0)(0)(0)>[&])  ;(D1:message:0)




 

 

 




















 



extern void 	tickAnnounce<s(0)(0)(0)>[&] (void);(D1:tickAnnounce:0)
extern void 	tickSet<s(0)(0)(0)>[&] (ULONG<s(0)(0)(0)>[T] ticks<s(0)(0)(0)>[&]);(D1:ticks:0)
extern ULONG<s(0)(0)(0)>[T] 	tickGet<s(0)(0)(0)>[&] (void);(D1:tickGet:0)
















 





typedef INT2<s(0)(0)(0)>[T] DEBUG_LEVEL<s(0)(0)(0)>[&];(D1:DEBUG_LEVEL:1)[[TYPENAME:DEBUG_LEVEL]]

 




extern DEBUG_LEVEL<s(0)(0)(0)>[T] DBG_SetDebugLevel<s(0)(0)(0)>[&](DEBUG_LEVEL<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&]);(D1:level:0)

 




extern DEBUG_LEVEL<s(0)(0)(0)>[T] DBG_GetDebugLevel<s(0)(0)(0)>[&]();(D1:DBG_GetDebugLevel:0)

 











extern STATUS<s(0)(0)(0)>[T] DBG_debug<s(0)(0)(0)>[&](int argc<s(0)(0)(0)>[&], char **argv<s(0)(0)(0)>[&]);(D1:argv:0)

 

















 




















extern UINT4<s(0)(0)(0)>[T] DBG_ReadRegister<s(0)(0)(0)>[&](UINT1<s(0)(0)(0)>[T] * pAddress<s(0)(0)(0)>[&], INT4<s(0)(0)(0)>[T] num<s(0)(0)(0)>[&]);(D1:num:0)
extern void DBG_WriteRegister<s(0)(0)(0)>[&](UINT1<s(0)(0)(0)>[T] * pAddress<s(0)(0)(0)>[&], UINT1<s(0)(0)(0)>[T] value<s(0)(0)(0)>[&]);(D1:value:0)



 





 






typedef struct {
    char levelName<s(1)(1)(0)>[&][16 ];
    UINT8<s(1)(1)(0)>[T]  initVal<s(1)(1)(0)>[&];          
    char levelDesc<s(1)(1)(0)>[&][256 ];
}DBG_LEVEL_INFO_T<s(0)(0)(0)>[&];(D1:DBG_LEVEL_INFO_T:1)[[TYPENAME:DBG_LEVEL_INFO_T]]

typedef struct {
    char module<s(1)(1)(0)>[&][16 ];
    DBG_LEVEL_INFO_T<s(1)(1)(0)>[T] levels<s(1)(1)(0)>[&][32 ];
}DBG_INFO_T<s(0)(0)(0)>[&];(D1:DBG_INFO_T:1)[[TYPENAME:DBG_INFO_T]]

 
typedef struct {
    UINT32<s(1)(1)(0)>[T] level<s(1)(1)(0)>[&][253];
    UINT32<s(1)(1)(0)>[T] warmFlag<s(1)(1)(0)>[&];   
    UINT32<s(1)(1)(0)>[T] nvramMaxLen<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] nvramLen<s(1)(1)(0)>[&];
    char nvram<s(1)(1)(0)>[&][1];   
}DBG_NVRAM_T<s(0)(0)(0)>[&];(D1:DBG_NVRAM_T:1)[[TYPENAME:DBG_NVRAM_T]]
extern DBG_NVRAM_T<s(0)(0)(0)>[T]* gpDbgNvram<s(0)(0)(0)>[&];(D1:gpDbgNvram:0)

typedef UINT16<s(0)(0)(0)>[T] DBG_MODULE_T<s(0)(0)(0)>[&];(D1:DBG_MODULE_T:1)[[TYPENAME:DBG_MODULE_T]]

 





void DBG_Init<s(0)(0)(0)>[&](void);(D1:DBG_Init:0)

 









DBG_MODULE_T<s(0)(0)(0)>[T] DBG_RegisterModule<s(0)(0)(0)>[&](DBG_INFO_T<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&]);(D1:pInfo:0)

 









void DBG_SetLevel<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], char* level<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)
 








void DBG_SetAllLevels<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)
 










void DBG_SetLevelByNum<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)

 




void DBG_ShowModules<s(0)(0)(0)>[&](void);(D1:DBG_ShowModules:0)

 






void DBG_ShowModuleInfo<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] full<s(0)(0)(0)>[&]);(D1:full:0)

 








BOOL<s(0)(0)(0)>[T] DBG_GetLevelByName<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], char* level<s(0)(0)(0)>[&]);(D1:level:0)
 









BOOL<s(0)(0)(0)>[T] DBG_GetLevel<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&]);(D1:level:0)
 











BOOL<s(0)(0)(0)>[T] DBG_GetLevel2And<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level1<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level2<s(0)(0)(0)>[&]);(D1:level2:0)
 











BOOL<s(0)(0)(0)>[T] DBG_GetLevel2Or<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level1<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level2<s(0)(0)(0)>[&]);(D1:level2:0)

 
void DBG_NvResetLevel<s(0)(0)(0)>[&](void);(D1:DBG_NvResetLevel:0)
 
int DBG_NvResetBuffer<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] base<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
 
void DBG_NvPrintBuffer<s(0)(0)(0)>[&](void);(D1:DBG_NvPrintBuffer:0)
 

void DBG_NvPrintBufferBack<s(0)(0)(0)>[&](void);(D1:DBG_NvPrintBufferBack:0)
void DBG_NvSetLevel<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], char* level<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)
void DBG_NvSetAllLevels<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)
void DBG_NvSetLevelByNum<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] set<s(0)(0)(0)>[&]);(D1:set:0)
void DBG_NvShowModules<s(0)(0)(0)>[&](void);(D1:DBG_NvShowModules:0)
void DBG_NvShowModuleInfo<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] full<s(0)(0)(0)>[&]);(D1:full:0)
BOOL<s(0)(0)(0)>[T] DBG_NvGetLevelByName<s(0)(0)(0)>[&](char* module<s(0)(0)(0)>[&], char* level<s(0)(0)(0)>[&]);(D1:level:0)
BOOL<s(0)(0)(0)>[T] DBG_NvGetLevel<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&]);(D1:level:0)
BOOL<s(0)(0)(0)>[T] DBG_NvGetLevel2And<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level1<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level2<s(0)(0)(0)>[&]);(D1:level2:0)
BOOL<s(0)(0)(0)>[T] DBG_NvGetLevel2Or<s(0)(0)(0)>[&](DBG_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level1<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] level2<s(0)(0)(0)>[&]);(D1:level2:0)






  














extern int DBG_TclAppInit<s(0)(0)(0)>[&](Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&]);(D1:interp:0)





 

















 
 
 
 
 
 
 
 
 
 
 
 







 











 












 



 

 







 


 


 



 



 








 



 

















































































































 


 








 




 


typedef struct {
    unsigned short slot<s(1)(1)(0)>[&];         
    unsigned short pslot<s(1)(1)(0)>[&];        
    unsigned int applNumber<s(1)(1)(0)>[&]; 
    unsigned int instance<s(1)(1)(0)>[&];
} applId_tt<s(0)(0)(0)>[&];(D1:applId_tt:1)[[TYPENAME:applId_tt]]

typedef struct {
    unsigned char packet_type<s(1)(1)(0)>[&];   
    unsigned char packet_flags<s(1)(1)(0)>[&];  
    unsigned short packet_sequence<s(1)(1)(0)>[&];   
    applId_tt<s(1)(1)(0)>[T] dest<s(1)(1)(0)>[&];   
    applId_tt<s(1)(1)(0)>[T] src<s(1)(1)(0)>[&];  

    int command<s(1)(1)(0)>[&];      
    int length<s(1)(1)(0)>[&];                  
    unsigned short reSendSynMsgMax<s(1)(1)(0)>[&]; 

    unsigned short  sendSynMsgTimerLen<s(1)(1)(0)>[&];   

    unsigned short  wCheckSum<s(1)(1)(0)>[&];   
    unsigned char aExt<s(1)(1)(0)>[&][2];
    void *handle<s(1)(1)(0)>[&];   
     
} command_tt<s(0)(0)(0)>[&];(D1:command_tt:1)[[TYPENAME:command_tt]]



 











 















































 














 




typedef struct _CM_PHYCARDPARA_T<s(1)(0)(1)>[&] {
    unsigned int style<s(1)(1)(0)>[&];
    unsigned int function<s(1)(1)(0)>[&];
    unsigned int hwVersion<s(1)(1)(0)>[&];
    unsigned int option<s(1)(1)(0)>[&];
    unsigned int slot<s(1)(1)(0)>[&];
    char   serialNum<s(1)(1)(0)>[&][18 ];
    char   manuDate<s(1)(1)(0)>[&][9 ];
    char   prodCode<s(1)(1)(0)>[&][11 ]; 
    char   oemCode<s(1)(1)(0)>[&][11 ];
    char   simCode<s(1)(1)(0)>[&][26 ];
    char   bootDate<s(1)(1)(0)>[&][41 ];
    char   bootVersion<s(1)(1)(0)>[&][17 ];
    char   hardVersion<s(1)(1)(0)>[&][17 ];
    char   softVersion<s(1)(1)(0)>[&][33 ];
    char   fusionVersion<s(1)(1)(0)>[&][17 ];
    char   fpgaVersion<s(1)(1)(0)>[&][(17  * 15) ];	
} CM_PHYCARDPARA_T<s(0)(0)(0)>[&];(D1:CM_PHYCARDPARA_T:1)[[TYPENAME:CM_PHYCARDPARA_T]]

typedef struct _CM_INFRA_BOOT_ACK_T<s(1)(0)(1)>[&]
{
    int    m_boot<s(1)(1)(0)>[&]; 
}CM_INFRA_BOOT_ACK_T<s(0)(0)(0)>[&];(D1:CM_INFRA_BOOT_ACK_T:1)[[TYPENAME:CM_INFRA_BOOT_ACK_T]]

typedef struct _CM_LOAD_OBJ_T<s(1)(0)(1)>[&]
{
    unsigned int slot<s(1)(1)(0)>[&];
}CM_LOAD_OBJ_T<s(0)(0)(0)>[&];(D1:CM_LOAD_OBJ_T:1)[[TYPENAME:CM_LOAD_OBJ_T]]

typedef struct cmndFmtApplState<s(1)(0)(1)>[&] {
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    int state<s(1)(1)(0)>[&];
    int applOptions<s(1)(1)(0)>[&];
} cmndFmtApplState_t<s(0)(0)(0)>[&];(D1:cmndFmtApplState_t:1)[[TYPENAME:cmndFmtApplState_t]]

 







































 






































typedef UINT16<s(0)(0)(0)>[T] DTL_MODULE_T<s(0)(0)(0)>[&];(D1:DTL_MODULE_T:1)[[TYPENAME:DTL_MODULE_T]]

typedef enum
{
    DTL_NOTHING_OPEN<s(0)(0)(0)>[&] = 0,       
    DTL_REALTIME_PRINT<s(0)(0)(0)>[&],         
    DTL_RAM_SAVE<s(0)(0)(0)>[&],               
    DTL_FLASH_SAVE<s(0)(0)(0)>[&],              
    DTL_FLASH_SAVE_DIRECTLY<s(0)(0)(0)>[&],    
                                
}DTL_LEVEL_MODE_T<s(0)(0)(0)>[&];(D1:DTL_LEVEL_MODE_T:1)[[TYPENAME:DTL_LEVEL_MODE_T]]

typedef struct
{
    char                 levelName<s(1)(1)(0)>[&][32 ];
    DTL_LEVEL_MODE_T<s(1)(1)(0)>[T]     levelControl<s(1)(1)(0)>[&];         
    UINT16<s(1)(1)(0)>[T]               levelCount<s(1)(1)(0)>[&];            
    char                 levelDesc<s(1)(1)(0)>[&][128 ];
}DTL_LEVEL_INFO_T<s(0)(0)(0)>[&];(D1:DTL_LEVEL_INFO_T:1)[[TYPENAME:DTL_LEVEL_INFO_T]]

typedef struct 
{
    char                module<s(1)(1)(0)>[&][32 ];
    DTL_LEVEL_INFO_T<s(1)(1)(0)>[T]    levels<s(1)(1)(0)>[&][32 ];
}DTL_MOD_INFO_T<s(0)(0)(0)>[&];(D1:DTL_MOD_INFO_T:1)[[TYPENAME:DTL_MOD_INFO_T]]

















extern DTL_MODULE_T<s(0)(0)(0)>[T]  DTL_RegisterModule<s(0)(0)(0)>[&](DTL_MOD_INFO_T<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] timeStampEnable<s(0)(0)(0)>[&]);(D1:timeStampEnable:0)
extern void          DTL_PrintProc<s(0)(0)(0)>[&](DTL_MODULE_T<s(0)(0)(0)>[T] module<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] level<s(0)(0)(0)>[&], char* fileName<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&],  char *fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)
extern void          DTL_LoadModule<s(0)(0)(0)>[&](void);(D1:DTL_LoadModule:0)










 
 
 
 
 
 
 
 










 
 
 
 
 
 
 
 
 



















































































































































































 
 

 

 

 


































 











































 



 








 















 














 






struct opthdr<s(1)(0)(1)>[&] {
	long 	level<s(1)(1)(0)>[&];			 
	long	name<s(1)(1)(0)>[&];			 
	long	len<s(1)(1)(0)>[&];			 
};




 


struct	linger<s(1)(0)(1)>[&] {
	int	l_onoff<s(1)(1)(0)>[&];		 
	int	l_linger<s(1)(1)(0)>[&];		 
};

 




 





































 



struct sockaddr<s(1)(0)(1)>[&] {
	u_char<s(1)(1)(0)>[T]	sa_len<s(1)(1)(0)>[&];			 
	u_char<s(1)(1)(0)>[T]	sa_family<s(1)(1)(0)>[&];		 
	char	sa_data<s(1)(1)(0)>[&][14];		 
};

typedef struct sockaddr<s(1)(0)(1)>[&] SOCKADDR<s(1)(0)(1)>[&];(D1:SOCKADDR:1)[[TYPENAME:SOCKADDR]]

 



struct sockproto<s(1)(0)(1)>[&] {
	u_short<s(1)(1)(0)>[T]	sp_family<s(1)(1)(0)>[&];		 
	u_short<s(1)(1)(0)>[T]	sp_protocol<s(1)(1)(0)>[&];		 
};

 

































 











 



















 




extern UINT32<s(0)(0)(0)>[T] somaxconn<s(0)(0)(0)>[&];(D1:somaxconn:0)

 



struct msghdr<s(1)(0)(1)>[&] {
	caddr_t<s(1)(1)(0)>[T]	msg_name<s(1)(1)(0)>[&];		 
	u_int<s(1)(1)(0)>[T]	msg_namelen<s(1)(1)(0)>[&];		 
	struct	iovec<s(2)(1)(1)>[&] *msg_iov<s(1)(1)(0)>[&];		 
	u_int<s(1)(1)(0)>[T]	msg_iovlen<s(1)(1)(0)>[&];		 
	caddr_t<s(1)(1)(0)>[T]	msg_control<s(1)(1)(0)>[&];		 
	u_int<s(1)(1)(0)>[T]	msg_controllen<s(1)(1)(0)>[&];		 
 


	int	msg_flags<s(1)(1)(0)>[&];		 
};
















 





struct cmsghdr<s(1)(0)(1)>[&] {
	u_int<s(1)(1)(0)>[T]	cmsg_len<s(1)(1)(0)>[&];		 
	int	cmsg_level<s(1)(1)(0)>[&];		 
	int	cmsg_type<s(1)(1)(0)>[&];		 
 
};

 



 






 







 












 

 

 





























 




struct timeval<s(1)(0)(1)>[&]
    {
    long tv_sec<s(1)(1)(0)>[&];	 
    long tv_usec<s(1)(1)(0)>[&];	 
    };

struct timezone<s(1)(0)(1)>[&]
    {
    int	tz_minuteswest<s(1)(1)(0)>[&];	 
    int	tz_dsttime<s(1)(1)(0)>[&];	 
    };













 

 

 































 





 







 




 

typedef struct msg_q<s(1)(0)(1)>[&] *MSG_Q_ID<s(0)(0)(0)>[&];(D1:MSG_Q_ID:1)[[TYPENAME:MSG_Q_ID]]	 

typedef struct			 
    {
    int     numMsgs<s(1)(1)(0)>[&];		 
    int     numTasks<s(1)(1)(0)>[&];		 

    int     sendTimeouts<s(1)(1)(0)>[&];	 
    int     recvTimeouts<s(1)(1)(0)>[&];	 

    int     options<s(1)(1)(0)>[&];		 
    int     maxMsgs<s(1)(1)(0)>[&];		 
    int     maxMsgLength<s(1)(1)(0)>[&];	 

    int     taskIdListMax<s(1)(1)(0)>[&];	 
    int *   taskIdList<s(1)(1)(0)>[&];		 

    int     msgListMax<s(1)(1)(0)>[&];		 
    char ** msgPtrList<s(1)(1)(0)>[&];		 
    int *   msgLenList<s(1)(1)(0)>[&];		 

    } MSG_Q_INFO<s(0)(0)(0)>[&];(D1:MSG_Q_INFO:1)[[TYPENAME:MSG_Q_INFO]]

 

 










 



extern STATUS<s(0)(0)(0)>[T] 	msgQLibInit<s(0)(0)(0)>[&] (void);(D1:msgQLibInit:0)
extern MSG_Q_ID<s(0)(0)(0)>[T] msgQCreate<s(0)(0)(0)>[&] (int maxMsgs<s(0)(0)(0)>[&], int maxMsgLength<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T] 	msgQDelete<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&]);(D1:msgQId:0)
extern STATUS<s(0)(0)(0)>[T] 	msgQSend<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&], char *buffer<s(0)(0)(0)>[&], UINT<s(0)(0)(0)>[T] nBytes<s(0)(0)(0)>[&],
			  int timeout<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&]);(D1:priority:0)
extern int 	msgQReceive<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&], char *buffer<s(0)(0)(0)>[&], UINT<s(0)(0)(0)>[T] maxNBytes<s(0)(0)(0)>[&],
			     int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern STATUS<s(0)(0)(0)>[T] 	msgQInfoGet<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&], MSG_Q_INFO<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&]);(D1:pInfo:0)
extern int 	msgQNumMsgs<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&]);(D1:msgQId:0)
extern void 	msgQShowInit<s(0)(0)(0)>[&] (void);(D1:msgQShowInit:0)
extern STATUS<s(0)(0)(0)>[T] 	msgQShow<s(0)(0)(0)>[&] (MSG_Q_ID<s(0)(0)(0)>[T] msgQId<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&]);(D1:level:0)














 
 
 
 
 
 
 
 
 






















































































































































































    typedef struct {
        int waiterCount<s(1)(1)(0)>[&];
        void *semaphore<s(1)(1)(0)>[&];
    } *PDQsema<s(0)(0)(0)>[&];(D1:PDQsema:1)[[TYPENAME:PDQsema]]



    extern char *Strerror<s(0)(0)(0)>[&](int error<s(0)(0)(0)>[&]);(D1:error:0)
    extern STATUS<s(0)(0)(0)>[T] *Strerror_r<s(0)(0)(0)>[&](int error<s(0)(0)(0)>[&], char *buffer<s(0)(0)(0)>[&]);(D1:buffer:0)
    extern char *Strdup<s(0)(0)(0)>[&](const char *src<s(0)(0)(0)>[&]);(D1:src:0)







    extern void *Int_Malloc<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] len<s(0)(0)(0)>[&]);(D1:len:0)
    extern void Int_FFree<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&], void *ptr<s(0)(0)(0)>[&]);(D1:ptr:0)
    extern void Int_Mem_Add_User<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&], void *mem<s(0)(0)(0)>[&]);(D1:mem:0)








    extern void *Calloc<s(0)(0)(0)>[&](size_t<s(0)(0)(0)>[T] nmemb<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] size<s(0)(0)(0)>[&]);(D1:size:0)
    extern void *Realloc<s(0)(0)(0)>[&](void *ptr<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] newSize<s(0)(0)(0)>[&]);(D1:newSize:0)


    extern char *Strncpy<s(0)(0)(0)>[&](char *s1<s(0)(0)(0)>[&], const char *s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] n<s(0)(0)(0)>[&]);(D1:n:0)
    extern int StrEQ<s(0)(0)(0)>[&](const char *s1<s(0)(0)(0)>[&], const char *s2<s(0)(0)(0)>[&]);(D1:s2:0)
    extern int StrcaseEQ<s(0)(0)(0)>[&](const char *s1<s(0)(0)(0)>[&], const char *s2<s(0)(0)(0)>[&]);(D1:s2:0)
    extern int StrIsNumber<s(0)(0)(0)>[&](const char *str<s(0)(0)(0)>[&]);(D1:str:0)

    extern PDQsema<s(0)(0)(0)>[T] pdqSemCreate<s(0)(0)(0)>[&](void);(D1:pdqSemCreate:0)
    extern void pdqSemTake<s(0)(0)(0)>[&](PDQsema<s(0)(0)(0)>[T] sema<s(0)(0)(0)>[&]);(D1:sema:0)
    extern void pdqSemGive<s(0)(0)(0)>[&](PDQsema<s(0)(0)(0)>[T] sema<s(0)(0)(0)>[&]);(D1:sema:0)














 

 

 




























 

 

 





















 











 



 



 




 





 



 












 

 




 



 








 



 













 




 








 















































 

struct dirent<s(1)(0)(1)>[&]		 
    {
    char	d_name<s(1)(1)(0)>[&] [99   + 1];	 
    };


 
 

typedef struct		 
    {
    int		  dd_fd<s(1)(1)(0)>[&];		 
    int		  dd_cookie<s(1)(1)(0)>[&];		 
    struct dirent<s(2)(1)(1)>[&] dd_dirent<s(2)(1)(1)>[&];		 
    } DIR<s(0)(0)(0)>[&];(D1:DIR:1)[[TYPENAME:DIR]]

 





 



extern DIR<s(0)(0)(0)>[T] *	opendir<s(0)(0)(0)>[&] (char *dirName<s(0)(0)(0)>[&]);(D1:dirName:0)
extern STATUS<s(0)(0)(0)>[T] 	closedir<s(0)(0)(0)>[&] (DIR<s(0)(0)(0)>[T] *pDir<s(0)(0)(0)>[&]);(D1:pDir:0)
extern struct 	dirent<s(1)(0)(1)>[&] *readdir<s(0)(0)(0)>[&] (DIR<s(0)(0)(0)>[T] *pDir<s(0)(0)(0)>[&]);(D1:pDir:0)
extern void 	rewinddir<s(0)(0)(0)>[&] (DIR<s(0)(0)(0)>[T] *pDir<s(0)(0)(0)>[&]);(D1:pDir:0)





























 
 
void SFT_ApplSwRegister<s(0)(0)(0)>[&](void);(D1:SFT_ApplSwRegister:0)
 
 













typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*AMM_AppNotifyRegister<s(0)(0)(0)>[&])TYPENAME:FUNC:(AMM_AppNotifyRegister)(int flag<s(0)(0)(0)>[&]);(D1:flag:0)

typedef void (*auxClockHookFunc_t<s(0)(0)(0)>[&])TYPENAME:FUNC:(auxClockHookFunc_t)(int user_para<s(0)(0)(0)>[&]);(D1:user_para:0)


void tmd_ReportApplInitState<s(0)(0)(0)>[&](int status<s(0)(0)(0)>[&]);(D1:status:0)
void  Amm_ApplNotifyRegister<s(0)(0)(0)>[&](AMM_AppNotifyRegister<s(0)(0)(0)>[T] *fptr<s(0)(0)(0)>[&]);(D1:fptr:0)
void Amm_SwRegister<s(0)(0)(0)>[&](void);(D1:Amm_SwRegister:0)
void  Amm_ApplInit<s(0)(0)(0)>[&](void);(D1:Amm_ApplInit:0)
void Amm_ApplWaitStatus<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] bSwFlag<s(0)(0)(0)>[&]);(D1:bSwFlag:0)
void Amm_FdrCycleChange<s(0)(0)(0)>[&](int dwCycleTime<s(0)(0)(0)>[&]);(D1:dwCycleTime:0)
int AMM_Select<s(0)(0)(0)>[&](int width<s(0)(0)(0)>[&], fd_set<s(0)(0)(0)>[T] *pReadFds<s(0)(0)(0)>[&], fd_set<s(0)(0)(0)>[T] *pWriteFds<s(0)(0)(0)>[&],fd_set<s(0)(0)(0)>[T] *pExceptFds<s(0)(0)(0)>[&], struct timeval<s(1)(0)(1)>[&] *pTimeOut<s(0)(0)(0)>[&]);(D1:pTimeOut:0)


 
    int tmd_GetFDforAppl<s(0)(0)(0)>[&](int applNumber<s(0)(0)(0)>[&]);(D1:applNumber:0)
    int tmd_GetApplIDforAppl<s(0)(0)(0)>[&](char *taskName<s(0)(0)(0)>[&]);(D1:taskName:0)

 
    int gettimeofday<s(0)(0)(0)>[&](struct timeval<s(1)(0)(1)>[&] *tv<s(0)(0)(0)>[&], struct timezone<s(1)(0)(1)>[&] *tz<s(0)(0)(0)>[&]);(D1:tz:0)
    int settimeofday<s(0)(0)(0)>[&](const struct timeval<s(1)(0)(1)>[&] *tv<s(0)(0)(0)>[&], const struct timezone<s(1)(0)(1)>[&] *tz<s(0)(0)(0)>[&]);(D1:tz:0)

 
 
    int AMM_SpawnAppl<s(0)(0)(0)>[&](char *name<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&], int stackSize<s(0)(0)(0)>[&], int (*entryPt<s(0)(0)(0)>[&]) (void), int applNum<s(0)(0)(0)>[&],
                      char *applName<s(0)(0)(0)>[&], unsigned int logflags<s(0)(0)(0)>[&], int cfgOptions<s(0)(0)(0)>[&]);(D1:cfgOptions:0)

 
 
 
    int AMM_SpawnTask<s(0)(0)(0)>[&](char *name<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&], int stackSize<s(0)(0)(0)>[&], int (*entryPt<s(0)(0)(0)>[&]) (void), int taskNum<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&],
                      int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&], int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int arg6<s(0)(0)(0)>[&], int arg7<s(0)(0)(0)>[&]);(D1:arg7:0)

     
     
    int AMM_SpawnApplTask<s(0)(0)(0)>[&](char *name<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&], int stackSize<s(0)(0)(0)>[&], int (*entryPt<s(0)(0)(0)>[&]) (void), int applNum<s(0)(0)(0)>[&], char *applName<s(0)(0)(0)>[&],
                  unsigned int logflags<s(0)(0)(0)>[&], int cfgOptions<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&], int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&], int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int arg6<s(0)(0)(0)>[&], int arg7<s(0)(0)(0)>[&]);(D1:arg7:0)

 















 
    struct acb<s(1)(0)(1)>[&] *tmd_RegisterApplication<s(0)(0)(0)>[&](int applNum<s(0)(0)(0)>[&], char *applName<s(0)(0)(0)>[&], unsigned int logflags<s(0)(0)(0)>[&], int cfgOptions<s(0)(0)(0)>[&]);(D1:cfgOptions:0)

 
    void tmd_TaskEnd<s(0)(0)(0)>[&](void);(D1:tmd_TaskEnd:0)
    void tmd_RemoveRegistration<s(0)(0)(0)>[&](int applNumber<s(0)(0)(0)>[&]);(D1:applNumber:0)

 
    int tmd_GenerateAlarm<s(0)(0)(0)>[&](int alarm_interface_index<s(0)(0)(0)>[&], int slot_num<s(0)(0)(0)>[&], int port_num<s(0)(0)(0)>[&], int ifAlarmEnabled<s(0)(0)(0)>[&], int alarm_type_id<s(0)(0)(0)>[&],
                           int new_alarm_status<s(0)(0)(0)>[&], int interface_type<s(0)(0)(0)>[&], int instances<s(0)(0)(0)>[&][]);(D1:instances:0)
    int tmd_GenerateEvent<s(0)(0)(0)>[&](int event_type_id<s(0)(0)(0)>[&], char *event_detail<s(0)(0)(0)>[&]);(D1:event_detail:0)



    int SIPADDR<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)
    int PSIPADDR<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)

 
    unsigned int FindBoardProperties<s(0)(0)(0)>[&](void);(D1:FindBoardProperties:0)
    int BoardInit<s(0)(0)(0)>[&](int boardtype<s(0)(0)(0)>[&]);(D1:boardtype:0)

 



 















 









 
typedef enum{	
		SEND_OK<s(0)(0)(0)>[&] = 0,		
		QUEUE_FULL<s(0)(0)(0)>[&]=1,
		LINK_BREAKDOWN<s(0)(0)(0)>[&]=2,
		NET_CONGESTION<s(0)(0)(0)>[&] =3,
		DEST_APP_NOTRESP<s(0)(0)(0)>[&]=4,
		PROTO_ERROR<s(0)(0)(0)>[&]=5,
		OTHER_ERROR<s(0)(0)(0)>[&]=6,
                MS_STATE_UNKNOWN<s(0)(0)(0)>[&]=7,
                DMM_CMND_NULL<s(0)(0)(0)>[&]=8,
                DMM_SRC_INVALID<s(0)(0)(0)>[&]=9,
                DMM_DEST_INVALID<s(0)(0)(0)>[&]= 10,
                DMM_MSG_LEN_ERROR<s(0)(0)(0)>[&]=11,
                DMM_NOT_READY<s(0)(0)(0)>[&]=12,
                DMM_SLOT_TRANSFER_ERROR<s(0)(0)(0)>[&]=13,
                DMM_SYN_INNER_DEST_NCK<s(0)(0)(0)>[&]=14,
                DMM_SYN_NCK_BY_DMM<s(0)(0)(0)>[&] =15,
                DMM_SYN_NCK_BY_APPL<s(0)(0)(0)>[&]=16
}DMM_ERR_CODE_t<s(0)(0)(0)>[&];(D1:DMM_ERR_CODE_t:1)[[TYPENAME:DMM_ERR_CODE_t]]



 void *msg_q_Receive<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
 
 command_tt<s(0)(0)(0)>[T] *DMM_ReadPipe<s(0)(0)(0)>[&](int fd<s(0)(0)(0)>[&]);(D1:fd:0)
 
 command_tt<s(0)(0)(0)>[T] *DMM_ReadQueue<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)


 command_tt<s(0)(0)(0)>[T] *DMM_CreateMsgExt<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&],int length<s(0)(0)(0)>[&]);(D1:length:0)
 
 void DMM_ReleaseMsgExt<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&],command_tt<s(0)(0)(0)>[T] *pCommand<s(0)(0)(0)>[&]);(D1:pCommand:0)




 
 command_tt<s(0)(0)(0)>[T] * DMM_ReadCommandForAppl<s(0)(0)(0)>[&] ();(D1:DMM_ReadCommandForAppl:0)
 int DMM_CreateApplQueue<s(0)(0)(0)>[&](int size<s(0)(0)(0)>[&]);(D1:size:0)
 
 int DMM_CreateQueue<s(0)(0)(0)>[&](int size<s(0)(0)(0)>[&]);(D1:size:0)
 int DMM_ReleaseQueue<s(0)(0)(0)>[&]( int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 
 int DMM_CreateApplPipe<s(0)(0)(0)>[&](int size<s(0)(0)(0)>[&]);(D1:size:0)
 
 int DMM_ReleasePipe<s(0)(0)(0)>[&](int fd<s(0)(0)(0)>[&]);(D1:fd:0)


 DMM_ERR_CODE_t<s(0)(0)(0)>[T] DMM_SendCommand<s(0)(0)(0)>[&] (command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)
 DMM_ERR_CODE_t<s(0)(0)(0)>[T] DMM_SendUnAckedCommand<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)
 DMM_ERR_CODE_t<s(0)(0)(0)>[T] DMM_SendWRes<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&], int retries<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&], command_tt<s(0)(0)(0)>[T] **ppResMsg<s(0)(0)(0)>[&]);(D1:ppResMsg:0)
   DMM_ERR_CODE_t<s(0)(0)(0)>[T] DMM_SendSynAck<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T]  *pInCmd<s(0)(0)(0)>[&],command_tt<s(0)(0)(0)>[T] *pAckCmd<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bRecvSucc<s(0)(0)(0)>[&]);(D1:bRecvSucc:0)
 DMM_ERR_CODE_t<s(0)(0)(0)>[T] DMM_SendBcCmd<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] *pCommand<s(0)(0)(0)>[&]);(D1:pCommand:0)
 command_tt<s(0)(0)(0)>[T] * DMM_Recv<s(0)(0)(0)>[&] (int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
 command_tt<s(0)(0)(0)>[T] * DMM_ReadCommandForAppl<s(0)(0)(0)>[&] ();(D1:DMM_ReadCommandForAppl:0)
 int  DMM_GetPhysicalSlot<s(0)(0)(0)>[&](int iLogicSlot<s(0)(0)(0)>[&]);(D1:iLogicSlot:0)
 int   DMM_GetLogicalSlot<s(0)(0)(0)>[&](int iPhysicalSlot<s(0)(0)(0)>[&]);(D1:iPhysicalSlot:0)
 int DMM_GetMatePSlot<s(0)(0)(0)>[&](void );(D1:DMM_GetMatePSlot:0)
DMM_ERR_CODE_t<s(0)(0)(0)>[T] DmmGetLinkState<s(0)(0)(0)>[&](unsigned short wDestPslot<s(0)(0)(0)>[&]);(D1:wDestPslot:0)


 
 int DMM_GetMatePSlot<s(0)(0)(0)>[&](void );(D1:DMM_GetMatePSlot:0)

 int DMM_GetLocalPSlot<s(0)(0)(0)>[&](void );(D1:DMM_GetLocalPSlot:0)
 int DMM_GetLocalLSlot<s(0)(0)(0)>[&](void );(D1:DMM_GetLocalLSlot:0)
BOOL<s(0)(0)(0)>[T] DMM_SetSpcMsMap<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T]  wActivePSlot<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bStdbyIsOnline<s(0)(0)(0)>[&]);(D1:bStdbyIsOnline:0)
BOOL<s(0)(0)(0)>[T] DMM_GetPSlotOnLine<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] wPSlotNo<s(0)(0)(0)>[&]);(D1:wPSlotNo:0)
BOOL<s(0)(0)(0)>[T] DMM_GetLSlotOnLine<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] wLSlotNo<s(0)(0)(0)>[&]);(D1:wLSlotNo:0)

int DMM_CreateSpcApplQ<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] dwHighQSize<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] dwLowQSize<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] dwExtQSize<s(0)(0)(0)>[&]);(D1:dwExtQSize:0)
UINT32<s(0)(0)(0)>[T] DMM_GetMsgType<s(0)(0)(0)>[&](const command_tt<s(0)(0)(0)>[T] *pCommand<s(0)(0)(0)>[&]);(D1:pCommand:0)

void  DMM_SetCmdUrgent<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] *pCommand<s(0)(0)(0)>[&]);(D1:pCommand:0)
BOOL<s(0)(0)(0)>[T] DMM_IsSmartCard<s(0)(0)(0)>[&](int PhySlot<s(0)(0)(0)>[&]);(D1:PhySlot:0)


BOOL<s(0)(0)(0)>[T] msTimer_Start<s(0)(0)(0)>[&](auxClockHookFunc_t<s(0)(0)(0)>[T] FuncPtr<s(0)(0)(0)>[&],int user_para<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] MsLen<s(0)(0)(0)>[&]);(D1:MsLen:0)
BOOL<s(0)(0)(0)>[T] taskDelayMs<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] DelayLen<s(0)(0)(0)>[&]);(D1:DelayLen:0)



 

extern FILE<s(0)(0)(0)>[T] *NfsOpenFile<s(0)(0)(0)>[&](const char *pFileName<s(0)(0)(0)>[&], const char *pMode<s(0)(0)(0)>[&]);(D1:pMode:0)
extern STATUS<s(0)(0)(0)>[T] NfsRemoveFile<s(0)(0)(0)>[&](const char *pFileName<s(0)(0)(0)>[&]);(D1:pFileName:0)
extern STATUS<s(0)(0)(0)>[T] NfsCreatePath<s(0)(0)(0)>[&](const char *pDirName<s(0)(0)(0)>[&]);(D1:pDirName:0)
extern STATUS<s(0)(0)(0)>[T] NfsDelPath<s(0)(0)(0)>[&](const char *pDirName<s(0)(0)(0)>[&]);(D1:pDirName:0)
extern DIR<s(0)(0)(0)>[T] *NfsOpenDir<s(0)(0)(0)>[&](const char *pDirName<s(0)(0)(0)>[&]);(D1:pDirName:0)

 



extern int RFileWrite<s(0)(0)(0)>[&](char *pFileName<s(0)(0)(0)>[&],char *pMem<s(0)(0)(0)>[&],int WriteLen<s(0)(0)(0)>[&],int WriteMode<s(0)(0)(0)>[&]);(D1:WriteMode:0)
extern int RFileRead<s(0)(0)(0)>[&](char *pFileName<s(0)(0)(0)>[&],char *pMem<s(0)(0)(0)>[&],int ReadLen<s(0)(0)(0)>[&]);(D1:ReadLen:0)



 
 int tmd_SendQueueCmnd<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&], command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)
 
 int tmd_SendPipeCmnd<s(0)(0)(0)>[&](int fd<s(0)(0)(0)>[&], command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)

 
 int tmd_IsrSendQueueCmnd<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&], command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)
 
 int tmd_IsrSendCommand<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] *command<s(0)(0)(0)>[&]);(D1:command:0)
 STATUS<s(0)(0)(0)>[T] tmd_PipeDrv<s(0)(0)(0)>[&] (void);(D1:tmd_PipeDrv:0)

 BOOL<s(0)(0)(0)>[T] tmd_RemapSlot<s(0)(0)(0)>[&](int LSlotIndex<s(0)(0)(0)>[&],int PSlotIndex<s(0)(0)(0)>[&]);(D1:PSlotIndex:0)
 int tmd_StackCheck<s(0)(0)(0)>[&](int taskNum<s(0)(0)(0)>[&]);(D1:taskNum:0)
 int tmd_GetQueueSize<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetNumLowCmnds<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetNumHiCmnds<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetMaxLowCmnds<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetMaxHiCmnds<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetNumRxMsgs<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)

 int tmd_GetNumLowCmnds<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_ClrQueueDbg<s(0)(0)(0)>[&](int qid<s(0)(0)(0)>[&]);(D1:qid:0)
 int tmd_GetSlotMac<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&], char *mac<s(0)(0)(0)>[&]);(D1:mac:0)

 STATUS<s(0)(0)(0)>[T] tmd_RemapProxeeSlot<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&], int proxy<s(0)(0)(0)>[&]);(D1:proxy:0)

 int tmd_MsgSlotCheck<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)


extern int tmd_GetSlotIfName<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&], char *name_buffer<s(0)(0)(0)>[&]);(D1:name_buffer:0)
extern int tmd_GetSlotTxMsgNum<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)
extern int tmd_GetSlotRxMsgNum<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)

 int tmd_GetSlotIfName<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&], char *name_buffer<s(0)(0)(0)>[&]);(D1:name_buffer:0)
 int tmd_GetSlotTxMsgNum<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)
 int tmd_GetSlotRxMsgNum<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)

 void tmd_ResetSlotMsgCnts<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)


 int Zip<s(0)(0)(0)>[&](char* pstSrcName<s(0)(0)(0)>[&], char* pszArchFileName<s(0)(0)(0)>[&]);(D1:pszArchFileName:0)
 int Zip_PSM<s(0)(0)(0)>[&](char* pstSrcName<s(0)(0)(0)>[&], char* pszArchFileName<s(0)(0)(0)>[&]);(D1:pszArchFileName:0)
 int unZip<s(0)(0)(0)>[&](char* pstSrcName<s(0)(0)(0)>[&], char* pszArchFileName<s(0)(0)(0)>[&]);(D1:pszArchFileName:0)
 int Zip_Buffer<s(0)(0)(0)>[&](char* bufferData<s(0)(0)(0)>[&], unsigned int bufferLen<s(0)(0)(0)>[&], char* pszArchFileName<s(0)(0)(0)>[&]);(D1:pszArchFileName:0)





 


    void SetUseEther<s(0)(0)(0)>[&](int i<s(0)(0)(0)>[&]);(D1:i:0)

    void *tmd_CreatePrivateArea<s(0)(0)(0)>[&](unsigned int size<s(0)(0)(0)>[&]);(D1:size:0)
    int tmd_EnablePrivateArea<s(0)(0)(0)>[&](unsigned int appl<s(0)(0)(0)>[&]);(D1:appl:0)
    int tmd_DisablePrivateArea<s(0)(0)(0)>[&](unsigned int appl<s(0)(0)(0)>[&]);(D1:appl:0)    
    
 
 
 
    void initializeMirroringServices<s(0)(0)(0)>[&](void);(D1:initializeMirroringServices:0)

 
    STATUS<s(0)(0)(0)>[T] isMemLocMirrored<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&]);(D1:address:0)
    STATUS<s(0)(0)(0)>[T] registerMirroredMemLoc<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&], short numbytes<s(0)(0)(0)>[&], unsigned short initialValue<s(0)(0)(0)>[&]);(D1:initialValue:0)
    STATUS<s(0)(0)(0)>[T] setMemLoc_16bit<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&], short accessType<s(0)(0)(0)>[&], unsigned short bitMask<s(0)(0)(0)>[&], unsigned short bitPattern<s(0)(0)(0)>[&]);(D1:bitPattern:0)
    STATUS<s(0)(0)(0)>[T] setMemLoc_16bit_Isr<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&], short accessType<s(0)(0)(0)>[&], unsigned short bitMask<s(0)(0)(0)>[&], unsigned short bitPattern<s(0)(0)(0)>[&]);(D1:bitPattern:0)
    unsigned short getMemLoc_16bit<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&]);(D1:address:0)
    unsigned short getMemLoc_16bit_Isr<s(0)(0)(0)>[&](void *address<s(0)(0)(0)>[&]);(D1:address:0)

 
    STATUS<s(0)(0)(0)>[T] is_I2C_Register_Shared<s(0)(0)(0)>[&](int address<s(0)(0)(0)>[&]);(D1:address:0)
    STATUS<s(0)(0)(0)>[T] register_Shared_16bit_I2C_Register<s(0)(0)(0)>[&](int address<s(0)(0)(0)>[&], unsigned short initialValue<s(0)(0)(0)>[&], char setInitValNow<s(0)(0)(0)>[&]);(D1:setInitValNow:0)
    STATUS<s(0)(0)(0)>[T] set_shared_16bit_I2C_register<s(0)(0)(0)>[&](int address<s(0)(0)(0)>[&], short accessType<s(0)(0)(0)>[&], unsigned short bitMask<s(0)(0)(0)>[&],
                                         unsigned short bitPattern<s(0)(0)(0)>[&]);(D1:bitPattern:0)
    int get_shared_16bit_I2C_register<s(0)(0)(0)>[&](int address<s(0)(0)(0)>[&], unsigned short *data<s(0)(0)(0)>[&]);(D1:data:0)

void AMM_SlotWdgTimeoutProc<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)
    
 


 


    void registerDynamicDumps<s(0)(0)(0)>[&](void *area<s(0)(0)(0)>[&], int len<s(0)(0)(0)>[&], char *name<s(0)(0)(0)>[&]);(D1:name:0)

    void tmd_prepare_card_for_impending_shutdown<s(0)(0)(0)>[&](void);(D1:tmd_prepare_card_for_impending_shutdown:0)













unsigned int  CRC32<s(0)(0)(0)>[&](unsigned int crc<s(0)(0)(0)>[&], const unsigned char *buf<s(0)(0)(0)>[&], unsigned int len<s(0)(0)(0)>[&]);(D1:len:0)












 

 

 





































































































































 

 

 
































 

 

 




























 

typedef struct q_class<s(1)(0)(1)>[&]		 
    {
    FUNCPTR<s(1)(1)(0)>[T] createRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] initRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] deleteRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] terminateRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T] putRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] getRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] removeRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] resortRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] advanceRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] getExpiredRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T] keyRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] calibrateRtn<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T] infoRtn<s(1)(1)(0)>[&];		 
    FUNCPTR<s(1)(1)(0)>[T] eachRtn<s(1)(1)(0)>[&];		 
    struct q_class<s(2)(1)(1)>[&] *valid<s(1)(1)(0)>[&];	 
    } Q_CLASS<s(0)(0)(0)>[&];(D1:Q_CLASS:1)[[TYPENAME:Q_CLASS]]

typedef Q_CLASS<s(0)(0)(0)>[T] *Q_CLASS_ID<s(0)(0)(0)>[&];(D1:Q_CLASS_ID:1)[[TYPENAME:Q_CLASS_ID]]	 

 

 




























 





 

extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qFifoClassId<s(0)(0)(0)>[&];(D1:qFifoClassId:0)
extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qPriListClassId<s(0)(0)(0)>[&];(D1:qPriListClassId:0)
extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qPriListFromTailClassId<s(0)(0)(0)>[&];(D1:qPriListFromTailClassId:0)
extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qPriDeltaClassId<s(0)(0)(0)>[&];(D1:qPriDeltaClassId:0)
extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qPriHeapClassId<s(0)(0)(0)>[&];(D1:qPriHeapClassId:0)
extern  Q_CLASS_ID<s(0)(0)(0)>[T]		qPriBMapClassId<s(0)(0)(0)>[&];(D1:qPriBMapClassId:0)

 








 

 








typedef struct		 
    {
    UINT<s(1)(1)(0)>[T]     qPriv1<s(1)(1)(0)>[&];			 
    UINT<s(1)(1)(0)>[T]     qPriv2<s(1)(1)(0)>[&];			 
    UINT<s(1)(1)(0)>[T]     qPriv3<s(1)(1)(0)>[&];			 
    UINT<s(1)(1)(0)>[T]     qPriv4<s(1)(1)(0)>[&];			 
    } Q_NODE<s(0)(0)(0)>[&];(D1:Q_NODE:1)[[TYPENAME:Q_NODE]]


 








typedef struct		 
    {
    Q_NODE<s(1)(1)(0)>[T]  *pFirstNode<s(1)(1)(0)>[&];		 
    UINT<s(1)(1)(0)>[T]     qPriv1<s(1)(1)(0)>[&];			 
    UINT<s(1)(1)(0)>[T]     qPriv2<s(1)(1)(0)>[&];			 
    Q_CLASS<s(1)(1)(0)>[T] *pQClass<s(1)(1)(0)>[&];			 
    } Q_HEAD<s(0)(0)(0)>[&];(D1:Q_HEAD:1)[[TYPENAME:Q_HEAD]]





 


 
















 













 

















 












 













 














 




















 
















 













 



















 

























extern Q_HEAD<s(0)(0)(0)>[T] *	qCreate<s(0)(0)(0)>[&] (Q_CLASS<s(0)(0)(0)>[T] *pQClass<s(0)(0)(0)>[&], ...);(D1:pQClass:0)
extern Q_NODE<s(0)(0)(0)>[T] *	qEach<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] routine<s(0)(0)(0)>[&], int routineArg<s(0)(0)(0)>[&]);(D1:routineArg:0)
extern Q_NODE<s(0)(0)(0)>[T] *	qFirst<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern Q_NODE<s(0)(0)(0)>[T] *	qGet<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern Q_NODE<s(0)(0)(0)>[T] *	qGetExpired<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern STATUS<s(0)(0)(0)>[T] 	qDelete<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern STATUS<s(0)(0)(0)>[T] 	qInit<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_CLASS<s(0)(0)(0)>[T] *pQClass<s(0)(0)(0)>[&], ...);(D1:pQClass:0)
extern STATUS<s(0)(0)(0)>[T] 	qTerminate<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern ULONG<s(0)(0)(0)>[T] 	qKey<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_NODE<s(0)(0)(0)>[T] *pQNode<s(0)(0)(0)>[&], int keyType<s(0)(0)(0)>[&]);(D1:keyType:0)
extern int 	qInfo<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_NODE<s(0)(0)(0)>[T] *nodeArray<s(0)(0)(0)>[&] [ ], int maxNodes<s(0)(0)(0)>[&]);(D1:maxNodes:0)
extern void 	qAdvance<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&]);(D1:pQHead:0)
extern void 	qCalibrate<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], ULONG<s(0)(0)(0)>[T] keyDelta<s(0)(0)(0)>[&]);(D1:keyDelta:0)
extern void 	qPut<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_NODE<s(0)(0)(0)>[T] *pQNode<s(0)(0)(0)>[&], ULONG<s(0)(0)(0)>[T] key<s(0)(0)(0)>[&]);(D1:key:0)
extern STATUS<s(0)(0)(0)>[T] 	qRemove<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_NODE<s(0)(0)(0)>[T] *pQNode<s(0)(0)(0)>[&]);(D1:pQNode:0)
extern void 	qResort<s(0)(0)(0)>[&] (Q_HEAD<s(0)(0)(0)>[T] *pQHead<s(0)(0)(0)>[&], Q_NODE<s(0)(0)(0)>[T] *pQNode<s(0)(0)(0)>[&], ULONG<s(0)(0)(0)>[T] newKey<s(0)(0)(0)>[&]);(D1:newKey:0)











 

 

 




























































 

 
 





















typedef struct		 
    {
    _RType<s(1)(1)(0)>[T] gpr<s(1)(1)(0)>[&][32 ];	 
    _RType<s(1)(1)(0)>[T] msr<s(1)(1)(0)>[&];			 
    _RType<s(1)(1)(0)>[T] lr<s(1)(1)(0)>[&];			 
    _RType<s(1)(1)(0)>[T] ctr<s(1)(1)(0)>[&];			 
    _RType<s(1)(1)(0)>[T] pc<s(1)(1)(0)>[&];			 
    UINT32<s(1)(1)(0)>[T] cr<s(1)(1)(0)>[&];			 
    UINT32<s(1)(1)(0)>[T] xer<s(1)(1)(0)>[&];			 





    UINT32<s(1)(1)(0)>[T] pad<s(1)(1)(0)>[&];			 

    } REG_SET<s(0)(0)(0)>[&];(D1:REG_SET:1)[[TYPENAME:REG_SET]]

 


































































































































































typedef struct regindex<s(1)(0)(1)>[&]
    {
    char	*regName<s(1)(1)(0)>[&];	 
    int		regOff<s(1)(1)(0)>[&];		 







    } REG_INDEX<s(0)(0)(0)>[&];(D1:REG_INDEX:1)[[TYPENAME:REG_INDEX]]








 

 

 






































































 

 

 


































 



























typedef struct
    {
    UINT32<s(1)(1)(0)>[T]	valid<s(1)(1)(0)>[&];		 

    UINT32<s(1)(1)(0)>[T]	vecOff<s(1)(1)(0)>[&];		 
    _RType<s(1)(1)(0)>[T]	cia<s(1)(1)(0)>[&];		 

    _RType<s(1)(1)(0)>[T]	msr<s(1)(1)(0)>[&];		 




    _RType<s(1)(1)(0)>[T]	dar<s(1)(1)(0)>[&];		 


    UINT32<s(1)(1)(0)>[T]      cr<s(1)(1)(0)>[&];		 
    UINT32<s(1)(1)(0)>[T]	xer<s(1)(1)(0)>[&];		 


    UINT32<s(1)(1)(0)>[T]	fpcsr<s(1)(1)(0)>[&];		 
    UINT32<s(1)(1)(0)>[T]	dsisr<s(1)(1)(0)>[&];		 



    } EXC_INFO<s(0)(0)(0)>[&];(D1:EXC_INFO:1)[[TYPENAME:EXC_INFO]]











 


















						 






























 











 

extern FUNCPTR<s(0)(0)(0)>[T]  excExcepHook<s(0)(0)(0)>[&];(D1:excExcepHook:0)    

 



extern STATUS<s(0)(0)(0)>[T]		excConnect<s(0)(0)(0)>[&] (VOIDFUNCPTR<s(0)(0)(0)>[T] *, VOIDFUNCPTR<s(0)(0)(0)>[T]);(D1:VOIDFUNCPTR:0)
extern STATUS<s(0)(0)(0)>[T]  		excIntConnect<s(0)(0)(0)>[&] (VOIDFUNCPTR<s(0)(0)(0)>[T] *, VOIDFUNCPTR<s(0)(0)(0)>[T]);(D1:VOIDFUNCPTR:0)
extern void		excVecSet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *, FUNCPTR<s(0)(0)(0)>[T]);(D1:FUNCPTR:0)
extern FUNCPTR<s(0)(0)(0)>[T]		excVecGet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *);(D1:FUNCPTR:0)
extern void		excVecBaseSet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *);(D1:FUNCPTR:0)
extern FUNCPTR<s(0)(0)(0)>[T] *	excVecBaseGet<s(0)(0)(0)>[&] (void);(D1:excVecBaseGet:0)






























































typedef struct  excfaultTab<s(1)(0)(1)>[&]
    {
    int faultType<s(1)(1)(0)>[&];		 
    int subtype<s(1)(1)(0)>[&];		 
    int signal<s(1)(1)(0)>[&];			 
    int code<s(1)(1)(0)>[&];			 
    } EXC_FAULT_TAB<s(0)(0)(0)>[&];(D1:EXC_FAULT_TAB:1)[[TYPENAME:EXC_FAULT_TAB]]

 


extern STATUS<s(0)(0)(0)>[T] 	excShowInit<s(0)(0)(0)>[&] (void);(D1:excShowInit:0)
extern void 	excHookAdd<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] excepHook<s(0)(0)(0)>[&]);(D1:excepHook:0)
extern STATUS<s(0)(0)(0)>[T] 	excJobAdd<s(0)(0)(0)>[&] (VOIDFUNCPTR<s(0)(0)(0)>[T] func<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&], int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&],
			   int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int arg6<s(0)(0)(0)>[&]);(D1:arg6:0)















 

 

 


















































































 

 







 





































 



typedef unsigned short event_t<s(0)(0)(0)>[&];(D1:event_t:1)[[TYPENAME:event_t]]



 

 

 

























































 

extern FUNCPTR<s(0)(0)(0)>[T]     _func_ioTaskStdSet<s(0)(0)(0)>[&];(D1:_func_ioTaskStdSet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_bdall<s(0)(0)(0)>[&];(D1:_func_bdall:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_dspTaskRegsShow<s(0)(0)(0)>[&];(D1:_func_dspTaskRegsShow:0)
extern  VOIDFUNCPTR<s(0)(0)(0)>[T] _func_dspRegsListHook<s(0)(0)(0)>[&];(D1:_func_dspRegsListHook:0)	 
extern  FUNCPTR<s(0)(0)(0)>[T]	   _func_dspMregsHook<s(0)(0)(0)>[&];(D1:_func_dspMregsHook:0)		 
extern FUNCPTR<s(0)(0)(0)>[T]     _func_excBaseHook<s(0)(0)(0)>[&];(D1:_func_excBaseHook:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_excInfoShow<s(0)(0)(0)>[&];(D1:_func_excInfoShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_excIntHook<s(0)(0)(0)>[&];(D1:_func_excIntHook:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_excJobAdd<s(0)(0)(0)>[&];(D1:_func_excJobAdd:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_excPanicHook<s(0)(0)(0)>[&];(D1:_func_excPanicHook:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_fastUdpErrorNotify<s(0)(0)(0)>[&];(D1:_func_fastUdpErrorNotify:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_fastUdpInput<s(0)(0)(0)>[&];(D1:_func_fastUdpInput:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_fastUdpPortTest<s(0)(0)(0)>[&];(D1:_func_fastUdpPortTest:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_fclose<s(0)(0)(0)>[&];(D1:_func_fclose:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_fppTaskRegsShow<s(0)(0)(0)>[&];(D1:_func_fppTaskRegsShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_altivecProbe<s(0)(0)(0)>[&];(D1:_func_altivecProbe:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_altivecTaskRegsGet<s(0)(0)(0)>[&];(D1:_func_altivecTaskRegsGet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_altivecTaskRegsShow<s(0)(0)(0)>[&];(D1:_func_altivecTaskRegsShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_speTaskRegsShow<s(0)(0)(0)>[&];(D1:_func_speTaskRegsShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_ftpLs<s(0)(0)(0)>[&];(D1:_func_ftpLs:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_netLsByName<s(0)(0)(0)>[&];(D1:_func_netLsByName:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_printErr<s(0)(0)(0)>[&];(D1:_func_printErr:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_logMsg<s(0)(0)(0)>[&];(D1:_func_logMsg:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_memalign<s(0)(0)(0)>[&];(D1:_func_memalign:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_pthread_setcanceltype<s(0)(0)(0)>[&];(D1:_func_pthread_setcanceltype:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selPtyAdd<s(0)(0)(0)>[&];(D1:_func_selPtyAdd:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selPtyDelete<s(0)(0)(0)>[&];(D1:_func_selPtyDelete:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selTyAdd<s(0)(0)(0)>[&];(D1:_func_selTyAdd:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selTyDelete<s(0)(0)(0)>[&];(D1:_func_selTyDelete:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selWakeupAll<s(0)(0)(0)>[&];(D1:_func_selWakeupAll:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selWakeupListInit<s(0)(0)(0)>[&];(D1:_func_selWakeupListInit:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_selWakeupListTerm<s(0)(0)(0)>[&];(D1:_func_selWakeupListTerm:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_sigExcKill<s(0)(0)(0)>[&];(D1:_func_sigExcKill:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_sigprocmask<s(0)(0)(0)>[&];(D1:_func_sigprocmask:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_sigTimeoutRecalc<s(0)(0)(0)>[&];(D1:_func_sigTimeoutRecalc:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_smObjObjShow<s(0)(0)(0)>[&];(D1:_func_smObjObjShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spy<s(0)(0)(0)>[&];(D1:_func_spy:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spyStop<s(0)(0)(0)>[&];(D1:_func_spyStop:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spyClkStart<s(0)(0)(0)>[&];(D1:_func_spyClkStart:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spyClkStop<s(0)(0)(0)>[&];(D1:_func_spyClkStop:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spyReport<s(0)(0)(0)>[&];(D1:_func_spyReport:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_spyTask<s(0)(0)(0)>[&];(D1:_func_spyTask:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_sseTaskRegsShow<s(0)(0)(0)>[&];(D1:_func_sseTaskRegsShow:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symFindByValueAndType<s(0)(0)(0)>[&];(D1:_func_symFindByValueAndType:0)    
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symFindByValue<s(0)(0)(0)>[&];(D1:_func_symFindByValue:0)           
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symFindSymbol<s(0)(0)(0)>[&];(D1:_func_symFindSymbol:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symNameGet<s(0)(0)(0)>[&];(D1:_func_symNameGet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symValueGet<s(0)(0)(0)>[&];(D1:_func_symValueGet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_symTypeGet<s(0)(0)(0)>[&];(D1:_func_symTypeGet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_taskCreateHookAdd<s(0)(0)(0)>[&];(D1:_func_taskCreateHookAdd:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_taskDeleteHookAdd<s(0)(0)(0)>[&];(D1:_func_taskDeleteHookAdd:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_valloc<s(0)(0)(0)>[&];(D1:_func_valloc:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_remCurIdGet<s(0)(0)(0)>[&];(D1:_func_remCurIdGet:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_remCurIdSet<s(0)(0)(0)>[&];(D1:_func_remCurIdSet:0)

extern FUNCPTR<s(0)(0)(0)>[T]	   _dbgDsmInstRtn<s(0)(0)(0)>[&];(D1:_dbgDsmInstRtn:0)


extern BOOL<s(0)(0)(0)>[T]        fastUdpInitialized<s(0)(0)(0)>[&];(D1:fastUdpInitialized:0)


extern BOOL<s(0)(0)(0)>[T]	   ftpErrorSuppress<s(0)(0)(0)>[&];(D1:ftpErrorSuppress:0)
extern BOOL<s(0)(0)(0)>[T]	   _procNumWasSet<s(0)(0)(0)>[&];(D1:_procNumWasSet:0)
extern int	   m2If64BitCounters<s(0)(0)(0)>[&];(D1:m2If64BitCounters:0)

extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogO<s(0)(0)(0)>[&];(D1:_func_evtLogO:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogOIntLock<s(0)(0)(0)>[&];(D1:_func_evtLogOIntLock:0)

extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogM0<s(0)(0)(0)>[&];(D1:_func_evtLogM0:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogM1<s(0)(0)(0)>[&];(D1:_func_evtLogM1:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogM2<s(0)(0)(0)>[&];(D1:_func_evtLogM2:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogM3<s(0)(0)(0)>[&];(D1:_func_evtLogM3:0)

extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogT0<s(0)(0)(0)>[&];(D1:_func_evtLogT0:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogT0_noInt<s(0)(0)(0)>[&];(D1:_func_evtLogT0_noInt:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogT1<s(0)(0)(0)>[&];(D1:_func_evtLogT1:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogT1_noTS<s(0)(0)(0)>[&];(D1:_func_evtLogT1_noTS:0)
extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogTSched<s(0)(0)(0)>[&];(D1:_func_evtLogTSched:0)

extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_evtLogString<s(0)(0)(0)>[&];(D1:_func_evtLogString:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_evtLogPoint<s(0)(0)(0)>[&];(D1:_func_evtLogPoint:0)
extern FUNCPTR<s(0)(0)(0)>[T]	   _func_evtLogReserveTaskName<s(0)(0)(0)>[&];(D1:_func_evtLogReserveTaskName:0)



extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrStamp<s(0)(0)(0)>[&];(D1:_func_tmrStamp:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrStampLock<s(0)(0)(0)>[&];(D1:_func_tmrStampLock:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrFreq<s(0)(0)(0)>[&];(D1:_func_tmrFreq:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrPeriod<s(0)(0)(0)>[&];(D1:_func_tmrPeriod:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrConnect<s(0)(0)(0)>[&];(D1:_func_tmrConnect:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrEnable<s(0)(0)(0)>[&];(D1:_func_tmrEnable:0)
extern FUNCPTR<s(0)(0)(0)>[T]     _func_tmrDisable<s(0)(0)(0)>[&];(D1:_func_tmrDisable:0)

extern VOIDFUNCPTR<s(0)(0)(0)>[T] _func_trgCheck<s(0)(0)(0)>[&];(D1:_func_trgCheck:0)
extern UINT32<s(0)(0)(0)>[T] evtAction<s(0)(0)(0)>[&];(D1:evtAction:0)
extern UINT32<s(0)(0)(0)>[T] wvEvtClass<s(0)(0)(0)>[&];(D1:wvEvtClass:0)
extern UINT32<s(0)(0)(0)>[T] trgEvtClass<s(0)(0)(0)>[&];(D1:trgEvtClass:0)

extern BOOL<s(0)(0)(0)>[T]   wvInstIsOn<s(0)(0)(0)>[&];(D1:wvInstIsOn:0)              
extern BOOL<s(0)(0)(0)>[T]   wvObjIsEnabled<s(0)(0)(0)>[&];(D1:wvObjIsEnabled:0)          




















































 













 

 










 












 
















 

















 


















 













 













 











 

















 
















 










 
















 
















 









 









 









 









 









 









 
















 









 









 









 


























 














































 

 


     





     





     




 


     











     





     





     










     











     






     





      





     

 


     










     







     






     








     






     







     







     







     








     








     









     









     








     








     








     








     






     






     







     






     









     






     









     










     







     






     






     







     





     







     








     







     






     








     






     





     





 


     






     





     





     





     








     







     





     




     





     





     





     





     





     





     





     




     





     





     





     





     





     





     





     





     





     





     





     





     





     





     




     




 


     







     






     







     







     




     





     





     





     





     






     






 




     





     




     























 














	 


















 






























 

 

 





























 

 

 























extern VOIDFUNCPTR<s(0)(0)(0)>[T] eventEvtRtn<s(0)(0)(0)>[&];(D1:eventEvtRtn:0)  

 

typedef struct eventsCb<s(1)(0)(1)>[&]
    {
    UINT32<s(1)(1)(0)>[T] wanted<s(1)(1)(0)>[&];	 
    volatile UINT32<s(1)(1)(0)>[T] received<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]  options<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]  sysflags<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]  pad<s(1)(1)(0)>[&][2];	 
    } EVENTS<s(0)(0)(0)>[&];(D1:EVENTS:1)[[TYPENAME:EVENTS]]		 

 



 



					 


 

typedef struct eventsResourceCb<s(1)(0)(1)>[&]
    {
    UINT32<s(1)(1)(0)>[T] registered<s(1)(1)(0)>[&];	 
    int    taskId<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]  options<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]  pad<s(1)(1)(0)>[&][3];	 
    } EVENTS_RSRC<s(0)(0)(0)>[&];(D1:EVENTS_RSRC:1)[[TYPENAME:EVENTS_RSRC]]	 





 














extern void 	eventLibInit<s(0)(0)(0)>[&]	(void);(D1:eventLibInit:0)
extern void 	eventInit<s(0)(0)(0)>[&]	(EVENTS_RSRC<s(0)(0)(0)>[T] * pEvRsrc<s(0)(0)(0)>[&]);(D1:pEvRsrc:0)
extern void 	eventTerminate<s(0)(0)(0)>[&] 	(const EVENTS_RSRC<s(0)(0)(0)>[T] * pEvRsrc<s(0)(0)(0)>[&]);(D1:pEvRsrc:0)
extern void 	semEvLibInit<s(0)(0)(0)>[&]	(void);(D1:semEvLibInit:0)
extern void 	msgQEvLibInit<s(0)(0)(0)>[&]	(void);(D1:msgQEvLibInit:0)
extern STATUS<s(0)(0)(0)>[T] 	eventStart<s(0)(0)(0)>[&]	(OBJ_ID<s(0)(0)(0)>[T] objId<s(0)(0)(0)>[&], EVENTS_RSRC<s(0)(0)(0)>[T] * pEvRsrc<s(0)(0)(0)>[&],
				 FUNCPTR<s(0)(0)(0)>[T] isRsrcFree<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] events<s(0)(0)(0)>[&],
				 UINT8<s(0)(0)(0)>[T] options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T]	eventRsrcSend<s(0)(0)(0)>[&]	(int taskId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] events<s(0)(0)(0)>[&]);(D1:events:0)
extern STATUS<s(0)(0)(0)>[T]	eventRsrcShow<s(0)(0)(0)>[&]	(EVENTS_RSRC<s(0)(0)(0)>[T] * pEvRsrc<s(0)(0)(0)>[&]);(D1:pEvRsrc:0)
extern STATUS<s(0)(0)(0)>[T]   eventTaskShow<s(0)(0)(0)>[&]	(EVENTS<s(0)(0)(0)>[T]	* pEvents<s(0)(0)(0)>[&]);(D1:pEvents:0)























 













typedef struct semaphore<s(1)(0)(1)>[&]  
    {
    OBJ_CORE<s(1)(1)(0)>[T]	objCore<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]	semType<s(1)(1)(0)>[&];	 
    UINT8<s(1)(1)(0)>[T]	options<s(1)(1)(0)>[&];	 
    UINT16<s(1)(1)(0)>[T]	recurse<s(1)(1)(0)>[&];	 
    Q_HEAD<s(1)(1)(0)>[T]	qHead<s(1)(1)(0)>[&];		 
    union
	{
	UINT<s(2)(1)(0)>[T]		 count<s(2)(1)(0)>[&];	 
	struct windTcb<s(3)(1)(1)>[&]	*owner<s(2)(1)(0)>[&];	 
	} state<s(1)(0)(0)>[&];
    EVENTS_RSRC<s(1)(0)(0)>[T]	events<s(1)(0)(0)>[&];		 

    } SEMAPHORE<s(0)(0)(0)>[&];(D1:SEMAPHORE:1)[[TYPENAME:SEMAPHORE]]




 












 
















 

extern OBJ_CLASS<s(0)(0)(0)>[T]	semClass<s(0)(0)(0)>[&];(D1:semClass:0)		 
extern OBJ_CLASS<s(0)(0)(0)>[T]	semInstClass<s(0)(0)(0)>[&];(D1:semInstClass:0)		 
extern CLASS_ID<s(0)(0)(0)>[T]		semClassId<s(0)(0)(0)>[&];(D1:semClassId:0)		 
extern CLASS_ID<s(0)(0)(0)>[T]		semInstClassId<s(0)(0)(0)>[&];(D1:semInstClassId:0)		 
extern FUNCPTR<s(0)(0)(0)>[T]		semGiveTbl<s(0)(0)(0)>[&] [];(D1:semGiveTbl:0)		 
extern FUNCPTR<s(0)(0)(0)>[T]		semTakeTbl<s(0)(0)(0)>[&] [];(D1:semTakeTbl:0)		 
extern FUNCPTR<s(0)(0)(0)>[T]		semFlushTbl<s(0)(0)(0)>[&] [];(D1:semFlushTbl:0)		 
extern FUNCPTR<s(0)(0)(0)>[T]		semGiveDeferTbl<s(0)(0)(0)>[&] [];(D1:semGiveDeferTbl:0)	 
extern FUNCPTR<s(0)(0)(0)>[T]		semFlushDeferTbl<s(0)(0)(0)>[&] [];(D1:semFlushDeferTbl:0)	 
extern int		semMGiveKernWork<s(0)(0)(0)>[&];(D1:semMGiveKernWork:0)	 

extern FUNCPTR<s(0)(0)(0)>[T]  semSmShowRtn<s(0)(0)(0)>[&];(D1:semSmShowRtn:0)	 
extern FUNCPTR<s(0)(0)(0)>[T]  semSmInfoRtn<s(0)(0)(0)>[&];(D1:semSmInfoRtn:0)	 

 



extern STATUS<s(0)(0)(0)>[T]	semLibInit<s(0)(0)(0)>[&] (void);(D1:semLibInit:0)
extern STATUS<s(0)(0)(0)>[T]	semTerminate<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semDestroy<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] dealloc<s(0)(0)(0)>[&]);(D1:dealloc:0)
extern STATUS<s(0)(0)(0)>[T]	semGiveDefer<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semFlushDefer<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semInvalid<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semIntRestrict<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semQInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSemaphore<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T]	semQFlush<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern void	semQFlushDefer<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semBInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSem<s(0)(0)(0)>[&],int options<s(0)(0)(0)>[&],SEM_B_STATE<s(0)(0)(0)>[T] initialState<s(0)(0)(0)>[&]);(D1:initialState:0)
extern STATUS<s(0)(0)(0)>[T]	semBCoreInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSemaphore<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&],
			      SEM_B_STATE<s(0)(0)(0)>[T] initialState<s(0)(0)(0)>[&]);(D1:initialState:0)
extern STATUS<s(0)(0)(0)>[T]	semBGive<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semBTake<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern void	semBGiveDefer<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semMInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSem<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T]	semMCoreInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSemaphore<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&]);(D1:options:0)
extern STATUS<s(0)(0)(0)>[T]	semMGive<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semMTake<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern STATUS<s(0)(0)(0)>[T]	semMGiveKern<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semMPendQPut<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern STATUS<s(0)(0)(0)>[T]	semCInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSem<s(0)(0)(0)>[&],int options<s(0)(0)(0)>[&],int initialCount<s(0)(0)(0)>[&]);(D1:initialCount:0)
extern STATUS<s(0)(0)(0)>[T]	semCCoreInit<s(0)(0)(0)>[&] (SEMAPHORE<s(0)(0)(0)>[T] *pSemaphore<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&],
			      int initialCount<s(0)(0)(0)>[&]);(D1:initialCount:0)
extern STATUS<s(0)(0)(0)>[T]	semCGive<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semCTake<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&], int timeout<s(0)(0)(0)>[&]);(D1:timeout:0)
extern void	semCGiveDefer<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern STATUS<s(0)(0)(0)>[T]	semOTake<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)


















 

 

 


















































 















typedef struct { int quot<s(1)(1)(0)>[&]; int rem<s(1)(1)(0)>[&]; } div_t<s(0)(0)(0)>[&] ;(D1:div_t:1)[[TYPENAME:div_t]]




typedef struct { long quot<s(1)(1)(0)>[&]; long rem<s(1)(1)(0)>[&]; } ldiv_t<s(0)(0)(0)>[&] ;(D1:ldiv_t:1)[[TYPENAME:ldiv_t]]



typedef struct {		 
	unsigned char __state<s(1)(1)(0)>[&];
	unsigned short __wchar<s(1)(1)(0)>[&];
	} _Mbsave<s(0)(0)(0)>[&];(D1:_Mbsave:1)[[TYPENAME:_Mbsave]]



extern void	abort<s(0)(0)(0)>[&] (void);(D1:abort:0)
extern int	abs<s(0)(0)(0)>[&] (int __i<s(0)(0)(0)>[&]);(D1:__i:0)
extern int	atexit<s(0)(0)(0)>[&] (void (*__func<s(0)(0)(0)>[&])(void));(D1:__func:0)
extern double	atof<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&]);(D1:__s:0)
extern int	atoi<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&]);(D1:__s:0)
extern long	atol<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&]);(D1:__s:0)
extern void *	bsearch<s(0)(0)(0)>[&] (const void *__key<s(0)(0)(0)>[&], const void *__base<s(0)(0)(0)>[&],
		         size_t<s(0)(0)(0)>[T] __nelem<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __size<s(0)(0)(0)>[&],
		         int  (*__cmp<s(0)(0)(0)>[&])(const void *__ck<s(0)(0)(0)>[&], const void *__ce<s(0)(0)(0)>[&]));(D1:__ce:0)
extern div_t<s(0)(0)(0)>[T]	div<s(0)(0)(0)>[&] (int __numer<s(0)(0)(0)>[&], int __denom<s(0)(0)(0)>[&]);(D1:__denom:0)
extern long	labs<s(0)(0)(0)>[&] (long __i<s(0)(0)(0)>[&]);(D1:__i:0)
extern ldiv_t<s(0)(0)(0)>[T]	ldiv<s(0)(0)(0)>[&] (long __numer<s(0)(0)(0)>[&], long __denom<s(0)(0)(0)>[&]);(D1:__denom:0)
extern int	mblen<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern size_t<s(0)(0)(0)>[T]	mbstowcs<s(0)(0)(0)>[&] (wchar_t<s(0)(0)(0)>[T] *__wcs<s(0)(0)(0)>[&], const char *__s<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern int	mbtowc<s(0)(0)(0)>[&] (wchar_t<s(0)(0)(0)>[T] *__pwc<s(0)(0)(0)>[&], const char *__s<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern void	qsort<s(0)(0)(0)>[&] (void *__base<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __nelem<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __size<s(0)(0)(0)>[&],
		       int  (*__cmp<s(0)(0)(0)>[&])(const void *__e1<s(0)(0)(0)>[&], const void *__e2<s(0)(0)(0)>[&]));(D1:__e2:0)
extern int	rand<s(0)(0)(0)>[&] (void);(D1:rand:0)
extern void *	srand<s(0)(0)(0)>[&] (unsigned int __seed<s(0)(0)(0)>[&]);(D1:__seed:0)
extern double	strtod<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], char **__endptr<s(0)(0)(0)>[&]);(D1:__endptr:0)
extern long	strtol<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], char **__endptr<s(0)(0)(0)>[&], int __base<s(0)(0)(0)>[&]);(D1:__base:0)
extern unsigned long strtoul<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], char **__endptr<s(0)(0)(0)>[&], int __base<s(0)(0)(0)>[&]);(D1:__base:0)
extern int	system<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&]);(D1:__s:0)
extern size_t<s(0)(0)(0)>[T]	wcstombs<s(0)(0)(0)>[&] (char *__s<s(0)(0)(0)>[&], const wchar_t<s(0)(0)(0)>[T] *__wcs<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern int	wctomb<s(0)(0)(0)>[&] (char *__s<s(0)(0)(0)>[&], wchar_t<s(0)(0)(0)>[T] __wchar<s(0)(0)(0)>[&]);(D1:__wchar:0)

extern void *	calloc<s(0)(0)(0)>[&] (size_t<s(0)(0)(0)>[T] __nelem<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __size<s(0)(0)(0)>[&]);(D1:__size:0)
extern void	exit<s(0)(0)(0)>[&] (int __status<s(0)(0)(0)>[&]);(D1:__status:0)
extern void	free<s(0)(0)(0)>[&] (void *__ptr<s(0)(0)(0)>[&]);(D1:__ptr:0)
extern char *	getenv<s(0)(0)(0)>[&] (const char *__name<s(0)(0)(0)>[&]);(D1:__name:0)
extern void *	malloc<s(0)(0)(0)>[&] (size_t<s(0)(0)(0)>[T] __size<s(0)(0)(0)>[&]);(D1:__size:0)
extern void *	realloc<s(0)(0)(0)>[&] (void *__ptr<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __size<s(0)(0)(0)>[&]);(D1:__size:0)



extern void     div_r<s(0)(0)(0)>[&] (int numer<s(0)(0)(0)>[&], int denom<s(0)(0)(0)>[&], div_t<s(0)(0)(0)>[T] * divStructPtr<s(0)(0)(0)>[&]);(D1:divStructPtr:0)
extern void     ldiv_r<s(0)(0)(0)>[&] (long numer<s(0)(0)(0)>[&], long denom<s(0)(0)(0)>[&], ldiv_t<s(0)(0)(0)>[T] * divStructPtr<s(0)(0)(0)>[&]);(D1:divStructPtr:0)















 












 







 



















 







typedef struct wdb_info<s(1)(0)(1)>[&]		 
    {
    int			wdbState<s(1)(1)(0)>[&];	 
    REG_SET<s(1)(1)(0)>[T] *		wdbRegisters<s(1)(1)(0)>[&];	 
    struct
        {
	void *	wdb1<s(2)(1)(0)>[&];
	void *	wdb2<s(2)(1)(0)>[&];
	} wdbEvtList<s(1)(0)(0)>[&];			 
    int			bpAddr<s(1)(0)(0)>[&];		 
					 
    int			taskBpAddr<s(1)(0)(0)>[&];	 
    int			taskPc<s(1)(0)(0)>[&];		 
    int			taskFp<s(1)(0)(0)>[&];		 
    int			taskSp<s(1)(0)(0)>[&];		 
    VOIDFUNCPTR<s(1)(0)(0)>[T]		wdbExitHook<s(1)(0)(0)>[&];	 
  } WDB_INFO<s(0)(0)(0)>[&];(D1:WDB_INFO:1)[[TYPENAME:WDB_INFO]]

typedef struct windTcb<s(1)(0)(1)>[&]		 
    {
    Q_NODE<s(1)(1)(0)>[T]		qNode<s(1)(1)(0)>[&];		 
    Q_NODE<s(1)(1)(0)>[T]		tickNode<s(1)(1)(0)>[&];	 
    Q_NODE<s(1)(1)(0)>[T]		activeNode<s(1)(1)(0)>[&];	 

    OBJ_CORE<s(1)(1)(0)>[T]		objCore<s(1)(1)(0)>[&];	 
    char *		name<s(1)(1)(0)>[&];		 
    int			options<s(1)(1)(0)>[&];	 
    UINT<s(1)(1)(0)>[T]		status<s(1)(1)(0)>[&];		 
    UINT<s(1)(1)(0)>[T]		priority<s(1)(1)(0)>[&];	 
    UINT<s(1)(1)(0)>[T]		priNormal<s(1)(1)(0)>[&];	 
    UINT<s(1)(1)(0)>[T]		priMutexCnt<s(1)(1)(0)>[&];	 
    struct semaphore<s(2)(1)(1)>[&] *	pPriMutex<s(1)(1)(0)>[&];	 

    UINT<s(1)(1)(0)>[T]		lockCnt<s(1)(1)(0)>[&];	 
    UINT<s(1)(1)(0)>[T]		tslice<s(1)(1)(0)>[&];		 

    UINT16<s(1)(1)(0)>[T]		swapInMask<s(1)(1)(0)>[&];	 
    UINT16<s(1)(1)(0)>[T]		swapOutMask<s(1)(1)(0)>[&];	 

    Q_HEAD<s(1)(1)(0)>[T] *		pPendQ<s(1)(1)(0)>[&];		 

    UINT<s(1)(1)(0)>[T]		safeCnt<s(1)(1)(0)>[&];	 
    Q_HEAD<s(1)(1)(0)>[T]		safetyQHead<s(1)(1)(0)>[&];	 

    FUNCPTR<s(1)(1)(0)>[T]		entry<s(1)(1)(0)>[&];		 

    char *		pStackBase<s(1)(1)(0)>[&];	 
    char *		pStackLimit<s(1)(1)(0)>[&];	 
    char *		pStackEnd<s(1)(1)(0)>[&];	 

    int			errorStatus<s(1)(1)(0)>[&];	 
    int			exitCode<s(1)(1)(0)>[&];	 

    struct sigtcb<s(2)(1)(1)>[&] *	pSignalInfo<s(1)(1)(0)>[&];	 
    struct selContext<s(2)(1)(1)>[&] *	pSelectContext<s(1)(1)(0)>[&];	 

    UINT<s(1)(1)(0)>[T]		taskTicks<s(1)(1)(0)>[&];	 
    UINT<s(1)(1)(0)>[T]		taskIncTicks<s(1)(1)(0)>[&];	 

    struct taskVar<s(2)(1)(1)>[&] *	pTaskVar<s(1)(1)(0)>[&];	 
    struct rpcModList<s(2)(1)(1)>[&] *	pRPCModList<s(1)(1)(0)>[&];	 
    struct fpContext<s(2)(1)(1)>[&] *	pFpContext<s(1)(1)(0)>[&];	 

    struct __sFILE<s(2)(1)(1)>[&] *	taskStdFp<s(1)(1)(0)>[&][3];	 
    int			taskStd<s(1)(1)(0)>[&][3];	 

    char **		ppEnviron<s(1)(1)(0)>[&];	 
    int                 envTblSize<s(1)(1)(0)>[&];      
    int                 nEnvVarEntries<s(1)(1)(0)>[&];  
    struct sm_obj_tcb<s(2)(1)(1)>[&] *	pSmObjTcb<s(1)(1)(0)>[&];	 
    int			windxLock<s(1)(1)(0)>[&];	 
    void *		pComLocal<s(1)(1)(0)>[&];	 
    REG_SET<s(1)(1)(0)>[T] *		pExcRegSet<s(1)(1)(0)>[&];	 
    EVENTS<s(1)(1)(0)>[T]		events<s(1)(1)(0)>[&];		 
    WDB_INFO<s(1)(1)(0)>[T] *		pWdbInfo<s(1)(1)(0)>[&];	 
    void *		pPthread<s(1)(1)(0)>[&];	 
    int			reserved1<s(1)(1)(0)>[&];	 
    int			compiler1<s(1)(1)(0)>[&];	 
    int			spare1<s(1)(1)(0)>[&];		 
    int			spare2<s(1)(1)(0)>[&];		 
    int			spare3<s(1)(1)(0)>[&];		 
    int			spare4<s(1)(1)(0)>[&];		 

    




     

















    EXC_INFO<s(1)(1)(0)>[T]            excInfo<s(1)(1)(0)>[&];         
    UINT<s(1)(1)(0)>[T]                pCoprocCtx<s(1)(1)(0)>[&];      

     

    REG_SET<s(1)(1)(0)>[T]             regs<s(1)(1)(0)>[&];            

















































    struct dspContext<s(2)(1)(1)>[&] *	pDspContext<s(1)(1)(0)>[&];	 
    WDB_INFO<s(1)(1)(0)>[T]		wdbInfo<s(1)(1)(0)>[&];	 
    } WIND_TCB<s(0)(0)(0)>[&];(D1:WIND_TCB:1)[[TYPENAME:WIND_TCB]]

typedef struct 			 
    {
    int			td_id<s(1)(1)(0)>[&];		 
    char *		td_name<s(1)(1)(0)>[&];	 
    int			td_priority<s(1)(1)(0)>[&];	 
    int			td_status<s(1)(1)(0)>[&];	 
    int			td_options<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		td_entry<s(1)(1)(0)>[&];	 
    char *		td_sp<s(1)(1)(0)>[&];		 
    char *		td_pStackBase<s(1)(1)(0)>[&];	 
    char *		td_pStackLimit<s(1)(1)(0)>[&];	 
    char *		td_pStackEnd<s(1)(1)(0)>[&];	 
    int			td_stackSize<s(1)(1)(0)>[&];	 
    int			td_stackCurrent<s(1)(1)(0)>[&]; 
    int			td_stackHigh<s(1)(1)(0)>[&];	 
    int			td_stackMargin<s(1)(1)(0)>[&];	 
    int			td_errorStatus<s(1)(1)(0)>[&];	 
    int			td_delay<s(1)(1)(0)>[&];	 
    EVENTS<s(1)(1)(0)>[T]		td_events<s(1)(1)(0)>[&];	 
    } TASK_DESC<s(0)(0)(0)>[&];(D1:TASK_DESC:1)[[TYPENAME:TASK_DESC]]





 


















 


















 













 











 














 

extern CLASS_ID<s(0)(0)(0)>[T]	taskClassId<s(0)(0)(0)>[&];(D1:taskClassId:0)		 
extern CLASS_ID<s(0)(0)(0)>[T] taskInstClassId<s(0)(0)(0)>[&];(D1:taskInstClassId:0)  	 
extern WIND_TCB<s(0)(0)(0)>[T] *taskIdCurrent<s(0)(0)(0)>[&];(D1:taskIdCurrent:0)		 
extern BOOL<s(0)(0)(0)>[T]     taskPriRangeCheck<s(0)(0)(0)>[&];(D1:taskPriRangeCheck:0)       

 



extern STATUS<s(0)(0)(0)>[T] 	taskLibInit<s(0)(0)(0)>[&] (void);(D1:taskLibInit:0)





extern int 	taskSpawn<s(0)(0)(0)>[&] (char *name<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&], int stackSize<s(0)(0)(0)>[&],
		      	   FUNCPTR<s(0)(0)(0)>[T] entryPt<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&], int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&],
		      	   int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int arg6<s(0)(0)(0)>[&], int arg7<s(0)(0)(0)>[&],
		      	   int arg8<s(0)(0)(0)>[&], int arg9<s(0)(0)(0)>[&], int arg10<s(0)(0)(0)>[&]);(D1:arg10:0)


extern STATUS<s(0)(0)(0)>[T] 	taskInit<s(0)(0)(0)>[&] (WIND_TCB<s(0)(0)(0)>[T] *pTcb<s(0)(0)(0)>[&], char *name<s(0)(0)(0)>[&], int priority<s(0)(0)(0)>[&], int options<s(0)(0)(0)>[&],
			  char *pStackBase<s(0)(0)(0)>[&], int stackSize<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] entryPt<s(0)(0)(0)>[&],
			  int arg1<s(0)(0)(0)>[&], int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&], int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&],
			  int arg6<s(0)(0)(0)>[&], int arg7<s(0)(0)(0)>[&], int arg8<s(0)(0)(0)>[&], int arg9<s(0)(0)(0)>[&], int arg10<s(0)(0)(0)>[&]);(D1:arg10:0)
extern STATUS<s(0)(0)(0)>[T] 	taskActivate<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskDelete<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskDeleteForce<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskSuspend<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskResume<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskRestart<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern STATUS<s(0)(0)(0)>[T] 	taskPrioritySet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], int newPriority<s(0)(0)(0)>[&]);(D1:newPriority:0)
extern STATUS<s(0)(0)(0)>[T] 	taskPriorityGet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], int *pPriority<s(0)(0)(0)>[&]);(D1:pPriority:0)
extern STATUS<s(0)(0)(0)>[T] 	taskLock<s(0)(0)(0)>[&] (void);(D1:taskLock:0)
extern STATUS<s(0)(0)(0)>[T] 	taskUnlock<s(0)(0)(0)>[&] (void);(D1:taskUnlock:0)
extern STATUS<s(0)(0)(0)>[T] 	taskSafe<s(0)(0)(0)>[&] (void);(D1:taskSafe:0)
extern STATUS<s(0)(0)(0)>[T] 	taskUnsafe<s(0)(0)(0)>[&] (void);(D1:taskUnsafe:0)
extern STATUS<s(0)(0)(0)>[T] 	taskDelay<s(0)(0)(0)>[&] (int ticks<s(0)(0)(0)>[&]);(D1:ticks:0)
extern STATUS<s(0)(0)(0)>[T] 	taskOptionsSet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], int mask<s(0)(0)(0)>[&], int newOptions<s(0)(0)(0)>[&]);(D1:newOptions:0)
extern STATUS<s(0)(0)(0)>[T] 	taskOptionsGet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], int *pOptions<s(0)(0)(0)>[&]);(D1:pOptions:0)
extern char *	taskName<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern int 	taskNameToId<s(0)(0)(0)>[&] (char *name<s(0)(0)(0)>[&]);(D1:name:0)
extern STATUS<s(0)(0)(0)>[T] 	taskIdVerify<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern int 	taskIdSelf<s(0)(0)(0)>[&] (void);(D1:taskIdSelf:0)
extern int 	taskIdDefault<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern BOOL<s(0)(0)(0)>[T] 	taskIsReady<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern BOOL<s(0)(0)(0)>[T] 	taskIsSuspended<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern WIND_TCB<s(0)(0)(0)>[T] *taskTcb<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern int 	taskIdListGet<s(0)(0)(0)>[&] (int idList<s(0)(0)(0)>[&] [ ], int maxTasks<s(0)(0)(0)>[&]);(D1:maxTasks:0)
extern STATUS<s(0)(0)(0)>[T] 	taskInfoGet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], TASK_DESC<s(0)(0)(0)>[T] *pTaskDesc<s(0)(0)(0)>[&]);(D1:pTaskDesc:0)
extern STATUS<s(0)(0)(0)>[T] 	taskStatusString<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], char *pString<s(0)(0)(0)>[&]);(D1:pString:0)
extern STATUS<s(0)(0)(0)>[T] 	taskOptionsString<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], char *pString<s(0)(0)(0)>[&]);(D1:pString:0)
extern STATUS<s(0)(0)(0)>[T] 	taskRegsGet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], REG_SET<s(0)(0)(0)>[T] *pRegs<s(0)(0)(0)>[&]);(D1:pRegs:0)
extern STATUS<s(0)(0)(0)>[T] 	taskRegsSet<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], REG_SET<s(0)(0)(0)>[T] *pRegs<s(0)(0)(0)>[&]);(D1:pRegs:0)
extern void 	taskRegsShow<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&]);(D1:tid:0)
extern void *	taskStackAllot<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], unsigned nBytes<s(0)(0)(0)>[&]);(D1:nBytes:0)
extern void 	taskShowInit<s(0)(0)(0)>[&] (void);(D1:taskShowInit:0)
extern STATUS<s(0)(0)(0)>[T] 	taskShow<s(0)(0)(0)>[&] (int tid<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&]);(D1:level:0)












 

 

 


































 

typedef struct node<s(1)(0)(1)>[&]		 
    {
    struct node<s(2)(1)(1)>[&] *next<s(1)(1)(0)>[&];		 
    struct node<s(2)(1)(1)>[&] *previous<s(1)(1)(0)>[&];	 
    } NODE<s(0)(0)(0)>[&];(D1:NODE:1)[[TYPENAME:NODE]]


 

typedef struct			 
    {
    NODE<s(1)(1)(0)>[T] node<s(1)(1)(0)>[&];			 
    int count<s(1)(1)(0)>[&];			 
    } LIST<s(0)(0)(0)>[&];(D1:LIST:1)[[TYPENAME:LIST]]

 


 




extern void	lstLibInit<s(0)(0)(0)>[&] (void);(D1:lstLibInit:0)
extern NODE<s(0)(0)(0)>[T] *	lstFirst<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern NODE<s(0)(0)(0)>[T] *	lstGet<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern NODE<s(0)(0)(0)>[T] *	lstLast<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern NODE<s(0)(0)(0)>[T] *	lstNStep<s(0)(0)(0)>[&] (NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&], int nStep<s(0)(0)(0)>[&]);(D1:nStep:0)
extern NODE<s(0)(0)(0)>[T] *	lstNext<s(0)(0)(0)>[&] (NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)
extern NODE<s(0)(0)(0)>[T] *	lstNth<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&], int nodenum<s(0)(0)(0)>[&]);(D1:nodenum:0)
extern NODE<s(0)(0)(0)>[T] *	lstPrevious<s(0)(0)(0)>[&] (NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)
extern int 	lstCount<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern int 	lstFind<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)
extern void 	lstAdd<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)
extern void 	lstConcat<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pDstList<s(0)(0)(0)>[&], LIST<s(0)(0)(0)>[T] *pAddList<s(0)(0)(0)>[&]);(D1:pAddList:0)
extern void 	lstDelete<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)
extern void 	lstExtract<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pSrcList<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pStartNode<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pEndNode<s(0)(0)(0)>[&],
	  		    LIST<s(0)(0)(0)>[T] *pDstList<s(0)(0)(0)>[&]);(D1:pDstList:0)
extern void 	lstFree<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern void 	lstInit<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&]);(D1:pList:0)
extern void 	lstInsert<s(0)(0)(0)>[&] (LIST<s(0)(0)(0)>[T] *pList<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pPrev<s(0)(0)(0)>[&], NODE<s(0)(0)(0)>[T] *pNode<s(0)(0)(0)>[&]);(D1:pNode:0)




















struct acb<s(1)(0)(1)>[&] {
    applId_tt<s(1)(1)(0)>[T] applId<s(1)(1)(0)>[&];
    char applname<s(1)(1)(0)>[&][23  + 1];
     

    int fd<s(1)(1)(0)>[&];                      
    int qid<s(1)(1)(0)>[&];                     

    int          fd_qid<s(1)(1)(0)>[&];  
    unsigned int logFlags<s(1)(1)(0)>[&];
    unsigned int cfg_options<s(1)(1)(0)>[&];
    unsigned int swping_counter<s(1)(1)(0)>[&];
    unsigned int swping_max<s(1)(1)(0)>[&];
    unsigned int waiting<s(1)(1)(0)>[&];
    unsigned int malloc_memory<s(1)(1)(0)>[&];  
    unsigned int malloc_buffs<s(1)(1)(0)>[&];   
    unsigned int Malloc_buffs<s(1)(1)(0)>[&];   
    unsigned int Malloc_memory<s(1)(1)(0)>[&];  
    int tid<s(1)(1)(0)>[&];                     
    void *applPrivate<s(1)(1)(0)>[&];           
    void *PrivateAreaAddr<s(1)(1)(0)>[&];       
    int   PrivateAreaSize<s(1)(1)(0)>[&];            
    int   PrivateAreaOpen<s(1)(1)(0)>[&];          
    int          tasksSpawned<s(1)(1)(0)>[&];      
};


struct taskMemStat<s(1)(0)(1)>[&]
{ 
 int taskId<s(1)(1)(0)>[&];
 int AppNo<s(1)(1)(0)>[&];
 char taskName<s(1)(1)(0)>[&][12 ];
 unsigned int dynMemReqSum<s(1)(1)(0)>[&];  
 unsigned int dynMemUsingNow<s(1)(1)(0)>[&];  
 unsigned int dynMemTUsingNow<s(1)(1)(0)>[&];   
 unsigned int  fixedMemReqSum<s(1)(1)(0)>[&];  
 unsigned int fixedMemUsingNow<s(1)(1)(0)>[&];   
 unsigned int fixedMemTUsingNow<s(1)(1)(0)>[&];  
 
};

struct MemUsedInTaskInit<s(1)(0)(1)>[&]
{ 
   char mod_or_app_Name<s(1)(1)(0)>[&][12 ];
  unsigned int malloc_size_used_in_load<s(1)(1)(0)>[&];  
  unsigned int malloc_size_used_in_active<s(1)(1)(0)>[&];  
};


struct taskCB<s(1)(0)(1)>[&] {
    int taskNum<s(1)(1)(0)>[&];
    char taskname<s(1)(1)(0)>[&][10  + 1];
    void *taskPrivate<s(1)(1)(0)>[&];
    char            *mibAccessPtr<s(1)(1)(0)>[&];  
};


extern struct taskCB<s(1)(0)(1)>[&] *taskCB<s(0)(0)(0)>[&];(D1:taskCB:0)
extern struct acb<s(1)(0)(1)>[&] *acb<s(0)(0)(0)>[&];(D1:acb:0)
extern struct acb<s(1)(0)(1)>[&] *applicationACBs<s(0)(0)(0)>[&][];(D1:applicationACBs:0)

extern struct taskMemStat<s(1)(0)(1)>[&] gTaskMemStat<s(1)(0)(1)>[&][];(D1:gTaskMemStat:0)









 

 


































 




















 

 

 


































 






























 

 

 


































 



















 









struct	arphdr<s(1)(0)(1)>[&] {
	u_short<s(1)(1)(0)>[T]	ar_hrd<s(1)(1)(0)>[&];		 


	u_short<s(1)(1)(0)>[T]	ar_pro<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	ar_hln<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	ar_pln<s(1)(1)(0)>[&];		 
	u_short<s(1)(1)(0)>[T]	ar_op<s(1)(1)(0)>[&];		 






 









};

 


struct arpreq<s(1)(0)(1)>[&] {
	struct	sockaddr<s(2)(1)(1)>[&] arp_pa<s(2)(1)(1)>[&];		 
	struct	sockaddr<s(2)(1)(1)>[&] arp_ha<s(2)(1)(1)>[&];		 
	int	arp_flags<s(1)(1)(0)>[&];			 
};
 

















 

 

 


































 




















 

 
 













 





































 

 

 





































 





typedef enum
    {
    SELREAD<s(0)(0)(0)>[&],
    SELWRITE<s(0)(0)(0)>[&]
    } SELECT_TYPE<s(0)(0)(0)>[&];(D1:SELECT_TYPE:1)[[TYPENAME:SELECT_TYPE]]

 

 

 
















typedef struct selWkNode<s(1)(0)(1)>[&]
    {
    NODE<s(1)(1)(0)>[T]		linkedListHooks<s(1)(1)(0)>[&]; 
    BOOL<s(1)(1)(0)>[T]		dontFree<s(1)(1)(0)>[&];	 
    int			taskId<s(1)(1)(0)>[&];		 
    int			fd<s(1)(1)(0)>[&];		 
    SELECT_TYPE<s(1)(1)(0)>[T]		type<s(1)(1)(0)>[&];		 
    } SEL_WAKEUP_NODE<s(0)(0)(0)>[&];(D1:SEL_WAKEUP_NODE:1)[[TYPENAME:SEL_WAKEUP_NODE]]

typedef struct
    {
    SEMAPHORE<s(1)(1)(0)>[T]		listMutex<s(1)(1)(0)>[&];	 
    SEL_WAKEUP_NODE<s(1)(1)(0)>[T]	firstNode<s(1)(1)(0)>[&];	 
    LIST<s(1)(1)(0)>[T]		wakeupList<s(1)(1)(0)>[&];	 
    } SEL_WAKEUP_LIST<s(0)(0)(0)>[&];(D1:SEL_WAKEUP_LIST:1)[[TYPENAME:SEL_WAKEUP_LIST]]

typedef struct selContext<s(1)(0)(1)>[&]
    {
    SEMAPHORE<s(1)(1)(0)>[T]	wakeupSem<s(1)(1)(0)>[&];		 
    BOOL<s(1)(1)(0)>[T]     	pendedOnSelect<s(1)(1)(0)>[&];		 

    fd_set<s(1)(1)(0)>[T]     *pReadFds<s(1)(1)(0)>[&];		 
    fd_set<s(1)(1)(0)>[T]     *pWriteFds<s(1)(1)(0)>[&];		 

     

    fd_set<s(1)(1)(0)>[T]     *pOrigReadFds<s(1)(1)(0)>[&];		 
    fd_set<s(1)(1)(0)>[T]     *pOrigWriteFds<s(1)(1)(0)>[&];		 
    int		width<s(1)(1)(0)>[&];			 

     











    } SEL_CONTEXT<s(0)(0)(0)>[&];(D1:SEL_CONTEXT:1)[[TYPENAME:SEL_CONTEXT]]


 



extern void	selectInit<s(0)(0)(0)>[&]		(int numFiles<s(0)(0)(0)>[&]);(D1:numFiles:0)
extern void	selTaskDeleteHookAdd<s(0)(0)(0)>[&] 	(void);(D1:selTaskDeleteHookAdd:0)

















 



extern SELECT_TYPE<s(0)(0)(0)>[T]  selWakeupType<s(0)(0)(0)>[&] 	(SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *pWakeupNode<s(0)(0)(0)>[&]);(D1:pWakeupNode:0)
extern STATUS<s(0)(0)(0)>[T] 	    selNodeAdd<s(0)(0)(0)>[&] 	      	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&],
			    		 SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *pWakeupNode<s(0)(0)(0)>[&]);(D1:pWakeupNode:0)
extern STATUS<s(0)(0)(0)>[T] 	    selNodeDelete<s(0)(0)(0)>[&] 	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&],
			       		 SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *pWakeupNode<s(0)(0)(0)>[&]);(D1:pWakeupNode:0)
extern int 	    selWakeupListLen<s(0)(0)(0)>[&] 	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&]);(D1:pWakeupList:0)
extern void 	    selWakeup<s(0)(0)(0)>[&] 		(SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *pWakeupNode<s(0)(0)(0)>[&]);(D1:pWakeupNode:0)
extern void 	    selWakeupAll<s(0)(0)(0)>[&] 	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&], 
					 SELECT_TYPE<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)
extern void 	    selWakeupListInit<s(0)(0)(0)>[&] 	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&]);(D1:pWakeupList:0)
extern void 	    selWakeupListTerm<s(0)(0)(0)>[&] 	(SEL_WAKEUP_LIST<s(0)(0)(0)>[T] *pWakeupList<s(0)(0)(0)>[&]);(D1:pWakeupList:0)
extern int	    select<s(0)(0)(0)>[&] 		(int width<s(0)(0)(0)>[&], fd_set<s(0)(0)(0)>[T] *pReadFds<s(0)(0)(0)>[&], 
					 fd_set<s(0)(0)(0)>[T] *pWriteFds<s(0)(0)(0)>[&], fd_set<s(0)(0)(0)>[T] *pExceptFds<s(0)(0)(0)>[&],
					 struct timeval<s(1)(0)(1)>[&] *pTimeOut<s(0)(0)(0)>[&]);(D1:pTimeOut:0)









 

 

 


































 





















struct iovec<s(1)(0)(1)>[&] {
	caddr_t<s(1)(1)(0)>[T]	iov_base<s(1)(1)(0)>[&];
	int	iov_len<s(1)(1)(0)>[&];
};

enum	uio_rw<s(0)(0)(0)>[&] { UIO_READ<s(0)(0)(0)>[&], UIO_WRITE<s(0)(0)(0)>[&] };

 
enum uio_seg<s(0)(0)(0)>[&] {
	UIO_USERSPACE<s(0)(0)(0)>[&],		 
	UIO_SYSSPACE<s(0)(0)(0)>[&],		 
	UIO_USERISPACE<s(0)(0)(0)>[&]		 
};

struct uio<s(1)(0)(1)>[&] {
	struct	iovec<s(2)(1)(1)>[&] *uio_iov<s(1)(1)(0)>[&];
	int	uio_iovcnt<s(1)(1)(0)>[&];
	off_t<s(1)(1)(0)>[T]	uio_offset<s(1)(1)(0)>[&];
	int	uio_resid<s(1)(1)(0)>[&];
	enum	uio_seg<s(1)(1)(0)>[&] uio_segflg<s(1)(1)(0)>[&];
	enum	uio_rw<s(1)(1)(0)>[&] uio_rw<s(1)(1)(0)>[&];



};
















 

 

 


































 































 

 
 
























 

















 































            
 



extern int 	splnet<s(0)(0)(0)>[&] (void);(D1:splnet:0)
extern int 	splimp<s(0)(0)(0)>[&] (void);(D1:splimp:0)
extern void 	splx<s(0)(0)(0)>[&] (int x<s(0)(0)(0)>[&]);(D1:x:0)
extern void 	panic<s(0)(0)(0)>[&] (char *msg<s(0)(0)(0)>[&]);(D1:msg:0)
extern void 	wakeup<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern void 	ksleep<s(0)(0)(0)>[&] (SEM_ID<s(0)(0)(0)>[T] semId<s(0)(0)(0)>[&]);(D1:semId:0)
extern char *	_netMalloc<s(0)(0)(0)>[&] (int bufSize<s(0)(0)(0)>[&], UCHAR<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&], int canWait<s(0)(0)(0)>[&]);(D1:canWait:0) 
extern void	_netFree<s(0)(0)(0)>[&] (char * pBuf<s(0)(0)(0)>[&]);(D1:pBuf:0) 
extern void * 	hashinit<s(0)(0)(0)>[&] (int 	elements<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&], u_long<s(0)(0)(0)>[T] * hashmask<s(0)(0)(0)>[&]);(D1:hashmask:0)












 

 

 



























extern void *	memchr<s(0)(0)(0)>[&] (const void *__s<s(0)(0)(0)>[&], int __c<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern int 	memcmp<s(0)(0)(0)>[&] (const void *__s1<s(0)(0)(0)>[&], const void *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern void *	memcpy<s(0)(0)(0)>[&] (void *__s1<s(0)(0)(0)>[&], const void *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern void *	memmove<s(0)(0)(0)>[&] (void *__s1<s(0)(0)(0)>[&], const void *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern void *	memset<s(0)(0)(0)>[&] (void *__s<s(0)(0)(0)>[&], int __c<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)

extern char *	strcat<s(0)(0)(0)>[&] (char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern char *	strchr<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], int __c<s(0)(0)(0)>[&]);(D1:__c:0)
extern int 	strcmp<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern int 	strcoll<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern char *	strcpy<s(0)(0)(0)>[&] (char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern size_t<s(0)(0)(0)>[T] 	strcspn<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern size_t<s(0)(0)(0)>[T] 	strlen<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&]);(D1:__s:0)
extern char *	strncat<s(0)(0)(0)>[&] (char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern int 	strncmp<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern char *	strncpy<s(0)(0)(0)>[&] (char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern char *	strpbrk<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern char *	strrchr<s(0)(0)(0)>[&] (const char *__s<s(0)(0)(0)>[&], int __c<s(0)(0)(0)>[&]);(D1:__c:0)
extern size_t<s(0)(0)(0)>[T] 	strspn<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern char *	strstr<s(0)(0)(0)>[&] (const char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&]);(D1:__s2:0)
extern char *	strtok<s(0)(0)(0)>[&] (char *__s<s(0)(0)(0)>[&], const char *__sep<s(0)(0)(0)>[&]);(D1:__sep:0)
extern size_t<s(0)(0)(0)>[T] 	strxfrm<s(0)(0)(0)>[&] (char *__s1<s(0)(0)(0)>[&], const char *__s2<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] __n<s(0)(0)(0)>[&]);(D1:__n:0)
extern char *	strerror<s(0)(0)(0)>[&](int __errcode<s(0)(0)(0)>[&]);(D1:__errcode:0)


extern char *	strtok_r<s(0)(0)(0)>[&] (char *__s<s(0)(0)(0)>[&], const char *__sep<s(0)(0)(0)>[&], char **__ppLast<s(0)(0)(0)>[&]);(D1:__ppLast:0)



extern int	strerror_r<s(0)(0)(0)>[&] (int __errcode<s(0)(0)(0)>[&], char *__buf<s(0)(0)(0)>[&]);(D1:__buf:0)
extern void 	bcopy<s(0)(0)(0)>[&] (const char *source<s(0)(0)(0)>[&], char *dest<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	bcopyBytes<s(0)(0)(0)>[&] (char *source<s(0)(0)(0)>[&], char *dest<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	bcopyWords<s(0)(0)(0)>[&] (char *source<s(0)(0)(0)>[&], char *dest<s(0)(0)(0)>[&], int nwords<s(0)(0)(0)>[&]);(D1:nwords:0)
extern void 	bcopyLongs<s(0)(0)(0)>[&] (char *source<s(0)(0)(0)>[&], char *dest<s(0)(0)(0)>[&], int nlongs<s(0)(0)(0)>[&]);(D1:nlongs:0)
extern void 	bfill<s(0)(0)(0)>[&] (char *buf<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&], int ch<s(0)(0)(0)>[&]);(D1:ch:0)
extern void 	bfillBytes<s(0)(0)(0)>[&] (char *buf<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&], int ch<s(0)(0)(0)>[&]);(D1:ch:0)
extern void 	bzero<s(0)(0)(0)>[&] (char *buffer<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern int 	bcmp<s(0)(0)(0)>[&] (char *buf1<s(0)(0)(0)>[&], char *buf2<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	binvert<s(0)(0)(0)>[&] (char *buf<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	bswap<s(0)(0)(0)>[&] (char *buf1<s(0)(0)(0)>[&], char *buf2<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	uswab<s(0)(0)(0)>[&] (char *source<s(0)(0)(0)>[&], char *destination<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern void 	swab<s(0)(0)(0)>[&] (char *source<s(0)(0)(0)>[&], char *dest<s(0)(0)(0)>[&], int nbytes<s(0)(0)(0)>[&]);(D1:nbytes:0)
extern char *	index<s(0)(0)(0)>[&] (const char *s<s(0)(0)(0)>[&], int c<s(0)(0)(0)>[&]);(D1:c:0)
extern char *	rindex<s(0)(0)(0)>[&] (const char *s<s(0)(0)(0)>[&], int c<s(0)(0)(0)>[&]);(D1:c:0)










 

 

 

































 













	
	
	








 


































 













 
 
 

 



























 











 







































 























 






 




 

 









 




 



 








 



 



 



 





    











                    











                    



                    








 









typedef struct
    {
    int		mBlkNum<s(1)(1)(0)>[&];		 
    int		clBlkNum<s(1)(1)(0)>[&];		 
    char * 	memArea<s(1)(1)(0)>[&];		 
    int		memSize<s(1)(1)(0)>[&];		 
    } M_CL_CONFIG<s(0)(0)(0)>[&];(D1:M_CL_CONFIG:1)[[TYPENAME:M_CL_CONFIG]]

 







typedef struct clDesc<s(1)(0)(1)>[&]
    {
    int		clSize<s(1)(1)(0)>[&];			 
    int		clNum<s(1)(1)(0)>[&];			 
    char *	memArea<s(1)(1)(0)>[&];		 
    int		memSize<s(1)(1)(0)>[&];		 
    } CL_DESC<s(0)(0)(0)>[&];(D1:CL_DESC:1)[[TYPENAME:CL_DESC]] 

 

typedef struct clBuff<s(1)(0)(1)>[&]
    {
    struct clBuff<s(2)(1)(1)>[&] *	pClNext<s(1)(1)(0)>[&]; 	 
    } CL_BUF<s(0)(0)(0)>[&];(D1:CL_BUF:1)[[TYPENAME:CL_BUF]]

typedef CL_BUF<s(0)(0)(0)>[T] * CL_BUF_ID<s(0)(0)(0)>[&];(D1:CL_BUF_ID:1)[[TYPENAME:CL_BUF_ID]] 

 

typedef struct clPool<s(1)(0)(1)>[&]
    {
    int			clSize<s(1)(1)(0)>[&];		 
    int			clLg2<s(1)(1)(0)>[&];		 
    int			clNum<s(1)(1)(0)>[&]; 		 
    int			clNumFree<s(1)(1)(0)>[&]; 	 
    int			clUsage<s(1)(1)(0)>[&];	 
    CL_BUF_ID<s(1)(1)(0)>[T]		pClHead<s(1)(1)(0)>[&];	 
    struct netPool<s(2)(1)(1)>[&] *	pNetPool<s(1)(1)(0)>[&];	 
    } CL_POOL<s(0)(0)(0)>[&];(D1:CL_POOL:1)[[TYPENAME:CL_POOL]] 

typedef CL_POOL<s(0)(0)(0)>[T] * CL_POOL_ID<s(0)(0)(0)>[&];(D1:CL_POOL_ID:1)[[TYPENAME:CL_POOL_ID]] 

 

typedef struct mHdr<s(1)(0)(1)>[&]
    {
    struct mBlk<s(2)(1)(1)>[&] *	mNext<s(1)(1)(0)>[&];		 
    struct mBlk<s(2)(1)(1)>[&] *	mNextPkt<s(1)(1)(0)>[&];	 
    char *		mData<s(1)(1)(0)>[&];		 
    int			mLen<s(1)(1)(0)>[&];		 
    UCHAR<s(1)(1)(0)>[T]		mType<s(1)(1)(0)>[&];		 
    UCHAR<s(1)(1)(0)>[T]		mFlags<s(1)(1)(0)>[&];		 
    USHORT<s(1)(1)(0)>[T]		reserved<s(1)(1)(0)>[&]; 
    } M_BLK_HDR<s(0)(0)(0)>[&];(D1:M_BLK_HDR:1)[[TYPENAME:M_BLK_HDR]]

 

typedef struct	pktHdr<s(1)(0)(1)>[&]
    {
    struct ifnet<s(2)(1)(1)>[&] *	rcvif<s(1)(1)(0)>[&];		 
    int			len<s(1)(1)(0)>[&];		 
    } M_PKT_HDR<s(0)(0)(0)>[&];(D1:M_PKT_HDR:1)[[TYPENAME:M_PKT_HDR]]

typedef union clBlkList<s(1)(0)(1)>[&]
    {
    struct clBlk<s(2)(1)(1)>[&] * 	pClBlkNext<s(1)(1)(0)>[&];	 
    char * 		pClBuf<s(1)(1)(0)>[&];		 
    } CL_BLK_LIST<s(0)(0)(0)>[&];(D1:CL_BLK_LIST:1)[[TYPENAME:CL_BLK_LIST]]
    
 

typedef struct clBlk<s(1)(0)(1)>[&]
    {
    CL_BLK_LIST<s(1)(1)(0)>[T] 	clNode<s(1)(1)(0)>[&];		 
    UINT<s(1)(1)(0)>[T]		clSize<s(1)(1)(0)>[&];		 
    int			clRefCnt<s(1)(1)(0)>[&];	 
    FUNCPTR<s(1)(1)(0)>[T]		pClFreeRtn<s(1)(1)(0)>[&];	 
    int			clFreeArg1<s(1)(1)(0)>[&];	 
    int			clFreeArg2<s(1)(1)(0)>[&];	 
    int			clFreeArg3<s(1)(1)(0)>[&];	 
    struct netPool<s(2)(1)(1)>[&] *	pNetPool<s(1)(1)(0)>[&];	 
    } CL_BLK<s(0)(0)(0)>[&];(D1:CL_BLK:1)[[TYPENAME:CL_BLK]]

 

typedef struct mBlk<s(1)(0)(1)>[&]
    {
    M_BLK_HDR<s(1)(1)(0)>[T] 	mBlkHdr<s(1)(1)(0)>[&]; 		 
    M_PKT_HDR<s(1)(1)(0)>[T]	mBlkPktHdr<s(1)(1)(0)>[&];		 
    CL_BLK<s(1)(1)(0)>[T] *	pClBlk<s(1)(1)(0)>[&];			 
    } M_BLK<s(0)(0)(0)>[&];(D1:M_BLK:1)[[TYPENAME:M_BLK]]

 

typedef struct mbstat<s(1)(0)(1)>[&]
    {
    ULONG<s(1)(1)(0)>[T]	mNum<s(1)(1)(0)>[&];			 
    ULONG<s(1)(1)(0)>[T]	mDrops<s(1)(1)(0)>[&];			 
    ULONG<s(1)(1)(0)>[T]	mWait<s(1)(1)(0)>[&];			 
    ULONG<s(1)(1)(0)>[T]	mDrain<s(1)(1)(0)>[&];			 
    ULONG<s(1)(1)(0)>[T]	mTypes<s(1)(1)(0)>[&][256];		 
    } M_STAT<s(0)(0)(0)>[&];(D1:M_STAT:1)[[TYPENAME:M_STAT]]

typedef M_BLK<s(0)(0)(0)>[T] * 	M_BLK_ID<s(0)(0)(0)>[&];(D1:M_BLK_ID:1)[[TYPENAME:M_BLK_ID]]
typedef CL_BLK<s(0)(0)(0)>[T] *	CL_BLK_ID<s(0)(0)(0)>[&];(D1:CL_BLK_ID:1)[[TYPENAME:CL_BLK_ID]]
typedef struct netPool<s(1)(0)(1)>[&] 	NET_POOL<s(1)(0)(1)>[&];(D1:NET_POOL:1)[[TYPENAME:NET_POOL]]
typedef struct poolFunc<s(1)(0)(1)>[&] POOL_FUNC<s(1)(0)(1)>[&];(D1:POOL_FUNC:1)[[TYPENAME:POOL_FUNC]]
typedef NET_POOL<s(0)(0)(0)>[T] * 	NET_POOL_ID<s(0)(0)(0)>[&];(D1:NET_POOL_ID:1)[[TYPENAME:NET_POOL_ID]]

struct	poolFunc<s(1)(0)(1)>[&]			 
    {
     
    STATUS<s(1)(1)(0)>[T]	(*pInitRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], M_CL_CONFIG<s(1)(1)(0)>[T] * pMclBlkConfig<s(1)(1)(0)>[&],
                             CL_DESC<s(1)(1)(0)>[T] * pClDescTbl<s(1)(1)(0)>[&], int clDescTblNumEnt<s(1)(1)(0)>[&],
			     BOOL<s(1)(1)(0)>[T] fromKheap<s(1)(1)(0)>[&]);

     
    void	(*pMblkFreeRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], M_BLK_ID<s(1)(1)(0)>[T] pMblk<s(1)(1)(0)>[&]);

     
    void	(*pClBlkFreeRtn<s(1)(1)(0)>[&]) (CL_BLK_ID<s(1)(1)(0)>[T] pClBlk<s(1)(1)(0)>[&]);

     
    void	(*pClFreeRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], char * pClBuf<s(1)(1)(0)>[&]);

     
    M_BLK_ID<s(1)(1)(0)>[T] 	(*pMblkClFreeRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], M_BLK_ID<s(1)(1)(0)>[T] pMblk<s(1)(1)(0)>[&]);

     
    M_BLK_ID<s(1)(1)(0)>[T]	(*pMblkGetRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], int canWait<s(1)(1)(0)>[&], UCHAR<s(1)(1)(0)>[T] type<s(1)(1)(0)>[&]);

     
    CL_BLK_ID<s(1)(1)(0)>[T]	(*pClBlkGetRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], int canWait<s(1)(1)(0)>[&]);
    
     
    char *	(*pClGetRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], CL_POOL_ID<s(1)(1)(0)>[T] pClPool<s(1)(1)(0)>[&]);

     
    STATUS<s(1)(1)(0)>[T]	(*pMblkClGetRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], M_BLK_ID<s(1)(1)(0)>[T] pMblk<s(1)(1)(0)>[&],
                                  int bufSize<s(1)(1)(0)>[&], int canWait<s(1)(1)(0)>[&], BOOL<s(1)(1)(0)>[T] bestFit<s(1)(1)(0)>[&]);

     
    CL_POOL_ID<s(1)(1)(0)>[T]	(*pClPoolIdGetRtn<s(1)(1)(0)>[&]) (NET_POOL_ID<s(1)(1)(0)>[T] pNetPool<s(1)(1)(0)>[&], int	bufSize<s(1)(1)(0)>[&],
                                    BOOL<s(1)(1)(0)>[T] bestFit<s(1)(1)(0)>[&]);
    };

struct netPool<s(1)(0)(1)>[&]				 
    {
    M_BLK_ID<s(1)(1)(0)>[T]	pmBlkHead<s(1)(1)(0)>[&];		 
    CL_BLK_ID<s(1)(1)(0)>[T]	pClBlkHead<s(1)(1)(0)>[&];		 
    int		mBlkCnt<s(1)(1)(0)>[&];		 
    int		mBlkFree<s(1)(1)(0)>[&];		 


    int		clMask<s(1)(1)(0)>[&];			 
    int		clLg2Max<s(1)(1)(0)>[&];		 
    int		clSizeMax<s(1)(1)(0)>[&];		 
    int		clLg2Min<s(1)(1)(0)>[&];		 
    int		clSizeMin<s(1)(1)(0)>[&];		 
    CL_POOL<s(1)(1)(0)>[T] * 	clTbl<s(1)(1)(0)>[&] [((16   - 6  )  + 1) ];	 
    M_STAT<s(1)(1)(0)>[T] *	pPoolStat<s(1)(1)(0)>[&];		 
    POOL_FUNC<s(1)(1)(0)>[T] *	pFuncTbl<s(1)(1)(0)>[&];		 
    };

                     
                    
extern  STATUS<s(0)(0)(0)>[T] 		netBufLibInit<s(0)(0)(0)>[&] (void);(D1:netBufLibInit:0)
extern  STATUS<s(0)(0)(0)>[T] 		netPoolInit<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&],
                                     M_CL_CONFIG<s(0)(0)(0)>[T] * pMclBlkConfig<s(0)(0)(0)>[&],
                                     CL_DESC<s(0)(0)(0)>[T] * pClDescTbl<s(0)(0)(0)>[&], int clDescTblNumEnt<s(0)(0)(0)>[&],
                                     POOL_FUNC<s(0)(0)(0)>[T] * pFuncTbl<s(0)(0)(0)>[&]);(D1:pFuncTbl:0)
extern  STATUS<s(0)(0)(0)>[T]		netPoolDelete<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T]);(D1:NET_POOL_ID:0)
extern  void		netMblkFree<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&]);(D1:pMblk:0)
extern  void		netClBlkFree<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], CL_BLK_ID<s(0)(0)(0)>[T] pClBlk<s(0)(0)(0)>[&]);(D1:pClBlk:0)
extern  void 		netClFree<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], UCHAR<s(0)(0)(0)>[T] * pClBuf<s(0)(0)(0)>[&]);(D1:pClBuf:0)
extern  M_BLK_ID<s(0)(0)(0)>[T] 	netMblkClFree<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&]);(D1:pMblk:0)
extern  void		netMblkClChainFree<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&]);(D1:pMblk:0)
extern  M_BLK_ID<s(0)(0)(0)>[T] 	netMblkGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], int canWait<s(0)(0)(0)>[&],
                                    UCHAR<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)
extern  CL_BLK_ID<s(0)(0)(0)>[T]	netClBlkGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], int canWait<s(0)(0)(0)>[&]);(D1:canWait:0)
extern  char *	 	netClusterGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&],
                                       CL_POOL_ID<s(0)(0)(0)>[T] pClPool<s(0)(0)(0)>[&]);(D1:pClPool:0)
extern  STATUS<s(0)(0)(0)>[T] 	 	netMblkClGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&],
                                      int bufSize<s(0)(0)(0)>[&], int canWait<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bestFit<s(0)(0)(0)>[&]);(D1:bestFit:0)
extern  M_BLK_ID<s(0)(0)(0)>[T] 	netTupleGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], int bufSize<s(0)(0)(0)>[&],
                                     int canWait<s(0)(0)(0)>[&], UCHAR<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bestFit<s(0)(0)(0)>[&]);(D1:bestFit:0)

extern  M_BLK_ID<s(0)(0)(0)>[T] 	netTupleGet2<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T], int, int);(D1:NET_POOL_ID:0)

extern  CL_BLK_ID<s(0)(0)(0)>[T]  	netClBlkJoin<s(0)(0)(0)>[&] (CL_BLK_ID<s(0)(0)(0)>[T] pClBlk<s(0)(0)(0)>[&], char * pClBuf<s(0)(0)(0)>[&],
                                      int size<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] pFreeRtn<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&],
                                      int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&]);(D1:arg3:0)
extern  M_BLK_ID<s(0)(0)(0)>[T]  	netMblkClJoin<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&], CL_BLK_ID<s(0)(0)(0)>[T] pClBlk<s(0)(0)(0)>[&]);(D1:pClBlk:0)
extern  CL_POOL_ID<s(0)(0)(0)>[T] 	netClPoolIdGet<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], int bufSize<s(0)(0)(0)>[&],
                                        BOOL<s(0)(0)(0)>[T] bestFit<s(0)(0)(0)>[&]);(D1:bestFit:0)

extern  int 		netMblkToBufCopy<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&], char * pBuf<s(0)(0)(0)>[&],
                                          FUNCPTR<s(0)(0)(0)>[T] pCopyRtn<s(0)(0)(0)>[&]);(D1:pCopyRtn:0)
extern  int		netMblkOffsetToBufCopy<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pMblk<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&],
                                                char * pBuf<s(0)(0)(0)>[&], int len<s(0)(0)(0)>[&],
                                                FUNCPTR<s(0)(0)(0)>[T]	pCopyRtn<s(0)(0)(0)>[&]);(D1:pCopyRtn:0)
extern  M_BLK_ID<s(0)(0)(0)>[T] 	netMblkDup<s(0)(0)(0)>[&] (M_BLK_ID<s(0)(0)(0)>[T] pSrcMblk<s(0)(0)(0)>[&], M_BLK_ID<s(0)(0)(0)>[T]	pDestMblk<s(0)(0)(0)>[&]);(D1:pDestMblk:0)
extern  M_BLK_ID<s(0)(0)(0)>[T] 	netMblkChainDup<s(0)(0)(0)>[&] (NET_POOL_ID<s(0)(0)(0)>[T] pNetPool<s(0)(0)(0)>[&], M_BLK_ID<s(0)(0)(0)>[T]	pMblk<s(0)(0)(0)>[&],
                                         int offset<s(0)(0)(0)>[&], int len<s(0)(0)(0)>[&], int canWait<s(0)(0)(0)>[&]);(D1:canWait:0)

















 























 



 


 













 





 





 





 





 






 










 










 








 















 

 












 






















        




    
 















 

extern  struct mbstat<s(1)(0)(1)>[&] 	mbstat<s(1)(0)(1)>[&];(D1:mbstat:0)			 
extern  M_CL_CONFIG<s(0)(0)(0)>[T]	mClBlkConfig<s(0)(0)(0)>[&];(D1:mClBlkConfig:0)		 
extern  CL_DESC<s(0)(0)(0)>[T] 		clDescTbl<s(0)(0)(0)>[&] [];(D1:clDescTbl:0)		 
extern  int		clDescTblNumEnt<s(0)(0)(0)>[&];(D1:clDescTblNumEnt:0) 	 
extern  M_CL_CONFIG<s(0)(0)(0)>[T]	sysMclBlkConfig<s(0)(0)(0)>[&];(D1:sysMclBlkConfig:0)	 
extern  CL_DESC<s(0)(0)(0)>[T] 		sysClDescTbl<s(0)(0)(0)>[&] [];(D1:sysClDescTbl:0)	 
extern  int		sysClDescTblNumEnt<s(0)(0)(0)>[&];(D1:sysClDescTblNumEnt:0) 	 


extern  NET_POOL_ID<s(0)(0)(0)>[T]	_pNetDpool<s(0)(0)(0)>[&];(D1:_pNetDpool:0)		 
extern  NET_POOL_ID<s(0)(0)(0)>[T]	_pNetSysPool<s(0)(0)(0)>[&];(D1:_pNetSysPool:0)		 


 

extern int max_linkhdr<s(0)(0)(0)>[&];(D1:max_linkhdr:0)		 
extern int max_protohdr<s(0)(0)(0)>[&];(D1:max_protohdr:0)	 
extern int max_hdr<s(0)(0)(0)>[&];(D1:max_hdr:0)		 
extern int max_datalen<s(0)(0)(0)>[&];(D1:max_datalen:0)		 

extern struct	mBlk<s(1)(0)(1)>[&]  * netMblkClFree<s(0)(0)(0)>[&]( struct mBlk<s(1)(0)(1)>[&]  * ) ;(D1:mBlk:0)
extern struct	mBlk<s(1)(0)(1)>[&]  *m_getclr<s(0)(0)(0)>[&] (int, UCHAR<s(0)(0)(0)>[T], int, BOOL<s(0)(0)(0)>[T]);(D1:BOOL:0)
extern struct	mBlk<s(1)(0)(1)>[&]  *m_prepend<s(0)(0)(0)>[&] (struct mBlk<s(1)(0)(1)>[&]  *, int, int);(D1:mBlk:0)
extern struct	mBlk<s(1)(0)(1)>[&]  *m_pullup<s(0)(0)(0)>[&] (struct mBlk<s(1)(0)(1)>[&]  *, int);(D1:mBlk:0)
extern void	m_adj<s(0)(0)(0)>[&] (struct mBlk<s(1)(0)(1)>[&]  *, int);(D1:mBlk:0)
extern void	netMblkClChainFree<s(0)(0)(0)>[&]( struct mBlk<s(1)(0)(1)>[&]  * ) ;(D1:mBlk:0)
extern void 	m_cat<s(0)(0)(0)>[&] (struct mBlk<s(1)(0)(1)>[&]  *, struct mBlk<s(1)(0)(1)>[&]  *);(D1:mBlk:0)
extern struct 	mBlk<s(1)(0)(1)>[&]  *m_devget<s(0)(0)(0)>[&] (char *, int, int, struct ifnet<s(1)(0)(1)>[&] *,
				void (*copy<s(0)(0)(0)>[&])());(D1:copy:0)
struct mBlk<s(1)(0)(1)>[&]  *	mBufClGet<s(0)(0)(0)>[&] (int, UCHAR<s(0)(0)(0)>[T], register  int, BOOL<s(0)(0)(0)>[T]);(D1:BOOL:0) 
struct mBlk<s(1)(0)(1)>[&]  * 	mHdrClGet<s(0)(0)(0)>[&] (int, UCHAR<s(0)(0)(0)>[T], register  int, BOOL<s(0)(0)(0)>[T]);(D1:BOOL:0) 

extern  struct mBlk<s(1)(0)(1)>[&]  * bcopy_to_mbufs<s(0)(0)(0)>[&] (u_char<s(0)(0)(0)>[T] * buf<s(0)(0)(0)>[&], int totlen<s(0)(0)(0)>[&], int off0<s(0)(0)(0)>[&],
                                     struct ifnet<s(1)(0)(1)>[&] * ifp<s(0)(0)(0)>[&], int width<s(0)(0)(0)>[&]);(D1:width:0)
extern  struct mBlk<s(1)(0)(1)>[&]  * build_cluster<s(0)(0)(0)>[&] (u_char<s(0)(0)(0)>[T] * buf<s(0)(0)(0)>[&], int totlen<s(0)(0)(0)>[&],
                                    struct ifnet<s(1)(0)(1)>[&] * ifp<s(0)(0)(0)>[&], u_char<s(0)(0)(0)>[T] ctype<s(0)(0)(0)>[&],
                                    u_char<s(0)(0)(0)>[T] * pRefcnt<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] freeRtn<s(0)(0)(0)>[&],
                                    int arg1<s(0)(0)(0)>[&], int arg2<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&]);(D1:arg3:0)
extern  int	copyFromMbufs<s(0)(0)(0)>[&] (char * pIobuf<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  * pMbuf<s(0)(0)(0)>[&], int width<s(0)(0)(0)>[&]);(D1:width:0)












 






struct socket<s(1)(0)(1)>[&]
    {
    short	so_type<s(1)(1)(0)>[&];		 
    short	so_options<s(1)(1)(0)>[&];		 
    short	so_linger<s(1)(1)(0)>[&];		 
    short	so_state<s(1)(1)(0)>[&];		 
    caddr_t<s(1)(1)(0)>[T]	so_pcb<s(1)(1)(0)>[&];			 
    struct	protosw<s(2)(1)(1)>[&] *so_proto<s(1)(1)(0)>[&];	 

     



    int		so_userArg<s(1)(1)(0)>[&];		 
    SEM_ID<s(1)(1)(0)>[T]	so_timeoSem<s(1)(1)(0)>[&];		 
    int		so_fd<s(1)(1)(0)>[&];			 

     











    struct	socket<s(2)(1)(1)>[&] *so_head<s(1)(1)(0)>[&];	 
    struct	socket<s(2)(1)(1)>[&] *so_q0<s(1)(1)(0)>[&];		 
    struct	socket<s(2)(1)(1)>[&] *so_q<s(1)(1)(0)>[&];		 
    short	so_q0len<s(1)(1)(0)>[&];		 
    short	so_qlen<s(1)(1)(0)>[&];		 
    short	so_qlimit<s(1)(1)(0)>[&];		 
    short	so_timeo<s(1)(1)(0)>[&];		 
    u_short<s(1)(1)(0)>[T]	so_error<s(1)(1)(0)>[&];		 
    short	so_pgrp<s(1)(1)(0)>[&];		 
    u_long<s(1)(1)(0)>[T]	so_oobmark<s(1)(1)(0)>[&];		 

     

    struct	sockbuf<s(2)(1)(1)>[&]
	{
	u_long<s(2)(1)(0)>[T]		sb_cc<s(2)(1)(0)>[&];		 
	u_long<s(2)(1)(0)>[T]		sb_hiwat<s(2)(1)(0)>[&];	 
	u_long<s(2)(1)(0)>[T]		sb_mbcnt<s(2)(1)(0)>[&];	 
	u_long<s(2)(1)(0)>[T]		sb_mbmax<s(2)(1)(0)>[&];	 
	u_long<s(2)(1)(0)>[T]		sb_lowat<s(2)(1)(0)>[&];	 
	struct		mBlk<s(3)(1)(1)>[&]  *sb_mb<s(2)(1)(0)>[&];	 
	struct		proc<s(3)(1)(1)>[&] *sb_sel<s(2)(1)(0)>[&];	 
	short		sb_timeo<s(2)(1)(0)>[&];	 
	short		sb_flags<s(2)(1)(0)>[&];	 

	SEM_ID<s(2)(1)(0)>[T]		sb_Sem<s(2)(1)(0)>[&];		 
	int		sb_want<s(2)(1)(0)>[&];	 
	} so_rcv<s(1)(0)(0)>[&], so_snd<s(1)(0)(0)>[&];










    void	(*so_upcall<s(1)(0)(0)>[&]) (struct socket<s(2)(0)(1)>[&] *so<s(1)(0)(0)>[&], caddr_t<s(1)(0)(0)>[T] arg<s(1)(0)(0)>[&], int waitf<s(1)(0)(0)>[&]);
    caddr_t<s(1)(0)(0)>[T]	so_upcallarg<s(1)(0)(0)>[&];		 
    BOOL<s(1)(0)(0)>[T] 	selectFlag<s(1)(0)(0)>[&]; 		 
    SEL_WAKEUP_LIST<s(1)(0)(0)>[T] so_selWakeupList<s(1)(0)(0)>[&];  
    int         vsid<s(1)(0)(0)>[&];                  
    };






 















 



 









 



 





 







 







 







 








 















extern  VOIDFUNCPTR<s(0)(0)(0)>[T] sowakeupHook<s(0)(0)(0)>[&];(D1:sowakeupHook:0)

extern u_long<s(0)(0)(0)>[T]	sb_max<s(0)(0)(0)>[&];(D1:sb_max:0)

 


 
extern	char netio<s(0)(0)(0)>[&][],(D1:netio:0) netcon<s(0)(0)(0)>[&][],(D1:netcon:0) netcls<s(0)(0)(0)>[&][];(D1:netcls:0)

 


extern int soo_ioctl<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] * so<s(0)(0)(0)>[&], int cmd<s(0)(0)(0)>[&], caddr_t<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&]);(D1:data:0)
extern int soo_select<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *wakeupNode<s(0)(0)(0)>[&]);(D1:wakeupNode:0)
extern int soo_unselect<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], SEL_WAKEUP_NODE<s(0)(0)(0)>[T] *wakeupNode<s(0)(0)(0)>[&]);(D1:wakeupNode:0) 

struct mBlk<s(1)(0)(1)>[&] ;
struct sockaddr<s(1)(0)(1)>[&];

extern void	sbappend<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *m<s(0)(0)(0)>[&]);(D1:m:0)
extern int	sbappendaddr<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct sockaddr<s(1)(0)(1)>[&] *asa<s(0)(0)(0)>[&],
	    struct mBlk<s(1)(0)(1)>[&]  *m0<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *control<s(0)(0)(0)>[&]);(D1:control:0)
extern int	sbappendcontrol<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *m0<s(0)(0)(0)>[&],
	    struct mBlk<s(1)(0)(1)>[&]  *control<s(0)(0)(0)>[&]);(D1:control:0)
extern void	sbappendrecord<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *m0<s(0)(0)(0)>[&]);(D1:m0:0)
extern void	sbcheck<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern void	sbcompress<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *m<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *n<s(0)(0)(0)>[&]);(D1:n:0)
extern void	sbdrop<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], int len<s(0)(0)(0)>[&]);(D1:len:0)
extern void	sbdroprecord<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern void	sbflush<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern void	sbinsertoob<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *m0<s(0)(0)(0)>[&]);(D1:m0:0)
extern void	sbrelease<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern int	sbreserve<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], u_long<s(0)(0)(0)>[T] cc<s(0)(0)(0)>[&]);(D1:cc:0)
extern void	sbwait<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern void	sbwakeup<s(0)(0)(0)>[&](struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&],
			 SELECT_TYPE<s(0)(0)(0)>[T] wakeupType<s(0)(0)(0)>[&]);(D1:wakeupType:0)
extern int	sb_lock<s(0)(0)(0)>[&] (struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&]);(D1:sb:0)
extern int	soabort<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	soaccept<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *nam<s(0)(0)(0)>[&]);(D1:nam:0)
extern int	sobind<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *nam<s(0)(0)(0)>[&]);(D1:nam:0)
extern void	socantrcvmore<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	socantsendmore<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	soclose<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	soconnect<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *nam<s(0)(0)(0)>[&]);(D1:nam:0)
extern int	soconnect2<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so1<s(0)(0)(0)>[&], struct socket<s(1)(0)(1)>[&] *so2<s(0)(0)(0)>[&]);(D1:so2:0)
extern int	socreate<s(0)(0)(0)>[&] (int dom<s(0)(0)(0)>[&], struct socket<s(1)(0)(1)>[&] **aso<s(0)(0)(0)>[&], int type<s(0)(0)(0)>[&], int proto<s(0)(0)(0)>[&]);(D1:proto:0)
extern int	sodisconnect<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	sofree<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	sogetopt<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&], int optname<s(0)(0)(0)>[&],
	    struct mBlk<s(1)(0)(1)>[&]  **mp<s(0)(0)(0)>[&]);(D1:mp:0)
extern void	sohasoutofband<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	soisconnected<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	soisconnecting<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	soisdisconnected<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern void	soisdisconnecting<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	solisten<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int backlog<s(0)(0)(0)>[&]);(D1:backlog:0)
extern struct socket<s(1)(0)(1)>[&] *
	sonewconn1<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *head<s(0)(0)(0)>[&], int connstatus<s(0)(0)(0)>[&]);(D1:connstatus:0)
extern void	soqinsque<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *head<s(0)(0)(0)>[&], struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int q<s(0)(0)(0)>[&]);(D1:q:0)
extern int	soqremque<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int q<s(0)(0)(0)>[&]);(D1:q:0)
extern int	soreceive<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  **paddr<s(0)(0)(0)>[&], 
			   struct uio<s(1)(0)(1)>[&] *pUio<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  **mp0<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  **
			   controlp<s(0)(0)(0)>[&], int *flagsp<s(0)(0)(0)>[&]);(D1:flagsp:0)
extern int	soreserve<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], u_long<s(0)(0)(0)>[T] sndcc<s(0)(0)(0)>[&], u_long<s(0)(0)(0)>[T] rcvcc<s(0)(0)(0)>[&]);(D1:rcvcc:0)
extern void	sorflush<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&]);(D1:so:0)
extern int	sosend<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *addr<s(0)(0)(0)>[&], struct uio<s(1)(0)(1)>[&] *uio<s(0)(0)(0)>[&],
	    struct mBlk<s(1)(0)(1)>[&]  *top<s(0)(0)(0)>[&], struct mBlk<s(1)(0)(1)>[&]  *control<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&]);(D1:flags:0)
extern int	sosetopt<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int level<s(0)(0)(0)>[&], int optname<s(0)(0)(0)>[&],
	    struct mBlk<s(1)(0)(1)>[&]  *m0<s(0)(0)(0)>[&]);(D1:m0:0)
extern int	soshutdown<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], int how<s(0)(0)(0)>[&]);(D1:how:0)
extern void	sowakeup<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *so<s(0)(0)(0)>[&], struct sockbuf<s(1)(0)(1)>[&] *sb<s(0)(0)(0)>[&], 
			  SELECT_TYPE<s(0)(0)(0)>[T] wakeupType<s(0)(0)(0)>[&]);(D1:wakeupType:0)







 

 

 


































 






















 



struct radix_node<s(1)(0)(1)>[&] {
	struct	radix_mask<s(2)(1)(1)>[&] *rn_mklist<s(1)(1)(0)>[&];	 
	struct	radix_node<s(2)(1)(1)>[&] *rn_p<s(1)(1)(0)>[&];	 
	short	rn_b<s(1)(1)(0)>[&];			 
	char	rn_bmask<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	rn_flags<s(1)(1)(0)>[&];		 




	union {
		struct {			 
			caddr_t<s(3)(1)(0)>[T]	rn_Key<s(3)(1)(0)>[&];	 
			caddr_t<s(3)(1)(0)>[T]	rn_Mask<s(3)(1)(0)>[&];	 
			struct	radix_node<s(4)(1)(1)>[&] *rn_Dupedkey<s(3)(1)(0)>[&];
		} rn_leaf<s(2)(0)(0)>[&];
		struct {			 
			int	rn_Off<s(3)(1)(0)>[&];		 
			struct	radix_node<s(4)(1)(1)>[&] *rn_L<s(3)(1)(0)>[&]; 
			struct	radix_node<s(4)(1)(1)>[&] *rn_R<s(3)(1)(0)>[&]; 
		}rn_node<s(2)(0)(0)>[&];
	}		rn_u<s(1)(0)(0)>[&];





};








 



extern struct radix_mask<s(1)(0)(1)>[&] {
	short	rm_b<s(1)(1)(0)>[&];			 
	char	rm_unused<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	rm_flags<s(1)(1)(0)>[&];		 
	struct	radix_mask<s(2)(1)(1)>[&] *rm_mklist<s(1)(1)(0)>[&];	 
	union	{
		caddr_t<s(2)(1)(0)>[T]	rmu_mask<s(2)(1)(0)>[&];		 
		struct	radix_node<s(3)(1)(1)>[&] *rmu_leaf<s(2)(1)(0)>[&];	 
	}	rm_rmu<s(1)(0)(0)>[&];
	int	rm_refs<s(1)(0)(0)>[&];		 
} *rn_mkfreelist<s(0)(0)(0)>[&];(D1:rn_mkfreelist:0)













struct radix_node_head<s(1)(0)(1)>[&] {
	struct	radix_node<s(2)(1)(1)>[&] *rnh_treetop<s(1)(1)(0)>[&];
	int	rnh_addrsize<s(1)(1)(0)>[&];		 
	int	rnh_pktsize<s(1)(1)(0)>[&];		 
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_addaddr<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], void *mask<s(1)(1)(0)>[&],
		     struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&], struct radix_node<s(2)(1)(1)>[&] nodes<s(2)(1)(1)>[&][]);
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_addpkt<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], void *mask<s(1)(1)(0)>[&],
		     struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&], struct radix_node<s(2)(1)(1)>[&] nodes<s(2)(1)(1)>[&][]);
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_deladdr<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], void *mask<s(1)(1)(0)>[&], struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&]);
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_delpkt<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], void *mask<s(1)(1)(0)>[&], struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&]);
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_matchaddr<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&], int);
        struct  radix_node<s(2)(1)(1)>[&] *(*rnh_lookup<s(1)(1)(0)>[&])        
                (void *v<s(1)(1)(0)>[&], void *mask<s(1)(1)(0)>[&], struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&]);
	struct	radix_node<s(2)(1)(1)>[&] *(*rnh_matchpkt<s(1)(1)(0)>[&])	 
		(void *v<s(1)(1)(0)>[&], struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&]);
	int	(*rnh_walktree<s(1)(1)(0)>[&])			 
		(struct radix_node_head<s(2)(1)(1)>[&] *head<s(1)(1)(0)>[&], int (*f<s(1)(1)(0)>[&])(), void *w<s(1)(1)(0)>[&]);
	struct	radix_node<s(2)(1)(1)>[&] rnh_nodes<s(2)(1)(1)>[&][3];	 
};















void	 rn_init<s(0)(0)(0)>[&] (void);(D1:rn_init:0)

int	 rn_inithead<s(0)(0)(0)>[&] (struct radix_node_head<s(1)(0)(1)>[&] **, int);(D1:radix_node_head:0)
int	 rn_destroyhead<s(0)(0)(0)>[&] (struct radix_node_head<s(1)(0)(1)>[&] *);(D1:radix_node_head:0)
int	 rn_refines<s(0)(0)(0)>[&] (void *, void *);(D1:rn_refines:0)
int	 rn_walksubtree<s(0)(0)(0)>[&] (struct radix_node_head<s(1)(0)(1)>[&] *, void *, void *,
                         int (*)(), void *);(D1:radix_node_head:0)
int	 rn_walktree<s(0)(0)(0)>[&] (struct radix_node_head<s(1)(0)(1)>[&] *, int (*)(), void *);(D1:radix_node_head:0)
struct radix_node<s(1)(0)(1)>[&]
	 *rn_addmask<s(0)(0)(0)>[&] (void *, int, int),(D1:rn_addmask:0)
	 *rn_addroute<s(0)(0)(0)>[&] (void *, void *, struct radix_node_head<s(1)(0)(1)>[&] *,
			struct radix_node<s(1)(0)(1)>[&] [2]),(D1:radix_node:0)
	 *rn_delete<s(0)(0)(0)>[&] (void *, void *, struct radix_node_head<s(1)(0)(1)>[&] *),(D1:radix_node_head:0)
	 *rn_insert<s(0)(0)(0)>[&] (void *, struct radix_node_head<s(1)(0)(1)>[&] *, int *,
			struct radix_node<s(1)(0)(1)>[&] [2]),(D1:radix_node:0)
	 *rn_match<s(0)(0)(0)>[&] (void *, struct radix_node_head<s(1)(0)(1)>[&] *, int),(D1:radix_node_head:0)
	 *rn_newpair<s(0)(0)(0)>[&] (void *, int, struct radix_node<s(1)(0)(1)>[&][2]),(D1:radix_node:0)
	 *rn_search<s(0)(0)(0)>[&] (void *, struct radix_node<s(1)(0)(1)>[&] *),(D1:radix_node:0)
	 *rn_search_m<s(0)(0)(0)>[&] (void *, struct radix_node<s(1)(0)(1)>[&] *, void *);(D1:radix_node:0)














 






 




struct route<s(1)(0)(1)>[&]
    {
    struct	rtentry<s(2)(1)(1)>[&] *ro_rt<s(1)(1)(0)>[&];
    struct	sockaddr<s(2)(1)(1)>[&] ro_dst<s(2)(1)(1)>[&];
    };

 



struct rt_metrics<s(1)(0)(1)>[&] {
	u_long<s(1)(1)(0)>[T]	rmx_locks<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_mtu<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_expire<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_recvpipe<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_sendpipe<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_ssthresh<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_rtt<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rmx_rttvar<s(1)(1)(0)>[&];	 
	u_short<s(1)(1)(0)>[T]	rmx_hopcount<s(1)(1)(0)>[&];	 
        u_short<s(1)(1)(0)>[T] rmx_mss<s(1)(1)(0)>[&]; 	 

         

        long 	value1<s(1)(1)(0)>[&];
        long 	value2<s(1)(1)(0)>[&];
        long 	value3<s(1)(1)(0)>[&];
        long 	value4<s(1)(1)(0)>[&];
        long 	value5<s(1)(1)(0)>[&];
        long 	routeTag<s(1)(1)(0)>[&];
        u_char<s(1)(1)(0)>[T]  weight<s(1)(1)(0)>[&];
};

 






struct sockaddr_gate<s(1)(0)(1)>[&]
    {
    u_char<s(1)(1)(0)>[T]         gate_len<s(1)(1)(0)>[&];
    u_char<s(1)(1)(0)>[T]         gate_family<s(1)(1)(0)>[&];
    u_char<s(1)(1)(0)>[T]         routeProto<s(1)(1)(0)>[&];
    u_char<s(1)(1)(0)>[T]         weight<s(1)(1)(0)>[&];
    u_long<s(1)(1)(0)>[T]         gate_addr<s(1)(1)(0)>[&];
    long           value1<s(1)(1)(0)>[&];
    long           value2<s(1)(1)(0)>[&];
    long           value3<s(1)(1)(0)>[&];
    long           value4<s(1)(1)(0)>[&];
    long           value5<s(1)(1)(0)>[&];
    long           routeTag<s(1)(1)(0)>[&];
    };

 







 










struct rtentry<s(1)(0)(1)>[&] {
	struct	radix_node<s(2)(1)(1)>[&] rt_nodes<s(2)(1)(1)>[&][2];	 


	struct	sockaddr<s(2)(1)(1)>[&] *rt_gateway<s(1)(1)(0)>[&];	 
	short	rt_flags<s(1)(1)(0)>[&];		 
	short	rt_refcnt<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	rt_use<s(1)(1)(0)>[&];			 
	struct	ifnet<s(2)(1)(1)>[&] *rt_ifp<s(1)(1)(0)>[&];		 
	struct	ifaddr<s(2)(1)(1)>[&] *rt_ifa<s(1)(1)(0)>[&];		 
	struct	sockaddr<s(2)(1)(1)>[&] *rt_genmask<s(1)(1)(0)>[&];	 
	caddr_t<s(1)(1)(0)>[T]	rt_llinfo<s(1)(1)(0)>[&];		 
	struct	rtentry<s(2)(1)(1)>[&] *rt_gwroute<s(1)(1)(0)>[&];	 
        int	rt_mod<s(1)(1)(0)>[&];			  
	struct	rt_metrics<s(2)(1)(1)>[&] rt_rmx<s(2)(1)(1)>[&];	 
        struct  rtentry<s(2)(1)(1)>[&] *rt_parent<s(1)(1)(0)>[&];      
};

 



struct ortentry<s(1)(0)(1)>[&] {
	u_long<s(1)(1)(0)>[T]	rt_hash<s(1)(1)(0)>[&];		 
	struct	sockaddr<s(2)(1)(1)>[&] rt_dst<s(2)(1)(1)>[&];	 
	struct	sockaddr<s(2)(1)(1)>[&] rt_gateway<s(2)(1)(1)>[&];	 
	short	rt_flags<s(1)(1)(0)>[&];		 
	short	rt_refcnt<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	rt_use<s(1)(1)(0)>[&];			 
	struct	ifnet<s(2)(1)(1)>[&] *rt_ifp<s(1)(1)(0)>[&];		 
        int	rt_mod<s(1)(1)(0)>[&];			 
};
























 

struct	rtstat<s(1)(0)(1)>[&]
    {
    short	rts_badredirect<s(1)(1)(0)>[&];	 
    short	rts_dynamic<s(1)(1)(0)>[&];		 
    short	rts_newgateway<s(1)(1)(0)>[&];		 
    short	rts_unreach<s(1)(1)(0)>[&];		 
    short	rts_wildcard<s(1)(1)(0)>[&];		 
    };

 


struct rt_msghdr<s(1)(0)(1)>[&] {
	u_short<s(1)(1)(0)>[T]	rtm_msglen<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	rtm_version<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	rtm_type<s(1)(1)(0)>[&];	 
	u_short<s(1)(1)(0)>[T]	rtm_index<s(1)(1)(0)>[&];	 
	int	rtm_flags<s(1)(1)(0)>[&];	 
	int	rtm_addrs<s(1)(1)(0)>[&];	 
	pid_t<s(1)(1)(0)>[T]	rtm_pid<s(1)(1)(0)>[&];	 
	int	rtm_seq<s(1)(1)(0)>[&];	 
	int	rtm_errno<s(1)(1)(0)>[&];	 
	int	rtm_use<s(1)(1)(0)>[&];	 
	u_long<s(1)(1)(0)>[T]	rtm_inits<s(1)(1)(0)>[&];	 
	struct	rt_metrics<s(2)(1)(1)>[&] rtm_rmx<s(2)(1)(1)>[&];  
};































 











 












 










struct rt_addrinfo<s(1)(0)(1)>[&] {
	int	rti_addrs<s(1)(1)(0)>[&];
	struct	sockaddr<s(2)(1)(1)>[&] *rti_info<s(1)(1)(0)>[&][8 ];
};

struct route_cb<s(1)(0)(1)>[&] {
	int	ip_count<s(1)(1)(0)>[&];
	int	ns_count<s(1)(1)(0)>[&];
	int	iso_count<s(1)(1)(0)>[&];
	int	any_count<s(1)(1)(0)>[&];
};











extern	struct	rtstat<s(1)(0)(1)>[&]	rtstat<s(1)(0)(1)>[&];(D1:rtstat:0)
extern	struct	radix_node_head<s(1)(0)(1)>[&] *rt_tables<s(0)(0)(0)>[&][];(D1:rt_tables:0)
extern  int	rtmodified<s(0)(0)(0)>[&];(D1:rtmodified:0) 




int	 route_init<s(0)(0)(0)>[&] (void);(D1:route_init:0)

void	 rt_maskedcopy<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *,
	    struct sockaddr<s(1)(0)(1)>[&] *, struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)
int	 rt_setgate<s(0)(0)(0)>[&] (struct rtentry<s(1)(0)(1)>[&] *,
	    struct sockaddr<s(1)(0)(1)>[&] *, struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)
void	 rtable_init<s(0)(0)(0)>[&] (void **);(D1:rtable_init:0)
void	 rtalloc<s(0)(0)(0)>[&] (struct route<s(1)(0)(1)>[&] *);(D1:route:0)
struct rtentry<s(1)(0)(1)>[&] *
	 rtalloc1<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *, int, int);(D1:sockaddr:0)
void	 rtfree<s(0)(0)(0)>[&] (struct rtentry<s(1)(0)(1)>[&] *);(D1:rtentry:0)
int	 rtinit<s(0)(0)(0)>[&] (struct ifaddr<s(1)(0)(1)>[&] *, int, int);(D1:ifaddr:0)
int	 rtioctl<s(0)(0)(0)>[&] (int, caddr_t<s(0)(0)(0)>[T]);(D1:caddr_t:0)
int	 rtredirect<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *, struct sockaddr<s(1)(0)(1)>[&] *,
	    struct sockaddr<s(1)(0)(1)>[&] *, int, struct sockaddr<s(1)(0)(1)>[&] *, struct rtentry<s(1)(0)(1)>[&] **);(D1:rtentry:0)
int	 rtrequest<s(0)(0)(0)>[&] (int, struct sockaddr<s(1)(0)(1)>[&] *,
	    struct sockaddr<s(1)(0)(1)>[&] *, struct sockaddr<s(1)(0)(1)>[&] *, int, struct rtentry<s(1)(0)(1)>[&] **);(D1:rtentry:0)
int	 rtrequest11<s(0)(0)(0)>[&] (int, struct sockaddr<s(1)(0)(1)>[&] *,
	    struct sockaddr<s(1)(0)(1)>[&] *, struct sockaddr<s(1)(0)(1)>[&] *, int, struct rtentry<s(1)(0)(1)>[&] **);(D1:rtentry:0)







 

 

 




















 


extern STATUS<s(0)(0)(0)>[T]   ifAddrAdd<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *interfaceAddress<s(0)(0)(0)>[&],
                           char *broadcastAddress<s(0)(0)(0)>[&], int subnetMask<s(0)(0)(0)>[&]);(D1:subnetMask:0)
extern STATUS<s(0)(0)(0)>[T] 	ifAddrSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *interfaceAddress<s(0)(0)(0)>[&]);(D1:interfaceAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifAddrDelete<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *interfaceAddress<s(0)(0)(0)>[&]);(D1:interfaceAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifAddrGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *interfaceAddress<s(0)(0)(0)>[&]);(D1:interfaceAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifBroadcastSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *broadcastAddress<s(0)(0)(0)>[&]);(D1:broadcastAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifBroadcastGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *broadcastAddress<s(0)(0)(0)>[&]);(D1:broadcastAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifDstAddrSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *dstAddress<s(0)(0)(0)>[&]);(D1:dstAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifDstAddrGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], char *dstAddress<s(0)(0)(0)>[&]);(D1:dstAddress:0)
extern STATUS<s(0)(0)(0)>[T] 	ifMaskSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int netMask<s(0)(0)(0)>[&]);(D1:netMask:0)
extern STATUS<s(0)(0)(0)>[T] 	ifMaskGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int *netMask<s(0)(0)(0)>[&]);(D1:netMask:0)
extern STATUS<s(0)(0)(0)>[T] 	ifFlagChange<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] on<s(0)(0)(0)>[&]);(D1:on:0)
extern STATUS<s(0)(0)(0)>[T] 	ifFlagSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&]);(D1:flags:0)
extern STATUS<s(0)(0)(0)>[T] 	ifFlagGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int *flags<s(0)(0)(0)>[&]);(D1:flags:0)
extern STATUS<s(0)(0)(0)>[T] 	ifMetricSet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int metric<s(0)(0)(0)>[&]);(D1:metric:0)
extern STATUS<s(0)(0)(0)>[T] 	ifMetricGet<s(0)(0)(0)>[&] (char *interfaceName<s(0)(0)(0)>[&], int *pMetric<s(0)(0)(0)>[&]);(D1:pMetric:0)
extern int 	ifRouteDelete<s(0)(0)(0)>[&] (char *ifName<s(0)(0)(0)>[&], int unit<s(0)(0)(0)>[&]);(D1:unit:0)
extern struct 	ifnet<s(1)(0)(1)>[&] *ifunit<s(0)(0)(0)>[&] (char *ifname<s(0)(0)(0)>[&]);(D1:ifname:0)
extern struct	ifnet<s(1)(0)(1)>[&] *ifIndexToIfpNoLock<s(0)(0)(0)>[&] (int ifIndex<s(0)(0)(0)>[&]);(D1:ifIndex:0)
extern struct	ifnet<s(1)(0)(1)>[&] *ifIndexToIfp<s(0)(0)(0)>[&] (int ifIndex<s(0)(0)(0)>[&]);(D1:ifIndex:0)
extern unsigned short	ifNameToIfIndex<s(0)(0)(0)>[&] (char *ifname<s(0)(0)(0)>[&]);(D1:ifname:0)
extern STATUS<s(0)(0)(0)>[T]	ifIndexToIfName<s(0)(0)(0)>[&] (unsigned short ifIndex<s(0)(0)(0)>[&], char *ifname<s(0)(0)(0)>[&]);(D1:ifname:0)
extern STATUS<s(0)(0)(0)>[T]	ifUnnumberedSet<s(0)(0)(0)>[&](char *, char *, char *, char *);(D1:ifUnnumberedSet:0)
extern int 	ifAllRoutesDelete<s(0)(0)(0)>[&] (char *, int);(D1:ifAllRoutesDelete:0)












 
























struct	ifqueue<s(1)(0)(1)>[&] {
	struct	mBlk<s(2)(1)(1)>[&]  *ifq_head<s(1)(1)(0)>[&];
	struct	mBlk<s(2)(1)(1)>[&]  *ifq_tail<s(1)(1)(0)>[&];
	int	ifq_len<s(1)(1)(0)>[&];
	int	ifq_maxlen<s(1)(1)(0)>[&];
	int	ifq_drops<s(1)(1)(0)>[&];
};

struct mBlk<s(1)(0)(1)>[&] ;
struct proc<s(1)(0)(1)>[&];
struct rtentry<s(1)(0)(1)>[&];
struct socket<s(1)(0)(1)>[&];
struct ether_header<s(1)(0)(1)>[&];

 



struct	if_data<s(1)(0)(1)>[&] {
	 
	u_char<s(1)(1)(0)>[T]	ifi_type<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	ifi_addrlen<s(1)(1)(0)>[&];		 
	u_char<s(1)(1)(0)>[T]	ifi_hdrlen<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_mtu<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_metric<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_baudrate<s(1)(1)(0)>[&];		 
	 
	u_long<s(1)(1)(0)>[T]	ifi_ipackets<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_ierrors<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_opackets<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_oerrors<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_collisions<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_ibytes<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_obytes<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_imcasts<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_omcasts<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_iqdrops<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]	ifi_noproto<s(1)(1)(0)>[&];		 
	u_long<s(1)(1)(0)>[T]  ifi_lastchange<s(1)(1)(0)>[&];		 
};

 





struct ifnet<s(1)(0)(1)>[&] {
	char	*if_name<s(1)(1)(0)>[&];		 
	struct	ifnet<s(2)(1)(1)>[&] *if_next<s(1)(1)(0)>[&];		 
	struct	ifaddr<s(2)(1)(1)>[&] *if_addrlist<s(1)(1)(0)>[&];	 
	int	if_pcount<s(1)(1)(0)>[&];		 
	caddr_t<s(1)(1)(0)>[T]	if_bpf<s(1)(1)(0)>[&];			 
	u_short<s(1)(1)(0)>[T]	if_index<s(1)(1)(0)>[&];		 
	short	if_unit<s(1)(1)(0)>[&];		 
	short	if_timer<s(1)(1)(0)>[&];		 
	short	if_flags<s(1)(1)(0)>[&];		 
	struct	if_data<s(2)(1)(1)>[&] if_data<s(2)(1)(1)>[&];	 
	struct	mBlk<s(2)(1)(1)>[&] *	pInmMblk<s(1)(1)(0)>[&]; 	 
	int	(*if_init<s(1)(1)(0)>[&]) 
		(int unit<s(1)(1)(0)>[&]);		 
	int	(*if_output<s(1)(1)(0)>[&])		 
		(struct ifnet<s(2)(1)(1)>[&] *, struct mBlk<s(2)(1)(1)>[&]  *, struct sockaddr<s(2)(1)(1)>[&] *, 
		 struct rtentry<s(2)(1)(1)>[&] *);	
	int	(*if_start<s(1)(1)(0)>[&]) 		 
    		(struct ifnet<s(2)(1)(1)>[&] *);
	int	(*if_ioctl<s(1)(1)(0)>[&])		 
		(struct ifnet<s(2)(1)(1)>[&] *, int cmd<s(1)(1)(0)>[&], caddr_t<s(1)(1)(0)>[T] data<s(1)(1)(0)>[&]);
	int	(*if_reset<s(1)(1)(0)>[&])		 
		(int unit<s(1)(1)(0)>[&]);	
	int	(*if_resolve<s(1)(1)(0)>[&])();	 
	void	(*if_watchdog<s(1)(1)(0)>[&])		 
		(int unit<s(1)(1)(0)>[&]);
	struct	ifqueue<s(2)(1)(1)>[&] if_snd<s(2)(1)(1)>[&];		 
        void * 	pCookie<s(1)(1)(0)>[&]; 		 



};














































 







 
















 














 





struct ifaddr<s(1)(0)(1)>[&] {
	struct	sockaddr<s(2)(1)(1)>[&] *ifa_addr<s(1)(1)(0)>[&];	 
	struct	sockaddr<s(2)(1)(1)>[&] *ifa_dstaddr<s(1)(1)(0)>[&];	 

	struct	sockaddr<s(2)(1)(1)>[&] *ifa_netmask<s(1)(1)(0)>[&];	 
	struct	ifnet<s(2)(1)(1)>[&] *ifa_ifp<s(1)(1)(0)>[&];		 
	struct	ifaddr<s(2)(1)(1)>[&] *ifa_next<s(1)(1)(0)>[&];	 
	void	(*ifa_rtrequest<s(1)(1)(0)>[&])();	 
	u_short<s(1)(1)(0)>[T]	ifa_flags<s(1)(1)(0)>[&];		 
	short	ifa_refcnt<s(1)(1)(0)>[&];		 
	int	ifa_metric<s(1)(1)(0)>[&];		 
};


 



struct if_msghdr<s(1)(0)(1)>[&] {
	u_short<s(1)(1)(0)>[T]	ifm_msglen<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	ifm_version<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	ifm_type<s(1)(1)(0)>[&];	 
	int	ifm_addrs<s(1)(1)(0)>[&];	 
	int	ifm_flags<s(1)(1)(0)>[&];	 
	u_short<s(1)(1)(0)>[T]	ifm_index<s(1)(1)(0)>[&];	 
	struct	if_data<s(2)(1)(1)>[&] ifm_data<s(2)(1)(1)>[&]; 
};

 



struct ifa_msghdr<s(1)(0)(1)>[&] {
	u_short<s(1)(1)(0)>[T]	ifam_msglen<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	ifam_version<s(1)(1)(0)>[&];	 
	u_char<s(1)(1)(0)>[T]	ifam_type<s(1)(1)(0)>[&];	 
	int	ifam_addrs<s(1)(1)(0)>[&];	 
	int	ifam_flags<s(1)(1)(0)>[&];	 
	u_short<s(1)(1)(0)>[T]	ifam_index<s(1)(1)(0)>[&];	 
	int	ifam_metric<s(1)(1)(0)>[&];	 
};

 





struct	ifreq<s(1)(0)(1)>[&] {

	char	ifr_name<s(1)(1)(0)>[&][16 ];		 
	union {
		struct	sockaddr<s(3)(1)(1)>[&] ifru_addr<s(3)(1)(1)>[&];
		struct	sockaddr<s(3)(1)(1)>[&] ifru_dstaddr<s(3)(1)(1)>[&];
		struct	sockaddr<s(3)(1)(1)>[&] ifru_broadaddr<s(3)(1)(1)>[&];
		short	ifru_flags<s(2)(1)(0)>[&];
		int	ifru_metric<s(2)(1)(0)>[&];
		caddr_t<s(2)(1)(0)>[T]	ifru_data<s(2)(1)(0)>[&];
	} ifr_ifru<s(1)(0)(0)>[&];






};

struct ifaliasreq<s(1)(0)(1)>[&] {
	char	ifra_name<s(1)(1)(0)>[&][16 ];		 
	struct	sockaddr<s(2)(1)(1)>[&] ifra_addr<s(2)(1)(1)>[&];
	struct	sockaddr<s(2)(1)(1)>[&] ifra_broadaddr<s(2)(1)(1)>[&];
	struct	sockaddr<s(2)(1)(1)>[&] ifra_mask<s(2)(1)(1)>[&];
};

 



struct	ifmreq<s(1)(0)(1)>[&] {

	char	ifr_name<s(1)(1)(0)>[&][16 ];		 
	int	ifr_tableLen<s(1)(1)(0)>[&];
	char 	*ifr_table<s(1)(1)(0)>[&];
};

 





struct	ifconf<s(1)(0)(1)>[&] {
	int	ifc_len<s(1)(1)(0)>[&];		 
	union {
		caddr_t<s(2)(1)(0)>[T]	ifcu_buf<s(2)(1)(0)>[&];
		struct	ifreq<s(3)(1)(1)>[&] *ifcu_req<s(2)(1)(0)>[&];
	} ifc_ifcu<s(1)(0)(0)>[&];


};

 




typedef struct mtuQuery_t<s(1)(0)(1)>[&] 
	{
	UCHAR<s(1)(1)(0)>[T] family<s(1)(1)(0)>[&];
	UINT32<s(1)(1)(0)>[T] dstIpAddr<s(1)(1)(0)>[&];
	UINT32<s(1)(1)(0)>[T] mtu<s(1)(1)(0)>[&];
	} MTU_QUERY<s(0)(0)(0)>[&];(D1:MTU_QUERY:1)[[TYPENAME:MTU_QUERY]]











extern struct ifnet<s(1)(0)(1)>[&] * 	ifnet<s(0)(0)(0)>[&];(D1:ifnet:0)		 
extern struct ifqueue<s(1)(0)(1)>[&] 	rawintrq<s(1)(0)(1)>[&];(D1:rawintrq:0)	 

extern STATUS<s(0)(0)(0)>[T]		if_attach<s(0)(0)(0)>[&] (struct ifnet<s(1)(0)(1)>[&] *);(D1:ifnet:0)
extern void		if_down<s(0)(0)(0)>[&] (struct ifnet<s(1)(0)(1)>[&] *);(D1:ifnet:0)
extern void		if_qflush<s(0)(0)(0)>[&] (struct ifqueue<s(1)(0)(1)>[&] *);(D1:ifqueue:0)


extern void		if_slowtimo<s(0)(0)(0)>[&] (void);(D1:if_slowtimo:0)




extern void		if_up<s(0)(0)(0)>[&] (struct ifnet<s(1)(0)(1)>[&] *);(D1:ifnet:0)
extern int		ifconf<s(0)(0)(0)>[&] (int, caddr_t<s(0)(0)(0)>[T]);(D1:caddr_t:0)
extern void		ifinit<s(0)(0)(0)>[&] (void);(D1:ifinit:0)
extern int		ifioctl<s(0)(0)(0)>[&] (struct socket<s(1)(0)(1)>[&] *, u_long<s(0)(0)(0)>[T], caddr_t<s(0)(0)(0)>[T]);(D1:caddr_t:0)
extern int		ifpromisc<s(0)(0)(0)>[&] (struct ifnet<s(1)(0)(1)>[&] *, int);(D1:ifnet:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifa_ifwithaddr<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifa_ifwithaf<s(0)(0)(0)>[&] (int);(D1:ifa_ifwithaf:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifa_ifwithdstaddr<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifa_ifwithnet<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifaof_ifpforaddr<s(0)(0)(0)>[&] (struct sockaddr<s(1)(0)(1)>[&] *, struct ifnet<s(1)(0)(1)>[&] *);(D1:ifnet:0)
extern struct ifaddr<s(1)(0)(1)>[&] *	ifa_ifwithroute<s(0)(0)(0)>[&](int, struct sockaddr<s(1)(0)(1)>[&] *, 
					struct sockaddr<s(1)(0)(1)>[&]*);(D1:sockaddr:0)
extern void		ifafree<s(0)(0)(0)>[&] (struct ifaddr<s(1)(0)(1)>[&] *);(D1:ifaddr:0)
extern void		link_rtrequest<s(0)(0)(0)>[&] (int, struct rtentry<s(1)(0)(1)>[&] *,
                                        struct sockaddr<s(1)(0)(1)>[&] *);(D1:sockaddr:0)

struct port_enable_info<s(1)(0)(1)>[&]{
	int port<s(1)(1)(0)>[&];
	int disable<s(1)(1)(0)>[&];
	int protocol<s(1)(1)(0)>[&];	 
	char description<s(1)(1)(0)>[&][64];
	int hitcount<s(1)(1)(0)>[&];
	struct port_enable_info<s(2)(1)(1)>[&] *pnext<s(1)(1)(0)>[&];
};

typedef struct portUsing_hash<s(1)(0)(1)>[&]{
	int count<s(1)(1)(0)>[&];
	struct port_enable_info<s(2)(1)(1)>[&] *pnext<s(1)(1)(0)>[&];
}portUsing_Hash<s(0)(0)(0)>[&];(D1:portUsing_Hash:1)[[TYPENAME:portUsing_Hash]]	 













 




 





















 









 


struct in_addr<s(1)(0)(1)>[&] {
	u_long<s(1)(1)(0)>[T] s_addr<s(1)(1)(0)>[&];
};

 










































 


struct sockaddr_in<s(1)(0)(1)>[&] {
	u_char<s(1)(1)(0)>[T]	sin_len<s(1)(1)(0)>[&];
	u_char<s(1)(1)(0)>[T]	sin_family<s(1)(1)(0)>[&];
	u_short<s(1)(1)(0)>[T]	sin_port<s(1)(1)(0)>[&];
	struct	in_addr<s(2)(1)(1)>[&] sin_addr<s(2)(1)(1)>[&];
	char	sin_zero<s(1)(1)(0)>[&][8];
};

 





struct sockaddr_rt<s(1)(0)(1)>[&] {
	u_char<s(1)(1)(0)>[T]	srt_len<s(1)(1)(0)>[&];
	u_char<s(1)(1)(0)>[T]	srt_family<s(1)(1)(0)>[&];
        u_char<s(1)(1)(0)>[T]  srt_proto<s(1)(1)(0)>[&];
        u_char<s(1)(1)(0)>[T]  srt_tos<s(1)(1)(0)>[&];          
	struct	in_addr<s(2)(1)(1)>[&] srt_addr<s(2)(1)(1)>[&];
	char	sin_zero<s(1)(1)(0)>[&][8];
        };












 






struct ip_opts<s(1)(0)(1)>[&] {
	struct	in_addr<s(2)(1)(1)>[&] ip_dst<s(2)(1)(1)>[&];		 
	char	opts<s(1)(1)(0)>[&][40];		 
};

 



















 






 









struct ip_mreq<s(1)(0)(1)>[&] {
 struct in_addr<s(2)(1)(1)>[&] imr_multiaddr<s(2)(1)(1)>[&];  
   union {
     struct in_addr<s(3)(1)(1)>[&] u_imr_interface<s(3)(1)(1)>[&]; 
     int       u_imr_index<s(2)(1)(0)>[&];       
 } imr_arg<s(1)(0)(0)>[&];
};







 









 



















 


















extern	struct domain<s(1)(0)(1)>[&] inetdomain<s(1)(0)(1)>[&];(D1:inetdomain:0)
extern  BOOL<s(0)(0)(0)>[T] inet_netmatch<s(0)(0)(0)>[&](struct sockaddr_in<s(1)(0)(1)>[&] *sin1<s(0)(0)(0)>[&], struct sockaddr_in<s(1)(0)(1)>[&] *sin2<s(0)(0)(0)>[&]);(D1:sin2:0)
extern  void in_makeaddr_b<s(0)(0)(0)>[&](u_long<s(0)(0)(0)>[T] net<s(0)(0)(0)>[&], u_long<s(0)(0)(0)>[T] host<s(0)(0)(0)>[&], struct in_addr<s(1)(0)(1)>[&] * pAddr<s(0)(0)(0)>[&]);(D1:pAddr:0)
extern 	u_long<s(0)(0)(0)>[T] in_lnaof<s(0)(0)(0)>[&]();(D1:in_lnaof:0)
extern	void in_ifaddr_remove<s(0)(0)(0)>[&]();(D1:in_ifaddr_remove:0)
extern	int in_broadcast<s(0)(0)(0)>[&] (struct in_addr<s(1)(0)(1)>[&], struct ifnet<s(1)(0)(1)>[&] *);(D1:ifnet:0)
extern	int in_canforward<s(0)(0)(0)>[&] (struct in_addr<s(1)(0)(1)>[&]);(D1:in_addr:0)
extern	int in_cksum<s(0)(0)(0)>[&] (struct mBlk<s(1)(0)(1)>[&]  *, int);(D1:mBlk:0)
extern	int in_localaddr<s(0)(0)(0)>[&] (struct in_addr<s(1)(0)(1)>[&]);(D1:in_addr:0)
extern	u_long<s(0)(0)(0)>[T] in_netof<s(0)(0)(0)>[&] (struct in_addr<s(1)(0)(1)>[&]);(D1:in_addr:0)
extern	void in_socktrim<s(0)(0)(0)>[&] (struct sockaddr_in<s(1)(0)(1)>[&] *);(D1:sockaddr_in:0)
extern  struct in_ifaddr<s(1)(0)(1)>[&] *in_iaonnetof<s(0)(0)(0)>[&](u_long<s(0)(0)(0)>[T] net<s(0)(0)(0)>[&]);(D1:net:0)
















 





 










 













 
 


 



























 










 
extern void tmd_init<s(0)(0)(0)>[&](void *bp<s(0)(0)(0)>[&]);(D1:bp:0)

 


struct sirocco_bootp_req_info<s(1)(0)(1)>[&] {
    char serial_number<s(1)(1)(0)>[&][12];
    int slot_number<s(1)(1)(0)>[&];
    short int board_style<s(1)(1)(0)>[&];
    short int card_function<s(1)(1)(0)>[&];
};

 


struct sirocco_bootp_resp_info<s(1)(0)(1)>[&] {
    struct in_addr<s(2)(1)(1)>[&] scm_addr<s(2)(1)(1)>[&];
    struct in_addr<s(2)(1)(1)>[&] scm_mask<s(2)(1)(1)>[&];
    struct in_addr<s(2)(1)(1)>[&] sca_addr<s(2)(1)(1)>[&];
    struct in_addr<s(2)(1)(1)>[&] sca_mask<s(2)(1)(1)>[&];
    struct in_addr<s(2)(1)(1)>[&] gate_addr<s(2)(1)(1)>[&];
};

union sirocco_bootp_vend_info<s(1)(0)(1)>[&] {
    struct sirocco_bootp_req_info<s(2)(1)(1)>[&] req_info<s(2)(1)(1)>[&];
    struct sirocco_bootp_resp_info<s(2)(1)(1)>[&] resp_info<s(2)(1)(1)>[&];
};





extern int Inital_load_complete<s(0)(0)(0)>[&];(D1:Inital_load_complete:0)
extern unsigned int InitialTextLoadAddr<s(0)(0)(0)>[&];(D1:InitialTextLoadAddr:0)
extern unsigned int TextLoadAddr<s(0)(0)(0)>[&];(D1:TextLoadAddr:0)


 
int getSlotNumber<s(0)(0)(0)>[&](void);(D1:getSlotNumber:0)









extern int sysShutdown<s(0)(0)(0)>[&];(D1:sysShutdown:0)
extern int sysPoweroff<s(0)(0)(0)>[&];(D1:sysPoweroff:0)

typedef enum {
    INIT_ERROR_NONE<s(0)(0)(0)>[&],
    INIT_ERROR_MINOR<s(0)(0)(0)>[&],
    INIT_ERROR_MAJOR<s(0)(0)(0)>[&],
    INIT_ERROR_FATAL<s(0)(0)(0)>[&]
} InitErrorEnum<s(0)(0)(0)>[&];(D1:InitErrorEnum:1)[[TYPENAME:InitErrorEnum]]

struct globals<s(1)(0)(1)>[&] {
     



    char externalDevName<s(1)(1)(0)>[&][10 ];   
    unsigned long externalIPAddress<s(1)(1)(0)>[&];     
    unsigned long externalNetmask<s(1)(1)(0)>[&];   
    unsigned long externalBroadcast<s(1)(1)(0)>[&];     
    unsigned long gatewayIpAddress<s(1)(1)(0)>[&];  
    unsigned long nodeIPAddress<s(1)(1)(0)>[&];     
    unsigned long nodeIPNetmask<s(1)(1)(0)>[&];     
    char serialNumber<s(1)(1)(0)>[&][12 ];   
    unsigned long physicalSlot<s(1)(1)(0)>[&];  
    unsigned long logicalSlot<s(1)(1)(0)>[&];   

    int cardFunction<s(1)(1)(0)>[&];            
    int boardStyle<s(1)(1)(0)>[&];              
    int cardState<s(1)(1)(0)>[&];               
    int warmStart<s(1)(1)(0)>[&];               
    int coldStart<s(1)(1)(0)>[&];               
    
    struct acb<s(2)(1)(1)>[&] **applicationACBs<s(1)(1)(0)>[&];

    InitErrorEnum<s(1)(1)(0)>[T] ErrorLevel<s(1)(1)(0)>[&];    

    int activeInterface<s(1)(1)(0)>[&];         
    char actIfName<s(1)(1)(0)>[&][10 ];     
    unsigned long activeIpAddr<s(1)(1)(0)>[&];  
    char loadPath<s(1)(1)(0)>[&][100 ];  
    int chassisType<s(1)(1)(0)>[&];             

    void *moduleInfo<s(1)(1)(0)>[&];            
    void *logQueue<s(1)(1)(0)>[&];              
    unsigned int *sizes<s(1)(1)(0)>[&];         
    unsigned int *npool<s(1)(1)(0)>[&];         
    unsigned int *nused<s(1)(1)(0)>[&];         
    unsigned long memRatio<s(1)(1)(0)>[&];

    unsigned long externalIPAddressSec<s(1)(1)(0)>[&];
    unsigned long externalNetmaskSec<s(1)(1)(0)>[&];
    int ethernetEnable<s(1)(1)(0)>[&];

     



    unsigned long GmplsIPAddress<s(1)(1)(0)>[&]; 
    unsigned long GmplsIPNetmask<s(1)(1)(0)>[&]; 

};



 





 










 















extern struct globals<s(1)(0)(1)>[&] globals<s(1)(0)(1)>[&];(D1:globals:0)

extern short getPortNumber<s(0)(0)(0)>[&](void);(D1:getPortNumber:0)






 









typedef unsigned char Uint8<s(0)(0)(0)>[&];(D1:Uint8:1)[[TYPENAME:Uint8]]
typedef signed char Int8<s(0)(0)(0)>[&];(D1:Int8:1)[[TYPENAME:Int8]]

typedef unsigned short Uint16<s(0)(0)(0)>[&];(D1:Uint16:1)[[TYPENAME:Uint16]]
typedef short Int16<s(0)(0)(0)>[&];(D1:Int16:1)[[TYPENAME:Int16]]

typedef unsigned int Uint32<s(0)(0)(0)>[&];(D1:Uint32:1)[[TYPENAME:Uint32]]
typedef int Int32<s(0)(0)(0)>[&];(D1:Int32:1)[[TYPENAME:Int32]]


typedef unsigned char Boolean<s(0)(0)(0)>[&];(D1:Boolean:1)[[TYPENAME:Boolean]]





 












 
 
 
 




   
typedef struct
{
    short proxy_slot_list<s(1)(1)(0)>[&][40 +1];      
} fdrProxyList_t<s(0)(0)(0)>[&];(D1:fdrProxyList_t:1)[[TYPENAME:fdrProxyList_t]]

 
 
 
 
 
 
 
 
struct cmndSlotUpdate<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    int reg_flags<s(1)(1)(0)>[&];                       
    int physical_slot<s(1)(1)(0)>[&];                   
    int board_function<s(1)(1)(0)>[&];                  

    int card_function<s(1)(1)(0)>[&];                   
    int card_style<s(1)(1)(0)>[&];                      
    int card_state<s(1)(1)(0)>[&];                      
    int last_card_style<s(1)(1)(0)>[&];                 
    int isCardSmart<s(1)(1)(0)>[&];                     
    int proxy_slot<s(1)(1)(0)>[&];                      

    int response_required<s(1)(1)(0)>[&];               
    int logical_slot<s(1)(1)(0)>[&];                    
    unsigned int sparedslots_bitmask<s(1)(1)(0)>[&];    
};
typedef struct cmndSlotUpdate<s(1)(0)(1)>[&] cmndSlotUpdate_t<s(1)(0)(1)>[&];(D1:cmndSlotUpdate_t:1)[[TYPENAME:cmndSlotUpdate_t]]

 
 
 

 
 
 
 
 












 
 
 
 
 









extern STATUS<s(0)(0)(0)>[T] fdrcoll_Register_Notification<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] physical_slot<s(0)(0)(0)>[&], int reg_flags<s(0)(0)(0)>[&]);(D1:reg_flags:0)
extern STATUS<s(0)(0)(0)>[T] fdrcoll_UnRegister_Notification<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] physical_slot<s(0)(0)(0)>[&],
                                              int reg_flags<s(0)(0)(0)>[&]);(D1:reg_flags:0)
 
 
 
 
 
extern int fdr_poll_slot_state<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_slot_style<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_last_slot_style<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_slot_function<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_slot_operational_function<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_slot_running_function<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_proxy_slot<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_poll_slot_is_card_smart<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_get_logical_slot_of_physical_slot<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)
extern int fdr_get_physical_slot_of_logical_slot<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] logical_slot<s(0)(0)(0)>[&]);(D1:logical_slot:0)
extern int fdr_fetch_proxy_slots_for_card<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&],
                                          fdrProxyList_t<s(0)(0)(0)>[T] *proxylist<s(0)(0)(0)>[&]);(D1:proxylist:0)
extern int fdr_poll_all_info_for_slot<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] pslot<s(0)(0)(0)>[&], cmndSlotUpdate_t<s(0)(0)(0)>[T] *csu<s(0)(0)(0)>[&]);(D1:csu:0)

 
 
 
 
 
extern int fdrcoll_get_local_card_state<s(0)(0)(0)>[&](void);(D1:fdrcoll_get_local_card_state:0)
extern STATUS<s(0)(0)(0)>[T] fdrcoll_Register_Mapping_Notification<s(0)(0)(0)>[&](void);(D1:fdrcoll_Register_Mapping_Notification:0)
extern void fdr_transmit_slot_notification_response<s(0)(0)(0)>[&](cmndSlotUpdate_t<s(0)(0)(0)>[T] *msg<s(0)(0)(0)>[&]);(D1:msg:0)
extern unsigned int fdrcoll_what_was_last_Eval_broadcast_key<s(0)(0)(0)>[&](void);(D1:fdrcoll_what_was_last_Eval_broadcast_key:0)
extern int fdr_poll_slot_is_soft_synchronized<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] phys_slot<s(0)(0)(0)>[&]);(D1:phys_slot:0)


 

   

















 
 
 

 
    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        applId_tt<s(1)(1)(0)>[T] applId<s(1)(1)(0)>[&];
        unsigned int new_state<s(1)(1)(0)>[&];
        unsigned int failure_mode<s(1)(1)(0)>[&];
        unsigned int slot_event_key<s(1)(1)(0)>[&];
    } cmndFmtFDRcommand_t<s(0)(0)(0)>[&];(D1:cmndFmtFDRcommand_t:1)[[TYPENAME:cmndFmtFDRcommand_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        unsigned int card_state<s(1)(1)(0)>[&];
        unsigned int slot_event_key<s(1)(1)(0)>[&];

    } cmndFdrCardStateChange_t<s(0)(0)(0)>[&];(D1:cmndFdrCardStateChange_t:1)[[TYPENAME:cmndFdrCardStateChange_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        int board_type<s(1)(1)(0)>[&];
        int board_function<s(1)(1)(0)>[&];
        int card_state<s(1)(1)(0)>[&];
        int phys_slot<s(1)(1)(0)>[&];
        unsigned int slot_event_key<s(1)(1)(0)>[&];
    } cmndFdrQuery_t<s(0)(0)(0)>[&];(D1:cmndFdrQuery_t:1)[[TYPENAME:cmndFdrQuery_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        unsigned int slot_event_key<s(1)(1)(0)>[&];
        char i2cAddr<s(1)(1)(0)>[&][30];
        int phys_slot<s(1)(1)(0)>[&];
        unsigned int entity_id_number<s(1)(1)(0)>[&];
        short entity_index<s(1)(1)(0)>[&];
    } cmndFdrBackplaneQuery_t<s(0)(0)(0)>[&];(D1:cmndFdrBackplaneQuery_t:1)[[TYPENAME:cmndFdrBackplaneQuery_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        int physical_slot<s(1)(1)(0)>[&];
        int prior_card_type<s(1)(1)(0)>[&];
    } cmndFdrRemoveIntf_t<s(0)(0)(0)>[&];(D1:cmndFdrRemoveIntf_t:1)[[TYPENAME:cmndFdrRemoveIntf_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        int physical_slot<s(1)(1)(0)>[&];
        char i2cAddr<s(1)(1)(0)>[&][30];
        unsigned int slot_event_key<s(1)(1)(0)>[&];

    } cmndFdrDumbCardQuery_t<s(0)(0)(0)>[&];(D1:cmndFdrDumbCardQuery_t:1)[[TYPENAME:cmndFdrDumbCardQuery_t]]

 
    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        int notified_card_state<s(1)(1)(0)>[&];
    } cmndFdrMapNotify_t<s(0)(0)(0)>[&];(D1:cmndFdrMapNotify_t:1)[[TYPENAME:cmndFdrMapNotify_t]]

    typedef struct {
        command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
        int applnum<s(1)(1)(0)>[&];
        char applname<s(1)(1)(0)>[&][30];
        int notification<s(1)(1)(0)>[&];
        int status<s(1)(1)(0)>[&];
        int flag_fdr_reports<s(1)(1)(0)>[&];
        int options<s(1)(1)(0)>[&];
    } cmndFdrCollReg_t<s(0)(0)(0)>[&];(D1:cmndFdrCollReg_t:1)[[TYPENAME:cmndFdrCollReg_t]]

 







 
 
 




































 





 
 
 
 





 






 









 







enum
{
    CMM_LEVEL_ERR<s(0)(0)(0)>[&] = 0,
    CMM_LEVEL_CMC<s(0)(0)(0)>[&],
    CMM_LEVEL_SLOT<s(0)(0)(0)>[&],
    CMM_LEVEL_STATE<s(0)(0)(0)>[&],
    CMM_LEVEL_ALMEVT<s(0)(0)(0)>[&]
};

enum
{
    CMM_LEVEL_CAI<s(0)(0)(0)>[&] = 0,
    CMM_LEVEL_CMI<s(0)(0)(0)>[&]
};

enum
{
    CMM_LEVEL_CAD<s(0)(0)(0)>[&] = 0,
    CAD_LEVEL_ALMEVT<s(0)(0)(0)>[&],
    CAD_LEVEL_ERR<s(0)(0)(0)>[&]
};
enum
{
    CMND_CM_DATA_INIT_COMPLETE<s(0)(0)(0)>[&] = 0x3800 ,
    CMND_CM_CARDPROV<s(0)(0)(0)>[&],
    CMND_CM_CARDSTATECHG<s(0)(0)(0)>[&],
    CMND_CM_READYTOINIT<s(0)(0)(0)>[&],
    CMND_CM_READYTOACT<s(0)(0)(0)>[&],
    CMND_CM_PREPARETOACT<s(0)(0)(0)>[&],
    CMND_CM_DEINIT<s(0)(0)(0)>[&],
    CMND_CM_DEACT<s(0)(0)(0)>[&],
    CMND_CM_INITDRV<s(0)(0)(0)>[&],
    CMND_CM_RESTOREAPP<s(0)(0)(0)>[&],
    CMND_CM_INITAPP<s(0)(0)(0)>[&],
    CMND_CM_ACTDRV<s(0)(0)(0)>[&],
    CMND_CM_ACTAPP<s(0)(0)(0)>[&],
    CMND_CM_INITDRVOK<s(0)(0)(0)>[&],
    CMND_CM_INITDRVFAIL<s(0)(0)(0)>[&],
    CMND_CM_INITAPPOK<s(0)(0)(0)>[&],
    CMND_CM_INITAPPFAIL<s(0)(0)(0)>[&],
    CMND_CM_ACTDRVOK<s(0)(0)(0)>[&],
    CMND_CM_ACTDRVFAIL<s(0)(0)(0)>[&],
    CMND_CM_ACTAPPOK<s(0)(0)(0)>[&],
    CMND_CM_ACTAPPFAIL<s(0)(0)(0)>[&],
    CMND_CM_CHECKSTATE<s(0)(0)(0)>[&],          
    CMND_CM_CHECKSTATE_ACK<s(0)(0)(0)>[&],          
    CMND_CM_DRVSTAE<s(0)(0)(0)>[&],             
    CMND_CM_INSERT<s(0)(0)(0)>[&],
    CMND_CM_REMOVE<s(0)(0)(0)>[&],
    CMND_CM_FAIL<s(0)(0)(0)>[&],
    CMND_CM_FAILCLR<s(0)(0)(0)>[&],
    CMND_CM_ACTIVECC<s(0)(0)(0)>[&],
    CMND_CM_PHYINSERT<s(0)(0)(0)>[&],
    CMND_CM_APP_QUERY_MIBCARD<s(0)(0)(0)>[&],
    CMND_CM_MIBCARD<s(0)(0)(0)>[&],
    CMND_CM_MIBCARD_ACK<s(0)(0)(0)>[&],
    CMND_CM_CARDSTATE<s(0)(0)(0)>[&],
    CMND_CM_CARDSTATE_ACK<s(0)(0)(0)>[&],
    CMND_CM_MIBCARD_INIT_FINISH<s(0)(0)(0)>[&],
    CMND_CM_CMI_STARTED<s(0)(0)(0)>[&],
    CMND_CM_MIBCARD_ACT_FINISH<s(0)(0)(0)>[&],
    CMND_CM_RESTORE_CARD<s(0)(0)(0)>[&],
    CMND_CM_ADD_CARD<s(0)(0)(0)>[&],
    CMND_CM_DEL_CARD<s(0)(0)(0)>[&],
    CMND_CM_CARD_DOWN<s(0)(0)(0)>[&],
    CMND_CM_CARD_UP<s(0)(0)(0)>[&],
    CMND_CM_DELCARD<s(0)(0)(0)>[&],
    CMND_CM_RESETCARD<s(0)(0)(0)>[&],
    CMND_CM_REBOOT<s(0)(0)(0)>[&],
    CMND_CM_HALT<s(0)(0)(0)>[&],
    CMND_CM_HALT_ACK<s(0)(0)(0)>[&],
    CMND_CM_LATCH_STATE<s(0)(0)(0)>[&],
    CMND_CM_ACTIVECCDOWN<s(0)(0)(0)>[&],
    CMND_CM_ACTIVECCUP<s(0)(0)(0)>[&],
    CMND_CM_REPORT_CARD_DEFECT<s(0)(0)(0)>[&],
    CMND_CM_REPORT_CARD_PRESENCE<s(0)(0)(0)>[&],
    CMND_CM_DISABLECARD<s(0)(0)(0)>[&],
    CMND_CM_ENABLECARD<s(0)(0)(0)>[&],
    CMND_CM_TASK_READY<s(0)(0)(0)>[&],
    CMND_CM_TASK_READY_ACK<s(0)(0)(0)>[&],
    CMND_CM_SLOT_UPDATE<s(0)(0)(0)>[&],
    CMND_CM_CC_CAPABILITY_QUERY<s(0)(0)(0)>[&],   
    CMND_CM_CC_CAPABILITY<s(0)(0)(0)>[&],         
    CMND_CM_CC_CAPABILITY_ACK<s(0)(0)(0)>[&],     
    CMND_CM_CPC_LOCC_CAPACITY<s(0)(0)(0)>[&],      
    CMND_CM_CPC_HOCC_PHYSTATE<s(0)(0)(0)>[&],     
    CMND_CM_CPC_HOCC_PHYSTATE_ACK<s(0)(0)(0)>[&],  
    CMND_CM_CC_QUERY_ACTIVECC<s(0)(0)(0)>[&],         
    CMND_CM_APP_QUERY_CARDSTATE<s(0)(0)(0)>[&],        
    CMND_CM_APP_QUERY_CARDSTATE_RESPD<s(0)(0)(0)>[&],        
    CMND_CM_CARD_REBOOT<s(0)(0)(0)>[&],
    CMND_CM_RESETCPU<s(0)(0)(0)>[&],                         
    CMND_CM_SET_TEMPTH<s(0)(0)(0)>[&],          
    CMND_CM_QUERY_LATCHSTATE<s(0)(0)(0)>[&],
    CMND_CM_POLLING_STATE<s(0)(0)(0)>[&],          
    CMND_CM_MIBCARD_CHECKSTATE_FINISHED<s(0)(0)(0)>[&],    
    CMND_CM_UNITFAIL<s(0)(0)(0)>[&],                     
    CMND_CM_PCM_NOVALIDMIBCC<s(0)(0)(0)>[&],         
    CMND_CM_SWFPGAVS<s(0)(0)(0)>[&],              
    CMND_CM_VCXOOCXOFAIL<s(0)(0)(0)>[&],         
    CMND_CM_CHECKMIBACTFINISH<s(0)(0)(0)>[&],     
    CMND_CM_SETSILED<s(0)(0)(0)>[&],     
    CMND_CM_SHUTDOWNLAMP<s(0)(0)(0)>[&],     
    CMND_CM_SETLAMP<s(0)(0)(0)>[&],     
    CMND_CM_STOPSLAVECCCHECK<s(0)(0)(0)>[&],     
    CMND_CM_HOCC_POWER_FAIL<s(0)(0)(0)>[&],       
    CMND_CM_QUERY_TEMP_THRESHOLD<s(0)(0)(0)>[&],  
    CMND_CM_TEMP_THRESHOLD_ACK<s(0)(0)(0)>[&],    
    CMND_CM_SET_CARDTYPE<s(0)(0)(0)>[&],     
    CMND_CM_SET_HOCC_AIS<s(0)(0)(0)>[&],
    CMND_CM_SET_PORT_STATUS<s(0)(0)(0)>[&],
    CMND_CM_ACTIVE_HOCC_COLD_REBOOT<s(0)(0)(0)>[&],
    CMND_CM_ALL_LCCARD_ACTIVE<s(0)(0)(0)>[&],
    CMND_CM_FAN_PWR_INFO_QUERY<s(0)(0)(0)>[&],
    CMND_CM_FAN_PWR_INFO_RESP<s(0)(0)(0)>[&],
    CMND_CM_FAN_FAILED<s(0)(0)(0)>[&]
};

typedef enum _CM_CARDBASESTATE_T<s(0)(0)(0)>[&]
{
    CM_BASSTATE_NONE<s(0)(0)(0)>[&]=0,          
    CM_BASSTATE_UP<s(0)(0)(0)>[&] = 1,          
    CM_BASSTATE_DOWN<s(0)(0)(0)>[&] = 2,        
    CM_BASSTATE_UNKNOWN<s(0)(0)(0)>[&] = 3      
} CM_CARDBASESTATE_T<s(0)(0)(0)>[&];(D1:CM_CARDBASESTATE_T:1)[[TYPENAME:CM_CARDBASESTATE_T]]

typedef struct _CM_CARDINFO_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];     
    UINT32<s(1)(1)(0)>[T] style<s(1)(1)(0)>[&];    
    UINT32<s(1)(1)(0)>[T] option<s(1)(1)(0)>[&];   
    BOOL<s(1)(1)(0)>[T]   warm<s(1)(1)(0)>[&];     
    BOOL<s(1)(1)(0)>[T]   cancfg<s(1)(1)(0)>[&];   
    BOOL<s(1)(1)(0)>[T]   suspended<s(1)(1)(0)>[&];  
} CM_CARDINFO_T<s(0)(0)(0)>[&];(D1:CM_CARDINFO_T:1)[[TYPENAME:CM_CARDINFO_T]]

struct CM_INFO_CC_QURY_CPC_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];
};

struct CM_RESET_CPU_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T] Pslot<s(1)(1)(0)>[&];
};

struct CM_POLL_STATE_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T] Pslot<s(1)(1)(0)>[&];
};


typedef struct _CM_ACTIVECC_DATA_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T]                ActiveCC<s(1)(1)(0)>[&];
} CM_ACTIVECC_DATA_T<s(0)(0)(0)>[&];(D1:CM_ACTIVECC_DATA_T:1)[[TYPENAME:CM_ACTIVECC_DATA_T]]

typedef struct _CM_HOCC_PHYSTATE_T<s(1)(0)(1)>[&]
{
    SLOT_NUMBER_T<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ispresent<s(1)(1)(0)>[&];
}CM_HOCC_PHYSTATE_T<s(0)(0)(0)>[&];(D1:CM_HOCC_PHYSTATE_T:1)[[TYPENAME:CM_HOCC_PHYSTATE_T]]

typedef struct _CM_CPC_CCPHYSTATE_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];   
    CM_HOCC_PHYSTATE_T<s(1)(1)(0)>[T]    info<s(1)(1)(0)>[&];   
} CM_CPC_CCPHYSTATE_T<s(0)(0)(0)>[&];(D1:CM_CPC_CCPHYSTATE_T:1)[[TYPENAME:CM_CPC_CCPHYSTATE_T]]

typedef struct _CM_CCS_CPC_READY_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];   
    UINT32<s(1)(1)(0)>[T]                slot<s(1)(1)(0)>[&];   
} CM_CCS_CPC_READY_T<s(0)(0)(0)>[&];(D1:CM_CCS_CPC_READY_T:1)[[TYPENAME:CM_CCS_CPC_READY_T]]


typedef struct _CM_CARDSTATE_DATA_T<s(1)(0)(1)>[&]
{
    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                cmd<s(1)(1)(0)>[&];
} CM_CARDSTATE_DATA_T<s(0)(0)(0)>[&];(D1:CM_CARDSTATE_DATA_T:1)[[TYPENAME:CM_CARDSTATE_DATA_T]]

typedef struct _CM_CARDSTATE_ACK_DATA_T<s(1)(0)(1)>[&]
{
    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                cmd<s(1)(1)(0)>[&];
    PB_ERROR_CODE_T<s(1)(1)(0)>[T]       result<s(1)(1)(0)>[&];
} CM_CARDSTATE_ACK_DATA_T<s(0)(0)(0)>[&];(D1:CM_CARDSTATE_ACK_DATA_T:1)[[TYPENAME:CM_CARDSTATE_ACK_DATA_T]]

typedef struct _CM_MIBCARD_DATA_T<s(1)(0)(1)>[&]
{
    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&][SLOT_NUMBER_MAX<s(1)(1)(0)>[&] ];
} CM_MIBCARD_DATA_T<s(0)(0)(0)>[&];(D1:CM_MIBCARD_DATA_T:1)[[TYPENAME:CM_MIBCARD_DATA_T]]


typedef struct _CM_CARDSTATE_ARRY_T<s(1)(0)(1)>[&]
{
    CM_CARDSTATE_DATA_T<s(1)(1)(0)>[T]         state<s(1)(1)(0)>[&][SLOT_NUMBER_MAX<s(1)(1)(0)>[&] ];
} CM_CARDSTATE_ARRY_T<s(0)(0)(0)>[&];(D1:CM_CARDSTATE_ARRY_T:1)[[TYPENAME:CM_CARDSTATE_ARRY_T]]

typedef struct _CM_REPORT_CARD_DEFECT_DATA_T<s(1)(0)(1)>[&]
{
    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ur<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] miscard<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uf<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] initing<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] misslot<s(1)(1)(0)>[&];
} CM_REPORT_CARD_DEFECT_DATA_T<s(0)(0)(0)>[&];(D1:CM_REPORT_CARD_DEFECT_DATA_T:1)[[TYPENAME:CM_REPORT_CARD_DEFECT_DATA_T]]

typedef struct _CM_HALT_DATA_T<s(1)(0)(1)>[&]
{
    BOOL<s(1)(1)(0)>[T]       warm<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]      type<s(1)(1)(0)>[&];    
} CM_HALT_DATA_T<s(0)(0)(0)>[&];(D1:CM_HALT_DATA_T:1)[[TYPENAME:CM_HALT_DATA_T]]

typedef enum
{
    TMS_NO_FAULTY_ALARM<s(0)(0)(0)>[&] = 0,
    TMS_VCXO_FAIL<s(0)(0)(0)>[&],
    TMS_OCXO_FAIL<s(0)(0)(0)>[&],
    TMS_HOCC_POWER_FAIL<s(0)(0)(0)>[&]
}CM_VCXOOCXO_FAULTY_TYPE<s(0)(0)(0)>[&];(D1:CM_VCXOOCXO_FAULTY_TYPE:1)[[TYPENAME:CM_VCXOOCXO_FAULTY_TYPE]]
 
typedef struct
{
    UINT8<s(1)(1)(0)>[T]                   slot<s(1)(1)(0)>[&];
    CM_VCXOOCXO_FAULTY_TYPE<s(1)(1)(0)>[T]    faultyType<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                       vcxofail<s(1)(1)(0)>[&];
}CM_RECV_VOCXO_MSG_T<s(0)(0)(0)>[&];(D1:CM_RECV_VOCXO_MSG_T:1)[[TYPENAME:CM_RECV_VOCXO_MSG_T]]


 
 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]              head<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                   slot<s(1)(1)(0)>[&];
    CM_VCXOOCXO_FAULTY_TYPE<s(1)(1)(0)>[T]    faultyType<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                       vcxofail<s(1)(1)(0)>[&];
} CM_VCXOOCXO_FAIL_IND_MSG_T<s(0)(0)(0)>[&];(D1:CM_VCXOOCXO_FAIL_IND_MSG_T:1)[[TYPENAME:CM_VCXOOCXO_FAIL_IND_MSG_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]           high<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           low<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           slot<s(1)(1)(0)>[&];
}CM_TEMP_THRESHOLD_T<s(0)(0)(0)>[&];(D1:CM_TEMP_THRESHOLD_T:1)[[TYPENAME:CM_TEMP_THRESHOLD_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]              head<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           high<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           low<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           slot<s(1)(1)(0)>[&];
} CM_TEMP_THRESHOLD_MSG_T<s(0)(0)(0)>[&];(D1:CM_TEMP_THRESHOLD_MSG_T:1)[[TYPENAME:CM_TEMP_THRESHOLD_MSG_T]]

 
typedef struct _CM_ACTIVECC_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];     
    UINT32<s(1)(1)(0)>[T]                ActiveCC<s(1)(1)(0)>[&]; 
                                    
} CM_ACTIVECC_T<s(0)(0)(0)>[&];(D1:CM_ACTIVECC_T:1)[[TYPENAME:CM_ACTIVECC_T]]

 
typedef struct _CM_CARDSTATE_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];   

    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&];   
    UINT32<s(1)(1)(0)>[T]                cmd<s(1)(1)(0)>[&];    
                                  
                                  
                                  
                                  
                                  
} CM_CARDSTATE_T<s(0)(0)(0)>[&];(D1:CM_CARDSTATE_T:1)[[TYPENAME:CM_CARDSTATE_T]]

 
typedef struct _CM_CARDSTATE_ACK_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];  
  
    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&];  
    UINT32<s(1)(1)(0)>[T]                cmd<s(1)(1)(0)>[&];   
    PB_ERROR_CODE_T<s(1)(1)(0)>[T]       result<s(1)(1)(0)>[&]; 
} CM_CARDSTATE_ACK_T<s(0)(0)(0)>[&];(D1:CM_CARDSTATE_ACK_T:1)[[TYPENAME:CM_CARDSTATE_ACK_T]]

 
typedef struct _CM_APP_QUERY_CARDSTATE_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
} CM_APP_QUERY_CARDSTATE_T<s(0)(0)(0)>[&];(D1:CM_APP_QUERY_CARDSTATE_T:1)[[TYPENAME:CM_APP_QUERY_CARDSTATE_T]]

 
typedef struct _CM_APP_QUERY_CARDSTATE_REPD_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
    CM_CARDSTATE_ARRY_T<s(1)(1)(0)>[T]         state<s(1)(1)(0)>[&];  
}CM_APP_QUERY_CARDSTATE_REPD_T<s(0)(0)(0)>[&];(D1:CM_APP_QUERY_CARDSTATE_REPD_T:1)[[TYPENAME:CM_APP_QUERY_CARDSTATE_REPD_T]]

 
typedef struct _CM_MIBCARD_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
    CM_CARDINFO_T<s(1)(1)(0)>[T]         card<s(1)(1)(0)>[&][SLOT_NUMBER_MAX<s(1)(1)(0)>[&] ];  
} CM_MIBCARD_T<s(0)(0)(0)>[&];(D1:CM_MIBCARD_T:1)[[TYPENAME:CM_MIBCARD_T]]

 
typedef struct _CM_MIBCARD_ACK_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
} CM_MIBCARD_ACK_T<s(0)(0)(0)>[&];(D1:CM_MIBCARD_ACK_T:1)[[TYPENAME:CM_MIBCARD_ACK_T]]

 
typedef struct _CM_APP_QUERY_MIBCARD_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
} CM_APP_QUERY_MIBCARD_T<s(0)(0)(0)>[&];(D1:CM_APP_QUERY_MIBCARD_T:1)[[TYPENAME:CM_APP_QUERY_MIBCARD_T]]


typedef struct _CM_REPORT_CARD_DEFECT_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];

    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ur<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] miscard<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uf<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] initing<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] misslot<s(1)(1)(0)>[&];
} CM_REPORT_CARD_DEFECT_T<s(0)(0)(0)>[&];(D1:CM_REPORT_CARD_DEFECT_T:1)[[TYPENAME:CM_REPORT_CARD_DEFECT_T]]



typedef struct _CM_HALT_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]       warm<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]      type<s(1)(1)(0)>[&];  
} CM_HALT_T<s(0)(0)(0)>[&];(D1:CM_HALT_T:1)[[TYPENAME:CM_HALT_T]]

typedef struct _CM_LATCH_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                 slot<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                 state<s(1)(1)(0)>[&];
} CM_LATCH_T<s(0)(0)(0)>[&];(D1:CM_LATCH_T:1)[[TYPENAME:CM_LATCH_T]]

typedef enum{
    NE_HOCC_CAPABILITY_UNKNOW<s(0)(0)(0)>[&] = 0,      
    NE_HOCC_CAPABILITY_340G<s(0)(0)(0)>[&]   = 1,      
    NE_HOCC_CAPABILITY_680G<s(0)(0)(0)>[&]  = 2       
}eNeHOCCCapability<s(0)(0)(0)>[&];(D1:eNeHOCCCapability:1)[[TYPENAME:eNeHOCCCapability]]

typedef enum{
    NE_LOCC_CAPABILITY_UNKNOW<s(0)(0)(0)>[&] = 0,      
    NE_LOCC_CAPABILITY_NONE<s(0)(0)(0)>[&]     =1,     
    NE_LOCC_CAPABILITY_20G<s(0)(0)(0)>[&]    = 2,      
    NE_LOCC_CAPABILITY_40G<s(0)(0)(0)>[&]  = 3       
}eNeLOCCCapability<s(0)(0)(0)>[&];(D1:eNeLOCCCapability:1)[[TYPENAME:eNeLOCCCapability]]

typedef struct _CM_CC_CAPABILITY_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
    eNeHOCCCapability<s(1)(1)(0)>[T]       eHOCCCapability<s(1)(1)(0)>[&];
    eNeLOCCCapability<s(1)(1)(0)>[T]       eLOCCCapability<s(1)(1)(0)>[&];
} CM_CC_CAPABILITY_T<s(0)(0)(0)>[&];(D1:CM_CC_CAPABILITY_T:1)[[TYPENAME:CM_CC_CAPABILITY_T]]

typedef struct _CM_REBOOTCARD_T<s(1)(0)(1)>[&]
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]   warm<s(1)(1)(0)>[&];
} CM_REBOOTCARD_T<s(0)(0)(0)>[&];(D1:CM_REBOOTCARD_T:1)[[TYPENAME:CM_REBOOTCARD_T]]














 








 

 
 
 
 
 
 
 
 
 
 
 




 








 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] iso_Did<s(0)(0)(0)>[&];(D1:iso_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] org_Did<s(0)(0)(0)>[&];(D1:org_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] dod_Did<s(0)(0)(0)>[&];(D1:dod_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] internet_Did<s(0)(0)(0)>[&];(D1:internet_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] mgmt_Did<s(0)(0)(0)>[&];(D1:mgmt_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] private_Did<s(0)(0)(0)>[&];(D1:private_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpV2_Did<s(0)(0)(0)>[&];(D1:snmpV2_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpModules_Did<s(0)(0)(0)>[&];(D1:snmpModules_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterprises_Did<s(0)(0)(0)>[&];(D1:enterprises_Did:0)

   








 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] mib_2_Did<s(0)(0)(0)>[&];(D1:mib_2_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] at_Did<s(0)(0)(0)>[&];(D1:at_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] ip_Did<s(0)(0)(0)>[&];(D1:ip_Did:0)

   
typedef enum {
	ipForwarding_forwarding<s(0)(0)(0)>[&]=1,
	ipForwarding_not_forwarding<s(0)(0)(0)>[&]=2
} ipForwarding_Tval<s(0)(0)(0)>[&];(D1:ipForwarding_Tval:1)[[TYPENAME:ipForwarding_Tval]]

typedef struct
{
	ipForwarding_Tval<s(1)(1)(0)>[T] ipForwarding<s(1)(1)(0)>[&];
	int		ipDefaultTTL<s(1)(1)(0)>[&];
	unsigned int	ipInReceives<s(1)(1)(0)>[&];
	unsigned int	ipInHdrErrors<s(1)(1)(0)>[&];
	unsigned int	ipInAddrErrors<s(1)(1)(0)>[&];
	unsigned int	ipForwDatagrams<s(1)(1)(0)>[&];
	unsigned int	ipInUnknownProtos<s(1)(1)(0)>[&];
	unsigned int	ipInDiscards<s(1)(1)(0)>[&];
	unsigned int	ipInDelivers<s(1)(1)(0)>[&];
	unsigned int	ipOutRequests<s(1)(1)(0)>[&];
	unsigned int	ipOutDiscards<s(1)(1)(0)>[&];
	unsigned int	ipOutNoRoutes<s(1)(1)(0)>[&];
	int		ipReasmTimeout<s(1)(1)(0)>[&];
	unsigned int	ipReasmReqds<s(1)(1)(0)>[&];
	unsigned int	ipReasmOKs<s(1)(1)(0)>[&];
	unsigned int	ipReasmFails<s(1)(1)(0)>[&];
	unsigned int	ipFragOKs<s(1)(1)(0)>[&];
	unsigned int	ipFragFails<s(1)(1)(0)>[&];
	unsigned int	ipFragCreates<s(1)(1)(0)>[&];
	unsigned int	ipRoutingDiscards<s(1)(1)(0)>[&];
}MIBip_t<s(0)(0)(0)>[&];(D1:MIBip_t:1)[[TYPENAME:MIBip_t]]

























 



 
extern MIBDid_t<s(0)(0)(0)>[T] icmp_Did<s(0)(0)(0)>[&];(D1:icmp_Did:0)

   
typedef struct
{
	unsigned int	icmpInMsgs<s(1)(1)(0)>[&];
	unsigned int	icmpInErrors<s(1)(1)(0)>[&];
	unsigned int	icmpInDestUnreachs<s(1)(1)(0)>[&];
	unsigned int	icmpInTimeExcds<s(1)(1)(0)>[&];
	unsigned int	icmpInParmProbs<s(1)(1)(0)>[&];
	unsigned int	icmpInSrcQuenchs<s(1)(1)(0)>[&];
	unsigned int	icmpInRedirects<s(1)(1)(0)>[&];
	unsigned int	icmpInEchos<s(1)(1)(0)>[&];
	unsigned int	icmpInEchoReps<s(1)(1)(0)>[&];
	unsigned int	icmpInTimestamps<s(1)(1)(0)>[&];
	unsigned int	icmpInTimestampReps<s(1)(1)(0)>[&];
	unsigned int	icmpInAddrMasks<s(1)(1)(0)>[&];
	unsigned int	icmpInAddrMaskReps<s(1)(1)(0)>[&];
	unsigned int	icmpOutMsgs<s(1)(1)(0)>[&];
	unsigned int	icmpOutErrors<s(1)(1)(0)>[&];
	unsigned int	icmpOutDestUnreachs<s(1)(1)(0)>[&];
	unsigned int	icmpOutTimeExcds<s(1)(1)(0)>[&];
	unsigned int	icmpOutParmProbs<s(1)(1)(0)>[&];
	unsigned int	icmpOutSrcQuenchs<s(1)(1)(0)>[&];
	unsigned int	icmpOutRedirects<s(1)(1)(0)>[&];
	unsigned int	icmpOutEchos<s(1)(1)(0)>[&];
	unsigned int	icmpOutEchoReps<s(1)(1)(0)>[&];
	unsigned int	icmpOutTimestamps<s(1)(1)(0)>[&];
	unsigned int	icmpOutTimestampReps<s(1)(1)(0)>[&];
	unsigned int	icmpOutAddrMasks<s(1)(1)(0)>[&];
	unsigned int	icmpOutAddrMaskReps<s(1)(1)(0)>[&];
}MIBicmp_t<s(0)(0)(0)>[&];(D1:MIBicmp_t:1)[[TYPENAME:MIBicmp_t]]































 



 
extern MIBDid_t<s(0)(0)(0)>[T] tcp_Did<s(0)(0)(0)>[&];(D1:tcp_Did:0)

   
typedef enum {
	tcpRtoAlgorithm_other<s(0)(0)(0)>[&]=1,
	tcpRtoAlgorithm_constant<s(0)(0)(0)>[&]=2,
	tcpRtoAlgorithm_rsre<s(0)(0)(0)>[&]=3,
	tcpRtoAlgorithm_vanj<s(0)(0)(0)>[&]=4
} tcpRtoAlgorithm_Tval<s(0)(0)(0)>[&];(D1:tcpRtoAlgorithm_Tval:1)[[TYPENAME:tcpRtoAlgorithm_Tval]]

typedef struct
{
	tcpRtoAlgorithm_Tval<s(1)(1)(0)>[T] tcpRtoAlgorithm<s(1)(1)(0)>[&];
	int		tcpRtoMin<s(1)(1)(0)>[&];
	int		tcpRtoMax<s(1)(1)(0)>[&];
	int		tcpMaxConn<s(1)(1)(0)>[&];
	unsigned int	tcpActiveOpens<s(1)(1)(0)>[&];
	unsigned int	tcpPassiveOpens<s(1)(1)(0)>[&];
	unsigned int	tcpAttemptFails<s(1)(1)(0)>[&];
	unsigned int	tcpEstabResets<s(1)(1)(0)>[&];
	unsigned int	tcpCurrEstab<s(1)(1)(0)>[&];
	unsigned int	tcpInSegs<s(1)(1)(0)>[&];
	unsigned int	tcpOutSegs<s(1)(1)(0)>[&];
	unsigned int	tcpRetransSegs<s(1)(1)(0)>[&];
	unsigned int	tcpInErrs<s(1)(1)(0)>[&];
	unsigned int	tcpOutRsts<s(1)(1)(0)>[&];
}MIBtcp_t<s(0)(0)(0)>[&];(D1:MIBtcp_t:1)[[TYPENAME:MIBtcp_t]]



















 



 
extern MIBDid_t<s(0)(0)(0)>[T] udp_Did<s(0)(0)(0)>[&];(D1:udp_Did:0)

   
typedef struct
{
	unsigned int	udpInDatagrams<s(1)(1)(0)>[&];
	unsigned int	udpNoPorts<s(1)(1)(0)>[&];
	unsigned int	udpInErrors<s(1)(1)(0)>[&];
	unsigned int	udpOutDatagrams<s(1)(1)(0)>[&];
}MIBudp_t<s(0)(0)(0)>[&];(D1:MIBudp_t:1)[[TYPENAME:MIBudp_t]]









 



 
extern MIBDid_t<s(0)(0)(0)>[T] egp_Did<s(0)(0)(0)>[&];(D1:egp_Did:0)

   
typedef struct
{
	unsigned int	egpInMsgs<s(1)(1)(0)>[&];
	unsigned int	egpInErrors<s(1)(1)(0)>[&];
	unsigned int	egpOutMsgs<s(1)(1)(0)>[&];
	unsigned int	egpOutErrors<s(1)(1)(0)>[&];
	int		egpAs<s(1)(1)(0)>[&];
}MIBegp_t<s(0)(0)(0)>[&];(D1:MIBegp_t:1)[[TYPENAME:MIBegp_t]]










 



 
extern MIBDid_t<s(0)(0)(0)>[T] transmission_Did<s(0)(0)(0)>[&];(D1:transmission_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] egpNeighTable_Did<s(0)(0)(0)>[&];(D1:egpNeighTable_Did:0)

   
typedef enum {
	egpNeighState_idle<s(0)(0)(0)>[&]=1,
	egpNeighState_acquisition<s(0)(0)(0)>[&]=2,
	egpNeighState_down<s(0)(0)(0)>[&]=3,
	egpNeighState_up<s(0)(0)(0)>[&]=4,
	egpNeighState_cease<s(0)(0)(0)>[&]=5
} egpNeighState_Tval<s(0)(0)(0)>[&];(D1:egpNeighState_Tval:1)[[TYPENAME:egpNeighState_Tval]]

typedef enum {
	egpNeighMode_active<s(0)(0)(0)>[&]=1,
	egpNeighMode_passive<s(0)(0)(0)>[&]=2
} egpNeighMode_Tval<s(0)(0)(0)>[&];(D1:egpNeighMode_Tval:1)[[TYPENAME:egpNeighMode_Tval]]

typedef enum {
	egpNeighEventTrigger_start<s(0)(0)(0)>[&]=1,
	egpNeighEventTrigger_stop<s(0)(0)(0)>[&]=2
} egpNeighEventTrigger_Tval<s(0)(0)(0)>[&];(D1:egpNeighEventTrigger_Tval:1)[[TYPENAME:egpNeighEventTrigger_Tval]]

typedef struct
{
	unsigned int	egpNeighAddr<s(1)(1)(0)>[&];                                    
	egpNeighState_Tval<s(1)(1)(0)>[T] egpNeighState<s(1)(1)(0)>[&];
	int		egpNeighAs<s(1)(1)(0)>[&];
	unsigned int	egpNeighInMsgs<s(1)(1)(0)>[&];
	unsigned int	egpNeighInErrs<s(1)(1)(0)>[&];
	unsigned int	egpNeighOutMsgs<s(1)(1)(0)>[&];
	unsigned int	egpNeighOutErrs<s(1)(1)(0)>[&];
	unsigned int	egpNeighInErrMsgs<s(1)(1)(0)>[&];
	unsigned int	egpNeighOutErrMsgs<s(1)(1)(0)>[&];
	unsigned int	egpNeighStateUps<s(1)(1)(0)>[&];
	unsigned int	egpNeighStateDowns<s(1)(1)(0)>[&];
	int		egpNeighIntervalHello<s(1)(1)(0)>[&];
	int		egpNeighIntervalPoll<s(1)(1)(0)>[&];
	egpNeighMode_Tval<s(1)(1)(0)>[T] egpNeighMode<s(1)(1)(0)>[&];
	egpNeighEventTrigger_Tval<s(1)(1)(0)>[T] egpNeighEventTrigger<s(1)(1)(0)>[&];
}MIBegpNeighTable_t<s(0)(0)(0)>[&];(D1:MIBegpNeighTable_t:1)[[TYPENAME:MIBegpNeighTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] udpTable_Did<s(0)(0)(0)>[&];(D1:udpTable_Did:0)

   
typedef struct
{
	unsigned int	udpLocalAddress<s(1)(1)(0)>[&];                     
	int		udpLocalPort<s(1)(1)(0)>[&];                                
}MIBudpTable_t<s(0)(0)(0)>[&];(D1:MIBudpTable_t:1)[[TYPENAME:MIBudpTable_t]]









 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] tcpConnTable_Did<s(0)(0)(0)>[&];(D1:tcpConnTable_Did:0)

   
typedef enum {
	tcpConnState_closed<s(0)(0)(0)>[&]=1,
	tcpConnState_listen<s(0)(0)(0)>[&]=2,
	tcpConnState_synSent<s(0)(0)(0)>[&]=3,
	tcpConnState_synReceived<s(0)(0)(0)>[&]=4,
	tcpConnState_established<s(0)(0)(0)>[&]=5,
	tcpConnState_finWait1<s(0)(0)(0)>[&]=6,
	tcpConnState_finWait2<s(0)(0)(0)>[&]=7,
	tcpConnState_closeWait<s(0)(0)(0)>[&]=8,
	tcpConnState_lastAck<s(0)(0)(0)>[&]=9,
	tcpConnState_closing<s(0)(0)(0)>[&]=10,
	tcpConnState_timeWait<s(0)(0)(0)>[&]=11,
	tcpConnState_deleteTCB<s(0)(0)(0)>[&]=12
} tcpConnState_Tval<s(0)(0)(0)>[&];(D1:tcpConnState_Tval:1)[[TYPENAME:tcpConnState_Tval]]

typedef struct
{
	unsigned int	tcpConnLocalAddress<s(1)(1)(0)>[&];                         
	int		tcpConnLocalPort<s(1)(1)(0)>[&];                                    
	unsigned int	tcpConnRemAddress<s(1)(1)(0)>[&];                           
	int		tcpConnRemPort<s(1)(1)(0)>[&];                                      
	tcpConnState_Tval<s(1)(1)(0)>[T] tcpConnState<s(1)(1)(0)>[&];
}MIBtcpConnTable_t<s(0)(0)(0)>[&];(D1:MIBtcpConnTable_t:1)[[TYPENAME:MIBtcpConnTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ipAddrTable_Did<s(0)(0)(0)>[&];(D1:ipAddrTable_Did:0)

   
typedef struct
{
	unsigned int	ipAdEntAddr<s(1)(1)(0)>[&];                                 
	int		ipAdEntIfIndex<s(1)(1)(0)>[&];
	unsigned int	ipAdEntNetMask<s(1)(1)(0)>[&];
	unsigned int	ipAdEntBcastAddr<s(1)(1)(0)>[&];
	int		ipAdEntReasmMaxSize<s(1)(1)(0)>[&];
}MIBipAddrTable_t<s(0)(0)(0)>[&];(D1:MIBipAddrTable_t:1)[[TYPENAME:MIBipAddrTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ipRouteTable_Did<s(0)(0)(0)>[&];(D1:ipRouteTable_Did:0)

   
typedef enum {
	ipRouteType_other<s(0)(0)(0)>[&]=1,
	ipRouteType_invalid<s(0)(0)(0)>[&]=2,
	ipRouteType_direct<s(0)(0)(0)>[&]=3,
	ipRouteType_indirect<s(0)(0)(0)>[&]=4
} ipRouteType_Tval<s(0)(0)(0)>[&];(D1:ipRouteType_Tval:1)[[TYPENAME:ipRouteType_Tval]]

typedef enum {
	ipRouteProto_other<s(0)(0)(0)>[&]=1,
	ipRouteProto_local<s(0)(0)(0)>[&]=2,
	ipRouteProto_netmgmt<s(0)(0)(0)>[&]=3,
	ipRouteProto_icmp<s(0)(0)(0)>[&]=4,
	ipRouteProto_egp<s(0)(0)(0)>[&]=5,
	ipRouteProto_ggp<s(0)(0)(0)>[&]=6,
	ipRouteProto_hello<s(0)(0)(0)>[&]=7,
	ipRouteProto_rip<s(0)(0)(0)>[&]=8,
	ipRouteProto_is_is<s(0)(0)(0)>[&]=9,
	ipRouteProto_es_is<s(0)(0)(0)>[&]=10,
	ipRouteProto_ciscoIgrp<s(0)(0)(0)>[&]=11,
	ipRouteProto_bbnSpfIgp<s(0)(0)(0)>[&]=12,
	ipRouteProto_ospf<s(0)(0)(0)>[&]=13,
	ipRouteProto_bgp<s(0)(0)(0)>[&]=14
} ipRouteProto_Tval<s(0)(0)(0)>[&];(D1:ipRouteProto_Tval:1)[[TYPENAME:ipRouteProto_Tval]]

typedef struct
{
	unsigned int	ipRouteDest<s(1)(1)(0)>[&];                       
	int		ipRouteIfIndex<s(1)(1)(0)>[&];
	int		ipRouteMetric1<s(1)(1)(0)>[&];
	int		ipRouteMetric2<s(1)(1)(0)>[&];
	int		ipRouteMetric3<s(1)(1)(0)>[&];
	int		ipRouteMetric4<s(1)(1)(0)>[&];
	unsigned int	ipRouteNextHop<s(1)(1)(0)>[&];
	ipRouteType_Tval<s(1)(1)(0)>[T] ipRouteType<s(1)(1)(0)>[&];
	ipRouteProto_Tval<s(1)(1)(0)>[T] ipRouteProto<s(1)(1)(0)>[&];
	int		ipRouteAge<s(1)(1)(0)>[&];
	unsigned int	ipRouteMask<s(1)(1)(0)>[&];
	int		ipRouteMetric5<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	ipRouteInfo<s(1)(1)(0)>[&];
}MIBipRouteTable_t<s(0)(0)(0)>[&];(D1:MIBipRouteTable_t:1)[[TYPENAME:MIBipRouteTable_t]]




















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ipNetToMediaTable_Did<s(0)(0)(0)>[&];(D1:ipNetToMediaTable_Did:0)

   
typedef enum {
	ipNetToMediaType_other<s(0)(0)(0)>[&]=1,
	ipNetToMediaType_invalid<s(0)(0)(0)>[&]=2,
	ipNetToMediaType_dynamic<s(0)(0)(0)>[&]=3,
	ipNetToMediaType_static<s(0)(0)(0)>[&]=4
} ipNetToMediaType_Tval<s(0)(0)(0)>[&];(D1:ipNetToMediaType_Tval:1)[[TYPENAME:ipNetToMediaType_Tval]]

typedef struct
{
	int		ipNetToMediaIfIndex<s(1)(1)(0)>[&];                                         
	unsigned int	ipNetToMediaNetAddress<s(1)(1)(0)>[&];                              
	int		ipNetToMediaPhysAddress_len<s(1)(1)(0)>[&];
	char		ipNetToMediaPhysAddress<s(1)(1)(0)>[&][255];
	ipNetToMediaType_Tval<s(1)(1)(0)>[T] ipNetToMediaType<s(1)(1)(0)>[&];
}MIBipNetToMediaTable_t<s(0)(0)(0)>[&];(D1:MIBipNetToMediaTable_t:1)[[TYPENAME:MIBipNetToMediaTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] atTable_Did<s(0)(0)(0)>[&];(D1:atTable_Did:0)

   
typedef struct
{
	int		atIfIndex<s(1)(1)(0)>[&];                               
	int		atNetAddress_len<s(1)(1)(0)>[&];
	char		atNetAddress<s(1)(1)(0)>[&][8];                        
	int		atPhysAddress_len<s(1)(1)(0)>[&];
	char		atPhysAddress<s(1)(1)(0)>[&][255];
}MIBatTable_t<s(0)(0)(0)>[&];(D1:MIBatTable_t:1)[[TYPENAME:MIBatTable_t]]















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMIB_Did<s(0)(0)(0)>[&];(D1:snmpMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMIBObjects_Did<s(0)(0)(0)>[&];(D1:snmpMIBObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMIBConformance_Did<s(0)(0)(0)>[&];(D1:snmpMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMIBCompliances_Did<s(0)(0)(0)>[&];(D1:snmpMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMIBGroups_Did<s(0)(0)(0)>[&];(D1:snmpMIBGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTrap_Did<s(0)(0)(0)>[&];(D1:snmpTrap_Did:0)

   
typedef struct
{
	OIDValue<s(1)(1)(0)>[T]	snmpTrapOID<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	snmpTrapEnterprise<s(1)(1)(0)>[&];
}MIBsnmpTrap_t<s(0)(0)(0)>[&];(D1:MIBsnmpTrap_t:1)[[TYPENAME:MIBsnmpTrap_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTraps_Did<s(0)(0)(0)>[&];(D1:snmpTraps_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpSet_Did<s(0)(0)(0)>[&];(D1:snmpSet_Did:0)

   
typedef struct
{
	unsigned int	snmpSetSerialNo<s(1)(1)(0)>[&];
}MIBsnmpSet_t<s(0)(0)(0)>[&];(D1:MIBsnmpSet_t:1)[[TYPENAME:MIBsnmpSet_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] system_Did<s(0)(0)(0)>[&];(D1:system_Did:0)

   
typedef struct
{
	char		sysDescr<s(1)(1)(0)>[&][255];
	OIDValue<s(1)(1)(0)>[T]	sysObjectID<s(1)(1)(0)>[&];
	unsigned int	sysUpTime<s(1)(1)(0)>[&];
	char		sysContact<s(1)(1)(0)>[&][255];
	char		sysName<s(1)(1)(0)>[&][255];
	char		sysLocation<s(1)(1)(0)>[&][255];
	int		sysServices<s(1)(1)(0)>[&];
	unsigned int	sysORLastChange<s(1)(1)(0)>[&];
}MIBsystem_t<s(0)(0)(0)>[&];(D1:MIBsystem_t:1)[[TYPENAME:MIBsystem_t]]













 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmp_Did<s(0)(0)(0)>[&];(D1:snmp_Did:0)

   
typedef enum {
	snmpEnableAuthenTraps_enabled<s(0)(0)(0)>[&]=1,
	snmpEnableAuthenTraps_disabled<s(0)(0)(0)>[&]=2
} snmpEnableAuthenTraps_Tval<s(0)(0)(0)>[&];(D1:snmpEnableAuthenTraps_Tval:1)[[TYPENAME:snmpEnableAuthenTraps_Tval]]

typedef struct
{
	unsigned int	snmpInPkts<s(1)(1)(0)>[&];
	unsigned int	snmpInBadVersions<s(1)(1)(0)>[&];
	unsigned int	snmpOutPkts<s(1)(1)(0)>[&];
	unsigned int	snmpInBadCommunityNames<s(1)(1)(0)>[&];
	unsigned int	snmpInBadCommunityUses<s(1)(1)(0)>[&];
	unsigned int	snmpInASNParseErrs<s(1)(1)(0)>[&];
	snmpEnableAuthenTraps_Tval<s(1)(1)(0)>[T] snmpEnableAuthenTraps<s(1)(1)(0)>[&];
	unsigned int	snmpOutTraps<s(1)(1)(0)>[&];
	unsigned int	snmpOutGetResponses<s(1)(1)(0)>[&];
	unsigned int	snmpOutSetRequests<s(1)(1)(0)>[&];
	unsigned int	snmpOutGetNexts<s(1)(1)(0)>[&];
	unsigned int	snmpOutGetRequests<s(1)(1)(0)>[&];
	unsigned int	snmpOutGenErrs<s(1)(1)(0)>[&];
	unsigned int	snmpOutBadValues<s(1)(1)(0)>[&];
	unsigned int	snmpOutNoSuchNames<s(1)(1)(0)>[&];
	unsigned int	snmpOutTooBigs<s(1)(1)(0)>[&];
	unsigned int	snmpInTraps<s(1)(1)(0)>[&];
	unsigned int	snmpInGetResponses<s(1)(1)(0)>[&];
	unsigned int	snmpInSetRequests<s(1)(1)(0)>[&];
	unsigned int	snmpInGetNexts<s(1)(1)(0)>[&];
	unsigned int	snmpInGetRequests<s(1)(1)(0)>[&];
	unsigned int	snmpInTotalSetVars<s(1)(1)(0)>[&];
	unsigned int	snmpInTotalReqVars<s(1)(1)(0)>[&];
	unsigned int	snmpInGenErrs<s(1)(1)(0)>[&];
	unsigned int	snmpInReadOnlys<s(1)(1)(0)>[&];
	unsigned int	snmpInBadValues<s(1)(1)(0)>[&];
	unsigned int	snmpInNoSuchNames<s(1)(1)(0)>[&];
	unsigned int	snmpInTooBigs<s(1)(1)(0)>[&];
	unsigned int	snmpSilentDrops<s(1)(1)(0)>[&];
	unsigned int	snmpProxyDrops<s(1)(1)(0)>[&];
}MIBsnmp_t<s(0)(0)(0)>[&];(D1:MIBsnmp_t:1)[[TYPENAME:MIBsnmp_t]]



































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] sysORTable_Did<s(0)(0)(0)>[&];(D1:sysORTable_Did:0)

   
typedef struct
{
	int		sysORIndex<s(1)(1)(0)>[&];                          
	OIDValue<s(1)(1)(0)>[T]	sysORID<s(1)(1)(0)>[&];
	char		sysORDescr<s(1)(1)(0)>[&][255];
	unsigned int	sysORUpTime<s(1)(1)(0)>[&];
}MIBsysORTable_t<s(0)(0)(0)>[&];(D1:MIBsysORTable_t:1)[[TYPENAME:MIBsysORTable_t]]
















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] ianaifType_Did<s(0)(0)(0)>[&];(D1:ianaifType_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] interfaces_Did<s(0)(0)(0)>[&];(D1:interfaces_Did:0)

   
typedef struct
{
	int		ifNumber<s(1)(1)(0)>[&];
}MIBinterfaces_t<s(0)(0)(0)>[&];(D1:MIBinterfaces_t:1)[[TYPENAME:MIBinterfaces_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] ifMIB_Did<s(0)(0)(0)>[&];(D1:ifMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] ifMIBObjects_Did<s(0)(0)(0)>[&];(D1:ifMIBObjects_Did:0)

   
typedef struct
{
	unsigned int	ifTableLastChange<s(1)(1)(0)>[&];
	unsigned int	ifStackLastChange<s(1)(1)(0)>[&];
}MIBifMIBObjects_t<s(0)(0)(0)>[&];(D1:MIBifMIBObjects_t:1)[[TYPENAME:MIBifMIBObjects_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] ifConformance_Did<s(0)(0)(0)>[&];(D1:ifConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] ifGroups_Did<s(0)(0)(0)>[&];(D1:ifGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] ifCompliances_Did<s(0)(0)(0)>[&];(D1:ifCompliances_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ifXTable_Did<s(0)(0)(0)>[&];(D1:ifXTable_Did:0)

   
typedef enum {
	ifLinkUpDownTrapEnable_enabled<s(0)(0)(0)>[&]=1,
	ifLinkUpDownTrapEnable_disabled<s(0)(0)(0)>[&]=2
} ifLinkUpDownTrapEnable_Tval<s(0)(0)(0)>[&];(D1:ifLinkUpDownTrapEnable_Tval:1)[[TYPENAME:ifLinkUpDownTrapEnable_Tval]]

typedef struct
{
	int		ifIndex<s(1)(1)(0)>[&];                                                           
	char		ifName<s(1)(1)(0)>[&][255];
	unsigned int	ifInMulticastPkts<s(1)(1)(0)>[&];
	unsigned int	ifInBroadcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifOutMulticastPkts<s(1)(1)(0)>[&];
	unsigned int	ifOutBroadcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifHCInOctets<s(1)(1)(0)>[&][2];
	unsigned int	ifHCInUcastPkts<s(1)(1)(0)>[&][2];
	unsigned int	ifHCInMulticastPkts<s(1)(1)(0)>[&][2];
	unsigned int	ifHCInBroadcastPkts<s(1)(1)(0)>[&][2];
	unsigned int	ifHCOutOctets<s(1)(1)(0)>[&][2];
	unsigned int	ifHCOutUcastPkts<s(1)(1)(0)>[&][2];
	unsigned int	ifHCOutMulticastPkts<s(1)(1)(0)>[&][2];
	unsigned int	ifHCOutBroadcastPkts<s(1)(1)(0)>[&][2];
	ifLinkUpDownTrapEnable_Tval<s(1)(1)(0)>[T] ifLinkUpDownTrapEnable<s(1)(1)(0)>[&];
	unsigned int	ifHighSpeed<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] ifPromiscuousMode<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] ifConnectorPresent<s(1)(1)(0)>[&];
	char		ifAlias<s(1)(1)(0)>[&][64];
	unsigned int	ifCounterDiscontinuityTime<s(1)(1)(0)>[&];
}MIBifXTable_t<s(0)(0)(0)>[&];(D1:MIBifXTable_t:1)[[TYPENAME:MIBifXTable_t]]



























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ifTestTable_Did<s(0)(0)(0)>[&];(D1:ifTestTable_Did:0)

   
typedef enum {
	ifTestStatus_notInUse<s(0)(0)(0)>[&]=1,
	ifTestStatus_inUse<s(0)(0)(0)>[&]=2
} ifTestStatus_Tval<s(0)(0)(0)>[&];(D1:ifTestStatus_Tval:1)[[TYPENAME:ifTestStatus_Tval]]

typedef enum {
	ifTestResult_none<s(0)(0)(0)>[&]=1,
	ifTestResult_success<s(0)(0)(0)>[&]=2,
	ifTestResult_inProgress<s(0)(0)(0)>[&]=3,
	ifTestResult_notSupported<s(0)(0)(0)>[&]=4,
	ifTestResult_unAbleToRun<s(0)(0)(0)>[&]=5,
	ifTestResult_aborted<s(0)(0)(0)>[&]=6,
	ifTestResult_failed<s(0)(0)(0)>[&]=7
} ifTestResult_Tval<s(0)(0)(0)>[&];(D1:ifTestResult_Tval:1)[[TYPENAME:ifTestResult_Tval]]

typedef struct
{
	int		ifIndex<s(1)(1)(0)>[&];                               
	unsigned int	ifTestId<s(1)(1)(0)>[&];
	ifTestStatus_Tval<s(1)(1)(0)>[T] ifTestStatus<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	ifTestType<s(1)(1)(0)>[&];
	ifTestResult_Tval<s(1)(1)(0)>[T] ifTestResult<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	ifTestCode<s(1)(1)(0)>[&];
	int		ifTestOwner_len<s(1)(1)(0)>[&];
	char		ifTestOwner<s(1)(1)(0)>[&][255];
}MIBifTestTable_t<s(0)(0)(0)>[&];(D1:MIBifTestTable_t:1)[[TYPENAME:MIBifTestTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ifRcvAddressTable_Did<s(0)(0)(0)>[&];(D1:ifRcvAddressTable_Did:0)

   
typedef enum {
	ifRcvAddressType_other<s(0)(0)(0)>[&]=1,
	ifRcvAddressType_volatile<s(0)(0)(0)>[&]=2,
	ifRcvAddressType_nonVolatile<s(0)(0)(0)>[&]=3
} ifRcvAddressType_Tval<s(0)(0)(0)>[&];(D1:ifRcvAddressType_Tval:1)[[TYPENAME:ifRcvAddressType_Tval]]

typedef struct
{
	int		ifIndex<s(1)(1)(0)>[&];                                             
	int		ifRcvAddressAddress_len<s(1)(1)(0)>[&];
	char		ifRcvAddressAddress<s(1)(1)(0)>[&][255];                           
	RowStatus_Tval<s(1)(1)(0)>[T] ifRcvAddressStatus<s(1)(1)(0)>[&];
	ifRcvAddressType_Tval<s(1)(1)(0)>[T] ifRcvAddressType<s(1)(1)(0)>[&];
}MIBifRcvAddressTable_t<s(0)(0)(0)>[&];(D1:MIBifRcvAddressTable_t:1)[[TYPENAME:MIBifRcvAddressTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ifStackTable_Did<s(0)(0)(0)>[&];(D1:ifStackTable_Did:0)

   
typedef struct
{
	int		ifStackHigherLayer<s(1)(1)(0)>[&];                                
	int		ifStackLowerLayer<s(1)(1)(0)>[&];                                 
	RowStatus_Tval<s(1)(1)(0)>[T] ifStackStatus<s(1)(1)(0)>[&];
}MIBifStackTable_t<s(0)(0)(0)>[&];(D1:MIBifStackTable_t:1)[[TYPENAME:MIBifStackTable_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ifTable_Did<s(0)(0)(0)>[&];(D1:ifTable_Did:0)

   
typedef enum {
	ifAdminStatus_up<s(0)(0)(0)>[&]=1,
	ifAdminStatus_down<s(0)(0)(0)>[&]=2,
	ifAdminStatus_testing<s(0)(0)(0)>[&]=3
} ifAdminStatus_Tval<s(0)(0)(0)>[&];(D1:ifAdminStatus_Tval:1)[[TYPENAME:ifAdminStatus_Tval]]

typedef enum {
	ifOperStatus_up<s(0)(0)(0)>[&]=1,
	ifOperStatus_down<s(0)(0)(0)>[&]=2,
	ifOperStatus_testing<s(0)(0)(0)>[&]=3,
	ifOperStatus_unknown<s(0)(0)(0)>[&]=4,
	ifOperStatus_dormant<s(0)(0)(0)>[&]=5,
	ifOperStatus_notPresent<s(0)(0)(0)>[&]=6,
	ifOperStatus_lowerLayerDown<s(0)(0)(0)>[&]=7
} ifOperStatus_Tval<s(0)(0)(0)>[&];(D1:ifOperStatus_Tval:1)[[TYPENAME:ifOperStatus_Tval]]

typedef struct
{
	int		ifIndex<s(1)(1)(0)>[&];                                         
	char		ifDescr<s(1)(1)(0)>[&][255];
	IANAifType_Tval<s(1)(1)(0)>[T] ifType<s(1)(1)(0)>[&];
	int		ifMtu<s(1)(1)(0)>[&];
	unsigned int	ifSpeed<s(1)(1)(0)>[&];
	int		ifPhysAddress_len<s(1)(1)(0)>[&];
	char		ifPhysAddress<s(1)(1)(0)>[&][255];
	ifAdminStatus_Tval<s(1)(1)(0)>[T] ifAdminStatus<s(1)(1)(0)>[&];
	ifOperStatus_Tval<s(1)(1)(0)>[T] ifOperStatus<s(1)(1)(0)>[&];
	unsigned int	ifLastChange<s(1)(1)(0)>[&];
	unsigned int	ifInOctets<s(1)(1)(0)>[&];
	unsigned int	ifInUcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifInNUcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifInDiscards<s(1)(1)(0)>[&];
	unsigned int	ifInErrors<s(1)(1)(0)>[&];
	unsigned int	ifInUnknownProtos<s(1)(1)(0)>[&];
	unsigned int	ifOutOctets<s(1)(1)(0)>[&];
	unsigned int	ifOutUcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifOutNUcastPkts<s(1)(1)(0)>[&];
	unsigned int	ifOutDiscards<s(1)(1)(0)>[&];
	unsigned int	ifOutErrors<s(1)(1)(0)>[&];
	unsigned int	ifOutQLen<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	ifSpecific<s(1)(1)(0)>[&];
}MIBifTable_t<s(0)(0)(0)>[&];(D1:MIBifTable_t:1)[[TYPENAME:MIBifTable_t]]


































 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkMIB_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkAdmin_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkAdmin_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkMIBObjects_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkMIBConformance_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkMIBCompliances_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpFrameworkMIBGroups_Did<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpEngine_Did<s(0)(0)(0)>[&];(D1:snmpEngine_Did:0)

   
typedef struct
{
	int		snmpEngineID_len<s(1)(1)(0)>[&];
	char		snmpEngineID<s(1)(1)(0)>[&][32];
	int		snmpEngineBoots<s(1)(1)(0)>[&];
	int		snmpEngineTime<s(1)(1)(0)>[&];
	int		snmpEngineMaxMessageSize<s(1)(1)(0)>[&];
}MIBsnmpEngine_t<s(0)(0)(0)>[&];(D1:MIBsnmpEngine_t:1)[[TYPENAME:MIBsnmpEngine_t]]









 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpAuthProtocols_Did<s(0)(0)(0)>[&];(D1:snmpAuthProtocols_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpPrivProtocols_Did<s(0)(0)(0)>[&];(D1:snmpPrivProtocols_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDMIB_Did<s(0)(0)(0)>[&];(D1:snmpMPDMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDAdmin_Did<s(0)(0)(0)>[&];(D1:snmpMPDAdmin_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDMIBObjects_Did<s(0)(0)(0)>[&];(D1:snmpMPDMIBObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDMIBConformance_Did<s(0)(0)(0)>[&];(D1:snmpMPDMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDMIBCompliances_Did<s(0)(0)(0)>[&];(D1:snmpMPDMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDMIBGroups_Did<s(0)(0)(0)>[&];(D1:snmpMPDMIBGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpMPDStats_Did<s(0)(0)(0)>[&];(D1:snmpMPDStats_Did:0)

   
typedef struct
{
	unsigned int	snmpUnknownSecurityModels<s(1)(1)(0)>[&];
	unsigned int	snmpInvalidMsgs<s(1)(1)(0)>[&];
	unsigned int	snmpUnknownPDUHandlers<s(1)(1)(0)>[&];
}MIBsnmpMPDStats_t<s(0)(0)(0)>[&];(D1:MIBsnmpMPDStats_t:1)[[TYPENAME:MIBsnmpMPDStats_t]]













 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetMIB_Did<s(0)(0)(0)>[&];(D1:snmpTargetMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetObjects_Did<s(0)(0)(0)>[&];(D1:snmpTargetObjects_Did:0)

   
typedef struct
{
	unsigned int	snmpTargetSpinLock<s(1)(1)(0)>[&];
	unsigned int	snmpUnavailableContexts<s(1)(1)(0)>[&];
	unsigned int	snmpUnknownContexts<s(1)(1)(0)>[&];
}MIBsnmpTargetObjects_t<s(0)(0)(0)>[&];(D1:MIBsnmpTargetObjects_t:1)[[TYPENAME:MIBsnmpTargetObjects_t]]








 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetConformance_Did<s(0)(0)(0)>[&];(D1:snmpTargetConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetCompliances_Did<s(0)(0)(0)>[&];(D1:snmpTargetCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetGroups_Did<s(0)(0)(0)>[&];(D1:snmpTargetGroups_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetAddrTable_Did<s(0)(0)(0)>[&];(D1:snmpTargetAddrTable_Did:0)

   
typedef struct
{
	char		snmpTargetAddrName<s(1)(1)(0)>[&][32];                                         
	OIDValue<s(1)(1)(0)>[T]	snmpTargetAddrTDomain<s(1)(1)(0)>[&];
	int		snmpTargetAddrTAddress_len<s(1)(1)(0)>[&];
	char		snmpTargetAddrTAddress<s(1)(1)(0)>[&][255];
	int		snmpTargetAddrTimeout<s(1)(1)(0)>[&];
	int		snmpTargetAddrRetryCount<s(1)(1)(0)>[&];
	int		snmpTargetAddrTagList_len<s(1)(1)(0)>[&];
	char		snmpTargetAddrTagList<s(1)(1)(0)>[&][255];
	char		snmpTargetAddrParams<s(1)(1)(0)>[&][32];
	StorageType_Tval<s(1)(1)(0)>[T] snmpTargetAddrStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpTargetAddrRowStatus<s(1)(1)(0)>[&];
}MIBsnmpTargetAddrTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpTargetAddrTable_t:1)[[TYPENAME:MIBsnmpTargetAddrTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetParamsTable_Did<s(0)(0)(0)>[&];(D1:snmpTargetParamsTable_Did:0)

   
typedef struct
{
	char		snmpTargetParamsName<s(1)(1)(0)>[&][32];                                               
	int		snmpTargetParamsMPModel<s(1)(1)(0)>[&];
	int		snmpTargetParamsSecurityModel<s(1)(1)(0)>[&];
	char		snmpTargetParamsSecurityName<s(1)(1)(0)>[&][255];
	SnmpSecurityLevel_Tval<s(1)(1)(0)>[T] snmpTargetParamsSecurityLevel<s(1)(1)(0)>[&];
	StorageType_Tval<s(1)(1)(0)>[T] snmpTargetParamsStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpTargetParamsRowStatus<s(1)(1)(0)>[&];
}MIBsnmpTargetParamsTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpTargetParamsTable_t:1)[[TYPENAME:MIBsnmpTargetParamsTable_t]]



















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotificationMIB_Did<s(0)(0)(0)>[&];(D1:snmpNotificationMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyObjects_Did<s(0)(0)(0)>[&];(D1:snmpNotifyObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyConformance_Did<s(0)(0)(0)>[&];(D1:snmpNotifyConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyCompliances_Did<s(0)(0)(0)>[&];(D1:snmpNotifyCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyGroups_Did<s(0)(0)(0)>[&];(D1:snmpNotifyGroups_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyTable_Did<s(0)(0)(0)>[&];(D1:snmpNotifyTable_Did:0)

   
typedef enum {
	snmpNotifyType_trap<s(0)(0)(0)>[&]=1,
	snmpNotifyType_inform<s(0)(0)(0)>[&]=2
} snmpNotifyType_Tval<s(0)(0)(0)>[&];(D1:snmpNotifyType_Tval:1)[[TYPENAME:snmpNotifyType_Tval]]

typedef struct
{
	char		snmpNotifyName<s(1)(1)(0)>[&][32];                                     
	int		snmpNotifyTag_len<s(1)(1)(0)>[&];
	char		snmpNotifyTag<s(1)(1)(0)>[&][255];
	snmpNotifyType_Tval<s(1)(1)(0)>[T] snmpNotifyType<s(1)(1)(0)>[&];
	StorageType_Tval<s(1)(1)(0)>[T] snmpNotifyStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpNotifyRowStatus<s(1)(1)(0)>[&];
}MIBsnmpNotifyTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpNotifyTable_t:1)[[TYPENAME:MIBsnmpNotifyTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyFilterProfileTable_Did<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileTable_Did:0)

   
typedef struct
{
	char		snmpTargetParamsName<s(1)(1)(0)>[&][32];                                                     
	char		snmpNotifyFilterProfileName<s(1)(1)(0)>[&][32];
	StorageType_Tval<s(1)(1)(0)>[T] snmpNotifyFilterProfileStorType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpNotifyFilterProfileRowStatus<s(1)(1)(0)>[&];
}MIBsnmpNotifyFilterProfileTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpNotifyFilterProfileTable_t:1)[[TYPENAME:MIBsnmpNotifyFilterProfileTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpNotifyFilterTable_Did<s(0)(0)(0)>[&];(D1:snmpNotifyFilterTable_Did:0)

   
typedef enum {
	snmpNotifyFilterType_included<s(0)(0)(0)>[&]=1,
	snmpNotifyFilterType_excluded<s(0)(0)(0)>[&]=2
} snmpNotifyFilterType_Tval<s(0)(0)(0)>[&];(D1:snmpNotifyFilterType_Tval:1)[[TYPENAME:snmpNotifyFilterType_Tval]]

typedef struct
{
	char		snmpNotifyFilterProfileName<s(1)(1)(0)>[&][32];                                    
	OIDValue<s(1)(1)(0)>[T]	snmpNotifyFilterSubtree<s(1)(1)(0)>[&];                                         
	int		snmpNotifyFilterMask_len<s(1)(1)(0)>[&];
	char		snmpNotifyFilterMask<s(1)(1)(0)>[&][16];
	snmpNotifyFilterType_Tval<s(1)(1)(0)>[T] snmpNotifyFilterType<s(1)(1)(0)>[&];
	StorageType_Tval<s(1)(1)(0)>[T] snmpNotifyFilterStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpNotifyFilterRowStatus<s(1)(1)(0)>[&];
}MIBsnmpNotifyFilterTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpNotifyFilterTable_t:1)[[TYPENAME:MIBsnmpNotifyFilterTable_t]]


















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpUsmMIB_Did<s(0)(0)(0)>[&];(D1:snmpUsmMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmMIBObjects_Did<s(0)(0)(0)>[&];(D1:usmMIBObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmMIBConformance_Did<s(0)(0)(0)>[&];(D1:usmMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmMIBCompliances_Did<s(0)(0)(0)>[&];(D1:usmMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmMIBGroups_Did<s(0)(0)(0)>[&];(D1:usmMIBGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmStats_Did<s(0)(0)(0)>[&];(D1:usmStats_Did:0)

   
typedef struct
{
	unsigned int	usmStatsUnsupportedSecLevels<s(1)(1)(0)>[&];
	unsigned int	usmStatsNotInTimeWindows<s(1)(1)(0)>[&];
	unsigned int	usmStatsUnknownUserNames<s(1)(1)(0)>[&];
	unsigned int	usmStatsUnknownEngineIDs<s(1)(1)(0)>[&];
	unsigned int	usmStatsWrongDigests<s(1)(1)(0)>[&];
	unsigned int	usmStatsDecryptionErrors<s(1)(1)(0)>[&];
}MIBusmStats_t<s(0)(0)(0)>[&];(D1:MIBusmStats_t:1)[[TYPENAME:MIBusmStats_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmUser_Did<s(0)(0)(0)>[&];(D1:usmUser_Did:0)

   
typedef struct
{
	unsigned int	usmUserSpinLock<s(1)(1)(0)>[&];
}MIBusmUser_t<s(0)(0)(0)>[&];(D1:MIBusmUser_t:1)[[TYPENAME:MIBusmUser_t]]






 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] usmUserTable_Did<s(0)(0)(0)>[&];(D1:usmUserTable_Did:0)

   
typedef struct
{
	int		usmUserEngineID_len<s(1)(1)(0)>[&];
	char		usmUserEngineID<s(1)(1)(0)>[&][32];                                        
	char		usmUserName<s(1)(1)(0)>[&][32];                                            
	char		usmUserSecurityName<s(1)(1)(0)>[&][255];
	OIDValue<s(1)(1)(0)>[T]	usmUserCloneFrom<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	usmUserAuthProtocol<s(1)(1)(0)>[&];
	int		usmUserAuthKeyChange_len<s(1)(1)(0)>[&];
	char		usmUserAuthKeyChange<s(1)(1)(0)>[&][255];
	int		usmUserOwnAuthKeyChange_len<s(1)(1)(0)>[&];
	char		usmUserOwnAuthKeyChange<s(1)(1)(0)>[&][255];
	OIDValue<s(1)(1)(0)>[T]	usmUserPrivProtocol<s(1)(1)(0)>[&];
	int		usmUserPrivKeyChange_len<s(1)(1)(0)>[&];
	char		usmUserPrivKeyChange<s(1)(1)(0)>[&][255];
	int		usmUserOwnPrivKeyChange_len<s(1)(1)(0)>[&];
	char		usmUserOwnPrivKeyChange<s(1)(1)(0)>[&][255];
	int		usmUserPublic_len<s(1)(1)(0)>[&];
	char		usmUserPublic<s(1)(1)(0)>[&][32];
	StorageType_Tval<s(1)(1)(0)>[T] usmUserStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] usmUserStatus<s(1)(1)(0)>[&];
}MIBusmUserTable_t<s(0)(0)(0)>[&];(D1:MIBusmUserTable_t:1)[[TYPENAME:MIBusmUserTable_t]]




















 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmNoPrivProtocol_Did<s(0)(0)(0)>[&];(D1:usmNoPrivProtocol_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmDESPrivProtocol_Did<s(0)(0)(0)>[&];(D1:usmDESPrivProtocol_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmNoAuthProtocol_Did<s(0)(0)(0)>[&];(D1:usmNoAuthProtocol_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmHMACMD5AuthProtocol_Did<s(0)(0)(0)>[&];(D1:usmHMACMD5AuthProtocol_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] usmHMACSHAAuthProtocol_Did<s(0)(0)(0)>[&];(D1:usmHMACSHAAuthProtocol_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpVacmMIB_Did<s(0)(0)(0)>[&];(D1:snmpVacmMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] vacmMIBObjects_Did<s(0)(0)(0)>[&];(D1:vacmMIBObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] vacmMIBConformance_Did<s(0)(0)(0)>[&];(D1:vacmMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] vacmMIBCompliances_Did<s(0)(0)(0)>[&];(D1:vacmMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] vacmMIBGroups_Did<s(0)(0)(0)>[&];(D1:vacmMIBGroups_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] vacmContextTable_Did<s(0)(0)(0)>[&];(D1:vacmContextTable_Did:0)

   
typedef struct
{
	char		vacmContextName<s(1)(1)(0)>[&][32];                        
}MIBvacmContextTable_t<s(0)(0)(0)>[&];(D1:MIBvacmContextTable_t:1)[[TYPENAME:MIBvacmContextTable_t]]








 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] vacmSecurityToGroupTable_Did<s(0)(0)(0)>[&];(D1:vacmSecurityToGroupTable_Did:0)

   
typedef struct
{
	int		vacmSecurityModel<s(1)(1)(0)>[&];                                                         
	char		vacmSecurityName<s(1)(1)(0)>[&][32];                                                     
	char		vacmGroupName<s(1)(1)(0)>[&][32];
	StorageType_Tval<s(1)(1)(0)>[T] vacmSecurityToGroupStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] vacmSecurityToGroupStatus<s(1)(1)(0)>[&];
}MIBvacmSecurityToGroupTable_t<s(0)(0)(0)>[&];(D1:MIBvacmSecurityToGroupTable_t:1)[[TYPENAME:MIBvacmSecurityToGroupTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] vacmAccessTable_Did<s(0)(0)(0)>[&];(D1:vacmAccessTable_Did:0)

   
typedef enum {
	vacmAccessContextMatch_exact<s(0)(0)(0)>[&]=1,
	vacmAccessContextMatch_prefix<s(0)(0)(0)>[&]=2
} vacmAccessContextMatch_Tval<s(0)(0)(0)>[&];(D1:vacmAccessContextMatch_Tval:1)[[TYPENAME:vacmAccessContextMatch_Tval]]

typedef struct
{
	char		vacmGroupName<s(1)(1)(0)>[&][32];                                            
	char		vacmAccessContextPrefix<s(1)(1)(0)>[&][32];                                  
	int		vacmAccessSecurityModel<s(1)(1)(0)>[&];                                       
	SnmpSecurityLevel_Tval<s(1)(1)(0)>[T] vacmAccessSecurityLevel<s(1)(1)(0)>[&];                     
	vacmAccessContextMatch_Tval<s(1)(1)(0)>[T] vacmAccessContextMatch<s(1)(1)(0)>[&];
	char		vacmAccessReadViewName<s(1)(1)(0)>[&][32];
	char		vacmAccessWriteViewName<s(1)(1)(0)>[&][32];
	char		vacmAccessNotifyViewName<s(1)(1)(0)>[&][32];
	StorageType_Tval<s(1)(1)(0)>[T] vacmAccessStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] vacmAccessStatus<s(1)(1)(0)>[&];
}MIBvacmAccessTable_t<s(0)(0)(0)>[&];(D1:MIBvacmAccessTable_t:1)[[TYPENAME:MIBvacmAccessTable_t]]

















 



 
extern MIBDid_t<s(0)(0)(0)>[T] vacmMIBViews_Did<s(0)(0)(0)>[&];(D1:vacmMIBViews_Did:0)

   
typedef struct
{
	unsigned int	vacmViewSpinLock<s(1)(1)(0)>[&];
}MIBvacmMIBViews_t<s(0)(0)(0)>[&];(D1:MIBvacmMIBViews_t:1)[[TYPENAME:MIBvacmMIBViews_t]]






 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] vacmViewTreeFamilyTable_Did<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyTable_Did:0)

   
typedef enum {
	vacmViewTreeFamilyType_included<s(0)(0)(0)>[&]=1,
	vacmViewTreeFamilyType_excluded<s(0)(0)(0)>[&]=2
} vacmViewTreeFamilyType_Tval<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyType_Tval:1)[[TYPENAME:vacmViewTreeFamilyType_Tval]]

typedef struct
{
	char		vacmViewTreeFamilyViewName<s(1)(1)(0)>[&][32];                                         
	OIDValue<s(1)(1)(0)>[T]	vacmViewTreeFamilySubtree<s(1)(1)(0)>[&];                                           
	int		vacmViewTreeFamilyMask_len<s(1)(1)(0)>[&];
	char		vacmViewTreeFamilyMask<s(1)(1)(0)>[&][16];
	vacmViewTreeFamilyType_Tval<s(1)(1)(0)>[T] vacmViewTreeFamilyType<s(1)(1)(0)>[&];
	StorageType_Tval<s(1)(1)(0)>[T] vacmViewTreeFamilyStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] vacmViewTreeFamilyStatus<s(1)(1)(0)>[&];
}MIBvacmViewTreeFamilyTable_t<s(0)(0)(0)>[&];(D1:MIBvacmViewTreeFamilyTable_t:1)[[TYPENAME:MIBvacmViewTreeFamilyTable_t]]


















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityMIB_Did<s(0)(0)(0)>[&];(D1:snmpCommunityMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityMIBObjects_Did<s(0)(0)(0)>[&];(D1:snmpCommunityMIBObjects_Did:0)

   
typedef struct
{
	unsigned int	snmpTrapAddress<s(1)(1)(0)>[&];
	int		snmpTrapCommunity_len<s(1)(1)(0)>[&];
	char		snmpTrapCommunity<s(1)(1)(0)>[&][255];
}MIBsnmpCommunityMIBObjects_t<s(0)(0)(0)>[&];(D1:MIBsnmpCommunityMIBObjects_t:1)[[TYPENAME:MIBsnmpCommunityMIBObjects_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityMIBConformance_Did<s(0)(0)(0)>[&];(D1:snmpCommunityMIBConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityMIBCompliances_Did<s(0)(0)(0)>[&];(D1:snmpCommunityMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityMIBGroups_Did<s(0)(0)(0)>[&];(D1:snmpCommunityMIBGroups_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpCommunityTable_Did<s(0)(0)(0)>[&];(D1:snmpCommunityTable_Did:0)

   
typedef struct
{
	char		snmpCommunityIndex<s(1)(1)(0)>[&][32];                                               
	int		snmpCommunityName_len<s(1)(1)(0)>[&];
	char		snmpCommunityName<s(1)(1)(0)>[&][255];
	char		snmpCommunitySecurityName<s(1)(1)(0)>[&][32];
	int		snmpCommunityContextEngineID_len<s(1)(1)(0)>[&];
	char		snmpCommunityContextEngineID<s(1)(1)(0)>[&][32];
	char		snmpCommunityContextName<s(1)(1)(0)>[&][32];
	int		snmpCommunityTransportTag_len<s(1)(1)(0)>[&];
	char		snmpCommunityTransportTag<s(1)(1)(0)>[&][255];
	StorageType_Tval<s(1)(1)(0)>[T] snmpCommunityStorageType<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] snmpCommunityStatus<s(1)(1)(0)>[&];
}MIBsnmpCommunityTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpCommunityTable_t:1)[[TYPENAME:MIBsnmpCommunityTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] snmpTargetAddrExtTable_Did<s(0)(0)(0)>[&];(D1:snmpTargetAddrExtTable_Did:0)

   
typedef struct
{
	char		snmpTargetAddrName<s(1)(1)(0)>[&][32];                             
	int		snmpTargetAddrTMask_len<s(1)(1)(0)>[&];
	char		snmpTargetAddrTMask<s(1)(1)(0)>[&][255];
	int		snmpTargetAddrMMS<s(1)(1)(0)>[&];
}MIBsnmpTargetAddrExtTable_t<s(0)(0)(0)>[&];(D1:MIBsnmpTargetAddrExtTable_t:1)[[TYPENAME:MIBsnmpTargetAddrExtTable_t]]















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxMIB_Did<s(0)(0)(0)>[&];(D1:agentxMIB_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxObjects_Did<s(0)(0)(0)>[&];(D1:agentxObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxConformance_Did<s(0)(0)(0)>[&];(D1:agentxConformance_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxMIBGroups_Did<s(0)(0)(0)>[&];(D1:agentxMIBGroups_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxMIBCompliances_Did<s(0)(0)(0)>[&];(D1:agentxMIBCompliances_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxGeneral_Did<s(0)(0)(0)>[&];(D1:agentxGeneral_Did:0)

   
typedef struct
{
	int		agentxDefaultTimeout<s(1)(1)(0)>[&];
	int		agentxMasterAgentXVer<s(1)(1)(0)>[&];
}MIBagentxGeneral_t<s(0)(0)(0)>[&];(D1:MIBagentxGeneral_t:1)[[TYPENAME:MIBagentxGeneral_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxConnection_Did<s(0)(0)(0)>[&];(D1:agentxConnection_Did:0)

   
typedef struct
{
	unsigned int	agentxConnTableLastChange<s(1)(1)(0)>[&];
}MIBagentxConnection_t<s(0)(0)(0)>[&];(D1:MIBagentxConnection_t:1)[[TYPENAME:MIBagentxConnection_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxSession_Did<s(0)(0)(0)>[&];(D1:agentxSession_Did:0)

   
typedef struct
{
	unsigned int	agentxSessionTableLastChange<s(1)(1)(0)>[&];
}MIBagentxSession_t<s(0)(0)(0)>[&];(D1:MIBagentxSession_t:1)[[TYPENAME:MIBagentxSession_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] agentxRegistration_Did<s(0)(0)(0)>[&];(D1:agentxRegistration_Did:0)

   
typedef struct
{
	unsigned int	agentxRegistrationTableLastChange<s(1)(1)(0)>[&];
}MIBagentxRegistration_t<s(0)(0)(0)>[&];(D1:MIBagentxRegistration_t:1)[[TYPENAME:MIBagentxRegistration_t]]






 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] agentxRegistrationTable_Did<s(0)(0)(0)>[&];(D1:agentxRegistrationTable_Did:0)

   
typedef struct
{
	unsigned int	agentxConnIndex<s(1)(1)(0)>[&];                             
	unsigned int	agentxSessionIndex<s(1)(1)(0)>[&];                          
	unsigned int	agentxRegIndex<s(1)(1)(0)>[&];                              
	int		agentxRegContext_len<s(1)(1)(0)>[&];
	char		agentxRegContext<s(1)(1)(0)>[&][255];
	OIDValue<s(1)(1)(0)>[T]	agentxRegStart<s(1)(1)(0)>[&];
	unsigned int	agentxRegRangeSubId<s(1)(1)(0)>[&];
	unsigned int	agentxRegUpperBound<s(1)(1)(0)>[&];
	unsigned int	agentxRegPriority<s(1)(1)(0)>[&];
	int		agentxRegTimeout<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] agentxRegInstance<s(1)(1)(0)>[&];
}MIBagentxRegistrationTable_t<s(0)(0)(0)>[&];(D1:MIBagentxRegistrationTable_t:1)[[TYPENAME:MIBagentxRegistrationTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] agentxSessionTable_Did<s(0)(0)(0)>[&];(D1:agentxSessionTable_Did:0)

   
typedef enum {
	agentxSessionAdminStatus_up<s(0)(0)(0)>[&]=1,
	agentxSessionAdminStatus_down<s(0)(0)(0)>[&]=2
} agentxSessionAdminStatus_Tval<s(0)(0)(0)>[&];(D1:agentxSessionAdminStatus_Tval:1)[[TYPENAME:agentxSessionAdminStatus_Tval]]

typedef struct
{
	unsigned int	agentxConnIndex<s(1)(1)(0)>[&];                                       
	unsigned int	agentxSessionIndex<s(1)(1)(0)>[&];                                    
	OIDValue<s(1)(1)(0)>[T]	agentxSessionObjectID<s(1)(1)(0)>[&];
	char		agentxSessionDescr<s(1)(1)(0)>[&][255];
	agentxSessionAdminStatus_Tval<s(1)(1)(0)>[T] agentxSessionAdminStatus<s(1)(1)(0)>[&];
	unsigned int	agentxSessionOpenTime<s(1)(1)(0)>[&];
	int		agentxSessionAgentXVer<s(1)(1)(0)>[&];
	int		agentxSessionTimeout<s(1)(1)(0)>[&];
}MIBagentxSessionTable_t<s(0)(0)(0)>[&];(D1:MIBagentxSessionTable_t:1)[[TYPENAME:MIBagentxSessionTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] agentxConnectionTable_Did<s(0)(0)(0)>[&];(D1:agentxConnectionTable_Did:0)

   
typedef struct
{
	unsigned int	agentxConnIndex<s(1)(1)(0)>[&];                                           
	unsigned int	agentxConnOpenTime<s(1)(1)(0)>[&];
	OIDValue<s(1)(1)(0)>[T]	agentxConnTransportDomain<s(1)(1)(0)>[&];
	int		agentxConnTransportAddress_len<s(1)(1)(0)>[&];
	char		agentxConnTransportAddress<s(1)(1)(0)>[&][255];
}MIBagentxConnectionTable_t<s(0)(0)(0)>[&];(D1:MIBagentxConnectionTable_t:1)[[TYPENAME:MIBagentxConnectionTable_t]]
















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseRoot_Did<s(0)(0)(0)>[&];(D1:enterpriseRoot_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseCommonRoot_Did<s(0)(0)(0)>[&];(D1:enterpriseCommonRoot_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseReg_Did<s(0)(0)(0)>[&];(D1:enterpriseReg_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseGeneric_Did<s(0)(0)(0)>[&];(D1:enterpriseGeneric_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseProducts_Did<s(0)(0)(0)>[&];(D1:enterpriseProducts_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseCaps_Did<s(0)(0)(0)>[&];(D1:enterpriseCaps_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseReqs_Did<s(0)(0)(0)>[&];(D1:enterpriseReqs_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseExpr_Did<s(0)(0)(0)>[&];(D1:enterpriseExpr_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1Products_Did<s(0)(0)(0)>[&];(D1:productSeries1Products_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1Common_Did<s(0)(0)(0)>[&];(D1:productSeries1Common_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseModules_Did<s(0)(0)(0)>[&];(D1:enterpriseModules_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseNetworkingProducts_Did<s(0)(0)(0)>[&];(D1:enterpriseNetworkingProducts_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] product1Reg_Did<s(0)(0)(0)>[&];(D1:product1Reg_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseGlobalRegModule_Did<s(0)(0)(0)>[&];(D1:enterpriseGlobalRegModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1CmnConf_Did<s(0)(0)(0)>[&];(D1:productSeries1CmnConf_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1CmnObjs_Did<s(0)(0)(0)>[&];(D1:productSeries1CmnObjs_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1CmnEvents_Did<s(0)(0)(0)>[&];(D1:productSeries1CmnEvents_Did:0)

   
typedef struct
{
	unsigned int	pbTrapTimeStamp<s(1)(1)(0)>[&];
}MIBproductSeries1CmnEvents_t<s(0)(0)(0)>[&];(D1:MIBproductSeries1CmnEvents_t:1)[[TYPENAME:MIBproductSeries1CmnEvents_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1CmnTCs_Did<s(0)(0)(0)>[&];(D1:productSeries1CmnTCs_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1TrapGroup_Did<s(0)(0)(0)>[&];(D1:productSeries1TrapGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbNode_Did<s(0)(0)(0)>[&];(D1:pbNode_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbEvents_Did<s(0)(0)(0)>[&];(D1:pbEvents_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbCircuitBasedTransport_Did<s(0)(0)(0)>[&];(D1:pbCircuitBasedTransport_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMS_Did<s(0)(0)(0)>[&];(D1:pbTMS_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOspf_Did<s(0)(0)(0)>[&];(D1:pbOspf_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMoln_Did<s(0)(0)(0)>[&];(D1:pbMoln_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbDcc_Did<s(0)(0)(0)>[&];(D1:pbDcc_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthernet_Did<s(0)(0)(0)>[&];(D1:pbEthernet_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbDiagnostics_Did<s(0)(0)(0)>[&];(D1:pbDiagnostics_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOpticsMonitor_Did<s(0)(0)(0)>[&];(D1:pbOpticsMonitor_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbPowerCircuitMonitor_Did<s(0)(0)(0)>[&];(D1:pbPowerCircuitMonitor_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOr_Did<s(0)(0)(0)>[&];(D1:pbOr_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbTrunk_Did<s(0)(0)(0)>[&];(D1:pbTrunk_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbXcExtend_Did<s(0)(0)(0)>[&];(D1:pbXcExtend_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbRpr_Did<s(0)(0)(0)>[&];(D1:pbRpr_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOAObjects_Did<s(0)(0)(0)>[&];(D1:pbOAObjects_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOsi_Did<s(0)(0)(0)>[&];(D1:pbOsi_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbIpTunnel_Did<s(0)(0)(0)>[&];(D1:pbIpTunnel_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbProtection_Did<s(0)(0)(0)>[&];(D1:pbProtection_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSecurity_Did<s(0)(0)(0)>[&];(D1:pbSecurity_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbDigitalTransport_Did<s(0)(0)(0)>[&];(D1:pbDigitalTransport_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] productSeries1MibModule_Did<s(0)(0)(0)>[&];(D1:productSeries1MibModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseGlobalTCModule_Did<s(0)(0)(0)>[&];(D1:enterpriseGlobalTCModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOATable_Did<s(0)(0)(0)>[&];(D1:pbOATable_Did:0)

   
typedef enum {
	pbOAModuleConfiguration_singlePump<s(0)(0)(0)>[&]=0,
	pbOAModuleConfiguration_dualPump<s(0)(0)(0)>[&]=1
} pbOAModuleConfiguration_Tval<s(0)(0)(0)>[&];(D1:pbOAModuleConfiguration_Tval:1)[[TYPENAME:pbOAModuleConfiguration_Tval]]

typedef enum {
	pbOAModuleType_amplet<s(0)(0)(0)>[&]=0,
	pbOAModuleType_boosterAmplifier<s(0)(0)(0)>[&]=1,
	pbOAModuleType_lineAmplifier<s(0)(0)(0)>[&]=2,
	pbOAModuleType_preAmplifier<s(0)(0)(0)>[&]=3
} pbOAModuleType_Tval<s(0)(0)(0)>[&];(D1:pbOAModuleType_Tval:1)[[TYPENAME:pbOAModuleType_Tval]]

typedef enum {
	pbOAOperationMode_constantCurrent<s(0)(0)(0)>[&]=0,
	pbOAOperationMode_constantGain<s(0)(0)(0)>[&]=1,
	pbOAOperationMode_constantPower<s(0)(0)(0)>[&]=2
} pbOAOperationMode_Tval<s(0)(0)(0)>[&];(D1:pbOAOperationMode_Tval:1)[[TYPENAME:pbOAOperationMode_Tval]]

typedef enum {
	pbOAAutoShutdown_disable<s(0)(0)(0)>[&]=0,
	pbOAAutoShutdown_enable<s(0)(0)(0)>[&]=1
} pbOAAutoShutdown_Tval<s(0)(0)(0)>[&];(D1:pbOAAutoShutdown_Tval:1)[[TYPENAME:pbOAAutoShutdown_Tval]]

typedef enum {
	pbOARealOperationMode_constantCurrent<s(0)(0)(0)>[&]=0,
	pbOARealOperationMode_constantGain<s(0)(0)(0)>[&]=1,
	pbOARealOperationMode_constantPower<s(0)(0)(0)>[&]=2
} pbOARealOperationMode_Tval<s(0)(0)(0)>[&];(D1:pbOARealOperationMode_Tval:1)[[TYPENAME:pbOARealOperationMode_Tval]]

typedef enum {
	pbOARealAutoShutdown_disable<s(0)(0)(0)>[&]=0,
	pbOARealAutoShutdown_enable<s(0)(0)(0)>[&]=1
} pbOARealAutoShutdown_Tval<s(0)(0)(0)>[&];(D1:pbOARealAutoShutdown_Tval:1)[[TYPENAME:pbOARealAutoShutdown_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbOASlotNo<s(1)(1)(0)>[&];                                            
	int		pbOAPortNo<s(1)(1)(0)>[&];                                                             
	pbOAModuleConfiguration_Tval<s(1)(1)(0)>[T] pbOAModuleConfiguration<s(1)(1)(0)>[&];   
	pbOAModuleType_Tval<s(1)(1)(0)>[T] pbOAModuleType<s(1)(1)(0)>[&];   
	char		pbOAHWVersion<s(1)(1)(0)>[&][10];   
	char		pbOASWVersion<s(1)(1)(0)>[&][10];   
	char		pbOASerialNumber<s(1)(1)(0)>[&][10];   
	int		pbOAInputPower<s(1)(1)(0)>[&];   
	int		pbOACurrentOutputPower<s(1)(1)(0)>[&];   
	int		pbOACurrentModuleGain<s(1)(1)(0)>[&];   
	int		pbOAPump1Power<s(1)(1)(0)>[&];   
	int		pbOAPump2Power<s(1)(1)(0)>[&];   
	int		pbOATemperature<s(1)(1)(0)>[&];   
	int		pbOAPump1DriveCurrent<s(1)(1)(0)>[&];   
	int		pbOAPump2DriveCurrent<s(1)(1)(0)>[&];   
	int		pbOAPowerSupplyVoltage<s(1)(1)(0)>[&];   
	pbOAOperationMode_Tval<s(1)(1)(0)>[T] pbOAOperationMode<s(1)(1)(0)>[&];   
	int		pbOAExpectedOutputPower<s(1)(1)(0)>[&];   
	int		pbOAExpectedModuleGain<s(1)(1)(0)>[&];   
	int		pbOAInputThreshold<s(1)(1)(0)>[&];   
	int		pbOAOutputThreshold<s(1)(1)(0)>[&];   
	int		pbOAShutdownThreshold<s(1)(1)(0)>[&];   
	int		pbOALowTThreshold<s(1)(1)(0)>[&];   
	int		pbOAHighTThreshold<s(1)(1)(0)>[&];   
	pbOAAutoShutdown_Tval<s(1)(1)(0)>[T] pbOAAutoShutdown<s(1)(1)(0)>[&];   
	int		pbOAMaxoutputpower<s(1)(1)(0)>[&];   
	int		pbOAMaxPump1Current<s(1)(1)(0)>[&];   
	int		pbOAMaxPump2Current<s(1)(1)(0)>[&];   
	pbOARealOperationMode_Tval<s(1)(1)(0)>[T] pbOARealOperationMode<s(1)(1)(0)>[&];   
	int		pbOARealExpectedOutputPower<s(1)(1)(0)>[&];   
	int		pbOARealExpectedModuleGain<s(1)(1)(0)>[&];   
	int		pbOARealInputThreshold<s(1)(1)(0)>[&];   
	int		pbOARealOutputThreshold<s(1)(1)(0)>[&];   
	int		pbOARealShutdownThreshold<s(1)(1)(0)>[&];   
	int		pbOARealLowTThreshold<s(1)(1)(0)>[&];   
	int		pbOARealHighTThreshold<s(1)(1)(0)>[&];   
	pbOARealAutoShutdown_Tval<s(1)(1)(0)>[T] pbOARealAutoShutdown<s(1)(1)(0)>[&];   
	int		pbOARealCoolPumpTemp<s(1)(1)(0)>[&];   
}MIBpbOATable_t<s(0)(0)(0)>[&];(D1:MIBpbOATable_t:1)[[TYPENAME:MIBpbOATable_t]]













































 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseOAModule_Did<s(0)(0)(0)>[&];(D1:enterpriseOAModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] addressGroup_Did<s(0)(0)(0)>[&];(D1:addressGroup_Did:0)

   
typedef enum {
	pbEthernetEnable_disable<s(0)(0)(0)>[&]=1,
	pbEthernetEnable_enable<s(0)(0)(0)>[&]=2
} pbEthernetEnable_Tval<s(0)(0)(0)>[&];(D1:pbEthernetEnable_Tval:1)[[TYPENAME:pbEthernetEnable_Tval]]

typedef enum {
	pbMgmtPort1Status_down<s(0)(0)(0)>[&]=0,
	pbMgmtPort1Status_up<s(0)(0)(0)>[&]=1
} pbMgmtPort1Status_Tval<s(0)(0)(0)>[&];(D1:pbMgmtPort1Status_Tval:1)[[TYPENAME:pbMgmtPort1Status_Tval]]

typedef enum {
	pbMgmtPort2Status_down<s(0)(0)(0)>[&]=0,
	pbMgmtPort2Status_up<s(0)(0)(0)>[&]=1
} pbMgmtPort2Status_Tval<s(0)(0)(0)>[&];(D1:pbMgmtPort2Status_Tval:1)[[TYPENAME:pbMgmtPort2Status_Tval]]

typedef struct
{
	unsigned int	pbIpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbIpMask<s(1)(1)(0)>[&];   
	unsigned int	pbGatewayAddress<s(1)(1)(0)>[&];   
	unsigned int	pbEthernetAddress<s(1)(1)(0)>[&];   
	unsigned int	pbEthernetMask<s(1)(1)(0)>[&];   
	int		pbSystemMacAddress_len<s(1)(1)(0)>[&];
	char		pbSystemMacAddress<s(1)(1)(0)>[&][6];   
	unsigned int	pbSlaveEthernetAddress<s(1)(1)(0)>[&];   
	unsigned int	pbEthernetAddressSecondary<s(1)(1)(0)>[&];   
	unsigned int	pbEthernetMaskSecondary<s(1)(1)(0)>[&];   
	pbEthernetEnable_Tval<s(1)(1)(0)>[T] pbEthernetEnable<s(1)(1)(0)>[&];   
	unsigned int	pbGMPLSIPAddress<s(1)(1)(0)>[&];   
	unsigned int	pbGMPLSIPMask<s(1)(1)(0)>[&];
	pbMgmtPort1Status_Tval<s(1)(1)(0)>[T] pbMgmtPort1Status<s(1)(1)(0)>[&];
	pbMgmtPort2Status_Tval<s(1)(1)(0)>[T] pbMgmtPort2Status<s(1)(1)(0)>[&];
}MIBaddressGroup_t<s(0)(0)(0)>[&];(D1:MIBaddressGroup_t:1)[[TYPENAME:MIBaddressGroup_t]]



















 



 
extern MIBDid_t<s(0)(0)(0)>[T] systemGroup_Did<s(0)(0)(0)>[&];(D1:systemGroup_Did:0)

   
typedef struct
{
	PbNodeMode_Tval<s(1)(1)(0)>[T] pbMode<s(1)(1)(0)>[&];   
	char		pbLabel<s(1)(1)(0)>[&][255];   
	char		pbLocation<s(1)(1)(0)>[&][255];   
	char		pbDescription<s(1)(1)(0)>[&][255];   
	char		pbContact<s(1)(1)(0)>[&][255];   
	char		pbSerialNumber<s(1)(1)(0)>[&][255];   
	char		pbRelease<s(1)(1)(0)>[&][20];   
	char		pbBootImageVersion<s(1)(1)(0)>[&][20];   
	char		pbBackplaneHwVersion<s(1)(1)(0)>[&][17];   
	char		pbBackplaneCode<s(1)(1)(0)>[&][64];   
}MIBsystemGroup_t<s(0)(0)(0)>[&];(D1:MIBsystemGroup_t:1)[[TYPENAME:MIBsystemGroup_t]]















 



 
extern MIBDid_t<s(0)(0)(0)>[T] ledGroup_Did<s(0)(0)(0)>[&];(D1:ledGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbLedTest<s(1)(1)(0)>[&];   
}MIBledGroup_t<s(0)(0)(0)>[&];(D1:MIBledGroup_t:1)[[TYPENAME:MIBledGroup_t]]






 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSlotTable_Did<s(0)(0)(0)>[&];(D1:pbSlotTable_Did:0)

   
typedef enum {
	pbCardState_none<s(0)(0)(0)>[&]=0,
	pbCardState_provisioning<s(0)(0)(0)>[&]=1,
	pbCardState_initializing<s(0)(0)(0)>[&]=2,
	pbCardState_faulty<s(0)(0)(0)>[&]=3,
	pbCardState_operational<s(0)(0)(0)>[&]=4,
	pbCardState_absent<s(0)(0)(0)>[&]=5,
	pbCardState_disabled<s(0)(0)(0)>[&]=6,
	pbCardState_mismatch<s(0)(0)(0)>[&]=7,
	pbCardState_available<s(0)(0)(0)>[&]=8,
	pbCardState_active<s(0)(0)(0)>[&]=9,
	pbCardState_standby<s(0)(0)(0)>[&]=10,
	pbCardState_mirroring<s(0)(0)(0)>[&]=11,
	pbCardState_tracking<s(0)(0)(0)>[&]=12,
	pbCardState_reset<s(0)(0)(0)>[&]=13,
	pbCardState_max<s(0)(0)(0)>[&]=14
} pbCardState_Tval<s(0)(0)(0)>[&];(D1:pbCardState_Tval:1)[[TYPENAME:pbCardState_Tval]]

typedef enum {
	pbCardDesiredState_auto<s(0)(0)(0)>[&]=1,
	pbCardDesiredState_active<s(0)(0)(0)>[&]=2,
	pbCardDesiredState_standby<s(0)(0)(0)>[&]=3
} pbCardDesiredState_Tval<s(0)(0)(0)>[&];(D1:pbCardDesiredState_Tval:1)[[TYPENAME:pbCardDesiredState_Tval]]

typedef enum {
	pbSlotResetDuration_permanent<s(0)(0)(0)>[&]=1,
	pbSlotResetDuration_transient<s(0)(0)(0)>[&]=2
} pbSlotResetDuration_Tval<s(0)(0)(0)>[&];(D1:pbSlotResetDuration_Tval:1)[[TYPENAME:pbSlotResetDuration_Tval]]

typedef enum {
	pbDiagMode_none<s(0)(0)(0)>[&]=1,
	pbDiagMode_once<s(0)(0)(0)>[&]=2,
	pbDiagMode_always<s(0)(0)(0)>[&]=3,
	pbDiagMode_ess<s(0)(0)(0)>[&]=4,
	pbDiagMode_burnIn<s(0)(0)(0)>[&]=5
} pbDiagMode_Tval<s(0)(0)(0)>[&];(D1:pbDiagMode_Tval:1)[[TYPENAME:pbDiagMode_Tval]]

typedef enum {
	pbForceResetSlot_none<s(0)(0)(0)>[&]=1,
	pbForceResetSlot_warm<s(0)(0)(0)>[&]=2,
	pbForceResetSlot_cold<s(0)(0)(0)>[&]=3
} pbForceResetSlot_Tval<s(0)(0)(0)>[&];(D1:pbForceResetSlot_Tval:1)[[TYPENAME:pbForceResetSlot_Tval]]

typedef enum {
	pbLatchState_na<s(0)(0)(0)>[&]=0,
	pbLatchState_off<s(0)(0)(0)>[&]=1,
	pbLatchState_on<s(0)(0)(0)>[&]=2
} pbLatchState_Tval<s(0)(0)(0)>[&];(D1:pbLatchState_Tval:1)[[TYPENAME:pbLatchState_Tval]]

typedef enum {
	slotMaxDCCNumber_ports_8<s(0)(0)(0)>[&]=0,
	slotMaxDCCNumber_ports_16<s(0)(0)(0)>[&]=1
} slotMaxDCCNumber_Tval<s(0)(0)(0)>[&];(D1:slotMaxDCCNumber_Tval:1)[[TYPENAME:slotMaxDCCNumber_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                  
	PbSlotType_Tval<s(1)(1)(0)>[T] pbSlotType<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] pbBoardType<s(1)(1)(0)>[&];   
	PbBoardFunction_Tval<s(1)(1)(0)>[T] pbBoardFunction<s(1)(1)(0)>[&];   
	pbCardState_Tval<s(1)(1)(0)>[T] pbCardState<s(1)(1)(0)>[&];   
	pbCardDesiredState_Tval<s(1)(1)(0)>[T] pbCardDesiredState<s(1)(1)(0)>[&];   
	char		pbSlotNumberDisplay<s(1)(1)(0)>[&][10];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotReset<s(1)(1)(0)>[&];   
	int		pbSlotNoFailuresTotal<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotResetNoFailures<s(1)(1)(0)>[&];   
	pbSlotResetDuration_Tval<s(1)(1)(0)>[T] pbSlotResetDuration<s(1)(1)(0)>[&];   
	char		pbSlotName<s(1)(1)(0)>[&][255];   
	char		pbSlotDescr<s(1)(1)(0)>[&][255];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotIfCardDumb<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotCrashDumpAvail<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] pbSlotLastBoardType<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotBoardTypeDifference<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotExplicitDeletion<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] pbProvisionedCardType<s(1)(1)(0)>[&];   
	char		pbSlotCardSpecificInfo<s(1)(1)(0)>[&][255];   
	int		pbSlotTemperatureThreshold<s(1)(1)(0)>[&];   
	int		pbSlotTemperatureHysteresis<s(1)(1)(0)>[&];   
	int		pbSlotTemperatureCleanThreshold<s(1)(1)(0)>[&];   
	PbBoardFunction_Tval<s(1)(1)(0)>[T] pbSlotLastBoardFunction<s(1)(1)(0)>[&];   
	pbDiagMode_Tval<s(1)(1)(0)>[T] pbDiagMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbDiagActive<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbLogicalSlotNumber<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotDisable<s(1)(1)(0)>[&];   
	pbForceResetSlot_Tval<s(1)(1)(0)>[T] pbForceResetSlot<s(1)(1)(0)>[&];   
	PbLedColor_Tval<s(1)(1)(0)>[T] pbSlotFailureLedColor<s(1)(1)(0)>[&];   
	PbLedColor_Tval<s(1)(1)(0)>[T] pbSlotActiveLedColor<s(1)(1)(0)>[&];   
	char		pbBoardSerialNumber<s(1)(1)(0)>[&][255];   
	int		pbBoardOption<s(1)(1)(0)>[&];   
	char		pbCode<s(1)(1)(0)>[&][64];   
	pbLatchState_Tval<s(1)(1)(0)>[T] pbLatchState<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlotAlarmDisable<s(1)(1)(0)>[&];   
	PbBoardFunction_Tval<s(1)(1)(0)>[T] provisionedCardFunction<s(1)(1)(0)>[&];
	int		slotConfigOption<s(1)(1)(0)>[&];   
	char		cardSoftwareVersion<s(1)(1)(0)>[&][33];   
	char		cardBootVersion<s(1)(1)(0)>[&][21];   
	char		cardBootDatetime<s(1)(1)(0)>[&][255];   
	char		cardHardwareVersion<s(1)(1)(0)>[&][17];   
	char		cardFusionVersion<s(1)(1)(0)>[&][17];   
	char		cardFpgaVersion<s(1)(1)(0)>[&][255];   
	int		macAddress_len<s(1)(1)(0)>[&];
	char		macAddress<s(1)(1)(0)>[&][6];
	slotMaxDCCNumber_Tval<s(1)(1)(0)>[T] slotMaxDCCNumber<s(1)(1)(0)>[&];
	int		slotMapValue<s(1)(1)(0)>[&];
}MIBpbSlotTable_t<s(0)(0)(0)>[&];(D1:MIBpbSlotTable_t:1)[[TYPENAME:MIBpbSlotTable_t]]






















































 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMibSaveRestoreGroup_Did<s(0)(0)(0)>[&];(D1:pbMibSaveRestoreGroup_Did:0)

   
typedef enum {
	pbConfigType_ascii<s(0)(0)(0)>[&]=1,
	pbConfigType_binary<s(0)(0)(0)>[&]=2
} pbConfigType_Tval<s(0)(0)(0)>[&];(D1:pbConfigType_Tval:1)[[TYPENAME:pbConfigType_Tval]]

typedef struct
{
	PbOnOff_Tval<s(1)(1)(0)>[T] pbAutoSaver<s(1)(1)(0)>[&];   
	int		pbAutoSaverFirstTimer<s(1)(1)(0)>[&];   
	int		pbAutoSaverLastTimer<s(1)(1)(0)>[&];   
	pbConfigType_Tval<s(1)(1)(0)>[T] pbConfigType<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSaveMib<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbClearMibSet<s(1)(1)(0)>[&];   
}MIBpbMibSaveRestoreGroup_t<s(0)(0)(0)>[&];(D1:MIBpbMibSaveRestoreGroup_t:1)[[TYPENAME:MIBpbMibSaveRestoreGroup_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbInterfaceGroup_Did<s(0)(0)(0)>[&];(D1:pbInterfaceGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbAutoLinkStarted<s(1)(1)(0)>[&];   
}MIBpbInterfaceGroup_t<s(0)(0)(0)>[&];(D1:MIBpbInterfaceGroup_t:1)[[TYPENAME:MIBpbInterfaceGroup_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbUpgradeGroup_Did<s(0)(0)(0)>[&];(D1:pbUpgradeGroup_Did:0)

   
typedef struct
{
	char		pbUpgradeCurrRelease<s(1)(1)(0)>[&][30];   
	char		pbUpgradeBackupRelease<s(1)(1)(0)>[&][30];   
	unsigned int	pbUpgradeHostIP<s(1)(1)(0)>[&];   
	char		pbUpgradeHostUsername<s(1)(1)(0)>[&][20];   
	char		pbUpgradeHostPassword<s(1)(1)(0)>[&][20];   
	char		pbUpgradeHostFileName<s(1)(1)(0)>[&][255];   
	TypeUpgradeCmnd_Tval<s(1)(1)(0)>[T] pbUpgradeCommand<s(1)(1)(0)>[&];   
	PbCmndState_Tval<s(1)(1)(0)>[T] pbUpgradeCmndState<s(1)(1)(0)>[&];   
	char		pbUpgradeStateDescr<s(1)(1)(0)>[&][255];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUpgradeLoadCancel<s(1)(1)(0)>[&];   
	TypeUpgradeCmnd_Tval<s(1)(1)(0)>[T] nodeUpgradeLastCommand<s(1)(1)(0)>[&];   
	TypeSoftUpgFailedIndex_Tval<s(1)(1)(0)>[T] nodeUpgradeFailedIndex<s(1)(1)(0)>[&];   
	int		nodeUpgradeSwitchPhySlot<s(1)(1)(0)>[&];   
}MIBpbUpgradeGroup_t<s(0)(0)(0)>[&];(D1:MIBpbUpgradeGroup_t:1)[[TYPENAME:MIBpbUpgradeGroup_t]]


















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbConfigCmndGroup_Did<s(0)(0)(0)>[&];(D1:pbConfigCmndGroup_Did:0)

   
typedef enum {
	nodeMibNmsOperateArea_none<s(0)(0)(0)>[&]=0,
	nodeMibNmsOperateArea_flash<s(0)(0)(0)>[&]=1,
	nodeMibNmsOperateArea_cf<s(0)(0)(0)>[&]=2,
	nodeMibNmsOperateArea_ramdisc<s(0)(0)(0)>[&]=3
} nodeMibNmsOperateArea_Tval<s(0)(0)(0)>[&];(D1:nodeMibNmsOperateArea_Tval:1)[[TYPENAME:nodeMibNmsOperateArea_Tval]]

typedef enum {
	pbBackupMIBState_invalid<s(0)(0)(0)>[&]=0,
	pbBackupMIBState_valid<s(0)(0)(0)>[&]=1
} pbBackupMIBState_Tval<s(0)(0)(0)>[&];(D1:pbBackupMIBState_Tval:1)[[TYPENAME:pbBackupMIBState_Tval]]

typedef struct
{
	TypeMibCmnd_Tval<s(1)(1)(0)>[T] nodeMibCmnd<s(1)(1)(0)>[&];   
	PbCmndState_Tval<s(1)(1)(0)>[T] nodeMibCmndState<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] nodeMibCmndCancel<s(1)(1)(0)>[&];   
	nodeMibNmsOperateArea_Tval<s(1)(1)(0)>[T] nodeMibNmsOperateArea<s(1)(1)(0)>[&];   
	TypeMibUpDownLoadStatus_Tval<s(1)(1)(0)>[T] nodeMibUpDownLoadStatus<s(1)(1)(0)>[&];   
	TypeMibCmnd_Tval<s(1)(1)(0)>[T] nodeMibLastCommand<s(1)(1)(0)>[&];   
	TypeMibUpgFailedIndex_Tval<s(1)(1)(0)>[T] nodeMibFailedIndex<s(1)(1)(0)>[&];   
	pbBackupMIBState_Tval<s(1)(1)(0)>[T] pbBackupMIBState<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbMIBOperationDateTimeStamp<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] nodeMIBFilesNoCheck<s(1)(1)(0)>[&];   
}MIBpbConfigCmndGroup_t<s(0)(0)(0)>[&];(D1:MIBpbConfigCmndGroup_t:1)[[TYPENAME:MIBpbConfigCmndGroup_t]]















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbStatsGroup_Did<s(0)(0)(0)>[&];(D1:pbStatsGroup_Did:0)

   
typedef struct
{
	int		pbNumberOfReboots<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbNodeDownDTS<s(1)(1)(0)>[&];   
}MIBpbStatsGroup_t<s(0)(0)(0)>[&];(D1:MIBpbStatsGroup_t:1)[[TYPENAME:MIBpbStatsGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] alarmGroup_Did<s(0)(0)(0)>[&];(D1:alarmGroup_Did:0)

   
typedef struct
{
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbNodeAlarmEnabling<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAISEnabled<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRDIEnabled<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmSuppress<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmCutOff<s(1)(1)(0)>[&];   
	int		pbDataExcDegTpNum<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSEFEnabled<s(1)(1)(0)>[&];
}MIBalarmGroup_t<s(0)(0)(0)>[&];(D1:MIBalarmGroup_t:1)[[TYPENAME:MIBalarmGroup_t]]












 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbNodeGroup_Did<s(0)(0)(0)>[&];(D1:pbNodeGroup_Did:0)

   
typedef enum {
	pbNodeType_hiT7065<s(0)(0)(0)>[&]=11
} pbNodeType_Tval<s(0)(0)(0)>[&];(D1:pbNodeType_Tval:1)[[TYPENAME:pbNodeType_Tval]]

typedef struct
{
	pbNodeType_Tval<s(1)(1)(0)>[T] pbNodeType<s(1)(1)(0)>[&];   
	char		pbNodeSoftwareVersion<s(1)(1)(0)>[&][255];   
	int		pbNodeIntSoftwareVersion<s(1)(1)(0)>[&];   
	int		pbDatabaseVersion<s(1)(1)(0)>[&];   
}MIBpbNodeGroup_t<s(0)(0)(0)>[&];(D1:MIBpbNodeGroup_t:1)[[TYPENAME:MIBpbNodeGroup_t]]









 



 
extern MIBDid_t<s(0)(0)(0)>[T] nodeControlGroup_Did<s(0)(0)(0)>[&];(D1:nodeControlGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbWarmRebootNode<s(1)(1)(0)>[&];   
	PbColdRebootNodeState_Tval<s(1)(1)(0)>[T] pbColdRebootNode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbResetNode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbNodeShutDown<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbNodePowerOff<s(1)(1)(0)>[&];   
}MIBnodeControlGroup_t<s(0)(0)(0)>[&];(D1:MIBnodeControlGroup_t:1)[[TYPENAME:MIBnodeControlGroup_t]]










 



 
extern MIBDid_t<s(0)(0)(0)>[T] ntpGroup_Did<s(0)(0)(0)>[&];(D1:ntpGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbNTPEnabled<s(1)(1)(0)>[&];   
	unsigned int	pbNTPIpAddress<s(1)(1)(0)>[&];   
	int		pbNTPRequestPeriods<s(1)(1)(0)>[&];   
}MIBntpGroup_t<s(0)(0)(0)>[&];(D1:MIBntpGroup_t:1)[[TYPENAME:MIBntpGroup_t]]








 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbDateTimeStampGroup_Did<s(0)(0)(0)>[&];(D1:pbDateTimeStampGroup_Did:0)

   
typedef struct
{
	DateTime<s(1)(1)(0)>[T]	pbDateTimeStampSet<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbDateTimeStampGet<s(1)(1)(0)>[&];   
	PbTimeZone_Tval<s(1)(1)(0)>[T] pbTimeZone<s(1)(1)(0)>[&];   
}MIBpbDateTimeStampGroup_t<s(0)(0)(0)>[&];(D1:MIBpbDateTimeStampGroup_t:1)[[TYPENAME:MIBpbDateTimeStampGroup_t]]








 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbCFCardGroup_Did<s(0)(0)(0)>[&];(D1:pbCFCardGroup_Did:0)

   
typedef enum {
	pbCFCardMIBValidity_cfcf<s(0)(0)(0)>[&]=1,
	pbCFCardMIBValidity_cfmc<s(0)(0)(0)>[&]=2,
	pbCFCardMIBValidity_mccf<s(0)(0)(0)>[&]=3,
	pbCFCardMIBValidity_mcmc<s(0)(0)(0)>[&]=4,
	pbCFCardMIBValidity_cffailed<s(0)(0)(0)>[&]=5
} pbCFCardMIBValidity_Tval<s(0)(0)(0)>[&];(D1:pbCFCardMIBValidity_Tval:1)[[TYPENAME:pbCFCardMIBValidity_Tval]]

typedef struct
{
	PbCFCardState_Tval<s(1)(1)(0)>[T] pbCFCardStatus<s(1)(1)(0)>[&];   
	pbCFCardMIBValidity_Tval<s(1)(1)(0)>[T] pbCFCardMIBValidity<s(1)(1)(0)>[&];   
	PbCFCardState_Tval<s(1)(1)(0)>[T] pbStandbyCFCardStatus<s(1)(1)(0)>[&];   
}MIBpbCFCardGroup_t<s(0)(0)(0)>[&];(D1:MIBpbCFCardGroup_t:1)[[TYPENAME:MIBpbCFCardGroup_t]]








 



 
extern MIBDid_t<s(0)(0)(0)>[T] flashSpaceGroup_Did<s(0)(0)(0)>[&];(D1:flashSpaceGroup_Did:0)

   
typedef struct
{
	int		boardFlashFreeSpace<s(1)(1)(0)>[&];   
	int		cfCardFreeSpace<s(1)(1)(0)>[&];   
}MIBflashSpaceGroup_t<s(0)(0)(0)>[&];(D1:MIBflashSpaceGroup_t:1)[[TYPENAME:MIBflashSpaceGroup_t]]







 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbExtensionShelfTable_Did<s(0)(0)(0)>[&];(D1:pbExtensionShelfTable_Did:0)

   
typedef struct
{
	int		pbExtensionShelfID<s(1)(1)(0)>[&];                                                   
	unsigned int	pbMainShelfIP<s(1)(1)(0)>[&];   
	char		pbMainShelfReadString<s(1)(1)(0)>[&][255];   
	char		pbMainShelfWriteString<s(1)(1)(0)>[&][255];   
	int		pbMainShelfSlot<s(1)(1)(0)>[&];   
	int		pbMainShelfPort<s(1)(1)(0)>[&];   
	unsigned int	pbExtesionShelfIP<s(1)(1)(0)>[&];   
	char		pbExtesionShelfReadString<s(1)(1)(0)>[&][255];   
	char		pbExtesionShelfWriteString<s(1)(1)(0)>[&][255];   
	int		pbExtesionShelfSlot<s(1)(1)(0)>[&];   
	int		pbExtesionShelfPort<s(1)(1)(0)>[&];   
	char		pbExtesionShelfLabel<s(1)(1)(0)>[&][255];   
	char		pbExtesionShelfDesc<s(1)(1)(0)>[&][255];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbExtesionShelfRowStatus<s(1)(1)(0)>[&];   
}MIBpbExtensionShelfTable_t<s(0)(0)(0)>[&];(D1:MIBpbExtensionShelfTable_t:1)[[TYPENAME:MIBpbExtensionShelfTable_t]]





















 



 
extern MIBDid_t<s(0)(0)(0)>[T] nodePropertyGroup_Did<s(0)(0)(0)>[&];(D1:nodePropertyGroup_Did:0)

   
typedef enum {
	nodeHoccCapability_capability_340g<s(0)(0)(0)>[&]=1,
	nodeHoccCapability_capability_680g<s(0)(0)(0)>[&]=2
} nodeHoccCapability_Tval<s(0)(0)(0)>[&];(D1:nodeHoccCapability_Tval:1)[[TYPENAME:nodeHoccCapability_Tval]]

typedef enum {
	nodeLoccCapability_capability_none<s(0)(0)(0)>[&]=1,
	nodeLoccCapability_capability_20g<s(0)(0)(0)>[&]=2,
	nodeLoccCapability_capability_40g<s(0)(0)(0)>[&]=3
} nodeLoccCapability_Tval<s(0)(0)(0)>[&];(D1:nodeLoccCapability_Tval:1)[[TYPENAME:nodeLoccCapability_Tval]]

typedef struct
{
	nodeHoccCapability_Tval<s(1)(1)(0)>[T] nodeHoccCapability<s(1)(1)(0)>[&];   
	nodeLoccCapability_Tval<s(1)(1)(0)>[T] nodeLoccCapability<s(1)(1)(0)>[&];   
}MIBnodePropertyGroup_t<s(0)(0)(0)>[&];(D1:MIBnodePropertyGroup_t:1)[[TYPENAME:MIBnodePropertyGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] eowFunctionGroup_Did<s(0)(0)(0)>[&];(D1:eowFunctionGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] gmplsLicenseGroup_Did<s(0)(0)(0)>[&];(D1:gmplsLicenseGroup_Did:0)

   
typedef enum {
	gmplsLicenseStatus_unknown<s(0)(0)(0)>[&]=1,
	gmplsLicenseStatus_license_not_exist<s(0)(0)(0)>[&]=2,
	gmplsLicenseStatus_license_invalid<s(0)(0)(0)>[&]=3,
	gmplsLicenseStatus_ospf_only<s(0)(0)(0)>[&]=4,
	gmplsLicenseStatus_gmpls<s(0)(0)(0)>[&]=5
} gmplsLicenseStatus_Tval<s(0)(0)(0)>[&];(D1:gmplsLicenseStatus_Tval:1)[[TYPENAME:gmplsLicenseStatus_Tval]]

typedef struct
{
	gmplsLicenseStatus_Tval<s(1)(1)(0)>[T] gmplsLicenseStatus<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] gmplsLicenseSyncFlag<s(1)(1)(0)>[&];
}MIBgmplsLicenseGroup_t<s(0)(0)(0)>[&];(D1:MIBgmplsLicenseGroup_t:1)[[TYPENAME:MIBgmplsLicenseGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] e2romConfigGroup_Did<s(0)(0)(0)>[&];(D1:e2romConfigGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] systemMonitorGroup_Did<s(0)(0)(0)>[&];(D1:systemMonitorGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] cpuUtilEventGroup_Did<s(0)(0)(0)>[&];(D1:cpuUtilEventGroup_Did:0)

   
typedef struct
{
	int		cpuUtilThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] cpuUtilEventEnable<s(1)(1)(0)>[&];   
}MIBcpuUtilEventGroup_t<s(0)(0)(0)>[&];(D1:MIBcpuUtilEventGroup_t:1)[[TYPENAME:MIBcpuUtilEventGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] memUtilEventGroup_Did<s(0)(0)(0)>[&];(D1:memUtilEventGroup_Did:0)

   
typedef struct
{
	int		memUtilThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] memUtilEventEnable<s(1)(1)(0)>[&];   
}MIBmemUtilEventGroup_t<s(0)(0)(0)>[&];(D1:MIBmemUtilEventGroup_t:1)[[TYPENAME:MIBmemUtilEventGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] cfCardUtilEventGroup_Did<s(0)(0)(0)>[&];(D1:cfCardUtilEventGroup_Did:0)

   
typedef struct
{
	int		cfCardUtilThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] cfCardUtilEventEnable<s(1)(1)(0)>[&];   
}MIBcfCardUtilEventGroup_t<s(0)(0)(0)>[&];(D1:MIBcfCardUtilEventGroup_t:1)[[TYPENAME:MIBcfCardUtilEventGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] flashUtilEventGroup_Did<s(0)(0)(0)>[&];(D1:flashUtilEventGroup_Did:0)

   
typedef struct
{
	int		flashUtilThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] flashUtilEventEnable<s(1)(1)(0)>[&];   
}MIBflashUtilEventGroup_t<s(0)(0)(0)>[&];(D1:MIBflashUtilEventGroup_t:1)[[TYPENAME:MIBflashUtilEventGroup_t]]







 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbE2RomConfigTable_Did<s(0)(0)(0)>[&];(D1:pbE2RomConfigTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];             
	int		pbE2RomPageNo<s(1)(1)(0)>[&];                             
	int		pbE2RomTlvData_len<s(1)(1)(0)>[&];
	char		pbE2RomTlvData<s(1)(1)(0)>[&][253];
}MIBpbE2RomConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbE2RomConfigTable_t:1)[[TYPENAME:MIBpbE2RomConfigTable_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] eowOhccTable_Did<s(0)(0)(0)>[&];(D1:eowOhccTable_Did:0)

   
typedef struct
{
	int		eowOhccDestination<s(1)(1)(0)>[&];                                   
	int		eowOhccSource<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] eowOhccRingManaged<s(1)(1)(0)>[&];   
}MIBeowOhccTable_t<s(0)(0)(0)>[&];(D1:MIBeowOhccTable_t:1)[[TYPENAME:MIBeowOhccTable_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] siGlobalTable_Did<s(0)(0)(0)>[&];(D1:siGlobalTable_Did:0)

   
typedef enum {
	siClipper_clip0<s(0)(0)(0)>[&]=0,
	siClipper_clip4<s(0)(0)(0)>[&]=4,
	siClipper_clip8<s(0)(0)(0)>[&]=8,
	siClipper_clip16<s(0)(0)(0)>[&]=16,
	siClipper_clip32<s(0)(0)(0)>[&]=32
} siClipper_Tval<s(0)(0)(0)>[&];(D1:siClipper_Tval:1)[[TYPENAME:siClipper_Tval]]

typedef enum {
	siEnsThreshold_thresh0<s(0)(0)(0)>[&]=0,
	siEnsThreshold_thresh1<s(0)(0)(0)>[&]=1,
	siEnsThreshold_thresh3<s(0)(0)(0)>[&]=3,
	siEnsThreshold_thresh5<s(0)(0)(0)>[&]=5,
	siEnsThreshold_thresh7<s(0)(0)(0)>[&]=7,
	siEnsThreshold_thresh255<s(0)(0)(0)>[&]=255
} siEnsThreshold_Tval<s(0)(0)(0)>[&];(D1:siEnsThreshold_Tval:1)[[TYPENAME:siEnsThreshold_Tval]]

typedef enum {
	siErmAtt_is6dB<s(0)(0)(0)>[&]=0,
	siErmAtt_is9dB<s(0)(0)(0)>[&]=1
} siErmAtt_Tval<s(0)(0)(0)>[&];(D1:siErmAtt_Tval:1)[[TYPENAME:siErmAtt_Tval]]

typedef enum {
	siWorkingMode_normalMode<s(0)(0)(0)>[&]=1,
	siWorkingMode_boxMode<s(0)(0)(0)>[&]=2
} siWorkingMode_Tval<s(0)(0)(0)>[&];(D1:siWorkingMode_Tval:1)[[TYPENAME:siWorkingMode_Tval]]

typedef enum {
	siUpdateDsp_inactive<s(0)(0)(0)>[&]=0,
	siUpdateDsp_update<s(0)(0)(0)>[&]=1,
	siUpdateDsp_cancel<s(0)(0)(0)>[&]=2
} siUpdateDsp_Tval<s(0)(0)(0)>[&];(D1:siUpdateDsp_Tval:1)[[TYPENAME:siUpdateDsp_Tval]]

typedef enum {
	siUpdateDspState_successfully<s(0)(0)(0)>[&]=0,
	siUpdateDspState_failed<s(0)(0)(0)>[&]=1,
	siUpdateDspState_updating<s(0)(0)(0)>[&]=2,
	siUpdateDspState_unknown<s(0)(0)(0)>[&]=3
} siUpdateDspState_Tval<s(0)(0)(0)>[&];(D1:siUpdateDspState_Tval:1)[[TYPENAME:siUpdateDspState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                 
	int		ifIdx<s(1)(1)(0)>[&];                                            
	char		siName<s(1)(1)(0)>[&][33];   
	char		siPhoneNum<s(1)(1)(0)>[&][4];   
	siClipper_Tval<s(1)(1)(0)>[T] siClipper<s(1)(1)(0)>[&];   
	siEnsThreshold_Tval<s(1)(1)(0)>[T] siEnsThreshold<s(1)(1)(0)>[&];   
	int		siErmThreshold<s(1)(1)(0)>[&];   
	siErmAtt_Tval<s(1)(1)(0)>[T] siErmAtt<s(1)(1)(0)>[&];   
	int		siErmStep<s(1)(1)(0)>[&];   
	siWorkingMode_Tval<s(1)(1)(0)>[T] siWorkingMode<s(1)(1)(0)>[&];   
	siUpdateDsp_Tval<s(1)(1)(0)>[T] siUpdateDsp<s(1)(1)(0)>[&];   
	siUpdateDspState_Tval<s(1)(1)(0)>[T] siUpdateDspState<s(1)(1)(0)>[&];   
}MIBsiGlobalTable_t<s(0)(0)(0)>[&];(D1:MIBsiGlobalTable_t:1)[[TYPENAME:MIBsiGlobalTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] siChannelManageTable_Did<s(0)(0)(0)>[&];(D1:siChannelManageTable_Did:0)

   
typedef enum {
	siChannelRingManageDelta_greaterThan12dB<s(0)(0)(0)>[&]=0,
	siChannelRingManageDelta_lessThan6dB<s(0)(0)(0)>[&]=1
} siChannelRingManageDelta_Tval<s(0)(0)(0)>[&];(D1:siChannelRingManageDelta_Tval:1)[[TYPENAME:siChannelRingManageDelta_Tval]]

typedef enum {
	siChannelRingManageSwitch_dBMode<s(0)(0)(0)>[&]=0,
	siChannelRingManageSwitch_ooMode<s(0)(0)(0)>[&]=1
} siChannelRingManageSwitch_Tval<s(0)(0)(0)>[&];(D1:siChannelRingManageSwitch_Tval:1)[[TYPENAME:siChannelRingManageSwitch_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	int		ifIdx<s(1)(1)(0)>[&];                                                           
	int		siChannelID<s(1)(1)(0)>[&];                                                        
	int		siChannelGroup<s(1)(1)(0)>[&];                                                     
	char		siChannelName<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] siChannelEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] siChannelNoiseDetect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] siChannelNoiseState<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] siChannelRingManage<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] siChannelRingManageState<s(1)(1)(0)>[&];   
	siChannelRingManageDelta_Tval<s(1)(1)(0)>[T] siChannelRingManageDelta<s(1)(1)(0)>[&];   
	siChannelRingManageSwitch_Tval<s(1)(1)(0)>[T] siChannelRingManageSwitch<s(1)(1)(0)>[&];   
	int		siChannelGroupSetting<s(1)(1)(0)>[&];   
}MIBsiChannelManageTable_t<s(0)(0)(0)>[&];(D1:MIBsiChannelManageTable_t:1)[[TYPENAME:MIBsiChannelManageTable_t]]




















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbACOGroup_Did<s(0)(0)(0)>[&];(D1:pbACOGroup_Did:0)

   
typedef struct
{
	PbOnOff_Tval<s(1)(1)(0)>[T] pbAudibleACO<s(1)(1)(0)>[&];   
	PbOnOff_Tval<s(1)(1)(0)>[T] pbVisualACO<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbExtAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbExtVisual<s(1)(1)(0)>[&];   
}MIBpbACOGroup_t<s(0)(0)(0)>[&];(D1:MIBpbACOGroup_t:1)[[TYPENAME:MIBpbACOGroup_t]]









 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIoaTable_Did<s(0)(0)(0)>[&];(D1:pbIoaTable_Did:0)

   
typedef struct
{
	int		pbIoaIndexNo<s(1)(1)(0)>[&];                                       
	char		pbIoaLabel<s(1)(1)(0)>[&][32];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbIoaEnableStatus<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbIoaStatus<s(1)(1)(0)>[&];   
}MIBpbIoaTable_t<s(0)(0)(0)>[&];(D1:MIBpbIoaTable_t:1)[[TYPENAME:MIBpbIoaTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] alarmRuleSwitchGroup_Did<s(0)(0)(0)>[&];(D1:alarmRuleSwitchGroup_Did:0)

   
typedef struct
{
	PbEnableDisable_Tval<s(1)(1)(0)>[T] lofMonitoringSwitch<s(1)(1)(0)>[&];
	PbEnableDisable_Tval<s(1)(1)(0)>[T] lomMonitoringSwitch<s(1)(1)(0)>[&];
	PbEnableDisable_Tval<s(1)(1)(0)>[T] lopMonitoringSwitch<s(1)(1)(0)>[&];
}MIBalarmRuleSwitchGroup_t<s(0)(0)(0)>[&];(D1:MIBalarmRuleSwitchGroup_t:1)[[TYPENAME:MIBalarmRuleSwitchGroup_t]]








 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] upgradeSoftwareInfoTable_Did<s(0)(0)(0)>[&];(D1:upgradeSoftwareInfoTable_Did:0)

   
typedef enum {
	upgradeSoftwareIndication_boardfirst<s(0)(0)(0)>[&]=1,
	upgradeSoftwareIndication_boardsecond<s(0)(0)(0)>[&]=2,
	upgradeSoftwareIndication_cffirst<s(0)(0)(0)>[&]=3,
	upgradeSoftwareIndication_cfsecond<s(0)(0)(0)>[&]=4
} upgradeSoftwareIndication_Tval<s(0)(0)(0)>[&];(D1:upgradeSoftwareIndication_Tval:1)[[TYPENAME:upgradeSoftwareIndication_Tval]]

typedef enum {
	upgradeSoftwareRole_active<s(0)(0)(0)>[&]=1,
	upgradeSoftwareRole_backup<s(0)(0)(0)>[&]=2
} upgradeSoftwareRole_Tval<s(0)(0)(0)>[&];(D1:upgradeSoftwareRole_Tval:1)[[TYPENAME:upgradeSoftwareRole_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] upgradeSoftwareSlotNumber<s(1)(1)(0)>[&];                         
	upgradeSoftwareIndication_Tval<s(1)(1)(0)>[T] upgradeSoftwareIndication<s(1)(1)(0)>[&];                
	upgradeSoftwareRole_Tval<s(1)(1)(0)>[T] upgradeSoftwareRole<s(1)(1)(0)>[&];   
	char		upgradeSoftwareName<s(1)(1)(0)>[&][33];   
	DateTime<s(1)(1)(0)>[T]	upgradeSoftwareDatetime<s(1)(1)(0)>[&];   
}MIBupgradeSoftwareInfoTable_t<s(0)(0)(0)>[&];(D1:MIBupgradeSoftwareInfoTable_t:1)[[TYPENAME:MIBupgradeSoftwareInfoTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPhysicalAdjacencyTable_Did<s(0)(0)(0)>[&];(D1:pbPhysicalAdjacencyTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbLocalSlotNumber<s(1)(1)(0)>[&];                                             
	int		pbLocalPortNumber<s(1)(1)(0)>[&];                                                              
	PbUpDown_Tval<s(1)(1)(0)>[T] pbRemoteNodeMolnAdjacencyStatus<s(1)(1)(0)>[&];   
	unsigned int	pbRemoteNodeIPAddress<s(1)(1)(0)>[&];   
	int		pbRemoteSlotNumber<s(1)(1)(0)>[&];   
	int		pbRemotePortNumber<s(1)(1)(0)>[&];   
	PbUpDown_Tval<s(1)(1)(0)>[T] pbLinkOperationalStatus<s(1)(1)(0)>[&];   
	char		pbInterfaceDescr<s(1)(1)(0)>[&][64];   
	PbLinkGeneralType_Tval<s(1)(1)(0)>[T] pbLinkGeneralType<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbLinkRowStatus<s(1)(1)(0)>[&];   
}MIBpbPhysicalAdjacencyTable_t<s(0)(0)(0)>[&];(D1:MIBpbPhysicalAdjacencyTable_t:1)[[TYPENAME:MIBpbPhysicalAdjacencyTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbAutoLinkTable_Did<s(0)(0)(0)>[&];(D1:pbAutoLinkTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbLocalSlot<s(1)(1)(0)>[&];                       
	int		pbLocalPort<s(1)(1)(0)>[&];                                        
	unsigned int	pbRemoteIPAddress<s(1)(1)(0)>[&];   
	int		pbRemoteSlot<s(1)(1)(0)>[&];   
	int		pbRemotePort<s(1)(1)(0)>[&];   
}MIBpbAutoLinkTable_t<s(0)(0)(0)>[&];(D1:MIBpbAutoLinkTable_t:1)[[TYPENAME:MIBpbAutoLinkTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLedTable_Did<s(0)(0)(0)>[&];(D1:pbLedTable_Did:0)

   
typedef enum {
	pbLedColor_off<s(0)(0)(0)>[&]=0,
	pbLedColor_green<s(0)(0)(0)>[&]=1,
	pbLedColor_yellow<s(0)(0)(0)>[&]=2,
	pbLedColor_red<s(0)(0)(0)>[&]=3,
	pbLedColor_orange<s(0)(0)(0)>[&]=4,
	pbLedColor_blinkingGreen<s(0)(0)(0)>[&]=5,
	pbLedColor_blinkingYellow<s(0)(0)(0)>[&]=6,
	pbLedColor_blinkingRed<s(0)(0)(0)>[&]=7,
	pbLedColor_blinkingOrange<s(0)(0)(0)>[&]=8
} pbLedColor_Tval<s(0)(0)(0)>[&];(D1:pbLedColor_Tval:1)[[TYPENAME:pbLedColor_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbLedSlotNo<s(1)(1)(0)>[&];             
	int		pbLedIndexNo<s(1)(1)(0)>[&];                             
	char		pbLedLabel<s(1)(1)(0)>[&][32];   
	pbLedColor_Tval<s(1)(1)(0)>[T] pbLedColor<s(1)(1)(0)>[&];   
}MIBpbLedTable_t<s(0)(0)(0)>[&];(D1:MIBpbLedTable_t:1)[[TYPENAME:MIBpbLedTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbNodeModule_Did<s(0)(0)(0)>[&];(D1:pbNodeModule_Did:0)

   








 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] rprGeneral_Did<s(0)(0)(0)>[&];(D1:rprGeneral_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] rprProtocols_Did<s(0)(0)(0)>[&];(D1:rprProtocols_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] rprService_Did<s(0)(0)(0)>[&];(D1:rprService_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] rprWan_Did<s(0)(0)(0)>[&];(D1:rprWan_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] rprHwPassThrough_Did<s(0)(0)(0)>[&];(D1:rprHwPassThrough_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprHwpXcTable_Did<s(0)(0)(0)>[&];(D1:rprHwpXcTable_Did:0)

   
typedef enum {
	rprHwpXcCircuitDirection_bidirection<s(0)(0)(0)>[&]=1,
	rprHwpXcCircuitDirection_unidirection<s(0)(0)(0)>[&]=2,
	rprHwpXcCircuitDirection_multicast<s(0)(0)(0)>[&]=3
} rprHwpXcCircuitDirection_Tval<s(0)(0)(0)>[&];(D1:rprHwpXcCircuitDirection_Tval:1)[[TYPENAME:rprHwpXcCircuitDirection_Tval]]

typedef enum {
	rprHwpXcCcsRpmMsgType_client<s(0)(0)(0)>[&]=1,
	rprHwpXcCcsRpmMsgType_ems<s(0)(0)(0)>[&]=2,
	rprHwpXcCcsRpmMsgType_snm<s(0)(0)(0)>[&]=3,
	rprHwpXcCcsRpmMsgType_gmpls<s(0)(0)(0)>[&]=4,
	rprHwpXcCcsRpmMsgType_rpr<s(0)(0)(0)>[&]=5
} rprHwpXcCcsRpmMsgType_Tval<s(0)(0)(0)>[&];(D1:rprHwpXcCcsRpmMsgType_Tval:1)[[TYPENAME:rprHwpXcCcsRpmMsgType_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	RprXcCapacity_Tval<s(1)(1)(0)>[T] rprHwpXcCapacity<s(1)(1)(0)>[&];                                     
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] rprHwpXcSrcSlot<s(1)(1)(0)>[&];                                   
	int		rprHwpXcSrcPort<s(1)(1)(0)>[&];                                                    
	RprTpNumberType_Tval<s(1)(1)(0)>[T] rprHwpXcSource<s(1)(1)(0)>[&];                                     
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] rprHwpXcDstSlot<s(1)(1)(0)>[&];                                   
	int		rprHwpXcDstPort<s(1)(1)(0)>[&];                                                    
	RprTpNumberType_Tval<s(1)(1)(0)>[T] rprHwpXcDestination<s(1)(1)(0)>[&];                                
	PbPortType_Tval<s(1)(1)(0)>[T] rprHwpXcSrcPortType<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] rprHwpXcDstPortType<s(1)(1)(0)>[&];   
	int		rprHwpXcConnectId<s(1)(1)(0)>[&];   
	rprHwpXcCircuitDirection_Tval<s(1)(1)(0)>[T] rprHwpXcCircuitDirection<s(1)(1)(0)>[&];   
	rprHwpXcCcsRpmMsgType_Tval<s(1)(1)(0)>[T] rprHwpXcCcsRpmMsgType<s(1)(1)(0)>[&];   
	RprXcMsgStatus_Tval<s(1)(1)(0)>[T] rprHwpXcCcsRpmMsgState<s(1)(1)(0)>[&];   
	int		rprHwpXcCcsRpmMsgPriority<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] rprHwpXcSrcSlotCard<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] rprHwpXcDstSlotCard<s(1)(1)(0)>[&];   
	RprXcFailReason_Tval<s(1)(1)(0)>[T] rprHwpXcReason<s(1)(1)(0)>[&];   
	RprXcRowStatus_Tval<s(1)(1)(0)>[T] rprHwpXcRowStatus<s(1)(1)(0)>[&];   
	RprXcTableClass_Tval<s(1)(1)(0)>[T] rprHwpXcTableClass<s(1)(1)(0)>[&];   
}MIBrprHwpXcTable_t<s(0)(0)(0)>[&];(D1:MIBrprHwpXcTable_t:1)[[TYPENAME:MIBrprHwpXcTable_t]]



























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprWanConfigTable_Did<s(0)(0)(0)>[&];(D1:pbRprWanConfigTable_Did:0)

   
typedef enum {
	pbRprWanPortXVType_vc4<s(0)(0)(0)>[&]=0,
	pbRprWanPortXVType_vc12<s(0)(0)(0)>[&]=1
} pbRprWanPortXVType_Tval<s(0)(0)(0)>[&];(D1:pbRprWanPortXVType_Tval:1)[[TYPENAME:pbRprWanPortXVType_Tval]]

typedef enum {
	pbRprWanGFPFCS_disable<s(0)(0)(0)>[&]=0,
	pbRprWanGFPFCS_enable<s(0)(0)(0)>[&]=1
} pbRprWanGFPFCS_Tval<s(0)(0)(0)>[&];(D1:pbRprWanGFPFCS_Tval:1)[[TYPENAME:pbRprWanGFPFCS_Tval]]

typedef enum {
	pbRprWanGFPFCSAutoDetect_disable<s(0)(0)(0)>[&]=0,
	pbRprWanGFPFCSAutoDetect_enable<s(0)(0)(0)>[&]=1
} pbRprWanGFPFCSAutoDetect_Tval<s(0)(0)(0)>[&];(D1:pbRprWanGFPFCSAutoDetect_Tval:1)[[TYPENAME:pbRprWanGFPFCSAutoDetect_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	char		pbRprWanPortLabel<s(1)(1)(0)>[&][255];   
	int		pbRprWanPortCapacity<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprWanPortMonitored<s(1)(1)(0)>[&];   
	pbRprWanPortXVType_Tval<s(1)(1)(0)>[T] pbRprWanPortXVType<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprWanLCASSupport<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprWanPortCapacityTrigger<s(1)(1)(0)>[&];   
	pbRprWanGFPFCS_Tval<s(1)(1)(0)>[T] pbRprWanGFPFCS<s(1)(1)(0)>[&];   
	pbRprWanGFPFCSAutoDetect_Tval<s(1)(1)(0)>[T] pbRprWanGFPFCSAutoDetect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprWanFlowControl<s(1)(1)(0)>[&];   
}MIBpbRprWanConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprWanConfigTable_t:1)[[TYPENAME:MIBpbRprWanConfigTable_t]]


















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprLCASBase_Did<s(0)(0)(0)>[&];(D1:pbRprLCASBase_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprSOLCASConfigTable_Did<s(0)(0)(0)>[&];(D1:pbRprSOLCASConfigTable_Did:0)

   
typedef enum {
	pbRprSOLCASActive_none<s(0)(0)(0)>[&]=0,
	pbRprSOLCASActive_active<s(0)(0)(0)>[&]=1,
	pbRprSOLCASActive_deactive<s(0)(0)(0)>[&]=2
} pbRprSOLCASActive_Tval<s(0)(0)(0)>[&];(D1:pbRprSOLCASActive_Tval:1)[[TYPENAME:pbRprSOLCASActive_Tval]]

typedef enum {
	pbRprSOLCASState_fixed<s(0)(0)(0)>[&]=0,
	pbRprSOLCASState_add<s(0)(0)(0)>[&]=1,
	pbRprSOLCASState_normal<s(0)(0)(0)>[&]=2,
	pbRprSOLCASState_eos<s(0)(0)(0)>[&]=3,
	pbRprSOLCASState_idle<s(0)(0)(0)>[&]=5,
	pbRprSOLCASState_dnu<s(0)(0)(0)>[&]=15
} pbRprSOLCASState_Tval<s(0)(0)(0)>[&];(D1:pbRprSOLCASState_Tval:1)[[TYPENAME:pbRprSOLCASState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                 
	int		pbTpIndex<s(1)(1)(0)>[&];                                         
	pbRprSOLCASActive_Tval<s(1)(1)(0)>[T] pbRprSOLCASActive<s(1)(1)(0)>[&];   
	int		pbRprSOLCASWanPort<s(1)(1)(0)>[&];   
	pbRprSOLCASState_Tval<s(1)(1)(0)>[T] pbRprSOLCASState<s(1)(1)(0)>[&];   
}MIBpbRprSOLCASConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprSOLCASConfigTable_t:1)[[TYPENAME:MIBpbRprSOLCASConfigTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprSKLCASConfigTable_Did<s(0)(0)(0)>[&];(D1:pbRprSKLCASConfigTable_Did:0)

   
typedef enum {
	pbRprSKLCASState_fixed<s(0)(0)(0)>[&]=0,
	pbRprSKLCASState_idle<s(0)(0)(0)>[&]=1,
	pbRprSKLCASState_ok<s(0)(0)(0)>[&]=2,
	pbRprSKLCASState_fail<s(0)(0)(0)>[&]=3
} pbRprSKLCASState_Tval<s(0)(0)(0)>[&];(D1:pbRprSKLCASState_Tval:1)[[TYPENAME:pbRprSKLCASState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                 
	int		pbTpIndex<s(1)(1)(0)>[&];                                         
	int		pbRprSKLCASWanPort<s(1)(1)(0)>[&];   
	pbRprSKLCASState_Tval<s(1)(1)(0)>[T] pbRprSKLCASState<s(1)(1)(0)>[&];   
}MIBpbRprSKLCASConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprSKLCASConfigTable_t:1)[[TYPENAME:MIBpbRprSKLCASConfigTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprServiceTable_Did<s(0)(0)(0)>[&];(D1:rprServiceTable_Did:0)

   
typedef enum {
	rprSvcClassifyType_port<s(0)(0)(0)>[&]=0,
	rprSvcClassifyType_portVlan<s(0)(0)(0)>[&]=1,
	rprSvcClassifyType_portVlanVpri<s(0)(0)(0)>[&]=2
} rprSvcClassifyType_Tval<s(0)(0)(0)>[&];(D1:rprSvcClassifyType_Tval:1)[[TYPENAME:rprSvcClassifyType_Tval]]

typedef enum {
	rprSvcMode_basic<s(0)(0)(0)>[&]=1,
	rprSvcMode_share<s(0)(0)(0)>[&]=2,
	rprSvcMode_cross<s(0)(0)(0)>[&]=3
} rprSvcMode_Tval<s(0)(0)(0)>[&];(D1:rprSvcMode_Tval:1)[[TYPENAME:rprSvcMode_Tval]]

typedef enum {
	rprSvcTtlMode_auto<s(0)(0)(0)>[&]=1,
	rprSvcTtlMode_autoAdvanced<s(0)(0)(0)>[&]=2,
	rprSvcTtlMode_manualCloseRing<s(0)(0)(0)>[&]=3,
	rprSvcTtlMode_manualAll<s(0)(0)(0)>[&]=4,
	rprSvcTtlMode_manualMac<s(0)(0)(0)>[&]=5,
	rprSvcTtlMode_manualMacAdv<s(0)(0)(0)>[&]=6
} rprSvcTtlMode_Tval<s(0)(0)(0)>[&];(D1:rprSvcTtlMode_Tval:1)[[TYPENAME:rprSvcTtlMode_Tval]]

typedef enum {
	rprGmiiSel_gmii0<s(0)(0)(0)>[&]=0,
	rprGmiiSel_gmii1<s(0)(0)(0)>[&]=1
} rprGmiiSel_Tval<s(0)(0)(0)>[&];(D1:rprGmiiSel_Tval:1)[[TYPENAME:rprGmiiSel_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	int		rprIfIndex<s(1)(1)(0)>[&];                                                
	int		rprServiceId<s(1)(1)(0)>[&];                                                 
	int		rprLocalEthPortNo<s(1)(1)(0)>[&];                                            
	int		rprLocalVID<s(1)(1)(0)>[&];                                                  
	int		rprLocalVPrio<s(1)(1)(0)>[&];                                                
	rprSvcClassifyType_Tval<s(1)(1)(0)>[T] rprSvcClassifyType<s(1)(1)(0)>[&];                        
	RprServiceType_Tval<s(1)(1)(0)>[T] rprServiceType<s(1)(1)(0)>[&];   
	rprSvcMode_Tval<s(1)(1)(0)>[T] rprSvcMode<s(1)(1)(0)>[&];   
	char		rprRmtStationMac<s(1)(1)(0)>[&][20];   
	RprRingletID_Tval<s(1)(1)(0)>[T] rprSvcRingletSel<s(1)(1)(0)>[&];   
	RprRingletID_Tval<s(1)(1)(0)>[T] rprSvcRealRingletSel<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcAutoRingletSelEn<s(1)(1)(0)>[&];   
	RprServiceCos_Tval<s(1)(1)(0)>[T] rprSvcCos<s(1)(1)(0)>[&];   
	rprSvcTtlMode_Tval<s(1)(1)(0)>[T] rprSvcTtlMode<s(1)(1)(0)>[&];   
	int		rprSvcTtl0<s(1)(1)(0)>[&];   
	int		rprSvcTtl1<s(1)(1)(0)>[&];   
	int		rprSvcRealTtl0<s(1)(1)(0)>[&];   
	int		rprSvcRealTtl1<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcWe<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcSteered<s(1)(1)(0)>[&];   
	int		rprSvcRateProfIndex<s(1)(1)(0)>[&];   
	int		rprSvcTokenRate<s(1)(1)(0)>[&];   
	int		rprSvcBurstSize<s(1)(1)(0)>[&];   
	int		rprSvcMaxDelay<s(1)(1)(0)>[&];   
	int		rprSvcMaxJitter<s(1)(1)(0)>[&];   
	int		rprSvcWeight<s(1)(1)(0)>[&];   
	rprGmiiSel_Tval<s(1)(1)(0)>[T] rprGmiiSel<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprDoubleVlanEn<s(1)(1)(0)>[&];   
	int		rprDoubleVID<s(1)(1)(0)>[&];   
	int		rprDoubleVPrio<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcLoop<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcActive<s(1)(1)(0)>[&];   
	RprSvcStatus_Tval<s(1)(1)(0)>[T] rprSvcCurStatus<s(1)(1)(0)>[&];   
	RprSvcFailReason_Tval<s(1)(1)(0)>[T] rprSvcReason<s(1)(1)(0)>[&];   
	char		rprSvcLabel<s(1)(1)(0)>[&][32];   
	int		rprFlowRuleID<s(1)(1)(0)>[&];   
	int		rprSvcMulBrdCastID<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] rprSvcMulBrdCastEn<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] rprSvcRowStatus<s(1)(1)(0)>[&];   
}MIBrprServiceTable_t<s(0)(0)(0)>[&];(D1:MIBrprServiceTable_t:1)[[TYPENAME:MIBrprServiceTable_t]]















































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprRateProfileTable_Did<s(0)(0)(0)>[&];(D1:rprRateProfileTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		rprIfIndex<s(1)(1)(0)>[&];                                        
	int		rprRateProfNo<s(1)(1)(0)>[&];                                        
	int		rprTokenRate<s(1)(1)(0)>[&];   
	int		rprBurstSize<s(1)(1)(0)>[&];   
	int		rprExcessBurstSize<s(1)(1)(0)>[&];   
}MIBrprRateProfileTable_t<s(0)(0)(0)>[&];(D1:MIBrprRateProfileTable_t:1)[[TYPENAME:MIBrprRateProfileTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprMultiCastTable_Did<s(0)(0)(0)>[&];(D1:pbRprMultiCastTable_Did:0)

   
typedef enum {
	rprMultiCastGMRP_yes<s(0)(0)(0)>[&]=0,
	rprMultiCastGMRP_no<s(0)(0)(0)>[&]=1
} rprMultiCastGMRP_Tval<s(0)(0)(0)>[&];(D1:rprMultiCastGMRP_Tval:1)[[TYPENAME:rprMultiCastGMRP_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		rprIfIndex<s(1)(1)(0)>[&];                                                    
	int		rprServiceId<s(1)(1)(0)>[&];                                                  
	char		rprMultiCastMacAddress<s(1)(1)(0)>[&][20];                                      
	int		rprMultiCastDoubleVlanId<s(1)(1)(0)>[&];   
	char		rprMultiCastPortsList<s(1)(1)(0)>[&][64];   
	rprMultiCastGMRP_Tval<s(1)(1)(0)>[T] rprMultiCastGMRP<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] rprMultiCastRowStatus<s(1)(1)(0)>[&];   
}MIBpbRprMultiCastTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprMultiCastTable_t:1)[[TYPENAME:MIBpbRprMultiCastTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprAclTable_Did<s(0)(0)(0)>[&];(D1:pbRprAclTable_Did:0)

   
typedef enum {
	rprAclMacType_destinationMac<s(0)(0)(0)>[&]=1,
	rprAclMacType_sourceMac<s(0)(0)(0)>[&]=2
} rprAclMacType_Tval<s(0)(0)(0)>[&];(D1:rprAclMacType_Tval:1)[[TYPENAME:rprAclMacType_Tval]]

typedef enum {
	rprAclMode_filter<s(0)(0)(0)>[&]=1,
	rprAclMode_forward<s(0)(0)(0)>[&]=2
} rprAclMode_Tval<s(0)(0)(0)>[&];(D1:rprAclMode_Tval:1)[[TYPENAME:rprAclMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		rprIfIndex<s(1)(1)(0)>[&];                                        
	int		rprServiceId<s(1)(1)(0)>[&];                                      
	char		rprAclMacAddress<s(1)(1)(0)>[&][20];                                
	rprAclMacType_Tval<s(1)(1)(0)>[T] rprAclMacType<s(1)(1)(0)>[&];   
	int		rprAclDoubleVlanId<s(1)(1)(0)>[&];   
	char		rprAclPortsList<s(1)(1)(0)>[&][64];   
	rprAclMode_Tval<s(1)(1)(0)>[T] rprAclMode<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] rprAclRowStatus<s(1)(1)(0)>[&];   
	int		rprAclTblIdx<s(1)(1)(0)>[&];   
}MIBpbRprAclTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprAclTable_t:1)[[TYPENAME:MIBpbRprAclTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprMultiBroadCastTable_Did<s(0)(0)(0)>[&];(D1:pbRprMultiBroadCastTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                 
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                    
	int		rprMultiBroadCastId<s(1)(1)(0)>[&];                                                              
	int		rprMultiBroadCastTimeInterval<s(1)(1)(0)>[&];   
	int		rprMultiBroadCastPacketsInterval<s(1)(1)(0)>[&];   
}MIBpbRprMultiBroadCastTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprMultiBroadCastTable_t:1)[[TYPENAME:MIBpbRprMultiBroadCastTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprTopoImageTable_Did<s(0)(0)(0)>[&];(D1:rprTopoImageTable_Did:0)

   
typedef enum {
	rprTopoImageCapability_default<s(0)(0)(0)>[&]=0,
	rprTopoImageCapability_jbStrNspconsfair<s(0)(0)(0)>[&]=1,
	rprTopoImageCapability_regWrpNspconsfair<s(0)(0)(0)>[&]=2,
	rprTopoImageCapability_jbWrpNspconsfair<s(0)(0)(0)>[&]=3,
	rprTopoImageCapability_regStrSpconsfair<s(0)(0)(0)>[&]=4,
	rprTopoImageCapability_jbStrSpconsfair<s(0)(0)(0)>[&]=5,
	rprTopoImageCapability_regWrpSpconsfair<s(0)(0)(0)>[&]=6,
	rprTopoImageCapability_jbWrpSpconsfair<s(0)(0)(0)>[&]=7
} rprTopoImageCapability_Tval<s(0)(0)(0)>[&];(D1:rprTopoImageCapability_Tval:1)[[TYPENAME:rprTopoImageCapability_Tval]]

typedef enum {
	rprTopoImageStatus_reachableRinglet0<s(0)(0)(0)>[&]=1,
	rprTopoImageStatus_reachableRinglet1<s(0)(0)(0)>[&]=2,
	rprTopoImageStatus_reachableRinglet0Ringlet1<s(0)(0)(0)>[&]=3,
	rprTopoImageStatus_wrapActiveWest<s(0)(0)(0)>[&]=4,
	rprTopoImageStatus_wrapActiveEast<s(0)(0)(0)>[&]=8,
	rprTopoImageStatus_receivedBadFcs<s(0)(0)(0)>[&]=16,
	rprTopoImageStatus_receivBadFcsReachableR0R1<s(0)(0)(0)>[&]=19,
	rprTopoImageStatus_receivedMultichokeFairness<s(0)(0)(0)>[&]=32
} rprTopoImageStatus_Tval<s(0)(0)(0)>[&];(D1:rprTopoImageStatus_Tval:1)[[TYPENAME:rprTopoImageStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                 
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                    
	char		rprTopoImageMacAddress<s(1)(1)(0)>[&][20];                                                      
	char		rprTopoImageSecMacAddress1<s(1)(1)(0)>[&][20];   
	char		rprTopoImageSecMacAddress2<s(1)(1)(0)>[&][20];   
	int		rprTopoImageStationIfIndex<s(1)(1)(0)>[&];   
	char		rprTopoImageStationName<s(1)(1)(0)>[&][255];   
	rprTopoImageCapability_Tval<s(1)(1)(0)>[T] rprTopoImageCapability<s(1)(1)(0)>[&];   
	int		rprTopoImageRinglet0Hops<s(1)(1)(0)>[&];   
	int		rprTopoImageRinglet0ReservedRate<s(1)(1)(0)>[&];   
	int		rprTopoImageRinglet1Hops<s(1)(1)(0)>[&];   
	int		rprTopoImageRinglet1ReservedRate<s(1)(1)(0)>[&];   
	RprProtectionStatus_Tval<s(1)(1)(0)>[T] rprTopoImageWestProtectionStatus<s(1)(1)(0)>[&];   
	int		rprTopoImageWestWeight<s(1)(1)(0)>[&];   
	RprProtectionStatus_Tval<s(1)(1)(0)>[T] rprTopoImageEastProtectionStatus<s(1)(1)(0)>[&];   
	int		rprTopoImageEastWeight<s(1)(1)(0)>[&];   
	rprTopoImageStatus_Tval<s(1)(1)(0)>[T] rprTopoImageStatus<s(1)(1)(0)>[&];   
	char		rprTopoImageRemoteNEAddress<s(1)(1)(0)>[&][20];   
	int		rprTopoImageRemoteSlotNumber<s(1)(1)(0)>[&];   
}MIBrprTopoImageTable_t<s(0)(0)(0)>[&];(D1:MIBrprTopoImageTable_t:1)[[TYPENAME:MIBrprTopoImageTable_t]]


























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprFairnessTable_Did<s(0)(0)(0)>[&];(D1:rprFairnessTable_Did:0)

   
typedef enum {
	rprFairnessRinglet_ringlet0<s(0)(0)(0)>[&]=1,
	rprFairnessRinglet_ringlet1<s(0)(0)(0)>[&]=2
} rprFairnessRinglet_Tval<s(0)(0)(0)>[&];(D1:rprFairnessRinglet_Tval:1)[[TYPENAME:rprFairnessRinglet_Tval]]

typedef enum {
	rprFairnessResetWaterMarks_idle<s(0)(0)(0)>[&]=1,
	rprFairnessResetWaterMarks_resetWaterMarks<s(0)(0)(0)>[&]=2
} rprFairnessResetWaterMarks_Tval<s(0)(0)(0)>[&];(D1:rprFairnessResetWaterMarks_Tval:1)[[TYPENAME:rprFairnessResetWaterMarks_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	int		rprIfIndex<s(1)(1)(0)>[&];                                                              
	rprFairnessRinglet_Tval<s(1)(1)(0)>[T] rprFairnessRinglet<s(1)(1)(0)>[&];                                      
	int		rprFairnessRingletWeight<s(1)(1)(0)>[&];   
	int		rprFairnessReservedRate<s(1)(1)(0)>[&];   
	int		rprFairnessMaxAllowed<s(1)(1)(0)>[&];   
	int		rprFairnessAgeCoef<s(1)(1)(0)>[&];   
	int		rprFairnessLpCoef<s(1)(1)(0)>[&];   
	int		rprFairnessAdvertisementRatio<s(1)(1)(0)>[&];   
	int		rprFairnessMcffReportCoef<s(1)(1)(0)>[&];   
	int		rprFairnessActiveWeightsCoef<s(1)(1)(0)>[&];   
	int		rprFairnessSTQHighThreshold<s(1)(1)(0)>[&];   
	int		rprFairnessSTQMedThreshold<s(1)(1)(0)>[&];   
	int		rprFairnessSTQLowThreshold<s(1)(1)(0)>[&];   
	int		rprFairnessRateHighThreshold<s(1)(1)(0)>[&];   
	int		rprFairnessRateLowThreshold<s(1)(1)(0)>[&];   
	rprFairnessResetWaterMarks_Tval<s(1)(1)(0)>[T] rprFairnessResetWaterMarks<s(1)(1)(0)>[&];   
	int		rprFairnessSTQHighWaterMark<s(1)(1)(0)>[&];   
	int		rprFairnessSTQLowWaterMark<s(1)(1)(0)>[&];   
	int		rprFairnessRampUpCoef<s(1)(1)(0)>[&];   
	int		rprFairnessRampDnCoef<s(1)(1)(0)>[&];   
}MIBrprFairnessTable_t<s(0)(0)(0)>[&];(D1:MIBrprFairnessTable_t:1)[[TYPENAME:MIBrprFairnessTable_t]]




























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprOamTable_Did<s(0)(0)(0)>[&];(D1:rprOamTable_Did:0)

   
typedef enum {
	rprOamActionType_echo<s(0)(0)(0)>[&]=1,
	rprOamActionType_flush<s(0)(0)(0)>[&]=2
} rprOamActionType_Tval<s(0)(0)(0)>[&];(D1:rprOamActionType_Tval:1)[[TYPENAME:rprOamActionType_Tval]]

typedef enum {
	rprOamClassOfService_classA<s(0)(0)(0)>[&]=1,
	rprOamClassOfService_classB<s(0)(0)(0)>[&]=2,
	rprOamClassOfService_classC<s(0)(0)(0)>[&]=3
} rprOamClassOfService_Tval<s(0)(0)(0)>[&];(D1:rprOamClassOfService_Tval:1)[[TYPENAME:rprOamClassOfService_Tval]]

typedef enum {
	rprOamControl_idle<s(0)(0)(0)>[&]=1,
	rprOamControl_active<s(0)(0)(0)>[&]=2,
	rprOamControl_abort<s(0)(0)(0)>[&]=3
} rprOamControl_Tval<s(0)(0)(0)>[&];(D1:rprOamControl_Tval:1)[[TYPENAME:rprOamControl_Tval]]

typedef enum {
	rprOamResponseStatus_unknown<s(0)(0)(0)>[&]=1,
	rprOamResponseStatus_inProcess<s(0)(0)(0)>[&]=2,
	rprOamResponseStatus_error<s(0)(0)(0)>[&]=3,
	rprOamResponseStatus_success<s(0)(0)(0)>[&]=4
} rprOamResponseStatus_Tval<s(0)(0)(0)>[&];(D1:rprOamResponseStatus_Tval:1)[[TYPENAME:rprOamResponseStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                           
	int		rprIfIndex<s(1)(1)(0)>[&];                                              
	rprOamActionType_Tval<s(1)(1)(0)>[T] rprOamActionType<s(1)(1)(0)>[&];   
	char		rprOamDestAddress<s(1)(1)(0)>[&][20];   
	RprOamRinglet_Tval<s(1)(1)(0)>[T] rprOamRequestRinglet<s(1)(1)(0)>[&];   
	RprOamRinglet_Tval<s(1)(1)(0)>[T] rprOamResponseRinglet<s(1)(1)(0)>[&];   
	rprOamClassOfService_Tval<s(1)(1)(0)>[T] rprOamClassOfService<s(1)(1)(0)>[&];   
	char		rprOamUserData<s(1)(1)(0)>[&][20];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprOamProtected<s(1)(1)(0)>[&];   
	int		rprOamRequestCount<s(1)(1)(0)>[&];   
	int		rprOamTimeout<s(1)(1)(0)>[&];   
	rprOamControl_Tval<s(1)(1)(0)>[T] rprOamControl<s(1)(1)(0)>[&];   
	int		rprOamResponseCount<s(1)(1)(0)>[&];   
	int		rprOamAvResponseTime<s(1)(1)(0)>[&];   
	rprOamResponseStatus_Tval<s(1)(1)(0)>[T] rprOamResponseStatus<s(1)(1)(0)>[&];   
}MIBrprOamTable_t<s(0)(0)(0)>[&];(D1:MIBrprOamTable_t:1)[[TYPENAME:MIBrprOamTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprTopoRingInfoTable_Did<s(0)(0)(0)>[&];(D1:rprTopoRingInfoTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		rprIfIndex<s(1)(1)(0)>[&];                                                    
	TruthValue_Tval<s(1)(1)(0)>[T] rprRingMultiChoke0<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprRingMultiChoke1<s(1)(1)(0)>[&];   
	int		rprRingMtuSize<s(1)(1)(0)>[&];   
	int		rprRingTotalHopsTx0<s(1)(1)(0)>[&];   
	int		rprRingTotalHopsTx1<s(1)(1)(0)>[&];   
	char		rprRingLastNeighborMac0<s(1)(1)(0)>[&][20];   
	char		rprRingLastNeighborMac1<s(1)(1)(0)>[&][20];   
	int		rprRingCheckSum<s(1)(1)(0)>[&];   
	int		rprRingNeighborCheckSum0<s(1)(1)(0)>[&];   
	int		rprRingNeighborCheckSum1<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprRingCheckSumValid<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprRingNeighborCksValid0<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprRingNeighborCksValid1<s(1)(1)(0)>[&];   
}MIBrprTopoRingInfoTable_t<s(0)(0)(0)>[&];(D1:MIBrprTopoRingInfoTable_t:1)[[TYPENAME:MIBrprTopoRingInfoTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprIfTable_Did<s(0)(0)(0)>[&];(D1:rprIfTable_Did:0)

   
typedef enum {
	rprIfFairnessMode_aggressive<s(0)(0)(0)>[&]=1,
	rprIfFairnessMode_conservative<s(0)(0)(0)>[&]=2,
	rprIfFairnessMode_others<s(0)(0)(0)>[&]=3
} rprIfFairnessMode_Tval<s(0)(0)(0)>[&];(D1:rprIfFairnessMode_Tval:1)[[TYPENAME:rprIfFairnessMode_Tval]]

typedef enum {
	rprIfMacOperModes_default<s(0)(0)(0)>[&]=0,
	rprIfMacOperModes_strctorderNdrpbadfcs<s(0)(0)(0)>[&]=1,
	rprIfMacOperModes_regorderDrpbadfcs<s(0)(0)(0)>[&]=2,
	rprIfMacOperModes_strctorderDrpbadfcs<s(0)(0)(0)>[&]=3
} rprIfMacOperModes_Tval<s(0)(0)(0)>[&];(D1:rprIfMacOperModes_Tval:1)[[TYPENAME:rprIfMacOperModes_Tval]]

typedef enum {
	rprIfRingOperModes_default<s(0)(0)(0)>[&]=0,
	rprIfRingOperModes_jbStrClsring<s(0)(0)(0)>[&]=1,
	rprIfRingOperModes_regWrpClsring<s(0)(0)(0)>[&]=2,
	rprIfRingOperModes_jbWrpClsring<s(0)(0)(0)>[&]=3,
	rprIfRingOperModes_regStrOpenring<s(0)(0)(0)>[&]=4,
	rprIfRingOperModes_jbStrOpenring<s(0)(0)(0)>[&]=5,
	rprIfRingOperModes_regWrpOpenring<s(0)(0)(0)>[&]=6,
	rprIfRingOperModes_jbWrpOpenring<s(0)(0)(0)>[&]=7
} rprIfRingOperModes_Tval<s(0)(0)(0)>[&];(D1:rprIfRingOperModes_Tval:1)[[TYPENAME:rprIfRingOperModes_Tval]]

typedef enum {
	rprIfCurrentStatus_ok<s(0)(0)(0)>[&]=0,
	rprIfCurrentStatus_neighborInconsistency<s(0)(0)(0)>[&]=1,
	rprIfCurrentStatus_duplicateMac<s(0)(0)(0)>[&]=2,
	rprIfCurrentStatus_neiborInconsistDMAC<s(0)(0)(0)>[&]=3,
	rprIfCurrentStatus_exceedMaxStations<s(0)(0)(0)>[&]=4
} rprIfCurrentStatus_Tval<s(0)(0)(0)>[&];(D1:rprIfCurrentStatus_Tval:1)[[TYPENAME:rprIfCurrentStatus_Tval]]

typedef enum {
	rprIfMplsMode_mpls<s(0)(0)(0)>[&]=0,
	rprIfMplsMode_qinQ<s(0)(0)(0)>[&]=1,
	rprIfMplsMode_transparent<s(0)(0)(0)>[&]=2
} rprIfMplsMode_Tval<s(0)(0)(0)>[&];(D1:rprIfMplsMode_Tval:1)[[TYPENAME:rprIfMplsMode_Tval]]

typedef enum {
	rprIfHwPassThrough_disable<s(0)(0)(0)>[&]=1,
	rprIfHwPassThrough_enable<s(0)(0)(0)>[&]=2,
	rprIfHwPassThrough_force<s(0)(0)(0)>[&]=3
} rprIfHwPassThrough_Tval<s(0)(0)(0)>[&];(D1:rprIfHwPassThrough_Tval:1)[[TYPENAME:rprIfHwPassThrough_Tval]]

typedef enum {
	rprIfBandMode_auto<s(0)(0)(0)>[&]=1,
	rprIfBandMode_manual<s(0)(0)(0)>[&]=2
} rprIfBandMode_Tval<s(0)(0)(0)>[&];(D1:rprIfBandMode_Tval:1)[[TYPENAME:rprIfBandMode_Tval]]

typedef enum {
	rprIfCardProtection_disable<s(0)(0)(0)>[&]=1,
	rprIfCardProtection_enable<s(0)(0)(0)>[&]=2,
	rprIfCardProtection_force<s(0)(0)(0)>[&]=3
} rprIfCardProtection_Tval<s(0)(0)(0)>[&];(D1:rprIfCardProtection_Tval:1)[[TYPENAME:rprIfCardProtection_Tval]]

typedef enum {
	rprIfL2RateLimitMode_advanced<s(0)(0)(0)>[&]=1,
	rprIfL2RateLimitMode_basic<s(0)(0)(0)>[&]=2
} rprIfL2RateLimitMode_Tval<s(0)(0)(0)>[&];(D1:rprIfL2RateLimitMode_Tval:1)[[TYPENAME:rprIfL2RateLimitMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		rprIfIndex<s(1)(1)(0)>[&];                                                    
	int		rprIfStationsOnRing<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfReversionMode<s(1)(1)(0)>[&];   
	int		rprIfProtectionWTR<s(1)(1)(0)>[&];   
	int		rprIfProtectionFastTimer<s(1)(1)(0)>[&];   
	int		rprIfProtectionSlowTimer<s(1)(1)(0)>[&];   
	int		rprIfAtdTimer<s(1)(1)(0)>[&];   
	int		rprIfKeepaliveTimeout<s(1)(1)(0)>[&];   
	rprIfFairnessMode_Tval<s(1)(1)(0)>[T] rprIfFairnessMode<s(1)(1)(0)>[&];   
	int		rprIfPtqSize<s(1)(1)(0)>[&];   
	int		rprIfStqSize<s(1)(1)(0)>[&];   
	int		rprIfSTQFullThreshold<s(1)(1)(0)>[&];   
	int		rprIfIdleThreshold<s(1)(1)(0)>[&];   
	int		rprIfSesThreshold<s(1)(1)(0)>[&];   
	RprProtectionType_Tval<s(1)(1)(0)>[T] rprIfProtectionMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfJumboFramePreferred<s(1)(1)(0)>[&];   
	rprIfMacOperModes_Tval<s(1)(1)(0)>[T] rprIfMacOperModes<s(1)(1)(0)>[&];   
	rprIfRingOperModes_Tval<s(1)(1)(0)>[T] rprIfRingOperModes<s(1)(1)(0)>[&];   
	rprIfCurrentStatus_Tval<s(1)(1)(0)>[T] rprIfCurrentStatus<s(1)(1)(0)>[&];   
	int		rprIfLinkRate<s(1)(1)(0)>[&];   
	rprIfMplsMode_Tval<s(1)(1)(0)>[T] rprIfMplsMode<s(1)(1)(0)>[&];   
	int		rprIfMplsTypeTag<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfVlanPrioEn<s(1)(1)(0)>[&];   
	char		rprIfMyMacAddress<s(1)(1)(0)>[&][20];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfPassThroughEn<s(1)(1)(0)>[&];   
	rprIfHwPassThrough_Tval<s(1)(1)(0)>[T] rprIfHwPassThrough<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfHwPassThroughStatus<s(1)(1)(0)>[&];   
	int		rprIfResRateR0<s(1)(1)(0)>[&];   
	int		rprIfResRateR1<s(1)(1)(0)>[&];   
	int		rprIfA0RateR0<s(1)(1)(0)>[&];   
	int		rprIfA0RateR1<s(1)(1)(0)>[&];   
	int		rprIfA1RateR0<s(1)(1)(0)>[&];   
	int		rprIfA1RateR1<s(1)(1)(0)>[&];   
	int		rprIfBcirRateR0<s(1)(1)(0)>[&];   
	int		rprIfBcirRateR1<s(1)(1)(0)>[&];   
	int		rprIfRealA0RateR0<s(1)(1)(0)>[&];   
	int		rprIfRealA0RateR1<s(1)(1)(0)>[&];   
	int		rprIfRealA1RateR0<s(1)(1)(0)>[&];   
	int		rprIfRealA1RateR1<s(1)(1)(0)>[&];   
	int		rprIfRealBcirRateR0<s(1)(1)(0)>[&];   
	int		rprIfRealBcirRateR1<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfAlarmMon<s(1)(1)(0)>[&];   
	char		rprIfStationName<s(1)(1)(0)>[&][128];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfInterWorking<s(1)(1)(0)>[&];   
	rprIfBandMode_Tval<s(1)(1)(0)>[T] rprIfBandMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfMulBrdCastEn<s(1)(1)(0)>[&];
	rprIfCardProtection_Tval<s(1)(1)(0)>[T] rprIfCardProtection<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfCardProtectionState<s(1)(1)(0)>[&];   
	rprIfL2RateLimitMode_Tval<s(1)(1)(0)>[T] rprIfL2RateLimitMode<s(1)(1)(0)>[&];   
	char		rprIfCrossPortsList<s(1)(1)(0)>[&][64];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfLogSave<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprIfL2CosFlowControl<s(1)(1)(0)>[&];   
}MIBrprIfTable_t<s(0)(0)(0)>[&];(D1:MIBrprIfTable_t:1)[[TYPENAME:MIBrprIfTable_t]]




























































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprSpanTable_Did<s(0)(0)(0)>[&];(D1:rprSpanTable_Did:0)

   
typedef enum {
	rprSpanCurrentStatus_ok<s(0)(0)(0)>[&]=0,
	rprSpanCurrentStatus_kaNmcNsdNsf<s(0)(0)(0)>[&]=1,
	rprSpanCurrentStatus_nkaMcNsdNsf<s(0)(0)(0)>[&]=2,
	rprSpanCurrentStatus_kaMcNsdNsf<s(0)(0)(0)>[&]=3,
	rprSpanCurrentStatus_nkaNmcSdNsf<s(0)(0)(0)>[&]=4,
	rprSpanCurrentStatus_kaNmcSdNsf<s(0)(0)(0)>[&]=5,
	rprSpanCurrentStatus_nkaMcSdNsf<s(0)(0)(0)>[&]=6,
	rprSpanCurrentStatus_kaMcSdNsf<s(0)(0)(0)>[&]=7,
	rprSpanCurrentStatus_nkaNmcNsdSf<s(0)(0)(0)>[&]=8,
	rprSpanCurrentStatus_kaNmcNsdSf<s(0)(0)(0)>[&]=9,
	rprSpanCurrentStatus_nkaMcNsdSf<s(0)(0)(0)>[&]=10,
	rprSpanCurrentStatus_kaMcNsdSf<s(0)(0)(0)>[&]=11,
	rprSpanCurrentStatus_nkaNmcSdSf<s(0)(0)(0)>[&]=12,
	rprSpanCurrentStatus_kaNmcSdSf<s(0)(0)(0)>[&]=13,
	rprSpanCurrentStatus_nkaMcSdSf<s(0)(0)(0)>[&]=14,
	rprSpanCurrentStatus_kaMcSdSf<s(0)(0)(0)>[&]=15
} rprSpanCurrentStatus_Tval<s(0)(0)(0)>[&];(D1:rprSpanCurrentStatus_Tval:1)[[TYPENAME:rprSpanCurrentStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                               
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                  
	RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];                                                           
	int		rprSpanTotalRingletReservedRate<s(1)(1)(0)>[&];   
	rprSpanCurrentStatus_Tval<s(1)(1)(0)>[T] rprSpanCurrentStatus<s(1)(1)(0)>[&];   
	int		rprSpanWanPortNo<s(1)(1)(0)>[&];   
	int		rprSpanHopsToWrap<s(1)(1)(0)>[&];   
}MIBrprSpanTable_t<s(0)(0)(0)>[&];(D1:MIBrprSpanTable_t:1)[[TYPENAME:MIBrprSpanTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprSpanProtectionTable_Did<s(0)(0)(0)>[&];(D1:rprSpanProtectionTable_Did:0)

   
typedef enum {
	rprSpanProtectionCommand_idle<s(0)(0)(0)>[&]=1,
	rprSpanProtectionCommand_manualSwitch<s(0)(0)(0)>[&]=2,
	rprSpanProtectionCommand_forcedSwitch<s(0)(0)(0)>[&]=3
} rprSpanProtectionCommand_Tval<s(0)(0)(0)>[&];(D1:rprSpanProtectionCommand_Tval:1)[[TYPENAME:rprSpanProtectionCommand_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                       
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                          
	RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];                                                                   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSpanProtectionNeighborValid<s(1)(1)(0)>[&];   
	int		rprSpanProtectionHoldOffTimer<s(1)(1)(0)>[&];   
	rprSpanProtectionCommand_Tval<s(1)(1)(0)>[T] rprSpanProtectionCommand<s(1)(1)(0)>[&];   
	unsigned int	rprSpanProtectionCount<s(1)(1)(0)>[&];   
	unsigned int	rprSpanProtectionDuration<s(1)(1)(0)>[&];   
	unsigned int	rprSpanProtectionLastActivationTime<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprSpanProtectionCountReset<s(1)(1)(0)>[&];   
}MIBrprSpanProtectionTable_t<s(0)(0)(0)>[&];(D1:MIBrprSpanProtectionTable_t:1)[[TYPENAME:MIBrprSpanProtectionTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] rprCardProtectionTable_Did<s(0)(0)(0)>[&];(D1:rprCardProtectionTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                         
	int		rprIfIndex<s(1)(1)(0)>[&];                                            
	int		rprCardProtectionId<s(1)(1)(0)>[&];                                      
	int		rprCpfWorkSlot<s(1)(1)(0)>[&];   
	int		rprCpfProtSlot<s(1)(1)(0)>[&];   
	int		rprCpfActiveSlot<s(1)(1)(0)>[&];   
	int		rprCpfCoordSlot<s(1)(1)(0)>[&];   
	int		rprCpfCoordProtGroup<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] rprCpfEnable<s(1)(1)(0)>[&];   
}MIBrprCardProtectionTable_t<s(0)(0)(0)>[&];(D1:MIBrprCardProtectionTable_t:1)[[TYPENAME:MIBrprCardProtectionTable_t]]
















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprModule_Did<s(0)(0)(0)>[&];(D1:pbRprModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhPmUpLoadInfo_Did<s(0)(0)(0)>[&];(D1:pbSdhPmUpLoadInfo_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhMostRecentIndex_Did<s(0)(0)(0)>[&];(D1:pbSdhMostRecentIndex_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhRecentUapPerfMon_Did<s(0)(0)(0)>[&];(D1:pbSdhRecentUapPerfMon_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhUapPerfMon_Did<s(0)(0)(0)>[&];(D1:pbSdhUapPerfMon_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhRecentPerfMon_Did<s(0)(0)(0)>[&];(D1:pbSdhRecentPerfMon_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhCurPerfMon_Did<s(0)(0)(0)>[&];(D1:pbSdhCurPerfMon_Did:0)

   
typedef struct
{
	int		pbEthPmMonTimeIntervalSet<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbPdhPmSlipEventEnable<s(1)(1)(0)>[&];   
}MIBpbSdhCurPerfMon_t<s(0)(0)(0)>[&];(D1:MIBpbSdhCurPerfMon_t:1)[[TYPENAME:MIBpbSdhCurPerfMon_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbPMFilterConfigGroup_Did<s(0)(0)(0)>[&];(D1:pbPMFilterConfigGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbPmDeleteAllFilter<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbPmDeleteSlotNumber<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbPmDeleteSlotFilter<s(1)(1)(0)>[&];
	unsigned int	pbPmDeleteFilterTypeId<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbPmDeleteFilterType<s(1)(1)(0)>[&];
}MIBpbPMFilterConfigGroup_t<s(0)(0)(0)>[&];(D1:MIBpbPMFilterConfigGroup_t:1)[[TYPENAME:MIBpbPMFilterConfigGroup_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPMFilterTable_Did<s(0)(0)(0)>[&];(D1:pbPMFilterTable_Did:0)

   
typedef struct
{
	unsigned int	pbPmFilterType<s(1)(1)(0)>[&];                    
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];             
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                     
	int		pbPortNo<s(1)(1)(0)>[&];                                  
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                         
	int		pbTpIndex<s(1)(1)(0)>[&];                                 
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbTableType<s(1)(1)(0)>[&];                 
	unsigned int	pbPmEthId<s(1)(1)(0)>[&];                         
	unsigned int	pbPmReserved<s(1)(1)(0)>[&];
}MIBpbPMFilterTable_t<s(0)(0)(0)>[&];(D1:MIBpbPMFilterTable_t:1)[[TYPENAME:MIBpbPMFilterTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbSdhCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                           
	int		pbTpIndex<s(1)(1)(0)>[&];                                                   
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbTableType<s(1)(1)(0)>[&];                                      
	PbActualPortType_Tval<s(1)(1)(0)>[T] pbPmActualPortType<s(1)(1)(0)>[&];   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbSdhPmMonitor<s(1)(1)(0)>[&];   
	unsigned int	pbEsPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEsPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbEsPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbEsPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbBbePmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbBbePmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbBbePmThresholdLow<s(1)(1)(0)>[&];   
	int		pbBbePmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbSesPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSesPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbSesPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbSesPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbUasPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUasPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbUasPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbUasPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbCsesPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbCsesPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbCsesPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbCsesPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFcPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFcPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbFcPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbFcPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbOfsPmCounter<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOfsPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbOfsPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbOfsPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPpjcPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPpjcPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPpjcPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPpjcPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbNpjcPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbNpjcPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbNpjcPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbNpjcPmThresholdHigh<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPmTableReset<s(1)(1)(0)>[&];   
	char		pbPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbPmTimeElapse<s(1)(1)(0)>[&];   
	PbPmPortStatusType_Tval<s(1)(1)(0)>[T] pbPmProtStatus<s(1)(1)(0)>[&];   
	PbPmTpStatusType_Tval<s(1)(1)(0)>[T] pbPmTpStatus<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPmSuspect<s(1)(1)(0)>[&];   
}MIBpbSdhCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhCurPMTable_t:1)[[TYPENAME:MIBpbSdhCurPMTable_t]]

























































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbEthCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                                        
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthTableType<s(1)(1)(0)>[&];                                                                       
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                                                    
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbEthPmMonitor<s(1)(1)(0)>[&];   
	char		pbEthPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbEthPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthPmTimeSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthPmTableReset<s(1)(1)(0)>[&];   
	unsigned int	pbEthInUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllBadPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllBadPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllBadBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllBadBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllGoodBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInAllGoodBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInOverSizePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInOverSizePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInUnderSizePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInUnderSizePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthInCRCErrPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthInCRCErrPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutAllGoodBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthOutAllGoodBytesLow<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthBbrEnable<s(1)(1)(0)>[&];   
	int		pbEthBbrThresholdValue<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthBprEnable<s(1)(1)(0)>[&];   
	int		pbEthBprThresholdValue<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllBadPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAllBadPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInDropPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInDropPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInUndersizeGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInUndersizeGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInOversizeGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInOversizeGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn64PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn64PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn65To127PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn65To127PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn128To255PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn128To255PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn256To511PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn256To511PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn512To1023PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn512To1023PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn1024To1518PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurIn1024To1518PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInPausePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInPausePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInFragmentPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInFragmentPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInJabberPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInJabberPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAlignmentErrorPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurInAlignmentErrorPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutAllBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutAllBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutAllPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutAllPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutGoodPausePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutGoodPausePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutCollisionPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthCurOutCollisionPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbCurOutInvalidSymbolsHigh<s(1)(1)(0)>[&];
	unsigned int	pbCurOutInvalidSymbolsLow<s(1)(1)(0)>[&];
	unsigned int	pbCurOutSuperblockCrcErrorHigh<s(1)(1)(0)>[&];
	unsigned int	pbCurOutSuperblockCrcErrorLow<s(1)(1)(0)>[&];
	unsigned int	pbCurOutSuperblockCorrectableCrcErrorHigh<s(1)(1)(0)>[&];
	unsigned int	pbCurOutSuperblockCorrectableCrcErrorLow<s(1)(1)(0)>[&];
}MIBpbEthCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthCurPMTable_t:1)[[TYPENAME:MIBpbEthCurPMTable_t]]














































































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthPmMonTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthPmMonTable_Did:0)

   
typedef enum {
	pbxSecEthPmReportStatus_notReport<s(0)(0)(0)>[&]=1,
	pbxSecEthPmReportStatus_reportOnce<s(0)(0)(0)>[&]=2
} pbxSecEthPmReportStatus_Tval<s(0)(0)(0)>[&];(D1:pbxSecEthPmReportStatus_Tval:1)[[TYPENAME:pbxSecEthPmReportStatus_Tval]]

typedef enum {
	pbxSecEthPmMonitorStatus_notMonitor<s(0)(0)(0)>[&]=1,
	pbxSecEthPmMonitorStatus_monitor<s(0)(0)(0)>[&]=2
} pbxSecEthPmMonitorStatus_Tval<s(0)(0)(0)>[&];(D1:pbxSecEthPmMonitorStatus_Tval:1)[[TYPENAME:pbxSecEthPmMonitorStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		pbPortNo<s(1)(1)(0)>[&];                                                      
	EthPortClass_Tval<s(1)(1)(0)>[T] pbxSecEthPmPortType<s(1)(1)(0)>[&];                                 
	pbxSecEthPmReportStatus_Tval<s(1)(1)(0)>[T] pbxSecEthPmReportStatus<s(1)(1)(0)>[&];   
	pbxSecEthPmMonitorStatus_Tval<s(1)(1)(0)>[T] pbxSecEthPmMonitorStatus<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthPmFtpHostIP<s(1)(1)(0)>[&];   
	char		pbxSecEthPmFtpPath<s(1)(1)(0)>[&][64];   
	char		pbxSecEthPmFtpFileName<s(1)(1)(0)>[&][13];   
	char		pbxSecEthPmFtpUsername<s(1)(1)(0)>[&][32];   
	char		pbxSecEthPmFtpPassword<s(1)(1)(0)>[&][32];   
	char		pbxSecEthPmRequestId<s(1)(1)(0)>[&][40];   
	PbPmReportResp_Tval<s(1)(1)(0)>[T] pbxSecEthPmRespMsg<s(1)(1)(0)>[&];   
}MIBpbxSecEthPmMonTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthPmMonTable_t:1)[[TYPENAME:MIBpbxSecEthPmMonTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprClientCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbRprClientCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                             
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                                
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprClientTableType<s(1)(1)(0)>[&];                                                           
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbRprClientPmMonitor<s(1)(1)(0)>[&];   
	char		pbRprClientPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbRprClientPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprClientPmTimeSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprClientPmTableReset<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutPassFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutPassFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutDropFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutDropFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutErrLenFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutErrLenFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutErrCrcFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutErrCrcFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientInMcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientOutMcastClassCOctetsLow<s(1)(1)(0)>[&];   
}MIBpbRprClientCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprClientCurPMTable_t:1)[[TYPENAME:MIBpbRprClientCurPMTable_t]]



























































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprSpanCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbRprSpanCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                         
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                            
	RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];                                                                     
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprSpanTableType<s(1)(1)(0)>[&];                                                         
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbRprSpanPmMonitor<s(1)(1)(0)>[&];   
	char		pbRprSpanPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbRprSpanPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprSpanPmTimeSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprSpanPmTableReset<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInWrapFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInWrapFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInDataFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInDataFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInCtrlFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInCtrlFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInFaFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInFaFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutAddFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutAddFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutTransitFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutTransitFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutWrapFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutWrapFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutTpFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutTpFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutFaFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutFaFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutOamFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutOamFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrHecFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrHecFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrParityFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrParityFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrFcsFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrFcsFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrEdgeFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrEdgeFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrSelfSourceFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanErrSelfSourceFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanInMcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanOutMcastClassCOctetsLow<s(1)(1)(0)>[&];   
}MIBpbRprSpanCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprSpanCurPMTable_t:1)[[TYPENAME:MIBpbRprSpanCurPMTable_t]]


















































































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhCurSlipTable_Did<s(0)(0)(0)>[&];(D1:pbPdhCurSlipTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                     
	int		pbPortNo<s(1)(1)(0)>[&];                                                  
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbSlipTableType<s(1)(1)(0)>[&];                                
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbSlipMonitor<s(1)(1)(0)>[&];   
	unsigned int	pbPSlipCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPSlipThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPSlipThreshold<s(1)(1)(0)>[&];   
	unsigned int	pbNSlipCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbNSlipThresholdEnable<s(1)(1)(0)>[&];   
	int		pbNSlipThreshold<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlipTableReset<s(1)(1)(0)>[&];   
	char		pbSlipTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbSlipTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSlipSuspect<s(1)(1)(0)>[&];   
}MIBpbPdhCurSlipTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhCurSlipTable_t:1)[[TYPENAME:MIBpbPdhCurSlipTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPmMonitoredNumberTable_Did<s(0)(0)(0)>[&];(D1:pbPmMonitoredNumberTable_Did:0)

   
typedef struct
{
	unsigned int	pbSdhFtpCmndHostIP<s(1)(1)(0)>[&];                                
	int		pbPmMonitoredAll<s(1)(1)(0)>[&];   
	int		pbPmMonitoredCtp<s(1)(1)(0)>[&];   
	int		pbPmMonitoredTtp<s(1)(1)(0)>[&];   
	int		pbPmMonitoredEth<s(1)(1)(0)>[&];   
	int		pbPmMonitoredRprClient<s(1)(1)(0)>[&];   
	int		pbPmMonitoredRprSpan<s(1)(1)(0)>[&];   
	int		pbPmMonitoredAtm<s(1)(1)(0)>[&];   
	int		pbPmMonitoredPdhSlip<s(1)(1)(0)>[&];   
	int		pbPmMonitoredPdhCrc<s(1)(1)(0)>[&];   
	int		pbPmMonitoredFec<s(1)(1)(0)>[&];   
	int		pbPmMonitoredOtu<s(1)(1)(0)>[&];
}MIBpbPmMonitoredNumberTable_t<s(0)(0)(0)>[&];(D1:MIBpbPmMonitoredNumberTable_t:1)[[TYPENAME:MIBpbPmMonitoredNumberTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthPMTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	EthPortClass_Tval<s(1)(1)(0)>[T] pbxSecEthCurPmPortType<s(1)(1)(0)>[&];                         
	RowStatus_Tval<s(1)(1)(0)>[T] pbxSecEthPmEnableStatus<s(1)(1)(0)>[&];   
	char		pbxSecEthPmTimeStart<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthPmStartFlag<s(1)(1)(0)>[&];   
}MIBpbxSecEthPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthPMTable_t:1)[[TYPENAME:MIBpbxSecEthPMTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbPdhCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                             
	int		pbPortNo<s(1)(1)(0)>[&];                                                          
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbPdhTableType<s(1)(1)(0)>[&];                                         
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbPdhPmMonitor<s(1)(1)(0)>[&];   
	unsigned int	pbPdhEsPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhEsPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhEsPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhEsPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPdhBbePmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhBbePmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhBbePmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhBbePmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPdhSesPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhSesPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhSesPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhSesPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPdhUasPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhUasPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhUasPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhUasPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPdhCsesPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhCsesPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhCsesPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhCsesPmThresholdHigh<s(1)(1)(0)>[&];   
	unsigned int	pbPdhFcPmCounter<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhFcPmThresholdEnable<s(1)(1)(0)>[&];   
	int		pbPdhFcPmThresholdLow<s(1)(1)(0)>[&];   
	int		pbPdhFcPmThresholdHigh<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhPmTableReset<s(1)(1)(0)>[&];   
	char		pbPdhPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbPdhPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhPmSuspect<s(1)(1)(0)>[&];   
}MIBpbPdhCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhCurPMTable_t:1)[[TYPENAME:MIBpbPdhCurPMTable_t]]








































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthVlanPMTable_Did<s(0)(0)(0)>[&];(D1:pbEthVlanPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	int		pbPortNo<s(1)(1)(0)>[&];                                                                
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthVlanTableType<s(1)(1)(0)>[&];                                           
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                            
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                             
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbEthVlanPmMonitor<s(1)(1)(0)>[&];   
	char		pbEthVlanPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbEthVlanPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanPmTimeSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanPmTableReset<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanInPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanInPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanInBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanInBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanDropPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanDropPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvUnicastFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvUnicastFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvTotalFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvTotalFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvUnicastBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvUnicastBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvTotalBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRcvTotalBytesLow<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthVlanPmEnableStatus<s(1)(1)(0)>[&];   
}MIBpbEthVlanPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthVlanPMTable_t:1)[[TYPENAME:MIBpbEthVlanPMTable_t]]
































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthVlanPMTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthVlanPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                        
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                         
	RowStatus_Tval<s(1)(1)(0)>[T] pbxSecEthVlanPmEnableStatus<s(1)(1)(0)>[&];   
	char		pbxSecEthVlanPmTimeStart<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthVlanPmStartFlag<s(1)(1)(0)>[&];   
}MIBpbxSecEthVlanPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthVlanPMTable_t:1)[[TYPENAME:MIBpbxSecEthVlanPMTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthTcaPMTable_Did<s(0)(0)(0)>[&];(D1:pbEthTcaPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		pbPortNo<s(1)(1)(0)>[&];                                                      
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                  
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthPmBbrEnable<s(1)(1)(0)>[&];   
	int		pbEthPmBbrThresholdValue<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthPmBprEnable<s(1)(1)(0)>[&];   
	int		pbEthPmBprThresholdValue<s(1)(1)(0)>[&];   
}MIBpbEthTcaPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthTcaPMTable_t:1)[[TYPENAME:MIBpbEthTcaPMTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbFecCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbFecCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbFecTableType<s(1)(1)(0)>[&];                                   
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbFecPmMonitor<s(1)(1)(0)>[&];   
	unsigned int	pbFecTecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecTecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecZecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecZecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecOecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecOecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecFcPmCounter<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecPmTableReset<s(1)(1)(0)>[&];   
	char		pbFecPmTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbFecPmTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecPmSuspect<s(1)(1)(0)>[&];   
	unsigned int	pbFecUncorrectedBlkHigh<s(1)(1)(0)>[&];
	unsigned int	pbFecUncorrectedBlkLow<s(1)(1)(0)>[&];
}MIBpbFecCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbFecCurPMTable_t:1)[[TYPENAME:MIBpbFecCurPMTable_t]]

























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOtuCurPMTable_Did<s(0)(0)(0)>[&];(D1:pbOtuCurPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                               
	int		pbPortNo<s(1)(1)(0)>[&];                                            
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbOtuTableType<s(1)(1)(0)>[&];                        
	unsigned int	pbChannelID<s(1)(1)(0)>[&];                                 
	unsigned int	pbSegmentNum<s(1)(1)(0)>[&];                                
	PbPmMonitor_Tval<s(1)(1)(0)>[T] pbOtuPmMonitor<s(1)(1)(0)>[&];
	unsigned int	pbOtuEsPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuBbePmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuSesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuUasPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuCsesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuFcPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuOfsPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuIaesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuBiaesPmCounter<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuPmTableReset<s(1)(1)(0)>[&];
	char		pbOtuPmTimeStart<s(1)(1)(0)>[&][16];
	unsigned int	pbOtuPmTimeElapse<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuPmSuspect<s(1)(1)(0)>[&];
}MIBpbOtuCurPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbOtuCurPMTable_t:1)[[TYPENAME:MIBpbOtuCurPMTable_t]]



























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbSdhRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                       
	int		pbTpIndex<s(1)(1)(0)>[&];                                               
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRecentTableType<s(1)(1)(0)>[&];                            
	int		pbRecentTimesIndex<s(1)(1)(0)>[&];                                         
	unsigned int	pbRecentEsPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentBbePmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentSesPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentUasPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentCsesPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentFcPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentOfsPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentPpjcPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentNpjcPmCounter<s(1)(1)(0)>[&];   
	char		pbRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbComplete<s(1)(1)(0)>[&];   
}MIBpbSdhRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhRecentPMTable_t:1)[[TYPENAME:MIBpbSdhRecentPMTable_t]]


























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbEthRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                        
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthRecentTableType<s(1)(1)(0)>[&];                                                 
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthRecentPmPortType<s(1)(1)(0)>[&];                                                 
	int		pbEthRecentTimesIndex<s(1)(1)(0)>[&];                                                              
	char		pbEthRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthRecentPmTimeSuspect<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllBadPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllBadPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllBadBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllBadBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllGoodBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInAllGoodBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInOverSizePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInOverSizePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInUnderSizePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInUnderSizePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInCRCErrPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentInCRCErrPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutAllGoodBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRecentOutAllGoodBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllBadPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAllBadPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInDropPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInDropPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInUndersizeGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInUndersizeGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInOversizeGoodPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInOversizeGoodPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn64PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn64PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn65To127PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn65To127PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn128To255PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn128To255PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn256To511PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn256To511PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn512To1023PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn512To1023PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn1024To1518PktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntIn1024To1518PktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInPausePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInPausePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInFragmentPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInFragmentPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInJabberPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInJabberPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAlignmentErrorPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntInAlignmentErrorPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutAllBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutAllBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutAllPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutAllPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutUnicastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutUnicastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutMulcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutMulcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutBrdcastPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutBrdcastPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutGoodPausePktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutGoodPausePktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutCollisionPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthRcntOutCollisionPktsLow<s(1)(1)(0)>[&];   
}MIBpbEthRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthRecentPMTable_t:1)[[TYPENAME:MIBpbEthRecentPMTable_t]]


































































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprClientRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbRprClientRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                                         
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                                            
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprClientRecentTableType<s(1)(1)(0)>[&];                                                                 
	int		pbRprClientTableRecentTimesIndex<s(1)(1)(0)>[&];                                                                         
	char		pbRprClientRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprClientRecentPmTimeSuspect<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutPassFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutPassFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutDropFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutDropFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutErrLenFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutErrLenFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutErrCrcFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutErrCrcFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentInMcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprClientRecentOutMcastClassCOctetsLow<s(1)(1)(0)>[&];   
}MIBpbRprClientRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprClientRecentPMTable_t:1)[[TYPENAME:MIBpbRprClientRecentPMTable_t]]

























































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprSpanRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbRprSpanRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                                     
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                                        
	RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];                                                                                 
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprSpanRecentTableType<s(1)(1)(0)>[&];                                                               
	int		pbRprSpanTableRecentTimesIndex<s(1)(1)(0)>[&];                                                                       
	char		pbRprSpanRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprSpanRecentPmTimeSuspect<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInWrapFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInWrapFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInDataFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInDataFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInCtrlFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInCtrlFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInFaFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInFaFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutAllFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutAllFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutAddFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutAddFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutTransitFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutTransitFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutWrapFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutWrapFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutTpFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutTpFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutFaFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutFaFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutOamFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutOamFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrHecFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrHecFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrParityFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrParityFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrFcsFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrFcsFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrEdgeFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrEdgeFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrSelfSourceFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentErrSelfSourceFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentInMcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutUcastClassCOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassAFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassAFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassAOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassAOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBCirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBCirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBCirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBCirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBEirFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBEirFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBEirOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassBEirOctetsLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassCFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassCFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassCOctetsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbRprSpanRecentOutMcastClassCOctetsLow<s(1)(1)(0)>[&];   
}MIBpbRprSpanRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprSpanRecentPMTable_t:1)[[TYPENAME:MIBpbRprSpanRecentPMTable_t]]
















































































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhRecentSlipTable_Did<s(0)(0)(0)>[&];(D1:pbPdhRecentSlipTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                     
	int		pbPortNo<s(1)(1)(0)>[&];                                                  
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRecentSlipTableType<s(1)(1)(0)>[&];                          
	int		pbRecentSlipTimesIndex<s(1)(1)(0)>[&];                                       
	unsigned int	pbRecentPSlipCounter<s(1)(1)(0)>[&];   
	unsigned int	pbRecentNSlipCounter<s(1)(1)(0)>[&];   
	char		pbSlipTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRecentSlipSuspect<s(1)(1)(0)>[&];   
}MIBpbPdhRecentSlipTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhRecentSlipTable_t:1)[[TYPENAME:MIBpbPdhRecentSlipTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                        
	EthPortClass_Tval<s(1)(1)(0)>[T] pbxSecEthRecentPmPortType<s(1)(1)(0)>[&];                                             
	int		pbxSecEthTimesIndex<s(1)(1)(0)>[&];                                                                
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthRecentPmStartFlag<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInUnicastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInMulcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInBrdcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInAllBadPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInAllBadBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInAllGoodPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInAllGoodBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInOverSizePkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInUnderSizePkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentInCRCErrPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentOutUnicastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentOutMulcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentOutBrdcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentOutAllGoodPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRecentOutAllGoodBytes<s(1)(1)(0)>[&];   
	int		pbxSecEthFrmStartIndex<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInAllBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInAllPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInAllGoodPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInAllBadPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInUnicastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInMulcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInBrdcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInDropPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInUndersizeGoodPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInOversizeGoodPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn64Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn65To127Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn128To255Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn256To511Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn512To1023Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntIn1024To1518Pkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInPausePkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInFragmentPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInJabberPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntInAlignmentErrorPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutAllBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutAllPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutUnicastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutMulcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutBrdcastPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutGoodPausePkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthRcntOutCollisionPkts<s(1)(1)(0)>[&];   
}MIBpbxSecEthRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthRecentPMTable_t:1)[[TYPENAME:MIBpbxSecEthRecentPMTable_t]]























































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbPdhRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                         
	int		pbPortNo<s(1)(1)(0)>[&];                                                      
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbPdhRecentTableType<s(1)(1)(0)>[&];                               
	int		pbPdhRecentTimesIndex<s(1)(1)(0)>[&];                                            
	unsigned int	pbPdhRecentEsPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbPdhRecentBbePmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbPdhRecentSesPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbPdhRecentUasPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbPdhRecentCsesPmCounter<s(1)(1)(0)>[&];   
	unsigned int	pbPdhRecentFcPmCounter<s(1)(1)(0)>[&];   
	char		pbPdhRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhComplete<s(1)(1)(0)>[&];   
}MIBpbPdhRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhRecentPMTable_t:1)[[TYPENAME:MIBpbPdhRecentPMTable_t]]





















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthVlanRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbEthVlanRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                                            
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthVlanRecentTableType<s(1)(1)(0)>[&];                                                 
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                                        
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                                         
	int		pbEthVlanRecentTimesIndex<s(1)(1)(0)>[&];                                                              
	char		pbEthVlanRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanRecentPmTimeSuspect<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentInPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentInPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentInBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentInBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentDropPktsHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentDropPktsLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvUnicastFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvUnicastFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvTotalFramesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvTotalFramesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvUnicastBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvUnicastBytesLow<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvTotalBytesHigh<s(1)(1)(0)>[&];   
	unsigned int	pbEthVlanRecentRcvTotalBytesLow<s(1)(1)(0)>[&];   
}MIBpbEthVlanRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthVlanRecentPMTable_t:1)[[TYPENAME:MIBpbEthVlanRecentPMTable_t]]





























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthVlanRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                                            
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                                        
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                                         
	int		pbxSecEthVlanTimesIndex<s(1)(1)(0)>[&];                                                                
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthVlanRecentPmStartFlag<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentInPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentInBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentDropPkts<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentRcvUnicastFrames<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentRcvTotalFrames<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentRcvUnicastBytes<s(1)(1)(0)>[&];   
	unsigned int	pbxSecEthVlanRecentRcvTotalBytes<s(1)(1)(0)>[&];   
	int		pbxSecEthVlanFrmStartIndex<s(1)(1)(0)>[&];   
}MIBpbxSecEthVlanRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthVlanRecentPMTable_t:1)[[TYPENAME:MIBpbxSecEthVlanRecentPMTable_t]]





















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbFecRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbFecRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                               
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbFecRecentTableType<s(1)(1)(0)>[&];                                     
	int		pbFecRecentTimesIndex<s(1)(1)(0)>[&];                                                  
	unsigned int	pbFecRecentTecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentTecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentZecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentZecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentOecPmCounterHigh<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentOecPmCounterLow<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecentFcPmCounter<s(1)(1)(0)>[&];   
	char		pbFecRecentPmTimeEnd<s(1)(1)(0)>[&][16];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecSuspect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecComplete<s(1)(1)(0)>[&];   
	unsigned int	pbFecRecUncorrectedBlkHigh<s(1)(1)(0)>[&];
	unsigned int	pbFecRecUncorrectedBlkLow<s(1)(1)(0)>[&];
}MIBpbFecRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbFecRecentPMTable_t:1)[[TYPENAME:MIBpbFecRecentPMTable_t]]
























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOtuRecentPMTable_Did<s(0)(0)(0)>[&];(D1:pbOtuRecentPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                           
	int		pbPortNo<s(1)(1)(0)>[&];                                                        
	unsigned int	pbOtuRecentChannelID<s(1)(1)(0)>[&];                                    
	unsigned int	pbOtuRecentSegmentNum<s(1)(1)(0)>[&];                                   
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbOtuRecentTableType<s(1)(1)(0)>[&];                              
	int		pbOtuRecentTimesIndex<s(1)(1)(0)>[&];                                           
	unsigned int	pbOtuRecentEsPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentBbePmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentSesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentUasPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentCsesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentFcPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentOfsPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentIaesPmCounter<s(1)(1)(0)>[&];
	unsigned int	pbOtuRecentBiaesPmCounter<s(1)(1)(0)>[&];
	char		pbOtuRecentPmTimeEnd<s(1)(1)(0)>[&][16];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuSuspect<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuComplete<s(1)(1)(0)>[&];
}MIBpbOtuRecentPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbOtuRecentPMTable_t:1)[[TYPENAME:MIBpbOtuRecentPMTable_t]]


























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbSdhUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                       
	int		pbPortNo<s(1)(1)(0)>[&];                                    
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                           
	int		pbTpIndex<s(1)(1)(0)>[&];                                   
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPmUapType<s(1)(1)(0)>[&];                        
	TruthValue_Tval<s(1)(1)(0)>[T] pbIsAtUap<s(1)(1)(0)>[&];   
	unsigned int	pbUAPCounter<s(1)(1)(0)>[&];   
	char		pbUapTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbUapTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUAPReset<s(1)(1)(0)>[&];   
}MIBpbSdhUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhUapPMTable_t:1)[[TYPENAME:MIBpbSdhUapPMTable_t]]


















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbPdhUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                             
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPdhUapType<s(1)(1)(0)>[&];                             
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhIsAtUap<s(1)(1)(0)>[&];   
	unsigned int	pbPdhUAPCounter<s(1)(1)(0)>[&];   
	char		pbPdhUapTimeStart<s(1)(1)(0)>[&][16];   
	unsigned int	pbPdhUapTimeElapse<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhUAPReset<s(1)(1)(0)>[&];   
}MIBpbPdhUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhUapPMTable_t:1)[[TYPENAME:MIBpbPdhUapPMTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOtuUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbOtuUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                             
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	unsigned int	pbUapChannelID<s(1)(1)(0)>[&];                            
	unsigned int	pbUapSegmentNum<s(1)(1)(0)>[&];                           
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbOtuUapType<s(1)(1)(0)>[&];                          
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuIsAtUap<s(1)(1)(0)>[&];
	unsigned int	pbOtuUAPCounter<s(1)(1)(0)>[&];
	char		pbOtuUapTimeStart<s(1)(1)(0)>[&][16];
	unsigned int	pbOtuUapTimeElapse<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuUAPReset<s(1)(1)(0)>[&];
}MIBpbOtuUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbOtuUapPMTable_t:1)[[TYPENAME:MIBpbOtuUapPMTable_t]]


















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhRecentUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbSdhRecentUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                         
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                 
	int		pbPortNo<s(1)(1)(0)>[&];                                              
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                     
	int		pbTpIndex<s(1)(1)(0)>[&];                                             
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPmRecUapType<s(1)(1)(0)>[&];                               
	int		pbUapTimesIndex<s(1)(1)(0)>[&];                                          
	char		pbRecentUapTimeStart<s(1)(1)(0)>[&][16];   
	char		pbRecentUapTimeEnd<s(1)(1)(0)>[&][16];   
}MIBpbSdhRecentUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhRecentUapPMTable_t:1)[[TYPENAME:MIBpbSdhRecentUapPMTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhRecentUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbPdhRecentUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPdhRecUapType<s(1)(1)(0)>[&];                                    
	int		pbPdhUapTimesIndex<s(1)(1)(0)>[&];                                             
	char		pbPdhRecentUapTimeStart<s(1)(1)(0)>[&][16];   
	char		pbPdhRecentUapTimeEnd<s(1)(1)(0)>[&][16];   
}MIBpbPdhRecentUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhRecentUapPMTable_t:1)[[TYPENAME:MIBpbPdhRecentUapPMTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOtuRecentUapPMTable_Did<s(0)(0)(0)>[&];(D1:pbOtuRecentUapPMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                    
	unsigned int	pbOtuRecUapChannelID<s(1)(1)(0)>[&];                                
	unsigned int	pbOtuRecUapSegmentNum<s(1)(1)(0)>[&];                               
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbOtuRecUapType<s(1)(1)(0)>[&];                                 
	int		pbOtuUapTimesIndex<s(1)(1)(0)>[&];                                          
	char		pbOtuRecentUapTimeStart<s(1)(1)(0)>[&][16];
	char		pbOtuRecentUapTimeEnd<s(1)(1)(0)>[&][16];
}MIBpbOtuRecentUapPMTable_t<s(0)(0)(0)>[&];(D1:MIBpbOtuRecentUapPMTable_t:1)[[TYPENAME:MIBpbOtuRecentUapPMTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbSdhMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                             
	int		pbPortNo<s(1)(1)(0)>[&];                                                          
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                                                 
	int		pbTpIndex<s(1)(1)(0)>[&];                                                         
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPmRecIntervalTblType<s(1)(1)(0)>[&];                                   
	int		pbRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
	int		pbRecentUapTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRecentUapUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbSdhMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhMostRecentIndexTable_t:1)[[TYPENAME:MIBpbSdhMostRecentIndexTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbEthMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	int		pbPortNo<s(1)(1)(0)>[&];                                                                
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthIndexTableType<s(1)(1)(0)>[&];                                          
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthIndexPmPortType<s(1)(1)(0)>[&];                                          
	int		pbEthRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbEthMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthMostRecentIndexTable_t:1)[[TYPENAME:MIBpbEthMostRecentIndexTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprClientMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbRprClientMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                       
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                             
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprClientIndexTableType<s(1)(1)(0)>[&];                                                
	int		pbRprClientRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprClientRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbRprClientMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprClientMostRecentIndexTable_t:1)[[TYPENAME:MIBpbRprClientMostRecentIndexTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRprSpanMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbRprSpanMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                   
	int		rprIfIndex<s(1)(1)(0)>[&];                                                                      
	RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];                                                                  
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbRprSpanIndexTableType<s(1)(1)(0)>[&];                                              
	int		pbRprSpanRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRprSpanRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbRprSpanMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbRprSpanMostRecentIndexTable_t:1)[[TYPENAME:MIBpbRprSpanMostRecentIndexTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSlipMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbSlipMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                             
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	int		pbSlipRecentTblMRI<s(1)(1)(0)>[&];   
}MIBpbSlipMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbSlipMostRecentIndexTable_t:1)[[TYPENAME:MIBpbSlipMostRecentIndexTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthIndexTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                        
	EthPortClass_Tval<s(1)(1)(0)>[T] pbxSecEthIndexPortType<s(1)(1)(0)>[&];                                                
	int		pbxSecEthRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
	int		pbxSecEthRecentIndex<s(1)(1)(0)>[&];   
}MIBpbxSecEthIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthIndexTable_t:1)[[TYPENAME:MIBpbxSecEthIndexTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPdhMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbPdhMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbPdhRecIntervalTblType<s(1)(1)(0)>[&];                                        
	int		pbPdhRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
	int		pbPdhRecentUapTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbPdhRecentUapUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbPdhMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbPdhMostRecentIndexTable_t:1)[[TYPENAME:MIBpbPdhMostRecentIndexTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthVlanMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbEthVlanMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                        
	PbPmTableType_Tval<s(1)(1)(0)>[T] pbEthVlanIndexTableType<s(1)(1)(0)>[&];                                              
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                                       
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                                        
	int		pbEthVlanRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbEthVlanMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthVlanMostRecentIndexTable_t:1)[[TYPENAME:MIBpbEthVlanMostRecentIndexTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthVlanIndexTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthVlanIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                                           
	int		pbPortNo<s(1)(1)(0)>[&];                                                                                
	EthPortClass_Tval<s(1)(1)(0)>[T] pbEthPmPortType<s(1)(1)(0)>[&];                                                            
	int		pbEthVlanNo<s(1)(1)(0)>[&];                                                                             
	int		pbxSecEthVlanRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbxSecEthVlanRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
	int		pbxSecEthVlanRecentIndex<s(1)(1)(0)>[&];   
}MIBpbxSecEthVlanIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthVlanIndexTable_t:1)[[TYPENAME:MIBpbxSecEthVlanIndexTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbFecMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbFecMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbFecRecIntervalTblType<s(1)(1)(0)>[&];                                        
	int		pbFecRecentIntervalTblMRI<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbFecRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];   
}MIBpbFecMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbFecMostRecentIndexTable_t:1)[[TYPENAME:MIBpbFecMostRecentIndexTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOtuMostRecentIndexTable_Did<s(0)(0)(0)>[&];(D1:pbOtuMostRecentIndexTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                           
	PbPortType_Tval<s(1)(1)(0)>[T] pbPortType<s(1)(1)(0)>[&];                                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                                
	unsigned int	pbOtuRecChannelID<s(1)(1)(0)>[&];                                               
	unsigned int	pbOtuRecSegmentNum<s(1)(1)(0)>[&];                                              
	PbPmUapType_Tval<s(1)(1)(0)>[T] pbOtuRecIntervalTblType<s(1)(1)(0)>[&];                                     
	int		pbOtuRecentIntervalTblMRI<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuRecentIntervalUpMaxIndex<s(1)(1)(0)>[&];
	int		pbOtuRecentUapTblMRI<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbOtuRecentUapUpMaxIndex<s(1)(1)(0)>[&];
}MIBpbOtuMostRecentIndexTable_t<s(0)(0)(0)>[&];(D1:MIBpbOtuMostRecentIndexTable_t:1)[[TYPENAME:MIBpbOtuMostRecentIndexTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhPMUpLoadTable_Did<s(0)(0)(0)>[&];(D1:pbSdhPMUpLoadTable_Did:0)

   
typedef struct
{
	unsigned int	pbSdhFtpCmndHostIP<s(1)(1)(0)>[&];                                 
	char		pbSdhFtpCmndPath<s(1)(1)(0)>[&][64];   
	char		pbSdhFtpFileName<s(1)(1)(0)>[&][13];   
	char		pbSdhFtpCmndUsername<s(1)(1)(0)>[&][32];   
	char		pbSdhFtpCmndPassword<s(1)(1)(0)>[&][32];   
	SdhFtpCmndLastState_Tval<s(1)(1)(0)>[T] pbSdhFtpCmndLastState<s(1)(1)(0)>[&];   
	unsigned int	pbAdjustTimeDircetion<s(1)(1)(0)>[&];   
	unsigned int	pbAdjustTimeDays<s(1)(1)(0)>[&];   
	unsigned int	pbAdjustTimeHours<s(1)(1)(0)>[&];   
	unsigned int	pbAdjustTimeMins<s(1)(1)(0)>[&];   
	unsigned int	pbAdjustTimeSecs<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbUpLoadStatus<s(1)(1)(0)>[&];   
}MIBpbSdhPMUpLoadTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhPMUpLoadTable_t:1)[[TYPENAME:MIBpbSdhPMUpLoadTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbxSecEthUploadTable_Did<s(0)(0)(0)>[&];(D1:pbxSecEthUploadTable_Did:0)

   
typedef struct
{
	unsigned int	pbxSecEthFtpHostIP<s(1)(1)(0)>[&];                               
	char		pbxSecEthFtpFileName<s(1)(1)(0)>[&][20];   
	char		pbxSecEthFtpUsername<s(1)(1)(0)>[&][32];   
	char		pbxSecEthFtpPassword<s(1)(1)(0)>[&][32];   
}MIBpbxSecEthUploadTable_t<s(0)(0)(0)>[&];(D1:MIBpbxSecEthUploadTable_t:1)[[TYPENAME:MIBpbxSecEthUploadTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSonetSDHPMModule_Did<s(0)(0)(0)>[&];(D1:pbSonetSDHPMModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbActiveAlarmTable_Did<s(0)(0)(0)>[&];(D1:pbActiveAlarmTable_Did:0)

   
typedef struct
{
	unsigned int	pbActiveAlarmIndex<s(1)(1)(0)>[&];                                             
	char		pbActiveAlarmCode<s(1)(1)(0)>[&][255];   
	AlarmSeverity_Tval<s(1)(1)(0)>[T] pbActiveAlarmSeverity<s(1)(1)(0)>[&];   
	char		pbActiveAlarmSource<s(1)(1)(0)>[&][255];   
	DateTime<s(1)(1)(0)>[T]	pbActiveAlarmDTS<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbActiveAlarmClearDTS<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbActiveAlarmSlotNum<s(1)(1)(0)>[&];   
	int		pbActiveAlarmPortNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] pbActiveAlarmPortType<s(1)(1)(0)>[&];   
	char		pbActiveAlarmDesc<s(1)(1)(0)>[&][255];   
	AlarmTypeID_Tval<s(1)(1)(0)>[T] pbActiveAlarmTypeID<s(1)(1)(0)>[&];   
	AlarmCategory_Tval<s(1)(1)(0)>[T] pbActiveAlarmCategory<s(1)(1)(0)>[&];   
	PbTPType_Tval<s(1)(1)(0)>[T] pbActiveAlarmPathType<s(1)(1)(0)>[&];   
	int		pbActiveAlarmSeqNum<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbActiveAlarmAcknowledge<s(1)(1)(0)>[&];   
	AlarmState_Tval<s(1)(1)(0)>[T] pbActiveAlarmState<s(1)(1)(0)>[&];   
	PbBoardStyle_Tval<s(1)(1)(0)>[T] pbActiveAlarmBoardStyle<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] pbActiveAlarmActualPortType<s(1)(1)(0)>[&];   
}MIBpbActiveAlarmTable_t<s(0)(0)(0)>[&];(D1:MIBpbActiveAlarmTable_t:1)[[TYPENAME:MIBpbActiveAlarmTable_t]]

























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbAlarmTypeCfgTable_Did<s(0)(0)(0)>[&];(D1:pbAlarmTypeCfgTable_Did:0)

   
typedef struct
{
	AlarmTypeID_Tval<s(1)(1)(0)>[T] pbAlarmTypeID<s(1)(1)(0)>[&];                              
	char		pbAlarmTypeCode<s(1)(1)(0)>[&][255];   
	char		pbAlarmTypeDesc<s(1)(1)(0)>[&][255];   
	AlarmCategory_Tval<s(1)(1)(0)>[T] pbAlarmTypeCategory<s(1)(1)(0)>[&];   
	AlarmSeverity_Tval<s(1)(1)(0)>[T] pbAlarmTypeSeverity<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeInhibit<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO1<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO2<s(1)(1)(0)>[&];   
	int		pbAlarmTypeTrapID<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO3<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO4<s(1)(1)(0)>[&];   
	PbAlmClassType_Tval<s(1)(1)(0)>[T] pbAlmClassID<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO5<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO6<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO7<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbAlarmTypeMDO8<s(1)(1)(0)>[&];
}MIBpbAlarmTypeCfgTable_t<s(0)(0)(0)>[&];(D1:MIBpbAlarmTypeCfgTable_t:1)[[TYPENAME:MIBpbAlarmTypeCfgTable_t]]























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCurrentEventsTable_Did<s(0)(0)(0)>[&];(D1:pbCurrentEventsTable_Did:0)

   
typedef struct
{
	int		pbCurrentEventIndex<s(1)(1)(0)>[&];                                          
	EventTypeID_Tval<s(1)(1)(0)>[T] pbCurrentEventID<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbCurrentEventDTS<s(1)(1)(0)>[&];   
	char		pbCurrentEventName<s(1)(1)(0)>[&][255];   
	EventCategory_Tval<s(1)(1)(0)>[T] pbCurrentEventCategory<s(1)(1)(0)>[&];   
	char		pbCurrentEventDetails<s(1)(1)(0)>[&][255];   
}MIBpbCurrentEventsTable_t<s(0)(0)(0)>[&];(D1:MIBpbCurrentEventsTable_t:1)[[TYPENAME:MIBpbCurrentEventsTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEventTypeCfgTable_Did<s(0)(0)(0)>[&];(D1:pbEventTypeCfgTable_Did:0)

   
typedef struct
{
	EventTypeID_Tval<s(1)(1)(0)>[T] pbEventTypeID<s(1)(1)(0)>[&];                              
	EventCategory_Tval<s(1)(1)(0)>[T] pbEventTypeCategory<s(1)(1)(0)>[&];   
	char		pbEventTypeName<s(1)(1)(0)>[&][255];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEventTypeSendTrap<s(1)(1)(0)>[&];   
}MIBpbEventTypeCfgTable_t<s(0)(0)(0)>[&];(D1:MIBpbEventTypeCfgTable_t:1)[[TYPENAME:MIBpbEventTypeCfgTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbLogSizeGroup_Did<s(0)(0)(0)>[&];(D1:pbLogSizeGroup_Did:0)

   
typedef struct
{
	int		pbAlarmLogSize<s(1)(1)(0)>[&];
	int		pbEventLogSize<s(1)(1)(0)>[&];
}MIBpbLogSizeGroup_t<s(0)(0)(0)>[&];(D1:MIBpbLogSizeGroup_t:1)[[TYPENAME:MIBpbLogSizeGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] alarmPersistentTime_Did<s(0)(0)(0)>[&];(D1:alarmPersistentTime_Did:0)

   
typedef struct
{
	int		alarmDetectionPersistentTime<s(1)(1)(0)>[&];   
	int		alarmClearingPersistentTime<s(1)(1)(0)>[&];   
}MIBalarmPersistentTime_t<s(0)(0)(0)>[&];(D1:MIBalarmPersistentTime_t:1)[[TYPENAME:MIBalarmPersistentTime_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] logPolicyGroup_Did<s(0)(0)(0)>[&];(D1:logPolicyGroup_Did:0)

   
typedef enum {
	eventLogPolicy_fifo<s(0)(0)(0)>[&]=1,
	eventLogPolicy_rejectNewEvent<s(0)(0)(0)>[&]=2
} eventLogPolicy_Tval<s(0)(0)(0)>[&];(D1:eventLogPolicy_Tval:1)[[TYPENAME:eventLogPolicy_Tval]]

typedef struct
{
	eventLogPolicy_Tval<s(1)(1)(0)>[T] eventLogPolicy<s(1)(1)(0)>[&];   
}MIBlogPolicyGroup_t<s(0)(0)(0)>[&];(D1:MIBlogPolicyGroup_t:1)[[TYPENAME:MIBlogPolicyGroup_t]]






 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbAlarmStatGroup_Did<s(0)(0)(0)>[&];(D1:pbAlarmStatGroup_Did:0)

   
typedef struct
{
	int		pbNumberOfCriticalAlarms<s(1)(1)(0)>[&];   
	int		pbNumberOfMajorAlarms<s(1)(1)(0)>[&];   
	int		pbNumberOfMinorAlarms<s(1)(1)(0)>[&];   
	int		pbNumberOfWarningAlarms<s(1)(1)(0)>[&];   
	int		pbNumberOfIndeterminateAlarms<s(1)(1)(0)>[&];   
	int		pbNumberOfEvents<s(1)(1)(0)>[&];   
}MIBpbAlarmStatGroup_t<s(0)(0)(0)>[&];(D1:MIBpbAlarmStatGroup_t:1)[[TYPENAME:MIBpbAlarmStatGroup_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbLogClearGroup_Did<s(0)(0)(0)>[&];(D1:pbLogClearGroup_Did:0)

   
typedef struct
{
	TruthValue_Tval<s(1)(1)(0)>[T] pbClearAlarmLog<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbClearEventsLog<s(1)(1)(0)>[&];   
}MIBpbLogClearGroup_t<s(0)(0)(0)>[&];(D1:MIBpbLogClearGroup_t:1)[[TYPENAME:MIBpbLogClearGroup_t]]







 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbEventsModule_Did<s(0)(0)(0)>[&];(D1:pbEventsModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhXcTable_Did<s(0)(0)(0)>[&];(D1:pbSdhXcTable_Did:0)

   
typedef struct
{
	PbXcCapacity_Tval<s(1)(1)(0)>[T] pbXConConnectCapacity<s(1)(1)(0)>[&];                                         
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbXConConnectSrcSlot<s(1)(1)(0)>[&];                                      
	int		pbXConConnectSrcPort<s(1)(1)(0)>[&];                                                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbXConConnectSrcPortType<s(1)(1)(0)>[&];                                     
	int		pbXConConnectSource<s(1)(1)(0)>[&];                                                        
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbXConConnectDstSlot<s(1)(1)(0)>[&];                                      
	int		pbXConConnectDstPort<s(1)(1)(0)>[&];                                                       
	PbPortType_Tval<s(1)(1)(0)>[T] pbXConConnectDstPortType<s(1)(1)(0)>[&];                                     
	int		pbXConConnectDestination<s(1)(1)(0)>[&];                                                   
	int		pbXConConnectId<s(1)(1)(0)>[&];   
	char		pbXConConnectCircuitId<s(1)(1)(0)>[&][64];   
	PbXcStatus_Tval<s(1)(1)(0)>[T] pbXConConnectStatus<s(1)(1)(0)>[&];   
	PbXcFailReason_Tval<s(1)(1)(0)>[T] pbXConConnectReason<s(1)(1)(0)>[&];   
	PbXcType_Tval<s(1)(1)(0)>[T] pbXConConnectType<s(1)(1)(0)>[&];   
	PbCircuitDirection_Tval<s(1)(1)(0)>[T] pbXConConnectCircuitDirection<s(1)(1)(0)>[&];   
	PbXcAction_Tval<s(1)(1)(0)>[T] pbXConConnectAction<s(1)(1)(0)>[&];   
	PbXcFrom_Tval<s(1)(1)(0)>[T] pbXConFrom<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbXConRowStatus<s(1)(1)(0)>[&];   
	char		pbXConConnectReqNo<s(1)(1)(0)>[&][40];   
	int		pbXCGmplsVcNumber<s(1)(1)(0)>[&];   
	char		pbXCGmplsCallName<s(1)(1)(0)>[&][255];   
	PbGmplsCcDirection_Tval<s(1)(1)(0)>[T] pbGmplsCcDirection<s(1)(1)(0)>[&];   
}MIBpbSdhXcTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhXcTable_t:1)[[TYPENAME:MIBpbSdhXcTable_t]]





























 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbXCModule_Did<s(0)(0)(0)>[&];(D1:pbXCModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbXCExtendObjects_Did<s(0)(0)(0)>[&];(D1:pbXCExtendObjects_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhXcNewContextTable_Did<s(0)(0)(0)>[&];(D1:pbSdhXcNewContextTable_Did:0)

   
typedef enum {
	pbXConContextHOCCAu3Num_none<s(0)(0)(0)>[&]=0,
	pbXConContextHOCCAu3Num_init<s(0)(0)(0)>[&]=1,
	pbXConContextHOCCAu3Num_sys<s(0)(0)(0)>[&]=2,
	pbXConContextHOCCAu3Num_card<s(0)(0)(0)>[&]=4,
	pbXConContextHOCCAu3Num_map<s(0)(0)(0)>[&]=8,
	pbXConContextHOCCAu3Num_poh<s(0)(0)(0)>[&]=16,
	pbXConContextHOCCAu3Num_connect<s(0)(0)(0)>[&]=32,
	pbXConContextHOCCAu3Num_context<s(0)(0)(0)>[&]=64,
	pbXConContextHOCCAu3Num_device<s(0)(0)(0)>[&]=128,
	pbXConContextHOCCAu3Num_ccprot<s(0)(0)(0)>[&]=256,
	pbXConContextHOCCAu3Num_sncp<s(0)(0)(0)>[&]=512,
	pbXConContextHOCCAu3Num_msp<s(0)(0)(0)>[&]=1024,
	pbXConContextHOCCAu3Num_msspr<s(0)(0)(0)>[&]=2048,
	pbXConContextHOCCAu3Num_ep<s(0)(0)(0)>[&]=4096,
	pbXConContextHOCCAu3Num_loccprot<s(0)(0)(0)>[&]=8192,
	pbXConContextHOCCAu3Num_pco<s(0)(0)(0)>[&]=16384,
	pbXConContextHOCCAu3Num_ccs<s(0)(0)(0)>[&]=32768,
	pbXConContextHOCCAu3Num_cca<s(0)(0)(0)>[&]=65536,
	pbXConContextHOCCAu3Num_gmpls<s(0)(0)(0)>[&]=131072,
	pbXConContextHOCCAu3Num_all<s(0)(0)(0)>[&]=1048575
} pbXConContextHOCCAu3Num_Tval<s(0)(0)(0)>[&];(D1:pbXConContextHOCCAu3Num_Tval:1)[[TYPENAME:pbXConContextHOCCAu3Num_Tval]]

typedef enum {
	pbXConContextHOCCAu3Step_none<s(0)(0)(0)>[&]=0,
	pbXConContextHOCCAu3Step_message<s(0)(0)(0)>[&]=1,
	pbXConContextHOCCAu3Step_module<s(0)(0)(0)>[&]=2,
	pbXConContextHOCCAu3Step_manager<s(0)(0)(0)>[&]=3,
	pbXConContextHOCCAu3Step_ucsl<s(0)(0)(0)>[&]=4,
	pbXConContextHOCCAu3Step_ldsl<s(0)(0)(0)>[&]=5,
	pbXConContextHOCCAu3Step_pdsl<s(0)(0)(0)>[&]=6,
	pbXConContextHOCCAu3Step_driver<s(0)(0)(0)>[&]=7,
	pbXConContextHOCCAu3Step_system<s(0)(0)(0)>[&]=8,
	pbXConContextHOCCAu3Step_simulator<s(0)(0)(0)>[&]=9
} pbXConContextHOCCAu3Step_Tval<s(0)(0)(0)>[&];(D1:pbXConContextHOCCAu3Step_Tval:1)[[TYPENAME:pbXConContextHOCCAu3Step_Tval]]

typedef struct
{
	int		pbXConContextLOCCBusNum<s(1)(1)(0)>[&];                                         
	int		pbXConContextLOCCAuNum<s(1)(1)(0)>[&];                                          
	pbXConContextHOCCAu3Num_Tval<s(1)(1)(0)>[T] pbXConContextHOCCAu3Num<s(1)(1)(0)>[&];
	pbXConContextHOCCAu3Step_Tval<s(1)(1)(0)>[T] pbXConContextHOCCAu3Step<s(1)(1)(0)>[&];
	int		pbXConContextHOCCAu3Count<s(1)(1)(0)>[&];
}MIBpbSdhXcNewContextTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhXcNewContextTable_t:1)[[TYPENAME:MIBpbSdhXcNewContextTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSdhXcNewLoMapTable_Did<s(0)(0)(0)>[&];(D1:pbSdhXcNewLoMapTable_Did:0)

   
typedef enum {
	gmplsReservationStatus_unreserved<s(0)(0)(0)>[&]=0,
	gmplsReservationStatus_reserved<s(0)(0)(0)>[&]=1
} gmplsReservationStatus_Tval<s(0)(0)(0)>[&];(D1:gmplsReservationStatus_Tval:1)[[TYPENAME:gmplsReservationStatus_Tval]]

typedef enum {
	gmplsReservationOperate_unreserve<s(0)(0)(0)>[&]=0,
	gmplsReservationOperate_reserve<s(0)(0)(0)>[&]=1
} gmplsReservationOperate_Tval<s(0)(0)(0)>[&];(D1:gmplsReservationOperate_Tval:1)[[TYPENAME:gmplsReservationOperate_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbXConLoMapLOCCSlot<s(1)(1)(0)>[&];                        
	PbPortType_Tval<s(1)(1)(0)>[T] pbXConLoMapLOCCPortType<s(1)(1)(0)>[&];                          
	int		pbXConLoMapLOCCPort<s(1)(1)(0)>[&];                                         
	int		pbXConLoMapHOCCIndex<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbXConLoMapLCSlot<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbXConLoMapLCPortType<s(1)(1)(0)>[&];
	int		pbXConLoMapLCPort<s(1)(1)(0)>[&];
	int		pbXConLoMapLCTP<s(1)(1)(0)>[&];
	gmplsReservationStatus_Tval<s(1)(1)(0)>[T] gmplsReservationStatus<s(1)(1)(0)>[&];
	gmplsReservationOperate_Tval<s(1)(1)(0)>[T] gmplsReservationOperate<s(1)(1)(0)>[&];
}MIBpbSdhXcNewLoMapTable_t<s(0)(0)(0)>[&];(D1:MIBpbSdhXcNewLoMapTable_t:1)[[TYPENAME:MIBpbSdhXcNewLoMapTable_t]]

















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbXcMigrationGroup_Did<s(0)(0)(0)>[&];(D1:pbXcMigrationGroup_Did:0)

   
typedef enum {
	pbXcMigrationCommand_none<s(0)(0)(0)>[&]=0,
	pbXcMigrationCommand_movePathToGmpls<s(0)(0)(0)>[&]=1,
	pbXcMigrationCommand_confirmPathToGmpls<s(0)(0)(0)>[&]=2,
	pbXcMigrationCommand_abortPathToGmpls<s(0)(0)(0)>[&]=3
} pbXcMigrationCommand_Tval<s(0)(0)(0)>[&];(D1:pbXcMigrationCommand_Tval:1)[[TYPENAME:pbXcMigrationCommand_Tval]]

typedef enum {
	pbXcMigrationStatus_unknown<s(0)(0)(0)>[&]=0,
	pbXcMigrationStatus_successful<s(0)(0)(0)>[&]=1,
	pbXcMigrationStatus_failed<s(0)(0)(0)>[&]=2
} pbXcMigrationStatus_Tval<s(0)(0)(0)>[&];(D1:pbXcMigrationStatus_Tval:1)[[TYPENAME:pbXcMigrationStatus_Tval]]

typedef struct
{
	int		pbForwardXcId<s(1)(1)(0)>[&];
	int		pbReverseXcId<s(1)(1)(0)>[&];
	pbXcMigrationCommand_Tval<s(1)(1)(0)>[T] pbXcMigrationCommand<s(1)(1)(0)>[&];
	pbXcMigrationStatus_Tval<s(1)(1)(0)>[T] pbXcMigrationStatus<s(1)(1)(0)>[&];
}MIBpbXcMigrationGroup_t<s(0)(0)(0)>[&];(D1:MIBpbXcMigrationGroup_t:1)[[TYPENAME:MIBpbXcMigrationGroup_t]]









 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbXCContextModule_Did<s(0)(0)(0)>[&];(D1:pbXCContextModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMSRefSourceTable_Did<s(0)(0)(0)>[&];(D1:pbTMSRefSourceTable_Did:0)

   
typedef struct
{
	int		pbTMSRefSourceIndex<s(1)(1)(0)>[&];                                            
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbTMSRefSourceSlot<s(1)(1)(0)>[&];   
	int		pbTMSRefSourcePort<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSRefSourceMonitored<s(1)(1)(0)>[&];   
	PbTMSSignalStatus_Tval<s(1)(1)(0)>[T] pbTMSSignalStatus<s(1)(1)(0)>[&];   
	int		pbTMSRefSourcePriority<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSRefSourceLockOut<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSRefSourceQlIn<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSRefSourceQl<s(1)(1)(0)>[&];   
	PbTMSQLMode_Tval<s(1)(1)(0)>[T] pbTMSQlProvionedMode<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSQlProvioned<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSRefSourceValid<s(1)(1)(0)>[&];   
	int		pbTMSRefSourceWTR<s(1)(1)(0)>[&];   
	TMSIfSdhQlType_Tval<s(1)(1)(0)>[T] tMSIfSdhQLType<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] tMSRefSourceQLOut<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] tMSForceDnu<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] tMSSupportQlOut<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] tMSPortType<s(1)(1)(0)>[&];   
	int		tmsRefSourceFDUpband<s(1)(1)(0)>[&];   
	int		tmsRefSourceFDLowband<s(1)(1)(0)>[&];   
	int		tmsRefSourceFDValue<s(1)(1)(0)>[&];   
	int		tmsStoredDrvClkNum<s(1)(1)(0)>[&];   
}MIBpbTMSRefSourceTable_t<s(0)(0)(0)>[&];(D1:MIBpbTMSRefSourceTable_t:1)[[TYPENAME:MIBpbTMSRefSourceTable_t]]





























 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMSSysTimingGroup_Did<s(0)(0)(0)>[&];(D1:pbTMSSysTimingGroup_Did:0)

   
typedef enum {
	pbTMSTimingState_locked<s(0)(0)(0)>[&]=1,
	pbTMSTimingState_freerunning<s(0)(0)(0)>[&]=2,
	pbTMSTimingState_holdover<s(0)(0)(0)>[&]=3
} pbTMSTimingState_Tval<s(0)(0)(0)>[&];(D1:pbTMSTimingState_Tval:1)[[TYPENAME:pbTMSTimingState_Tval]]

typedef enum {
	pbTMSSysTimingMode_autoselection<s(0)(0)(0)>[&]=1,
	pbTMSSysTimingMode_freerunning<s(0)(0)(0)>[&]=2,
	pbTMSSysTimingMode_holdover<s(0)(0)(0)>[&]=3
} pbTMSSysTimingMode_Tval<s(0)(0)(0)>[&];(D1:pbTMSSysTimingMode_Tval:1)[[TYPENAME:pbTMSSysTimingMode_Tval]]

typedef enum {
	pbTMSSwitchRequestStatus_inactive<s(0)(0)(0)>[&]=0,
	pbTMSSwitchRequestStatus_ok<s(0)(0)(0)>[&]=1,
	pbTMSSwitchRequestStatus_other_fail<s(0)(0)(0)>[&]=2,
	pbTMSSwitchRequestStatus_dis_fail<s(0)(0)(0)>[&]=3,
	pbTMSSwitchRequestStatus_lock_fail<s(0)(0)(0)>[&]=4,
	pbTMSSwitchRequestStatus_fs_fail<s(0)(0)(0)>[&]=5,
	pbTMSSwitchRequestStatus_sf_fail<s(0)(0)(0)>[&]=6,
	pbTMSSwitchRequestStatus_ql_dnu<s(0)(0)(0)>[&]=7,
	pbTMSSwitchRequestStatus_ql_low<s(0)(0)(0)>[&]=8
} pbTMSSwitchRequestStatus_Tval<s(0)(0)(0)>[&];(D1:pbTMSSwitchRequestStatus_Tval:1)[[TYPENAME:pbTMSSwitchRequestStatus_Tval]]

typedef struct
{
	int		pbTMSSwitchRequest<s(1)(1)(0)>[&];   
	int		pbTMSActiveTimingSource<s(1)(1)(0)>[&];   
	pbTMSTimingState_Tval<s(1)(1)(0)>[T] pbTMSTimingState<s(1)(1)(0)>[&];   
	pbTMSSysTimingMode_Tval<s(1)(1)(0)>[T] pbTMSSysTimingMode<s(1)(1)(0)>[&];   
	pbTMSSwitchRequestStatus_Tval<s(1)(1)(0)>[T] pbTMSSwitchRequestStatus<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	pbTMSHoldoverDTS<s(1)(1)(0)>[&];   
	int		pbTMSStaClkOutSource<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSQlEnabled<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSExpectedSMMB<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSStClkAutoLoopPrevention<s(1)(1)(0)>[&];   
	int		tmsSysSrcFDThreshold<s(1)(1)(0)>[&];   
	int		tmsSysFDValue<s(1)(1)(0)>[&];   
}MIBpbTMSSysTimingGroup_t<s(0)(0)(0)>[&];(D1:MIBpbTMSSysTimingGroup_t:1)[[TYPENAME:MIBpbTMSSysTimingGroup_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMSStClkInTable_Did<s(0)(0)(0)>[&];(D1:pbTMSStClkInTable_Did:0)

   
typedef struct
{
	TmsRefSourceNum_Tval<s(1)(1)(0)>[T] pbTMSStClkInIndex<s(1)(1)(0)>[&];                          
	PbTMSStClkType_Tval<s(1)(1)(0)>[T] pbTMSStClkInType<s(1)(1)(0)>[&];   
	PbTMSMonitorMode_Tval<s(1)(1)(0)>[T] pbTMSStClkInMonitored<s(1)(1)(0)>[&];   
	PbTMSSetSa_Tval<s(1)(1)(0)>[T] pbTMSStClkInSaBit<s(1)(1)(0)>[&];   
	TMSStClkOhm_Tval<s(1)(1)(0)>[T] tMSStClkInOhm<s(1)(1)(0)>[&];   
}MIBpbTMSStClkInTable_t<s(0)(0)(0)>[&];(D1:MIBpbTMSStClkInTable_t:1)[[TYPENAME:MIBpbTMSStClkInTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMSStClkOutTable_Did<s(0)(0)(0)>[&];(D1:pbTMSStClkOutTable_Did:0)

   
typedef struct
{
	TmsRefSourceNum_Tval<s(1)(1)(0)>[T] pbTMSStClkOutIndex<s(1)(1)(0)>[&];                               
	PbTMSStClkType_Tval<s(1)(1)(0)>[T] pbTMSStClkOutType<s(1)(1)(0)>[&];   
	PbYesNo_Tval<s(1)(1)(0)>[T] pbTMSStClkOutMonitored<s(1)(1)(0)>[&];   
	PbTMSSetSa_Tval<s(1)(1)(0)>[T] pbTMSStClkOutSaBit<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSStClkOutQlThreshold<s(1)(1)(0)>[&];   
	PbTMSSquelchMode_Tval<s(1)(1)(0)>[T] pbTMSStClkOutSquelchMode<s(1)(1)(0)>[&];   
	TMSStClkOhm_Tval<s(1)(1)(0)>[T] tMSStClkOutOhm<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSStClkOutQlIn<s(1)(1)(0)>[&];   
	PbTMSQl_Tval<s(1)(1)(0)>[T] pbTMSStClkOutQl<s(1)(1)(0)>[&];   
	PbTMSOutActType_Tval<s(1)(1)(0)>[T] tmsStClkOutputMode<s(1)(1)(0)>[&];   
	PbTMSOutState_Tval<s(1)(1)(0)>[T] pbTMSStClkOutState<s(1)(1)(0)>[&];   
}MIBpbTMSStClkOutTable_t<s(0)(0)(0)>[&];(D1:MIBpbTMSStClkOutTable_t:1)[[TYPENAME:MIBpbTMSStClkOutTable_t]]


















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbTMSModule_Did<s(0)(0)(0)>[&];(D1:pbTMSModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthGlobalPortTable_Did<s(0)(0)(0)>[&];(D1:pbEthGlobalPortTable_Did:0)

   
typedef enum {
	pbPortTagProtocol_iEEE802<s(0)(0)(0)>[&]=0,
	pbPortTagProtocol_doubleTag<s(0)(0)(0)>[&]=1,
	pbPortTagProtocol_tunneling<s(0)(0)(0)>[&]=2
} pbPortTagProtocol_Tval<s(0)(0)(0)>[&];(D1:pbPortTagProtocol_Tval:1)[[TYPENAME:pbPortTagProtocol_Tval]]

typedef enum {
	pbEthACLType_filter<s(0)(0)(0)>[&]=1,
	pbEthACLType_forward<s(0)(0)(0)>[&]=2
} pbEthACLType_Tval<s(0)(0)(0)>[&];(D1:pbEthACLType_Tval:1)[[TYPENAME:pbEthACLType_Tval]]

typedef enum {
	pbEthBroadcastEnableHol_disable<s(0)(0)(0)>[&]=0,
	pbEthBroadcastEnableHol_enable<s(0)(0)(0)>[&]=1
} pbEthBroadcastEnableHol_Tval<s(0)(0)(0)>[&];(D1:pbEthBroadcastEnableHol_Tval:1)[[TYPENAME:pbEthBroadcastEnableHol_Tval]]

typedef enum {
	pbEthQoSIEEE802Version_version2004<s(0)(0)(0)>[&]=0,
	pbEthQoSIEEE802Version_version2005<s(0)(0)(0)>[&]=1
} pbEthQoSIEEE802Version_Tval<s(0)(0)(0)>[&];(D1:pbEthQoSIEEE802Version_Tval:1)[[TYPENAME:pbEthQoSIEEE802Version_Tval]]

typedef enum {
	pbEthChangeCoSMode_onlyCos<s(0)(0)(0)>[&]=0,
	pbEthChangeCoSMode_cosAndPriority<s(0)(0)(0)>[&]=1
} pbEthChangeCoSMode_Tval<s(0)(0)(0)>[&];(D1:pbEthChangeCoSMode_Tval:1)[[TYPENAME:pbEthChangeCoSMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	pbPortTagProtocol_Tval<s(1)(1)(0)>[T] pbPortTagProtocol<s(1)(1)(0)>[&];   
	int		pbAgingTime<s(1)(1)(0)>[&];   
	int		pbIPGConfig<s(1)(1)(0)>[&];   
	int		pbVlanTagProtocolType_len<s(1)(1)(0)>[&];
	char		pbVlanTagProtocolType<s(1)(1)(0)>[&][2];   
	int		pbMTUSize<s(1)(1)(0)>[&];   
	pbEthACLType_Tval<s(1)(1)(0)>[T] pbEthACLType<s(1)(1)(0)>[&];   
	pbEthBroadcastEnableHol_Tval<s(1)(1)(0)>[T] pbEthBroadcastEnableHol<s(1)(1)(0)>[&];   
	int		pbEthTunnelingRxTPID_len<s(1)(1)(0)>[&];
	char		pbEthTunnelingRxTPID<s(1)(1)(0)>[&][2];   
	pbEthQoSIEEE802Version_Tval<s(1)(1)(0)>[T] pbEthQoSIEEE802Version<s(1)(1)(0)>[&];   
	pbEthChangeCoSMode_Tval<s(1)(1)(0)>[T] pbEthChangeCoSMode<s(1)(1)(0)>[&];
	unsigned int	pbEthLabelBase<s(1)(1)(0)>[&];   
	int		pbEthWredDropProbability<s(1)(1)(0)>[&];   
}MIBpbEthGlobalPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthGlobalPortTable_t:1)[[TYPENAME:MIBpbEthGlobalPortTable_t]]




















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthConfigTable_Did<s(0)(0)(0)>[&];(D1:pbEthConfigTable_Did:0)

   
typedef enum {
	pbEthPortType_ge<s(0)(0)(0)>[&]=8,
	pbEthPortType_fe<s(0)(0)(0)>[&]=7,
	pbEthPortType_tenge<s(0)(0)(0)>[&]=25,
	pbEthPortType_fiber_channel<s(0)(0)(0)>[&]=26
} pbEthPortType_Tval<s(0)(0)(0)>[&];(D1:pbEthPortType_Tval:1)[[TYPENAME:pbEthPortType_Tval]]

typedef enum {
	pbEthPortAdminStatus_up<s(0)(0)(0)>[&]=1,
	pbEthPortAdminStatus_down<s(0)(0)(0)>[&]=0
} pbEthPortAdminStatus_Tval<s(0)(0)(0)>[&];(D1:pbEthPortAdminStatus_Tval:1)[[TYPENAME:pbEthPortAdminStatus_Tval]]

typedef enum {
	pbPortLinkStatus_up<s(0)(0)(0)>[&]=1,
	pbPortLinkStatus_down<s(0)(0)(0)>[&]=0
} pbPortLinkStatus_Tval<s(0)(0)(0)>[&];(D1:pbPortLinkStatus_Tval:1)[[TYPENAME:pbPortLinkStatus_Tval]]

typedef enum {
	pbEthPortAutoNego_enable<s(0)(0)(0)>[&]=1,
	pbEthPortAutoNego_disable<s(0)(0)(0)>[&]=0
} pbEthPortAutoNego_Tval<s(0)(0)(0)>[&];(D1:pbEthPortAutoNego_Tval:1)[[TYPENAME:pbEthPortAutoNego_Tval]]

typedef enum {
	pbEthPortFlowControl_enable<s(0)(0)(0)>[&]=1,
	pbEthPortFlowControl_disable<s(0)(0)(0)>[&]=0
} pbEthPortFlowControl_Tval<s(0)(0)(0)>[&];(D1:pbEthPortFlowControl_Tval:1)[[TYPENAME:pbEthPortFlowControl_Tval]]

typedef enum {
	pbEthPortSpeed_s10M<s(0)(0)(0)>[&]=1,
	pbEthPortSpeed_s100M<s(0)(0)(0)>[&]=2,
	pbEthPortSpeed_s1G<s(0)(0)(0)>[&]=3,
	pbEthPortSpeed_s10G<s(0)(0)(0)>[&]=4,
	pbEthPortSpeed_fc1G<s(0)(0)(0)>[&]=5,
	pbEthPortSpeed_fc2G<s(0)(0)(0)>[&]=6,
	pbEthPortSpeed_fc4G<s(0)(0)(0)>[&]=7
} pbEthPortSpeed_Tval<s(0)(0)(0)>[&];(D1:pbEthPortSpeed_Tval:1)[[TYPENAME:pbEthPortSpeed_Tval]]

typedef enum {
	pbEthPortDuplex_full<s(0)(0)(0)>[&]=1,
	pbEthPortDuplex_half<s(0)(0)(0)>[&]=0
} pbEthPortDuplex_Tval<s(0)(0)(0)>[&];(D1:pbEthPortDuplex_Tval:1)[[TYPENAME:pbEthPortDuplex_Tval]]

typedef enum {
	pbUnTagMode_untag<s(0)(0)(0)>[&]=0,
	pbUnTagMode_tag<s(0)(0)(0)>[&]=1
} pbUnTagMode_Tval<s(0)(0)(0)>[&];(D1:pbUnTagMode_Tval:1)[[TYPENAME:pbUnTagMode_Tval]]

typedef enum {
	pbEthPortMode_auto<s(0)(0)(0)>[&]=1,
	pbEthPortMode_mon<s(0)(0)(0)>[&]=2,
	pbEthPortMode_nmon<s(0)(0)(0)>[&]=3
} pbEthPortMode_Tval<s(0)(0)(0)>[&];(D1:pbEthPortMode_Tval:1)[[TYPENAME:pbEthPortMode_Tval]]

typedef enum {
	pbPortDefaultVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbPortDefaultVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbPortDefaultVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbPortDefaultVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbPortDefaultVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbPortDefaultVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbPortDefaultVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbPortDefaultVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbPortDefaultVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbPortDefaultVlanPriority_Tval:1)[[TYPENAME:pbPortDefaultVlanPriority_Tval]]

typedef enum {
	pbLanTxPriAlg_wRR<s(0)(0)(0)>[&]=0,
	pbLanTxPriAlg_sP1_WRR3<s(0)(0)(0)>[&]=1,
	pbLanTxPriAlg_sP2_WRR2<s(0)(0)(0)>[&]=2,
	pbLanTxPriAlg_sP<s(0)(0)(0)>[&]=3,
	pbLanTxPriAlg_wFQ<s(0)(0)(0)>[&]=4
} pbLanTxPriAlg_Tval<s(0)(0)(0)>[&];(D1:pbLanTxPriAlg_Tval:1)[[TYPENAME:pbLanTxPriAlg_Tval]]

typedef enum {
	pbEthPortLoopback_none<s(0)(0)(0)>[&]=0,
	pbEthPortLoopback_incoming<s(0)(0)(0)>[&]=1,
	pbEthPortLoopback_outgoing<s(0)(0)(0)>[&]=2
} pbEthPortLoopback_Tval<s(0)(0)(0)>[&];(D1:pbEthPortLoopback_Tval:1)[[TYPENAME:pbEthPortLoopback_Tval]]

typedef enum {
	pbEthTxEnableHol_disable<s(0)(0)(0)>[&]=0,
	pbEthTxEnableHol_enable<s(0)(0)(0)>[&]=1
} pbEthTxEnableHol_Tval<s(0)(0)(0)>[&];(D1:pbEthTxEnableHol_Tval:1)[[TYPENAME:pbEthTxEnableHol_Tval]]

typedef enum {
	pbEthAlsMode_no_command<s(0)(0)(0)>[&]=0,
	pbEthAlsMode_manual_restart<s(0)(0)(0)>[&]=1,
	pbEthAlsMode_manual_test<s(0)(0)(0)>[&]=2
} pbEthAlsMode_Tval<s(0)(0)(0)>[&];(D1:pbEthAlsMode_Tval:1)[[TYPENAME:pbEthAlsMode_Tval]]

typedef enum {
	ethMDIorMDIX_autoCrossover<s(0)(0)(0)>[&]=0,
	ethMDIorMDIX_mdix<s(0)(0)(0)>[&]=1,
	ethMDIorMDIX_mdi<s(0)(0)(0)>[&]=2
} ethMDIorMDIX_Tval<s(0)(0)(0)>[&];(D1:ethMDIorMDIX_Tval:1)[[TYPENAME:ethMDIorMDIX_Tval]]

typedef enum {
	pbLanChangeCoS_be<s(0)(0)(0)>[&]=0,
	pbLanChangeCoS_bk<s(0)(0)(0)>[&]=1,
	pbLanChangeCoS_sp<s(0)(0)(0)>[&]=2,
	pbLanChangeCoS_ee<s(0)(0)(0)>[&]=3,
	pbLanChangeCoS_cl<s(0)(0)(0)>[&]=4,
	pbLanChangeCoS_vi<s(0)(0)(0)>[&]=5,
	pbLanChangeCoS_vo<s(0)(0)(0)>[&]=6,
	pbLanChangeCoS_nc<s(0)(0)(0)>[&]=7,
	pbLanChangeCoS_not_change<s(0)(0)(0)>[&]=8
} pbLanChangeCoS_Tval<s(0)(0)(0)>[&];(D1:pbLanChangeCoS_Tval:1)[[TYPENAME:pbLanChangeCoS_Tval]]

typedef enum {
	pbLanQinQStatus_disable<s(0)(0)(0)>[&]=0,
	pbLanQinQStatus_enable<s(0)(0)(0)>[&]=1
} pbLanQinQStatus_Tval<s(0)(0)(0)>[&];(D1:pbLanQinQStatus_Tval:1)[[TYPENAME:pbLanQinQStatus_Tval]]

typedef enum {
	pbLanQinQNewVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbLanQinQNewVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbLanQinQNewVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbLanQinQNewVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbLanQinQNewVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbLanQinQNewVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbLanQinQNewVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbLanQinQNewVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbLanQinQNewVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbLanQinQNewVlanPriority_Tval:1)[[TYPENAME:pbLanQinQNewVlanPriority_Tval]]

typedef enum {
	pbEthPortClassifier_non_gmpls<s(0)(0)(0)>[&]=0,
	pbEthPortClassifier_i_nni<s(0)(0)(0)>[&]=1,
	pbEthPortClassifier_e_nni<s(0)(0)(0)>[&]=2,
	pbEthPortClassifier_uni10<s(0)(0)(0)>[&]=3,
	pbEthPortClassifier_uni20<s(0)(0)(0)>[&]=4
} pbEthPortClassifier_Tval<s(0)(0)(0)>[&];(D1:pbEthPortClassifier_Tval:1)[[TYPENAME:pbEthPortClassifier_Tval]]

typedef enum {
	pbEthPortWorkMode_ethernetMode<s(0)(0)(0)>[&]=0,
	pbEthPortWorkMode_mplsMode<s(0)(0)(0)>[&]=1
} pbEthPortWorkMode_Tval<s(0)(0)(0)>[&];(D1:pbEthPortWorkMode_Tval:1)[[TYPENAME:pbEthPortWorkMode_Tval]]

typedef enum {
	pbSFPWorkMode_fx<s(0)(0)(0)>[&]=0,
	pbSFPWorkMode_t<s(0)(0)(0)>[&]=1,
	pbSFPWorkMode_fx100<s(0)(0)(0)>[&]=2,
	pbSFPWorkMode_xfp10G<s(0)(0)(0)>[&]=3
} pbSFPWorkMode_Tval<s(0)(0)(0)>[&];(D1:pbSFPWorkMode_Tval:1)[[TYPENAME:pbSFPWorkMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	pbEthPortType_Tval<s(1)(1)(0)>[T] pbEthPortType<s(1)(1)(0)>[&];   
	pbEthPortAdminStatus_Tval<s(1)(1)(0)>[T] pbEthPortAdminStatus<s(1)(1)(0)>[&];   
	pbPortLinkStatus_Tval<s(1)(1)(0)>[T] pbPortLinkStatus<s(1)(1)(0)>[&];   
	pbEthPortAutoNego_Tval<s(1)(1)(0)>[T] pbEthPortAutoNego<s(1)(1)(0)>[&];   
	pbEthPortFlowControl_Tval<s(1)(1)(0)>[T] pbEthPortFlowControl<s(1)(1)(0)>[&];   
	pbEthPortSpeed_Tval<s(1)(1)(0)>[T] pbEthPortSpeed<s(1)(1)(0)>[&];   
	pbEthPortDuplex_Tval<s(1)(1)(0)>[T] pbEthPortDuplex<s(1)(1)(0)>[&];   
	char		pbEthPortVlan<s(1)(1)(0)>[&][255];   
	int		pbEthPortPvid<s(1)(1)(0)>[&];   
	pbUnTagMode_Tval<s(1)(1)(0)>[T] pbUnTagMode<s(1)(1)(0)>[&];   
	int		pbPortInputRateLimit<s(1)(1)(0)>[&];   
	pbEthPortMode_Tval<s(1)(1)(0)>[T] pbEthPortMode<s(1)(1)(0)>[&];   
	int		pbEthPortBroadCastRateLimit<s(1)(1)(0)>[&];   
	pbPortDefaultVlanPriority_Tval<s(1)(1)(0)>[T] pbPortDefaultVlanPriority<s(1)(1)(0)>[&];   
	char		pbEthPortLabel<s(1)(1)(0)>[&][20];   
	pbLanTxPriAlg_Tval<s(1)(1)(0)>[T] pbLanTxPriAlg<s(1)(1)(0)>[&];   
	char		pbLanTaggedVlan<s(1)(1)(0)>[&][255];   
	pbEthPortLoopback_Tval<s(1)(1)(0)>[T] pbEthPortLoopback<s(1)(1)(0)>[&];   
	pbEthTxEnableHol_Tval<s(1)(1)(0)>[T] pbEthTxEnableHol<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthAutoLaserShutdown<s(1)(1)(0)>[&];   
	pbEthAlsMode_Tval<s(1)(1)(0)>[T] pbEthAlsMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthPortAlarmDisable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] ethPortOnCSF<s(1)(1)(0)>[&];   
	ethMDIorMDIX_Tval<s(1)(1)(0)>[T] ethMDIorMDIX<s(1)(1)(0)>[&];   
	pbLanChangeCoS_Tval<s(1)(1)(0)>[T] pbLanChangeCoS<s(1)(1)(0)>[&];   
	pbLanQinQStatus_Tval<s(1)(1)(0)>[T] pbLanQinQStatus<s(1)(1)(0)>[&];   
	int		pbLanQinQNewVlan<s(1)(1)(0)>[&];   
	pbLanQinQNewVlanPriority_Tval<s(1)(1)(0)>[T] pbLanQinQNewVlanPriority<s(1)(1)(0)>[&];   
	int		pbLanTPID_len<s(1)(1)(0)>[&];
	char		pbLanTPID<s(1)(1)(0)>[&][2];   
	char		pbLanMirrorPort<s(1)(1)(0)>[&][8];   
	pbEthPortClassifier_Tval<s(1)(1)(0)>[T] pbEthPortClassifier<s(1)(1)(0)>[&];
	pbEthPortWorkMode_Tval<s(1)(1)(0)>[T] pbEthPortWorkMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthEnableWred<s(1)(1)(0)>[&];   
	pbSFPWorkMode_Tval<s(1)(1)(0)>[T] pbSFPWorkMode<s(1)(1)(0)>[&];   
}MIBpbEthConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthConfigTable_t:1)[[TYPENAME:MIBpbEthConfigTable_t]]











































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthWanConfigTable_Did<s(0)(0)(0)>[&];(D1:pbEthWanConfigTable_Did:0)

   
typedef enum {
	pbWanDefaultVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbWanDefaultVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbWanDefaultVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbWanDefaultVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbWanDefaultVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbWanDefaultVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbWanDefaultVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbWanDefaultVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbWanDefaultVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbWanDefaultVlanPriority_Tval:1)[[TYPENAME:pbWanDefaultVlanPriority_Tval]]

typedef enum {
	pbWanChangeCoS_be<s(0)(0)(0)>[&]=0,
	pbWanChangeCoS_bk<s(0)(0)(0)>[&]=1,
	pbWanChangeCoS_sp<s(0)(0)(0)>[&]=2,
	pbWanChangeCoS_ee<s(0)(0)(0)>[&]=3,
	pbWanChangeCoS_cl<s(0)(0)(0)>[&]=4,
	pbWanChangeCoS_vi<s(0)(0)(0)>[&]=5,
	pbWanChangeCoS_vo<s(0)(0)(0)>[&]=6,
	pbWanChangeCoS_nc<s(0)(0)(0)>[&]=7,
	pbWanChangeCoS_not_change<s(0)(0)(0)>[&]=8
} pbWanChangeCoS_Tval<s(0)(0)(0)>[&];(D1:pbWanChangeCoS_Tval:1)[[TYPENAME:pbWanChangeCoS_Tval]]

typedef enum {
	pbWanTagMode_untag<s(0)(0)(0)>[&]=0,
	pbWanTagMode_tag<s(0)(0)(0)>[&]=1
} pbWanTagMode_Tval<s(0)(0)(0)>[&];(D1:pbWanTagMode_Tval:1)[[TYPENAME:pbWanTagMode_Tval]]

typedef enum {
	pbWanFlowControl_enable<s(0)(0)(0)>[&]=1,
	pbWanFlowControl_disable<s(0)(0)(0)>[&]=0
} pbWanFlowControl_Tval<s(0)(0)(0)>[&];(D1:pbWanFlowControl_Tval:1)[[TYPENAME:pbWanFlowControl_Tval]]

typedef enum {
	pbWanTxPriAlg_wRR<s(0)(0)(0)>[&]=0,
	pbWanTxPriAlg_sP1_WRR3<s(0)(0)(0)>[&]=1,
	pbWanTxPriAlg_sP2_WRR2<s(0)(0)(0)>[&]=2,
	pbWanTxPriAlg_sP<s(0)(0)(0)>[&]=3,
	pbWanTxPriAlg_wFQ<s(0)(0)(0)>[&]=4
} pbWanTxPriAlg_Tval<s(0)(0)(0)>[&];(D1:pbWanTxPriAlg_Tval:1)[[TYPENAME:pbWanTxPriAlg_Tval]]

typedef enum {
	pbWanTxEnableHol_disable<s(0)(0)(0)>[&]=0,
	pbWanTxEnableHol_enable<s(0)(0)(0)>[&]=1
} pbWanTxEnableHol_Tval<s(0)(0)(0)>[&];(D1:pbWanTxEnableHol_Tval:1)[[TYPENAME:pbWanTxEnableHol_Tval]]

typedef enum {
	pbWanQinQStatus_disable<s(0)(0)(0)>[&]=0,
	pbWanQinQStatus_enable<s(0)(0)(0)>[&]=1
} pbWanQinQStatus_Tval<s(0)(0)(0)>[&];(D1:pbWanQinQStatus_Tval:1)[[TYPENAME:pbWanQinQStatus_Tval]]

typedef enum {
	pbWanQinQNewVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbWanQinQNewVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbWanQinQNewVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbWanQinQNewVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbWanQinQNewVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbWanQinQNewVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbWanQinQNewVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbWanQinQNewVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbWanQinQNewVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbWanQinQNewVlanPriority_Tval:1)[[TYPENAME:pbWanQinQNewVlanPriority_Tval]]

typedef enum {
	pbWanLinkStatus_down<s(0)(0)(0)>[&]=0,
	pbWanLinkStatus_up<s(0)(0)(0)>[&]=1
} pbWanLinkStatus_Tval<s(0)(0)(0)>[&];(D1:pbWanLinkStatus_Tval:1)[[TYPENAME:pbWanLinkStatus_Tval]]

typedef enum {
	pbWanPortWorkMode_ethernetMode<s(0)(0)(0)>[&]=0,
	pbWanPortWorkMode_mplsMode<s(0)(0)(0)>[&]=1
} pbWanPortWorkMode_Tval<s(0)(0)(0)>[&];(D1:pbWanPortWorkMode_Tval:1)[[TYPENAME:pbWanPortWorkMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		pbPortNo<s(1)(1)(0)>[&];                                                      
	char		pbWanLabel<s(1)(1)(0)>[&][20];   
	char		pbWanVlanList<s(1)(1)(0)>[&][255];   
	char		pbWanTaggedVlanList<s(1)(1)(0)>[&][255];   
	pbWanDefaultVlanPriority_Tval<s(1)(1)(0)>[T] pbWanDefaultVlanPriority<s(1)(1)(0)>[&];   
	pbWanChangeCoS_Tval<s(1)(1)(0)>[T] pbWanChangeCoS<s(1)(1)(0)>[&];   
	int		pbWanPvid<s(1)(1)(0)>[&];   
	pbWanTagMode_Tval<s(1)(1)(0)>[T] pbWanTagMode<s(1)(1)(0)>[&];   
	pbWanFlowControl_Tval<s(1)(1)(0)>[T] pbWanFlowControl<s(1)(1)(0)>[&];   
	pbWanTxPriAlg_Tval<s(1)(1)(0)>[T] pbWanTxPriAlg<s(1)(1)(0)>[&];   
	pbWanTxEnableHol_Tval<s(1)(1)(0)>[T] pbWanTxEnableHol<s(1)(1)(0)>[&];   
	pbWanQinQStatus_Tval<s(1)(1)(0)>[T] pbWanQinQStatus<s(1)(1)(0)>[&];   
	int		pbWanQinQNewVlan<s(1)(1)(0)>[&];   
	pbWanQinQNewVlanPriority_Tval<s(1)(1)(0)>[T] pbWanQinQNewVlanPriority<s(1)(1)(0)>[&];   
	int		pbWanTPID_len<s(1)(1)(0)>[&];
	char		pbWanTPID<s(1)(1)(0)>[&][2];   
	char		pbWanMirrorPort<s(1)(1)(0)>[&][8];   
	pbWanLinkStatus_Tval<s(1)(1)(0)>[T] pbWanLinkStatus<s(1)(1)(0)>[&];   
	pbWanPortWorkMode_Tval<s(1)(1)(0)>[T] pbWanPortWorkMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbWanEnableWred<s(1)(1)(0)>[&];   
}MIBpbEthWanConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthWanConfigTable_t:1)[[TYPENAME:MIBpbEthWanConfigTable_t]]



























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthStaticMACTable_Did<s(0)(0)(0)>[&];(D1:pbEthStaticMACTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	char		pbMACEntryMacAddr<s(1)(1)(0)>[&][20];                                 
	int		pbMACEntryVid<s(1)(1)(0)>[&];                                          
	char		pbMACEntryPort<s(1)(1)(0)>[&][8];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMACEntryTagged<s(1)(1)(0)>[&];   
	int		pbMACEntryIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbMACEntryRowStatus<s(1)(1)(0)>[&];   
}MIBpbEthStaticMACTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthStaticMACTable_t:1)[[TYPENAME:MIBpbEthStaticMACTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthStaticMulticastTable_Did<s(0)(0)(0)>[&];(D1:pbEthStaticMulticastTable_Did:0)

   
typedef enum {
	pbStaticMulticastForGmrp_notForGmrp<s(0)(0)(0)>[&]=0,
	pbStaticMulticastForGmrp_forGmrp<s(0)(0)(0)>[&]=1
} pbStaticMulticastForGmrp_Tval<s(0)(0)(0)>[&];(D1:pbStaticMulticastForGmrp_Tval:1)[[TYPENAME:pbStaticMulticastForGmrp_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	char		pbStaticMulticastMacAddr<s(1)(1)(0)>[&][20];                                        
	int		pbStaticMulticastVlan<s(1)(1)(0)>[&];                                                
	char		pbStaticMulticastPortList<s(1)(1)(0)>[&][64];   
	int		pbStaticMulticastIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbStaticMulticastRowStatus<s(1)(1)(0)>[&];   
	pbStaticMulticastForGmrp_Tval<s(1)(1)(0)>[T] pbStaticMulticastForGmrp<s(1)(1)(0)>[&];   
}MIBpbEthStaticMulticastTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthStaticMulticastTable_t:1)[[TYPENAME:MIBpbEthStaticMulticastTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbVlanPortCoSTable_Did<s(0)(0)(0)>[&];(D1:pbVlanPortCoSTable_Did:0)

   
typedef enum {
	pbEthVlanCoS_be<s(0)(0)(0)>[&]=0,
	pbEthVlanCoS_bk<s(0)(0)(0)>[&]=1,
	pbEthVlanCoS_sp<s(0)(0)(0)>[&]=2,
	pbEthVlanCoS_ee<s(0)(0)(0)>[&]=3,
	pbEthVlanCoS_cl<s(0)(0)(0)>[&]=4,
	pbEthVlanCoS_vi<s(0)(0)(0)>[&]=5,
	pbEthVlanCoS_vo<s(0)(0)(0)>[&]=6,
	pbEthVlanCoS_nc<s(0)(0)(0)>[&]=7,
	pbEthVlanCoS_none<s(0)(0)(0)>[&]=8
} pbEthVlanCoS_Tval<s(0)(0)(0)>[&];(D1:pbEthVlanCoS_Tval:1)[[TYPENAME:pbEthVlanCoS_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	int		pbPortNo<s(1)(1)(0)>[&];                                                        
	PbEthPortClass_Tval<s(1)(1)(0)>[T] pbEthPortCls<s(1)(1)(0)>[&];                                        
	int		pbEthVlan<s(1)(1)(0)>[&];                                                          
	int		pbEthRateLimitValue<s(1)(1)(0)>[&];   
	pbEthVlanCoS_Tval<s(1)(1)(0)>[T] pbEthVlanCoS<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanDisable<s(1)(1)(0)>[&];   
	char		pbEthRedirectionPort<s(1)(1)(0)>[&][8];   
	int		pbVlanPortCoSIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthVlanPortCoSRowStatus<s(1)(1)(0)>[&];   
	int		pbEthVlanPolicingID<s(1)(1)(0)>[&];   
	int		pbEthVlanColorID<s(1)(1)(0)>[&];   
}MIBpbVlanPortCoSTable_t<s(0)(0)(0)>[&];(D1:MIBpbVlanPortCoSTable_t:1)[[TYPENAME:MIBpbVlanPortCoSTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthVlanNameTable_Did<s(0)(0)(0)>[&];(D1:pbEthVlanNameTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	int		pbEthNamedVlan<s(1)(1)(0)>[&];                                                       
	char		pbEthVlanName<s(1)(1)(0)>[&][30];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthVlanRowStatus<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthVlanEnableMacLearning<s(1)(1)(0)>[&];   
}MIBpbEthVlanNameTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthVlanNameTable_t:1)[[TYPENAME:MIBpbEthVlanNameTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPortQueueTable_Did<s(0)(0)(0)>[&];(D1:pbPortQueueTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                         
	int		pbPortNo<s(1)(1)(0)>[&];                                              
	PbEthInterfaceType_Tval<s(1)(1)(0)>[T] pbEthPortStyle<s(1)(1)(0)>[&];                        
	int		pbEthTxQueNo<s(1)(1)(0)>[&];                                             
	int		pbEthPortQueueWeight<s(1)(1)(0)>[&];   
	int		pbEthQueueWredID<s(1)(1)(0)>[&];   
}MIBpbPortQueueTable_t<s(0)(0)(0)>[&];(D1:MIBpbPortQueueTable_t:1)[[TYPENAME:MIBpbPortQueueTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthACLTable_Did<s(0)(0)(0)>[&];(D1:pbEthACLTable_Did:0)

   
typedef enum {
	pbEthACLItemType_filter<s(0)(0)(0)>[&]=1,
	pbEthACLItemType_forward<s(0)(0)(0)>[&]=2
} pbEthACLItemType_Tval<s(0)(0)(0)>[&];(D1:pbEthACLItemType_Tval:1)[[TYPENAME:pbEthACLItemType_Tval]]

typedef enum {
	pbEthACLCoS_be<s(0)(0)(0)>[&]=0,
	pbEthACLCoS_bk<s(0)(0)(0)>[&]=1,
	pbEthACLCoS_sp<s(0)(0)(0)>[&]=2,
	pbEthACLCoS_ee<s(0)(0)(0)>[&]=3,
	pbEthACLCoS_cl<s(0)(0)(0)>[&]=4,
	pbEthACLCoS_vi<s(0)(0)(0)>[&]=5,
	pbEthACLCoS_vo<s(0)(0)(0)>[&]=6,
	pbEthACLCoS_nc<s(0)(0)(0)>[&]=7,
	pbEthACLCoS_none<s(0)(0)(0)>[&]=8
} pbEthACLCoS_Tval<s(0)(0)(0)>[&];(D1:pbEthACLCoS_Tval:1)[[TYPENAME:pbEthACLCoS_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	char		pbEthACLMacAddr<s(1)(1)(0)>[&][20];                                         
	int		pbEthACLVid<s(1)(1)(0)>[&];                                                  
	pbEthACLItemType_Tval<s(1)(1)(0)>[T] pbEthACLItemType<s(1)(1)(0)>[&];   
	int		pbEthACLRateLimit<s(1)(1)(0)>[&];   
	pbEthACLCoS_Tval<s(1)(1)(0)>[T] pbEthACLCoS<s(1)(1)(0)>[&];   
	int		pbEthACLIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthACLEntryRowStatus<s(1)(1)(0)>[&];   
}MIBpbEthACLTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthACLTable_t:1)[[TYPENAME:MIBpbEthACLTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthStatusTable_Did<s(0)(0)(0)>[&];(D1:pbEthStatusTable_Did:0)

   
typedef enum {
	pbEthStatusPortStyle_lan<s(0)(0)(0)>[&]=1,
	pbEthStatusPortStyle_wan<s(0)(0)(0)>[&]=2
} pbEthStatusPortStyle_Tval<s(0)(0)(0)>[&];(D1:pbEthStatusPortStyle_Tval:1)[[TYPENAME:pbEthStatusPortStyle_Tval]]

typedef enum {
	pbEthStatusPortType_ge<s(0)(0)(0)>[&]=8,
	pbEthStatusPortType_fe<s(0)(0)(0)>[&]=7,
	pbEthStatusPortType_tenge<s(0)(0)(0)>[&]=25,
	pbEthStatusPortType_fiber_channel<s(0)(0)(0)>[&]=26
} pbEthStatusPortType_Tval<s(0)(0)(0)>[&];(D1:pbEthStatusPortType_Tval:1)[[TYPENAME:pbEthStatusPortType_Tval]]

typedef enum {
	pbEthStatusPortOperStatus_pbPortOperationStatus_up<s(0)(0)(0)>[&]=1,
	pbEthStatusPortOperStatus_pbPortOperationStatus_down<s(0)(0)(0)>[&]=2,
	pbEthStatusPortOperStatus_pbPortOperationStatus_absent<s(0)(0)(0)>[&]=3,
	pbEthStatusPortOperStatus_pbPortOperationStatus_na<s(0)(0)(0)>[&]=4
} pbEthStatusPortOperStatus_Tval<s(0)(0)(0)>[&];(D1:pbEthStatusPortOperStatus_Tval:1)[[TYPENAME:pbEthStatusPortOperStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	int		pbPortNo<s(1)(1)(0)>[&];                                                            
	pbEthStatusPortStyle_Tval<s(1)(1)(0)>[T] pbEthStatusPortStyle<s(1)(1)(0)>[&];   
	pbEthStatusPortType_Tval<s(1)(1)(0)>[T] pbEthStatusPortType<s(1)(1)(0)>[&];   
	pbEthStatusPortOperStatus_Tval<s(1)(1)(0)>[T] pbEthStatusPortOperStatus<s(1)(1)(0)>[&];   
	int		pbEthStatusLaserIBias<s(1)(1)(0)>[&];   
	int		pbEthStatusLaserRecvPwr<s(1)(1)(0)>[&];   
	int		pbEthStatusLaserTransPwr<s(1)(1)(0)>[&];   
	int		pbEthStatusLaserTemp<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthStatusCompliance8472<s(1)(1)(0)>[&];   
	int		pbEthStatusNominalMBps<s(1)(1)(0)>[&];   
	int		pbEthStatusWavelength<s(1)(1)(0)>[&];   
	int		pbEthStatusLinkLength9125<s(1)(1)(0)>[&];   
	int		pbEthStatusLinkLength50125<s(1)(1)(0)>[&];   
	int		pbEthStatusLinkLength62125<s(1)(1)(0)>[&];   
	int		pbEthStatusLinkLengthCopper<s(1)(1)(0)>[&];   
	char		pbEthStatusVendorName<s(1)(1)(0)>[&][20];   
	char		pbEthStatusVendorPN<s(1)(1)(0)>[&][20];   
	char		pbEthStatusVendorSN<s(1)(1)(0)>[&][20];   
	char		pbEthStatusManuDate<s(1)(1)(0)>[&][16];   
	int		pbEthStatusTransCode<s(1)(1)(0)>[&];   
	char		pbEthStatusVendorOUI<s(1)(1)(0)>[&][16];   
	PbConnectorType_Tval<s(1)(1)(0)>[T] pbEthStatusConnectorType<s(1)(1)(0)>[&];   
	char		pbEthsSAGPartNumber<s(1)(1)(0)>[&][20];   
	int		pbEthnClLaserTemp<s(1)(1)(0)>[&];   
	int		pbEthnTECCurrent<s(1)(1)(0)>[&];   
}MIBpbEthStatusTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthStatusTable_t:1)[[TYPENAME:MIBpbEthStatusTable_t]]

































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbVlanPortQinQTable_Did<s(0)(0)(0)>[&];(D1:pbVlanPortQinQTable_Did:0)

   
typedef enum {
	pbEthQinQNewVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbEthQinQNewVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbEthQinQNewVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbEthQinQNewVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbEthQinQNewVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbEthQinQNewVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbEthQinQNewVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbEthQinQNewVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbEthQinQNewVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbEthQinQNewVlanPriority_Tval:1)[[TYPENAME:pbEthQinQNewVlanPriority_Tval]]

typedef enum {
	pbEthQinQNewVlanPriMode_userDefined<s(0)(0)(0)>[&]=0,
	pbEthQinQNewVlanPriMode_innerTag<s(0)(0)(0)>[&]=1,
	pbEthQinQNewVlanPriMode_ipds<s(0)(0)(0)>[&]=2
} pbEthQinQNewVlanPriMode_Tval<s(0)(0)(0)>[&];(D1:pbEthQinQNewVlanPriMode_Tval:1)[[TYPENAME:pbEthQinQNewVlanPriMode_Tval]]

typedef enum {
	pbEthQinQVlanSwapMode_vlanId<s(0)(0)(0)>[&]=0,
	pbEthQinQVlanSwapMode_tpid<s(0)(0)(0)>[&]=1,
	pbEthQinQVlanSwapMode_both<s(0)(0)(0)>[&]=2
} pbEthQinQVlanSwapMode_Tval<s(0)(0)(0)>[&];(D1:pbEthQinQVlanSwapMode_Tval:1)[[TYPENAME:pbEthQinQVlanSwapMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	int		pbPortNo<s(1)(1)(0)>[&];                                                          
	PbEthPortClass_Tval<s(1)(1)(0)>[T] pbEthPortCls<s(1)(1)(0)>[&];                                       
	int		pbEthVlan<s(1)(1)(0)>[&];                                                         
	int		pbEthQinQNewVlanId<s(1)(1)(0)>[&];   
	pbEthQinQNewVlanPriority_Tval<s(1)(1)(0)>[T] pbEthQinQNewVlanPriority<s(1)(1)(0)>[&];   
	int		pbVlanPortQinQIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthVlanPortQinQRowStatus<s(1)(1)(0)>[&];   
	pbEthQinQNewVlanPriMode_Tval<s(1)(1)(0)>[T] pbEthQinQNewVlanPriMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEthQinQVlanSwapEnable<s(1)(1)(0)>[&];   
	int		pbEthQinQVlanSwapVid<s(1)(1)(0)>[&];   
	pbEthQinQVlanSwapMode_Tval<s(1)(1)(0)>[T] pbEthQinQVlanSwapMode<s(1)(1)(0)>[&];   
}MIBpbVlanPortQinQTable_t<s(0)(0)(0)>[&];(D1:MIBpbVlanPortQinQTable_t:1)[[TYPENAME:MIBpbVlanPortQinQTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthProtPktACLTable_Did<s(0)(0)(0)>[&];(D1:pbEthProtPktACLTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	char		pbEthACLMacAddr<s(1)(1)(0)>[&][20];                                          
	char		pbEthProtPktACLPort<s(1)(1)(0)>[&][64];
	int		pbEthProtPktACLIndex<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthProtPktACLRowStatus<s(1)(1)(0)>[&];
}MIBpbEthProtPktACLTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthProtPktACLTable_t:1)[[TYPENAME:MIBpbEthProtPktACLTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthReservedTable_Did<s(0)(0)(0)>[&];(D1:pbEthReservedTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	int		pbEthReserveIndex<s(1)(1)(0)>[&];                                         
	char		pbEthReservedCfg<s(1)(1)(0)>[&][255];
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthReservedRowStatus<s(1)(1)(0)>[&];
}MIBpbEthReservedTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthReservedTable_t:1)[[TYPENAME:MIBpbEthReservedTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbIGMPSnooping_Did<s(0)(0)(0)>[&];(D1:pbIGMPSnooping_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLagConfigTable_Did<s(0)(0)(0)>[&];(D1:pbLagConfigTable_Did:0)

   
typedef enum {
	pbLagType_lan<s(0)(0)(0)>[&]=0,
	pbLagType_wan<s(0)(0)(0)>[&]=1
} pbLagType_Tval<s(0)(0)(0)>[&];(D1:pbLagType_Tval:1)[[TYPENAME:pbLagType_Tval]]

typedef enum {
	pbLagFlowControl_disable<s(0)(0)(0)>[&]=0,
	pbLagFlowControl_enable<s(0)(0)(0)>[&]=1
} pbLagFlowControl_Tval<s(0)(0)(0)>[&];(D1:pbLagFlowControl_Tval:1)[[TYPENAME:pbLagFlowControl_Tval]]

typedef enum {
	pbLagTagMode_untag<s(0)(0)(0)>[&]=0,
	pbLagTagMode_tag<s(0)(0)(0)>[&]=1
} pbLagTagMode_Tval<s(0)(0)(0)>[&];(D1:pbLagTagMode_Tval:1)[[TYPENAME:pbLagTagMode_Tval]]

typedef enum {
	pbLagDefaultVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbLagDefaultVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbLagDefaultVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbLagDefaultVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbLagDefaultVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbLagDefaultVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbLagDefaultVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbLagDefaultVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbLagDefaultVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbLagDefaultVlanPriority_Tval:1)[[TYPENAME:pbLagDefaultVlanPriority_Tval]]

typedef enum {
	pbLagTxPriAlg_wRR<s(0)(0)(0)>[&]=0,
	pbLagTxPriAlg_sP1_WRR3<s(0)(0)(0)>[&]=1,
	pbLagTxPriAlg_sP2_WRR2<s(0)(0)(0)>[&]=2,
	pbLagTxPriAlg_sP<s(0)(0)(0)>[&]=3,
	pbLagTxPriAlg_wFQ<s(0)(0)(0)>[&]=4
} pbLagTxPriAlg_Tval<s(0)(0)(0)>[&];(D1:pbLagTxPriAlg_Tval:1)[[TYPENAME:pbLagTxPriAlg_Tval]]

typedef enum {
	pbLagTxEnableHol_disable<s(0)(0)(0)>[&]=0,
	pbLagTxEnableHol_enable<s(0)(0)(0)>[&]=1
} pbLagTxEnableHol_Tval<s(0)(0)(0)>[&];(D1:pbLagTxEnableHol_Tval:1)[[TYPENAME:pbLagTxEnableHol_Tval]]

typedef enum {
	pbLagChangeCoS_be<s(0)(0)(0)>[&]=0,
	pbLagChangeCoS_bk<s(0)(0)(0)>[&]=1,
	pbLagChangeCoS_sp<s(0)(0)(0)>[&]=2,
	pbLagChangeCoS_ee<s(0)(0)(0)>[&]=3,
	pbLagChangeCoS_cl<s(0)(0)(0)>[&]=4,
	pbLagChangeCoS_vi<s(0)(0)(0)>[&]=5,
	pbLagChangeCoS_vo<s(0)(0)(0)>[&]=6,
	pbLagChangeCoS_nc<s(0)(0)(0)>[&]=7,
	pbLagChangeCoS_not_change<s(0)(0)(0)>[&]=8
} pbLagChangeCoS_Tval<s(0)(0)(0)>[&];(D1:pbLagChangeCoS_Tval:1)[[TYPENAME:pbLagChangeCoS_Tval]]

typedef enum {
	pbLagQinQStatus_disable<s(0)(0)(0)>[&]=0,
	pbLagQinQStatus_enable<s(0)(0)(0)>[&]=1
} pbLagQinQStatus_Tval<s(0)(0)(0)>[&];(D1:pbLagQinQStatus_Tval:1)[[TYPENAME:pbLagQinQStatus_Tval]]

typedef enum {
	pbLagQinQNewVlanPriority_be<s(0)(0)(0)>[&]=0,
	pbLagQinQNewVlanPriority_bk<s(0)(0)(0)>[&]=1,
	pbLagQinQNewVlanPriority_sp<s(0)(0)(0)>[&]=2,
	pbLagQinQNewVlanPriority_ee<s(0)(0)(0)>[&]=3,
	pbLagQinQNewVlanPriority_cl<s(0)(0)(0)>[&]=4,
	pbLagQinQNewVlanPriority_vi<s(0)(0)(0)>[&]=5,
	pbLagQinQNewVlanPriority_vo<s(0)(0)(0)>[&]=6,
	pbLagQinQNewVlanPriority_nc<s(0)(0)(0)>[&]=7
} pbLagQinQNewVlanPriority_Tval<s(0)(0)(0)>[&];(D1:pbLagQinQNewVlanPriority_Tval:1)[[TYPENAME:pbLagQinQNewVlanPriority_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		pbLagId<s(1)(1)(0)>[&];                                                          
	pbLagType_Tval<s(1)(1)(0)>[T] pbLagType<s(1)(1)(0)>[&];   
	pbLagFlowControl_Tval<s(1)(1)(0)>[T] pbLagFlowControl<s(1)(1)(0)>[&];   
	int		pbLagPvid<s(1)(1)(0)>[&];   
	char		pbLagVlan<s(1)(1)(0)>[&][255];   
	pbLagTagMode_Tval<s(1)(1)(0)>[T] pbLagTagMode<s(1)(1)(0)>[&];   
	int		pbLagInputRateLimit<s(1)(1)(0)>[&];   
	int		pbLagBroadCastRateLimit<s(1)(1)(0)>[&];   
	pbLagDefaultVlanPriority_Tval<s(1)(1)(0)>[T] pbLagDefaultVlanPriority<s(1)(1)(0)>[&];   
	pbLagTxPriAlg_Tval<s(1)(1)(0)>[T] pbLagTxPriAlg<s(1)(1)(0)>[&];   
	pbLagTxEnableHol_Tval<s(1)(1)(0)>[T] pbLagTxEnableHol<s(1)(1)(0)>[&];   
	pbLagChangeCoS_Tval<s(1)(1)(0)>[T] pbLagChangeCoS<s(1)(1)(0)>[&];   
	pbLagQinQStatus_Tval<s(1)(1)(0)>[T] pbLagQinQStatus<s(1)(1)(0)>[&];   
	int		pbLagQinQNewVlan<s(1)(1)(0)>[&];   
	pbLagQinQNewVlanPriority_Tval<s(1)(1)(0)>[T] pbLagQinQNewVlanPriority<s(1)(1)(0)>[&];   
	char		pbLagPortList<s(1)(1)(0)>[&][255];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbLagEnableWred<s(1)(1)(0)>[&];   
}MIBpbLagConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbLagConfigTable_t:1)[[TYPENAME:MIBpbLagConfigTable_t]]

























 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpConfig_Did<s(0)(0)(0)>[&];(D1:pbLacpConfig_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthStaticMplsTable_Did<s(0)(0)(0)>[&];(D1:pbEthStaticMplsTable_Did:0)

   
typedef enum {
	pbEthInPortType_lan<s(0)(0)(0)>[&]=0,
	pbEthInPortType_wan<s(0)(0)(0)>[&]=1
} pbEthInPortType_Tval<s(0)(0)(0)>[&];(D1:pbEthInPortType_Tval:1)[[TYPENAME:pbEthInPortType_Tval]]

typedef enum {
	pbEthOutPortType_lan<s(0)(0)(0)>[&]=0,
	pbEthOutPortType_wan<s(0)(0)(0)>[&]=1
} pbEthOutPortType_Tval<s(0)(0)(0)>[&];(D1:pbEthOutPortType_Tval:1)[[TYPENAME:pbEthOutPortType_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	unsigned int	pbEthLspLabel<s(1)(1)(0)>[&];                                              
	char		pbEthInPort<s(1)(1)(0)>[&][8];   
	pbEthInPortType_Tval<s(1)(1)(0)>[T] pbEthInPortType<s(1)(1)(0)>[&];   
	char		pbEthPort<s(1)(1)(0)>[&][8];   
	pbEthOutPortType_Tval<s(1)(1)(0)>[T] pbEthOutPortType<s(1)(1)(0)>[&];   
	int		pbEthStaticMplsPolicingID<s(1)(1)(0)>[&];   
	int		pbEthStaticMplsColorID<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthStaticMplsStatus<s(1)(1)(0)>[&];   
	char		pbEthLspName<s(1)(1)(0)>[&][64];   
}MIBpbEthStaticMplsTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthStaticMplsTable_t:1)[[TYPENAME:MIBpbEthStaticMplsTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthPolicingTable_Did<s(0)(0)(0)>[&];(D1:pbEthPolicingTable_Did:0)

   
typedef enum {
	pbEthPolicingMode_rfc2698<s(0)(0)(0)>[&]=0,
	pbEthPolicingMode_mef10_cf0<s(0)(0)(0)>[&]=1,
	pbEthPolicingMode_mef10_cf1<s(0)(0)(0)>[&]=2
} pbEthPolicingMode_Tval<s(0)(0)(0)>[&];(D1:pbEthPolicingMode_Tval:1)[[TYPENAME:pbEthPolicingMode_Tval]]

typedef enum {
	pbEthPolicingColorAware_unaware<s(0)(0)(0)>[&]=0,
	pbEthPolicingColorAware_aware<s(0)(0)(0)>[&]=1
} pbEthPolicingColorAware_Tval<s(0)(0)(0)>[&];(D1:pbEthPolicingColorAware_Tval:1)[[TYPENAME:pbEthPolicingColorAware_Tval]]

typedef enum {
	pbEthPolicingDiscardColor_noColor<s(0)(0)(0)>[&]=0,
	pbEthPolicingDiscardColor_red<s(0)(0)(0)>[&]=1,
	pbEthPolicingDiscardColor_yellow<s(0)(0)(0)>[&]=2,
	pbEthPolicingDiscardColor_all<s(0)(0)(0)>[&]=3
} pbEthPolicingDiscardColor_Tval<s(0)(0)(0)>[&];(D1:pbEthPolicingDiscardColor_Tval:1)[[TYPENAME:pbEthPolicingDiscardColor_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                   
	int		pbEthPolicingIndex<s(1)(1)(0)>[&];                                                 
	char		pbEthPolicingName<s(1)(1)(0)>[&][32];   
	pbEthPolicingMode_Tval<s(1)(1)(0)>[T] pbEthPolicingMode<s(1)(1)(0)>[&];   
	unsigned int	pbEthPolicingEIRPIR<s(1)(1)(0)>[&];   
	unsigned int	pbEthPolicingCIR<s(1)(1)(0)>[&];   
	unsigned int	pbEthPolicingEBSPBS<s(1)(1)(0)>[&];   
	unsigned int	pbEthPolicingCBS<s(1)(1)(0)>[&];   
	pbEthPolicingColorAware_Tval<s(1)(1)(0)>[T] pbEthPolicingColorAware<s(1)(1)(0)>[&];   
	pbEthPolicingDiscardColor_Tval<s(1)(1)(0)>[T] pbEthPolicingDiscardColor<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthPolicingRowStatus<s(1)(1)(0)>[&];   
	int		pbEthPolicingCount<s(1)(1)(0)>[&];   
}MIBpbEthPolicingTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthPolicingTable_t:1)[[TYPENAME:MIBpbEthPolicingTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthColorTable_Did<s(0)(0)(0)>[&];(D1:pbEthColorTable_Did:0)

   
typedef enum {
	pbEthPrio0Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio0Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio0Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio0Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio0Color_Tval:1)[[TYPENAME:pbEthPrio0Color_Tval]]

typedef enum {
	pbEthPrio1Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio1Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio1Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio1Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio1Color_Tval:1)[[TYPENAME:pbEthPrio1Color_Tval]]

typedef enum {
	pbEthPrio2Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio2Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio2Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio2Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio2Color_Tval:1)[[TYPENAME:pbEthPrio2Color_Tval]]

typedef enum {
	pbEthPrio3Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio3Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio3Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio3Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio3Color_Tval:1)[[TYPENAME:pbEthPrio3Color_Tval]]

typedef enum {
	pbEthPrio4Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio4Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio4Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio4Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio4Color_Tval:1)[[TYPENAME:pbEthPrio4Color_Tval]]

typedef enum {
	pbEthPrio5Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio5Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio5Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio5Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio5Color_Tval:1)[[TYPENAME:pbEthPrio5Color_Tval]]

typedef enum {
	pbEthPrio6Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio6Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio6Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio6Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio6Color_Tval:1)[[TYPENAME:pbEthPrio6Color_Tval]]

typedef enum {
	pbEthPrio7Color_green<s(0)(0)(0)>[&]=0,
	pbEthPrio7Color_yellow<s(0)(0)(0)>[&]=1,
	pbEthPrio7Color_red<s(0)(0)(0)>[&]=2
} pbEthPrio7Color_Tval<s(0)(0)(0)>[&];(D1:pbEthPrio7Color_Tval:1)[[TYPENAME:pbEthPrio7Color_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		pbEthColorIndex<s(1)(1)(0)>[&];                                        
	pbEthPrio0Color_Tval<s(1)(1)(0)>[T] pbEthPrio0Color<s(1)(1)(0)>[&];   
	pbEthPrio1Color_Tval<s(1)(1)(0)>[T] pbEthPrio1Color<s(1)(1)(0)>[&];   
	pbEthPrio2Color_Tval<s(1)(1)(0)>[T] pbEthPrio2Color<s(1)(1)(0)>[&];   
	pbEthPrio3Color_Tval<s(1)(1)(0)>[T] pbEthPrio3Color<s(1)(1)(0)>[&];   
	pbEthPrio4Color_Tval<s(1)(1)(0)>[T] pbEthPrio4Color<s(1)(1)(0)>[&];   
	pbEthPrio5Color_Tval<s(1)(1)(0)>[T] pbEthPrio5Color<s(1)(1)(0)>[&];   
	pbEthPrio6Color_Tval<s(1)(1)(0)>[T] pbEthPrio6Color<s(1)(1)(0)>[&];   
	pbEthPrio7Color_Tval<s(1)(1)(0)>[T] pbEthPrio7Color<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthColorRowStatus<s(1)(1)(0)>[&];   
	int		pbEthColorCount<s(1)(1)(0)>[&];   
}MIBpbEthColorTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthColorTable_t:1)[[TYPENAME:MIBpbEthColorTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthWredTable_Did<s(0)(0)(0)>[&];(D1:pbEthWredTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		pbEthWredIndex<s(1)(1)(0)>[&];                                       
	int		pbEthWredLowThr0<s(1)(1)(0)>[&];   
	int		pbEthWredUpThr0<s(1)(1)(0)>[&];   
	int		pbEthWredLowThr1<s(1)(1)(0)>[&];   
	int		pbEthWredUpThr1<s(1)(1)(0)>[&];   
	int		pbEthWredLowThr2<s(1)(1)(0)>[&];   
	int		pbEthWredUpThr2<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthWredRowStatus<s(1)(1)(0)>[&];   
	int		pbEthWredCount<s(1)(1)(0)>[&];   
}MIBpbEthWredTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthWredTable_t:1)[[TYPENAME:MIBpbEthWredTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthPortBasedACLTable_Did<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLTable_Did:0)

   
typedef enum {
	pbEthPortBasedACLItemType_filter<s(0)(0)(0)>[&]=1,
	pbEthPortBasedACLItemType_forward<s(0)(0)(0)>[&]=2
} pbEthPortBasedACLItemType_Tval<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLItemType_Tval:1)[[TYPENAME:pbEthPortBasedACLItemType_Tval]]

typedef enum {
	pbEthPortBasedACLCoS_be<s(0)(0)(0)>[&]=0,
	pbEthPortBasedACLCoS_bk<s(0)(0)(0)>[&]=1,
	pbEthPortBasedACLCoS_sp<s(0)(0)(0)>[&]=2,
	pbEthPortBasedACLCoS_ee<s(0)(0)(0)>[&]=3,
	pbEthPortBasedACLCoS_cl<s(0)(0)(0)>[&]=4,
	pbEthPortBasedACLCoS_vi<s(0)(0)(0)>[&]=5,
	pbEthPortBasedACLCoS_vo<s(0)(0)(0)>[&]=6,
	pbEthPortBasedACLCoS_nc<s(0)(0)(0)>[&]=7,
	pbEthPortBasedACLCoS_none<s(0)(0)(0)>[&]=8
} pbEthPortBasedACLCoS_Tval<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLCoS_Tval:1)[[TYPENAME:pbEthPortBasedACLCoS_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                               
	int		pbPortNo<s(1)(1)(0)>[&];                                                                    
	PbEthPortClass_Tval<s(1)(1)(0)>[T] pbEthPortCls<s(1)(1)(0)>[&];                                                 
	char		pbEthPortBasedACLMacAddr<s(1)(1)(0)>[&][20];                                                  
	int		pbEthPortBasedACLVid<s(1)(1)(0)>[&];                                                           
	pbEthPortBasedACLItemType_Tval<s(1)(1)(0)>[T] pbEthPortBasedACLItemType<s(1)(1)(0)>[&];   
	int		pbEthPortBasedACLRateLimit<s(1)(1)(0)>[&];   
	pbEthPortBasedACLCoS_Tval<s(1)(1)(0)>[T] pbEthPortBasedACLCoS<s(1)(1)(0)>[&];   
	int		pbEthPortBasedACLIndex<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEthPortBasedACLEntryRowStatus<s(1)(1)(0)>[&];   
}MIBpbEthPortBasedACLTable_t<s(0)(0)(0)>[&];(D1:MIBpbEthPortBasedACLTable_t:1)[[TYPENAME:MIBpbEthPortBasedACLTable_t]]

















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpGlobalCfgTable_Did<s(0)(0)(0)>[&];(D1:pbLacpGlobalCfgTable_Did:0)

   
typedef enum {
	pbLacpEnable_enable<s(0)(0)(0)>[&]=1,
	pbLacpEnable_disable<s(0)(0)(0)>[&]=2
} pbLacpEnable_Tval<s(0)(0)(0)>[&];(D1:pbLacpEnable_Tval:1)[[TYPENAME:pbLacpEnable_Tval]]

typedef enum {
	pbLacpHashMode_macipport<s(0)(0)(0)>[&]=1,
	pbLacpHashMode_mac<s(0)(0)(0)>[&]=2,
	pbLacpHashMode_ipport<s(0)(0)(0)>[&]=3
} pbLacpHashMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpHashMode_Tval:1)[[TYPENAME:pbLacpHashMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	pbLacpEnable_Tval<s(1)(1)(0)>[T] pbLacpEnable<s(1)(1)(0)>[&];   
	char		pbLacpSystemID<s(1)(1)(0)>[&][255];   
	int		pbLacpSystemPri<s(1)(1)(0)>[&];   
	pbLacpHashMode_Tval<s(1)(1)(0)>[T] pbLacpHashMode<s(1)(1)(0)>[&];   
}MIBpbLacpGlobalCfgTable_t<s(0)(0)(0)>[&];(D1:MIBpbLacpGlobalCfgTable_t:1)[[TYPENAME:MIBpbLacpGlobalCfgTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpAgConfigTable_Did<s(0)(0)(0)>[&];(D1:pbLacpAgConfigTable_Did:0)

   
typedef enum {
	pbLacpAgMode_dynamic<s(0)(0)(0)>[&]=1,
	pbLacpAgMode_static<s(0)(0)(0)>[&]=0
} pbLacpAgMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpAgMode_Tval:1)[[TYPENAME:pbLacpAgMode_Tval]]

typedef enum {
	pbLacpAgRowState_active<s(0)(0)(0)>[&]=1,
	pbLacpAgRowState_inactive<s(0)(0)(0)>[&]=0
} pbLacpAgRowState_Tval<s(0)(0)(0)>[&];(D1:pbLacpAgRowState_Tval:1)[[TYPENAME:pbLacpAgRowState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                 
	int		pbLacpAgNo<s(1)(1)(0)>[&];                                       
	char		pbLacpAgName<s(1)(1)(0)>[&][32];   
	char		pbLacpAgMac<s(1)(1)(0)>[&][32];   
	pbLacpAgMode_Tval<s(1)(1)(0)>[T] pbLacpAgMode<s(1)(1)(0)>[&];   
	pbLacpAgRowState_Tval<s(1)(1)(0)>[T] pbLacpAgRowState<s(1)(1)(0)>[&];   
}MIBpbLacpAgConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbLacpAgConfigTable_t:1)[[TYPENAME:MIBpbLacpAgConfigTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpAgInformTable_Did<s(0)(0)(0)>[&];(D1:pbLacpAgInformTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	int		pbLacpAgNo<s(1)(1)(0)>[&];                                                
	int		pbLacpAgOperKey<s(1)(1)(0)>[&];   
	char		pbLacpPortList<s(1)(1)(0)>[&][128];   
	char		pbLacpPartnerMac<s(1)(1)(0)>[&][128];   
	int		pbLacpPartnerSysPri<s(1)(1)(0)>[&];   
	int		pbLacpPartnerAgOperKey<s(1)(1)(0)>[&];   
	int		pbLacpPortTypeInAg<s(1)(1)(0)>[&];   
	int		pbLacpPortSpeedInAg<s(1)(1)(0)>[&];   
}MIBpbLacpAgInformTable_t<s(0)(0)(0)>[&];(D1:MIBpbLacpAgInformTable_t:1)[[TYPENAME:MIBpbLacpAgInformTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpApConfigTable_Did<s(0)(0)(0)>[&];(D1:pbLacpApConfigTable_Did:0)

   
typedef enum {
	pbLacpTimeoutMode_fast<s(0)(0)(0)>[&]=1,
	pbLacpTimeoutMode_slow<s(0)(0)(0)>[&]=0
} pbLacpTimeoutMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpTimeoutMode_Tval:1)[[TYPENAME:pbLacpTimeoutMode_Tval]]

typedef enum {
	pbLacpPortIndiv_individual<s(0)(0)(0)>[&]=1,
	pbLacpPortIndiv_aggregable<s(0)(0)(0)>[&]=2
} pbLacpPortIndiv_Tval<s(0)(0)(0)>[&];(D1:pbLacpPortIndiv_Tval:1)[[TYPENAME:pbLacpPortIndiv_Tval]]

typedef enum {
	pbLacpActiveMode_active<s(0)(0)(0)>[&]=1,
	pbLacpActiveMode_passive<s(0)(0)(0)>[&]=0
} pbLacpActiveMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpActiveMode_Tval:1)[[TYPENAME:pbLacpActiveMode_Tval]]

typedef enum {
	pbLacpPortBpduMode_standardMode<s(0)(0)(0)>[&]=0,
	pbLacpPortBpduMode_tagMode<s(0)(0)(0)>[&]=1
} pbLacpPortBpduMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpPortBpduMode_Tval:1)[[TYPENAME:pbLacpPortBpduMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	PbLacpPortClass_Tval<s(1)(1)(0)>[T] pbLacpPortType<s(1)(1)(0)>[&];                       
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	pbLacpTimeoutMode_Tval<s(1)(1)(0)>[T] pbLacpTimeoutMode<s(1)(1)(0)>[&];   
	pbLacpPortIndiv_Tval<s(1)(1)(0)>[T] pbLacpPortIndiv<s(1)(1)(0)>[&];   
	pbLacpActiveMode_Tval<s(1)(1)(0)>[T] pbLacpActiveMode<s(1)(1)(0)>[&];   
	int		pbLacpDesigAggor<s(1)(1)(0)>[&];   
	int		pbLacpPortPri<s(1)(1)(0)>[&];   
	pbLacpPortBpduMode_Tval<s(1)(1)(0)>[T] pbLacpPortBpduMode<s(1)(1)(0)>[&];   
}MIBpbLacpApConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbLacpApConfigTable_t:1)[[TYPENAME:MIBpbLacpApConfigTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbLacpApInformTable_Did<s(0)(0)(0)>[&];(D1:pbLacpApInformTable_Did:0)

   
typedef enum {
	pbLacpPortLinkState_up<s(0)(0)(0)>[&]=1,
	pbLacpPortLinkState_down<s(0)(0)(0)>[&]=2
} pbLacpPortLinkState_Tval<s(0)(0)(0)>[&];(D1:pbLacpPortLinkState_Tval:1)[[TYPENAME:pbLacpPortLinkState_Tval]]

typedef enum {
	pbLacpPartnerPortMode_active<s(0)(0)(0)>[&]=1,
	pbLacpPartnerPortMode_passive<s(0)(0)(0)>[&]=0
} pbLacpPartnerPortMode_Tval<s(0)(0)(0)>[&];(D1:pbLacpPartnerPortMode_Tval:1)[[TYPENAME:pbLacpPartnerPortMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	PbLacpPortClass_Tval<s(1)(1)(0)>[T] pbLacpPortType<s(1)(1)(0)>[&];                            
	int		pbPortNo<s(1)(1)(0)>[&];                                                  
	pbLacpPortLinkState_Tval<s(1)(1)(0)>[T] pbLacpPortLinkState<s(1)(1)(0)>[&];   
	int		pbLacpPortBelongAg<s(1)(1)(0)>[&];   
	char		pbLacpPortSync<s(1)(1)(0)>[&][32];   
	int		pbLacpPortOperKey<s(1)(1)(0)>[&];   
	int		pbLacpPartnerPortNo<s(1)(1)(0)>[&];   
	pbLacpPartnerPortMode_Tval<s(1)(1)(0)>[T] pbLacpPartnerPortMode<s(1)(1)(0)>[&];   
	int		pbLacpPartnerPortPri<s(1)(1)(0)>[&];   
	int		pbLacpPartnerOperKey<s(1)(1)(0)>[&];   
	char		pbLacpPartnerPortState<s(1)(1)(0)>[&][32];   
}MIBpbLacpApInformTable_t<s(0)(0)(0)>[&];(D1:MIBpbLacpApInformTable_t:1)[[TYPENAME:MIBpbLacpApInformTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIgmpSnoopingGlobalTable_Did<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingGlobalTable_Did:0)

   
typedef enum {
	pbIgmpSnoopingEnable_enable<s(0)(0)(0)>[&]=1,
	pbIgmpSnoopingEnable_disable<s(0)(0)(0)>[&]=2
} pbIgmpSnoopingEnable_Tval<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingEnable_Tval:1)[[TYPENAME:pbIgmpSnoopingEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	pbIgmpSnoopingEnable_Tval<s(1)(1)(0)>[T] pbIgmpSnoopingEnable<s(1)(1)(0)>[&];   
	int		pbIgmpSnoopingAgingTime<s(1)(1)(0)>[&];   
}MIBpbIgmpSnoopingGlobalTable_t<s(0)(0)(0)>[&];(D1:MIBpbIgmpSnoopingGlobalTable_t:1)[[TYPENAME:MIBpbIgmpSnoopingGlobalTable_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbVlanIgmpSnoopingTable_Did<s(0)(0)(0)>[&];(D1:pbVlanIgmpSnoopingTable_Did:0)

   
typedef enum {
	pbVlanIgmpSnoopingEnable_enable<s(0)(0)(0)>[&]=1,
	pbVlanIgmpSnoopingEnable_disable<s(0)(0)(0)>[&]=2
} pbVlanIgmpSnoopingEnable_Tval<s(0)(0)(0)>[&];(D1:pbVlanIgmpSnoopingEnable_Tval:1)[[TYPENAME:pbVlanIgmpSnoopingEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	int		pbIgmpVlanNumber<s(1)(1)(0)>[&];                                                       
	pbVlanIgmpSnoopingEnable_Tval<s(1)(1)(0)>[T] pbVlanIgmpSnoopingEnable<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbVlanIgmpSnoopingRowStatus<s(1)(1)(0)>[&];   
}MIBpbVlanIgmpSnoopingTable_t<s(0)(0)(0)>[&];(D1:MIBpbVlanIgmpSnoopingTable_t:1)[[TYPENAME:MIBpbVlanIgmpSnoopingTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIgmpSnoopingIpGroupTable_Did<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingIpGroupTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	int		pbIgmpVlanNumber<s(1)(1)(0)>[&];                                  
	unsigned int	pbGroupIp<s(1)(1)(0)>[&];                                    
	char		pbIgmpMacAddr<s(1)(1)(0)>[&][20];   
	char		pbIgmpIpMemberPort<s(1)(1)(0)>[&][128];   
}MIBpbIgmpSnoopingIpGroupTable_t<s(0)(0)(0)>[&];(D1:MIBpbIgmpSnoopingIpGroupTable_t:1)[[TYPENAME:MIBpbIgmpSnoopingIpGroupTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIgmpSnoopingMacGroupTable_Did<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingMacGroupTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		pbIgmpVlanNumber<s(1)(1)(0)>[&];                                    
	char		pbIgmpMacAddr<s(1)(1)(0)>[&][20];                                  
	char		pbIgmpMacMemberPort<s(1)(1)(0)>[&][128];   
}MIBpbIgmpSnoopingMacGroupTable_t<s(0)(0)(0)>[&];(D1:MIBpbIgmpSnoopingMacGroupTable_t:1)[[TYPENAME:MIBpbIgmpSnoopingMacGroupTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIgmpSnoopingMulRouterTable_Did<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingMulRouterTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		pbIgmpVlanNumber<s(1)(1)(0)>[&];                                    
	char		pbIgmpMulRouterPort<s(1)(1)(0)>[&][128];   
}MIBpbIgmpSnoopingMulRouterTable_t<s(0)(0)(0)>[&];(D1:MIBpbIgmpSnoopingMulRouterTable_t:1)[[TYPENAME:MIBpbIgmpSnoopingMulRouterTable_t]]










 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbEthernetModule_Did<s(0)(0)(0)>[&];(D1:pbEthernetModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbGvrpBase_Did<s(0)(0)(0)>[&];(D1:pbGvrpBase_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGvrpBridgeTable_Did<s(0)(0)(0)>[&];(D1:pbGvrpBridgeTable_Did:0)

   
typedef enum {
	pbGvrpEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGvrpEnable_enabled<s(0)(0)(0)>[&]=1
} pbGvrpEnable_Tval<s(0)(0)(0)>[&];(D1:pbGvrpEnable_Tval:1)[[TYPENAME:pbGvrpEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	char		pbGvrpBridgeAddress<s(1)(1)(0)>[&][32];   
	pbGvrpEnable_Tval<s(1)(1)(0)>[T] pbGvrpEnable<s(1)(1)(0)>[&];   
	int		pbGvrpJoinTimer<s(1)(1)(0)>[&];   
	int		pbGvrpLeaveTimer<s(1)(1)(0)>[&];   
	int		pbGvrpLeaveallTimer<s(1)(1)(0)>[&];   
	char		pbGvrpVlanList<s(1)(1)(0)>[&][255];
	int		pbGvrpMaxDVlanNum<s(1)(1)(0)>[&];
}MIBpbGvrpBridgeTable_t<s(0)(0)(0)>[&];(D1:MIBpbGvrpBridgeTable_t:1)[[TYPENAME:MIBpbGvrpBridgeTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGvrpPortTable_Did<s(0)(0)(0)>[&];(D1:pbGvrpPortTable_Did:0)

   
typedef enum {
	pbGvrpPortType_lan<s(0)(0)(0)>[&]=1,
	pbGvrpPortType_wan<s(0)(0)(0)>[&]=2,
	pbGvrpPortType_trunk<s(0)(0)(0)>[&]=3
} pbGvrpPortType_Tval<s(0)(0)(0)>[&];(D1:pbGvrpPortType_Tval:1)[[TYPENAME:pbGvrpPortType_Tval]]

typedef enum {
	pbGvrpPortEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGvrpPortEnable_enabled<s(0)(0)(0)>[&]=1
} pbGvrpPortEnable_Tval<s(0)(0)(0)>[&];(D1:pbGvrpPortEnable_Tval:1)[[TYPENAME:pbGvrpPortEnable_Tval]]

typedef enum {
	pbGvrpPortRegAdminCtrl_normal<s(0)(0)(0)>[&]=0,
	pbGvrpPortRegAdminCtrl_fixed<s(0)(0)(0)>[&]=1,
	pbGvrpPortRegAdminCtrl_forbidden<s(0)(0)(0)>[&]=2
} pbGvrpPortRegAdminCtrl_Tval<s(0)(0)(0)>[&];(D1:pbGvrpPortRegAdminCtrl_Tval:1)[[TYPENAME:pbGvrpPortRegAdminCtrl_Tval]]

typedef enum {
	pbGvrpPortApplAdminCtrl_normal<s(0)(0)(0)>[&]=0,
	pbGvrpPortApplAdminCtrl_nonparticipant<s(0)(0)(0)>[&]=1
} pbGvrpPortApplAdminCtrl_Tval<s(0)(0)(0)>[&];(D1:pbGvrpPortApplAdminCtrl_Tval:1)[[TYPENAME:pbGvrpPortApplAdminCtrl_Tval]]

typedef enum {
	pbGvrpBlockPortEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGvrpBlockPortEnable_enabled<s(0)(0)(0)>[&]=1
} pbGvrpBlockPortEnable_Tval<s(0)(0)(0)>[&];(D1:pbGvrpBlockPortEnable_Tval:1)[[TYPENAME:pbGvrpBlockPortEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	pbGvrpPortType_Tval<s(1)(1)(0)>[T] pbGvrpPortType<s(1)(1)(0)>[&];                                  
	int		pbGvrpPortNo<s(1)(1)(0)>[&];                                                   
	pbGvrpPortEnable_Tval<s(1)(1)(0)>[T] pbGvrpPortEnable<s(1)(1)(0)>[&];   
	pbGvrpPortRegAdminCtrl_Tval<s(1)(1)(0)>[T] pbGvrpPortRegAdminCtrl<s(1)(1)(0)>[&];   
	pbGvrpPortApplAdminCtrl_Tval<s(1)(1)(0)>[T] pbGvrpPortApplAdminCtrl<s(1)(1)(0)>[&];   
	pbGvrpBlockPortEnable_Tval<s(1)(1)(0)>[T] pbGvrpBlockPortEnable<s(1)(1)(0)>[&];   
}MIBpbGvrpPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbGvrpPortTable_t:1)[[TYPENAME:MIBpbGvrpPortTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGvrpDVlanTable_Did<s(0)(0)(0)>[&];(D1:pbGvrpDVlanTable_Did:0)

   
typedef enum {
	pbGvrpDPortType_lan<s(0)(0)(0)>[&]=1,
	pbGvrpDPortType_wan<s(0)(0)(0)>[&]=2,
	pbGvrpDPortType_trunk<s(0)(0)(0)>[&]=3
} pbGvrpDPortType_Tval<s(0)(0)(0)>[&];(D1:pbGvrpDPortType_Tval:1)[[TYPENAME:pbGvrpDPortType_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	pbGvrpDPortType_Tval<s(1)(1)(0)>[T] pbGvrpDPortType<s(1)(1)(0)>[&];                
	int		pbGvrpDPortNo<s(1)(1)(0)>[&];                                  
	char		pbGvrpDVlanList<s(1)(1)(0)>[&][255];   
}MIBpbGvrpDVlanTable_t<s(0)(0)(0)>[&];(D1:MIBpbGvrpDVlanTable_t:1)[[TYPENAME:MIBpbGvrpDVlanTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbGvrpModule_Did<s(0)(0)(0)>[&];(D1:pbGvrpModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbGmrpBase_Did<s(0)(0)(0)>[&];(D1:pbGmrpBase_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGmrpBridgeTable_Did<s(0)(0)(0)>[&];(D1:pbGmrpBridgeTable_Did:0)

   
typedef enum {
	pbGmrpEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGmrpEnable_enabled<s(0)(0)(0)>[&]=1
} pbGmrpEnable_Tval<s(0)(0)(0)>[&];(D1:pbGmrpEnable_Tval:1)[[TYPENAME:pbGmrpEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	char		pbGmrpBridgeAddress<s(1)(1)(0)>[&][32];   
	pbGmrpEnable_Tval<s(1)(1)(0)>[T] pbGmrpEnable<s(1)(1)(0)>[&];   
	int		pbGmrpJoinTimer<s(1)(1)(0)>[&];   
	int		pbGmrpLeaveTimer<s(1)(1)(0)>[&];   
	int		pbGmrpLeaveallTimer<s(1)(1)(0)>[&];   
	int		pbGmrpMaxDMacNum<s(1)(1)(0)>[&];   
}MIBpbGmrpBridgeTable_t<s(0)(0)(0)>[&];(D1:MIBpbGmrpBridgeTable_t:1)[[TYPENAME:MIBpbGmrpBridgeTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGmrpPortTable_Did<s(0)(0)(0)>[&];(D1:pbGmrpPortTable_Did:0)

   
typedef enum {
	pbGmrpPortType_lan<s(0)(0)(0)>[&]=1,
	pbGmrpPortType_wan<s(0)(0)(0)>[&]=2,
	pbGmrpPortType_trunk<s(0)(0)(0)>[&]=3
} pbGmrpPortType_Tval<s(0)(0)(0)>[&];(D1:pbGmrpPortType_Tval:1)[[TYPENAME:pbGmrpPortType_Tval]]

typedef enum {
	pbGmrpPortEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGmrpPortEnable_enabled<s(0)(0)(0)>[&]=1
} pbGmrpPortEnable_Tval<s(0)(0)(0)>[&];(D1:pbGmrpPortEnable_Tval:1)[[TYPENAME:pbGmrpPortEnable_Tval]]

typedef enum {
	pbGmrpPortRegAdminCtrl_normal<s(0)(0)(0)>[&]=0,
	pbGmrpPortRegAdminCtrl_fixed<s(0)(0)(0)>[&]=1,
	pbGmrpPortRegAdminCtrl_forbidden<s(0)(0)(0)>[&]=2
} pbGmrpPortRegAdminCtrl_Tval<s(0)(0)(0)>[&];(D1:pbGmrpPortRegAdminCtrl_Tval:1)[[TYPENAME:pbGmrpPortRegAdminCtrl_Tval]]

typedef enum {
	pbGmrpPortApplAdminCtrl_normal<s(0)(0)(0)>[&]=0,
	pbGmrpPortApplAdminCtrl_nonparticipant<s(0)(0)(0)>[&]=1
} pbGmrpPortApplAdminCtrl_Tval<s(0)(0)(0)>[&];(D1:pbGmrpPortApplAdminCtrl_Tval:1)[[TYPENAME:pbGmrpPortApplAdminCtrl_Tval]]

typedef enum {
	pbGmrpForwardAllEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGmrpForwardAllEnable_enabled<s(0)(0)(0)>[&]=1
} pbGmrpForwardAllEnable_Tval<s(0)(0)(0)>[&];(D1:pbGmrpForwardAllEnable_Tval:1)[[TYPENAME:pbGmrpForwardAllEnable_Tval]]

typedef enum {
	pbGmrpBlockPortEnable_disabled<s(0)(0)(0)>[&]=0,
	pbGmrpBlockPortEnable_enabled<s(0)(0)(0)>[&]=1
} pbGmrpBlockPortEnable_Tval<s(0)(0)(0)>[&];(D1:pbGmrpBlockPortEnable_Tval:1)[[TYPENAME:pbGmrpBlockPortEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	pbGmrpPortType_Tval<s(1)(1)(0)>[T] pbGmrpPortType<s(1)(1)(0)>[&];                                  
	int		pbGmrpPortNo<s(1)(1)(0)>[&];                                                   
	pbGmrpPortEnable_Tval<s(1)(1)(0)>[T] pbGmrpPortEnable<s(1)(1)(0)>[&];   
	pbGmrpPortRegAdminCtrl_Tval<s(1)(1)(0)>[T] pbGmrpPortRegAdminCtrl<s(1)(1)(0)>[&];   
	pbGmrpPortApplAdminCtrl_Tval<s(1)(1)(0)>[T] pbGmrpPortApplAdminCtrl<s(1)(1)(0)>[&];   
	pbGmrpForwardAllEnable_Tval<s(1)(1)(0)>[T] pbGmrpForwardAllEnable<s(1)(1)(0)>[&];   
	pbGmrpBlockPortEnable_Tval<s(1)(1)(0)>[T] pbGmrpBlockPortEnable<s(1)(1)(0)>[&];   
}MIBpbGmrpPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbGmrpPortTable_t:1)[[TYPENAME:MIBpbGmrpPortTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbVlanGmrpTable_Did<s(0)(0)(0)>[&];(D1:pbVlanGmrpTable_Did:0)

   
typedef enum {
	pbVlanGmrpEnable_disable<s(0)(0)(0)>[&]=0,
	pbVlanGmrpEnable_enable<s(0)(0)(0)>[&]=1
} pbVlanGmrpEnable_Tval<s(0)(0)(0)>[&];(D1:pbVlanGmrpEnable_Tval:1)[[TYPENAME:pbVlanGmrpEnable_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		pbGmrpVlanNumber<s(1)(1)(0)>[&];                                       
	pbVlanGmrpEnable_Tval<s(1)(1)(0)>[T] pbVlanGmrpEnable<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbVlanGmrpRowStatus<s(1)(1)(0)>[&];   
}MIBpbVlanGmrpTable_t<s(0)(0)(0)>[&];(D1:MIBpbVlanGmrpTable_t:1)[[TYPENAME:MIBpbVlanGmrpTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbGmrpDMacTable_Did<s(0)(0)(0)>[&];(D1:pbGmrpDMacTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                         
	int		pbGmrpVlanId<s(1)(1)(0)>[&];                                             
	char		pbGmrpMacAddr<s(1)(1)(0)>[&][20];                                       
	char		pbGmrpMacMemberPort1<s(1)(1)(0)>[&][255];   
	char		pbGmrpMacMemberPort2<s(1)(1)(0)>[&][255];   
}MIBpbGmrpDMacTable_t<s(0)(0)(0)>[&];(D1:MIBpbGmrpDMacTable_t:1)[[TYPENAME:MIBpbGmrpDMacTable_t]]












 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbGmrpModule_Did<s(0)(0)(0)>[&];(D1:pbGmrpModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] eosMapper_Did<s(0)(0)(0)>[&];(D1:eosMapper_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] vcgConfigTable_Did<s(0)(0)(0)>[&];(D1:vcgConfigTable_Did:0)

   
typedef enum {
	vcgXVType_vc4<s(0)(0)(0)>[&]=0,
	vcgXVType_vc3<s(0)(0)(0)>[&]=1,
	vcgXVType_vc12<s(0)(0)(0)>[&]=2
} vcgXVType_Tval<s(0)(0)(0)>[&];(D1:vcgXVType_Tval:1)[[TYPENAME:vcgXVType_Tval]]

typedef enum {
	vcgPauseTransparent_disable<s(0)(0)(0)>[&]=0,
	vcgPauseTransparent_enable<s(0)(0)(0)>[&]=1
} vcgPauseTransparent_Tval<s(0)(0)(0)>[&];(D1:vcgPauseTransparent_Tval:1)[[TYPENAME:vcgPauseTransparent_Tval]]

typedef enum {
	vcgGfpMode_gfp_f<s(0)(0)(0)>[&]=0,
	vcgGfpMode_gfp_t<s(0)(0)(0)>[&]=1
} vcgGfpMode_Tval<s(0)(0)(0)>[&];(D1:vcgGfpMode_Tval:1)[[TYPENAME:vcgGfpMode_Tval]]

typedef enum {
	vcgGfpType_gfp_NullExternsion<s(0)(0)(0)>[&]=0,
	vcgGfpType_gfp_LinearFrames<s(0)(0)(0)>[&]=1
} vcgGfpType_Tval<s(0)(0)(0)>[&];(D1:vcgGfpType_Tval:1)[[TYPENAME:vcgGfpType_Tval]]

typedef enum {
	vcgGfpFCS_disable<s(0)(0)(0)>[&]=0,
	vcgGfpFCS_enable<s(0)(0)(0)>[&]=1
} vcgGfpFCS_Tval<s(0)(0)(0)>[&];(D1:vcgGfpFCS_Tval:1)[[TYPENAME:vcgGfpFCS_Tval]]

typedef enum {
	vcgGfpFcsAutoDetect_disable<s(0)(0)(0)>[&]=0,
	vcgGfpFcsAutoDetect_enable<s(0)(0)(0)>[&]=1
} vcgGfpFcsAutoDetect_Tval<s(0)(0)(0)>[&];(D1:vcgGfpFcsAutoDetect_Tval:1)[[TYPENAME:vcgGfpFcsAutoDetect_Tval]]

typedef enum {
	vcgPortMonMode_auto<s(0)(0)(0)>[&]=1,
	vcgPortMonMode_mon<s(0)(0)(0)>[&]=2,
	vcgPortMonMode_nmon<s(0)(0)(0)>[&]=3
} vcgPortMonMode_Tval<s(0)(0)(0)>[&];(D1:vcgPortMonMode_Tval:1)[[TYPENAME:vcgPortMonMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		vcgNo<s(1)(1)(0)>[&];                                                  
	char		vcgLabel<s(1)(1)(0)>[&][100];   
	vcgXVType_Tval<s(1)(1)(0)>[T] vcgXVType<s(1)(1)(0)>[&];   
	char		vcgChannelId<s(1)(1)(0)>[&][50];   
	TruthValue_Tval<s(1)(1)(0)>[T] vcgLCASSupport<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] vcgCapacityTrigger<s(1)(1)(0)>[&];   
	vcgPauseTransparent_Tval<s(1)(1)(0)>[T] vcgPauseTransparent<s(1)(1)(0)>[&];   
	int		vcgLcasHoldOffTime<s(1)(1)(0)>[&];   
	vcgGfpMode_Tval<s(1)(1)(0)>[T] vcgGfpMode<s(1)(1)(0)>[&];   
	vcgGfpType_Tval<s(1)(1)(0)>[T] vcgGfpType<s(1)(1)(0)>[&];   
	vcgGfpFCS_Tval<s(1)(1)(0)>[T] vcgGfpFCS<s(1)(1)(0)>[&];   
	vcgGfpFcsAutoDetect_Tval<s(1)(1)(0)>[T] vcgGfpFcsAutoDetect<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] vcgGfpCsfAutoMode<s(1)(1)(0)>[&];   
	vcgPortMonMode_Tval<s(1)(1)(0)>[T] vcgPortMonMode<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] vcgPortAlarmDisable<s(1)(1)(0)>[&];
	int		vcgPLCTThreshold<s(1)(1)(0)>[&];   
	int		vcgPLCRThreshold<s(1)(1)(0)>[&];   
}MIBvcgConfigTable_t<s(0)(0)(0)>[&];(D1:MIBvcgConfigTable_t:1)[[TYPENAME:MIBvcgConfigTable_t]]

























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] eosGlobalConfigTable_Did<s(0)(0)(0)>[&];(D1:eosGlobalConfigTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];         
	int		eosIPGConfig<s(1)(1)(0)>[&];   
	int		eosMTUSize<s(1)(1)(0)>[&];   
	int		eosEslConfig<s(1)(1)(0)>[&];   
}MIBeosGlobalConfigTable_t<s(0)(0)(0)>[&];(D1:MIBeosGlobalConfigTable_t:1)[[TYPENAME:MIBeosGlobalConfigTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSOLCASConfigTable_Did<s(0)(0)(0)>[&];(D1:pbSOLCASConfigTable_Did:0)

   
typedef enum {
	pbSOLCASActive_none<s(0)(0)(0)>[&]=0,
	pbSOLCASActive_active<s(0)(0)(0)>[&]=1,
	pbSOLCASActive_deactive<s(0)(0)(0)>[&]=2
} pbSOLCASActive_Tval<s(0)(0)(0)>[&];(D1:pbSOLCASActive_Tval:1)[[TYPENAME:pbSOLCASActive_Tval]]

typedef enum {
	pbSOLCASState_fixed<s(0)(0)(0)>[&]=0,
	pbSOLCASState_add<s(0)(0)(0)>[&]=1,
	pbSOLCASState_normal<s(0)(0)(0)>[&]=2,
	pbSOLCASState_eos<s(0)(0)(0)>[&]=3,
	pbSOLCASState_idle<s(0)(0)(0)>[&]=5,
	pbSOLCASState_dnu<s(0)(0)(0)>[&]=15
} pbSOLCASState_Tval<s(0)(0)(0)>[&];(D1:pbSOLCASState_Tval:1)[[TYPENAME:pbSOLCASState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	int		pbPortNo<s(1)(1)(0)>[&];                                    
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                           
	int		pbTpIndex<s(1)(1)(0)>[&];                                   
	pbSOLCASActive_Tval<s(1)(1)(0)>[T] pbSOLCASActive<s(1)(1)(0)>[&];   
	int		pbSOLCASVCGPort<s(1)(1)(0)>[&];   
	pbSOLCASState_Tval<s(1)(1)(0)>[T] pbSOLCASState<s(1)(1)(0)>[&];   
}MIBpbSOLCASConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbSOLCASConfigTable_t:1)[[TYPENAME:MIBpbSOLCASConfigTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSKLCASConfigTable_Did<s(0)(0)(0)>[&];(D1:pbSKLCASConfigTable_Did:0)

   
typedef enum {
	pbSKLCASState_ok<s(0)(0)(0)>[&]=0,
	pbSKLCASState_fail<s(0)(0)(0)>[&]=1
} pbSKLCASState_Tval<s(0)(0)(0)>[&];(D1:pbSKLCASState_Tval:1)[[TYPENAME:pbSKLCASState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	int		pbPortNo<s(1)(1)(0)>[&];                                    
	PbTPType_Tval<s(1)(1)(0)>[T] pbTpType<s(1)(1)(0)>[&];                           
	int		pbTpIndex<s(1)(1)(0)>[&];                                   
	int		pbSKLCASVCGPort<s(1)(1)(0)>[&];   
	pbSKLCASState_Tval<s(1)(1)(0)>[T] pbSKLCASState<s(1)(1)(0)>[&];   
}MIBpbSKLCASConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbSKLCASConfigTable_t:1)[[TYPENAME:MIBpbSKLCASConfigTable_t]]













 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseEOSModule_Did<s(0)(0)(0)>[&];(D1:enterpriseEOSModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbRstpBase_Did<s(0)(0)(0)>[&];(D1:pbRstpBase_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRstpBridgeTable_Did<s(0)(0)(0)>[&];(D1:pbRstpBridgeTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                 
	int		pbRstpBridgeAddress_len<s(1)(1)(0)>[&];
	char		pbRstpBridgeAddress<s(1)(1)(0)>[&][6];   
	int		pbRstpBridgePriority<s(1)(1)(0)>[&];   
	int		pbRstpBridgeMaxAge<s(1)(1)(0)>[&];   
	int		pbRstpBridgeHelloTime<s(1)(1)(0)>[&];   
	int		pbRstpBridgeForwardDelay<s(1)(1)(0)>[&];   
	int		pbRstpTxHoldCount<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRstpBEGIN<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRstpEventSwitch<s(1)(1)(0)>[&];   
}MIBpbRstpBridgeTable_t<s(0)(0)(0)>[&];(D1:MIBpbRstpBridgeTable_t:1)[[TYPENAME:MIBpbRstpBridgeTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRstpPortTable_Did<s(0)(0)(0)>[&];(D1:pbRstpPortTable_Did:0)

   
typedef enum {
	pbRstpPortType_lan<s(0)(0)(0)>[&]=1,
	pbRstpPortType_wan<s(0)(0)(0)>[&]=2,
	pbRstpPortType_trunk<s(0)(0)(0)>[&]=3
} pbRstpPortType_Tval<s(0)(0)(0)>[&];(D1:pbRstpPortType_Tval:1)[[TYPENAME:pbRstpPortType_Tval]]

typedef enum {
	pbRstpPortEnable_enabled<s(0)(0)(0)>[&]=1,
	pbRstpPortEnable_disabled<s(0)(0)(0)>[&]=2
} pbRstpPortEnable_Tval<s(0)(0)(0)>[&];(D1:pbRstpPortEnable_Tval:1)[[TYPENAME:pbRstpPortEnable_Tval]]

typedef enum {
	pbRstpPortAdminPointToPoint_forceTrue<s(0)(0)(0)>[&]=0,
	pbRstpPortAdminPointToPoint_forceFalse<s(0)(0)(0)>[&]=1,
	pbRstpPortAdminPointToPoint_auto<s(0)(0)(0)>[&]=2
} pbRstpPortAdminPointToPoint_Tval<s(0)(0)(0)>[&];(D1:pbRstpPortAdminPointToPoint_Tval:1)[[TYPENAME:pbRstpPortAdminPointToPoint_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                       
	pbRstpPortType_Tval<s(1)(1)(0)>[T] pbRstpPortType<s(1)(1)(0)>[&];                                          
	int		pbRstpPortNo<s(1)(1)(0)>[&];                                                           
	int		pbRstpPortPriority<s(1)(1)(0)>[&];   
	pbRstpPortEnable_Tval<s(1)(1)(0)>[T] pbRstpPortEnable<s(1)(1)(0)>[&];   
	int		pbRstpPortPathCost<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbRstpPortAdminEdgePort<s(1)(1)(0)>[&];   
	pbRstpPortAdminPointToPoint_Tval<s(1)(1)(0)>[T] pbRstpPortAdminPointToPoint<s(1)(1)(0)>[&];   
}MIBpbRstpPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbRstpPortTable_t:1)[[TYPENAME:MIBpbRstpPortTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRstpBridgeStateTable_Did<s(0)(0)(0)>[&];(D1:pbRstpBridgeStateTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	char		pbRstpRPVector1<s(1)(1)(0)>[&][75];   
	char		pbRstpRPVector2<s(1)(1)(0)>[&][75];   
	int		pbRstpRootMaxAge<s(1)(1)(0)>[&];   
	int		pbRstpRootHelloTime<s(1)(1)(0)>[&];   
	int		pbRstpRootForwardDelay<s(1)(1)(0)>[&];   
	int		pbRstpRootPortId<s(1)(1)(0)>[&];   
}MIBpbRstpBridgeStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbRstpBridgeStateTable_t:1)[[TYPENAME:MIBpbRstpBridgeStateTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbRstpPortStateTable_Did<s(0)(0)(0)>[&];(D1:pbRstpPortStateTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	int		pbRstpPortType<s(1)(1)(0)>[&];                                      
	int		pbRstpPortNo<s(1)(1)(0)>[&];                                        
	int		pbRstpPEnable<s(1)(1)(0)>[&];   
	char		pbRstpPPVector1<s(1)(1)(0)>[&][75];   
	char		pbRstpPPVector2<s(1)(1)(0)>[&][75];   
	char		pbRstpDsgPVector1<s(1)(1)(0)>[&][75];   
	char		pbRstpDsgPVector2<s(1)(1)(0)>[&][75];   
	char		pbRstpMsgPVector1<s(1)(1)(0)>[&][75];   
	char		pbRstpMsgPVector2<s(1)(1)(0)>[&][75];   
	char		pbRstpPTimes<s(1)(1)(0)>[&][30];   
	char		pbRstpDsgTimes<s(1)(1)(0)>[&][30];   
	char		pbRstpMsgTimes<s(1)(1)(0)>[&][30];   
	int		pbRstpPForward<s(1)(1)(0)>[&];   
	int		pbRstpPLearn<s(1)(1)(0)>[&];   
	int		pbRstpPInfoIs<s(1)(1)(0)>[&];   
	int		pbRstpPRole<s(1)(1)(0)>[&];   
	int		pbRstpPSelectedRole<s(1)(1)(0)>[&];   
}MIBpbRstpPortStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbRstpPortStateTable_t:1)[[TYPENAME:MIBpbRstpPortStateTable_t]]

























 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseRstpMIB_Did<s(0)(0)(0)>[&];(D1:enterpriseRstpMIB_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstpBase_Did<s(0)(0)(0)>[&];(D1:pbMstpBase_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstpBridgeBase_Did<s(0)(0)(0)>[&];(D1:pbMstpBridgeBase_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstpPortBase_Did<s(0)(0)(0)>[&];(D1:pbMstpPortBase_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstpBridgeStateBase_Did<s(0)(0)(0)>[&];(D1:pbMstpBridgeStateBase_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstpPortStateBase_Did<s(0)(0)(0)>[&];(D1:pbMstpPortStateBase_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCistPortStateTable_Did<s(0)(0)(0)>[&];(D1:pbCistPortStateTable_Did:0)

   
typedef enum {
	pbCistPState_psDisable<s(0)(0)(0)>[&]=0,
	pbCistPState_psBlocking<s(0)(0)(0)>[&]=1,
	pbCistPState_psLearning<s(0)(0)(0)>[&]=2,
	pbCistPState_psForwarding<s(0)(0)(0)>[&]=3
} pbCistPState_Tval<s(0)(0)(0)>[&];(D1:pbCistPState_Tval:1)[[TYPENAME:pbCistPState_Tval]]

typedef enum {
	pbCistPRole_prDisable<s(0)(0)(0)>[&]=0,
	pbCistPRole_prRoot<s(0)(0)(0)>[&]=1,
	pbCistPRole_prDesignated<s(0)(0)(0)>[&]=2,
	pbCistPRole_prAlternate<s(0)(0)(0)>[&]=3,
	pbCistPRole_prBackup<s(0)(0)(0)>[&]=4,
	pbCistPRole_prMaster<s(0)(0)(0)>[&]=5
} pbCistPRole_Tval<s(0)(0)(0)>[&];(D1:pbCistPRole_Tval:1)[[TYPENAME:pbCistPRole_Tval]]

typedef enum {
	pbCistPPState_forceTrue<s(0)(0)(0)>[&]=0,
	pbCistPPState_forceFalse<s(0)(0)(0)>[&]=1
} pbCistPPState_Tval<s(0)(0)(0)>[&];(D1:pbCistPPState_Tval:1)[[TYPENAME:pbCistPPState_Tval]]

typedef enum {
	pbPortBpduRule_stp<s(0)(0)(0)>[&]=0,
	pbPortBpduRule_rstp_mstp<s(0)(0)(0)>[&]=1
} pbPortBpduRule_Tval<s(0)(0)(0)>[&];(D1:pbPortBpduRule_Tval:1)[[TYPENAME:pbPortBpduRule_Tval]]

typedef enum {
	pbPortOperEdge_normalPort<s(0)(0)(0)>[&]=0,
	pbPortOperEdge_edgePort<s(0)(0)(0)>[&]=1
} pbPortOperEdge_Tval<s(0)(0)(0)>[&];(D1:pbPortOperEdge_Tval:1)[[TYPENAME:pbPortOperEdge_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                   
	PbEthInterfaceType_Tval<s(1)(1)(0)>[T] pbMstPortType<s(1)(1)(0)>[&];                
	int		pbPortNo<s(1)(1)(0)>[&];                                        
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbCistPortEnable<s(1)(1)(0)>[&];   
	char		pbCistPPVector1<s(1)(1)(0)>[&][75];   
	char		pbCistPPVector2<s(1)(1)(0)>[&][75];   
	char		pbCistPPVector3<s(1)(1)(0)>[&][75];   
	char		pbCistDPVector1<s(1)(1)(0)>[&][75];   
	char		pbCistDPVector2<s(1)(1)(0)>[&][75];   
	char		pbCistDPVector3<s(1)(1)(0)>[&][75];   
	char		pbCistMPVector1<s(1)(1)(0)>[&][75];   
	char		pbCistMPVector2<s(1)(1)(0)>[&][75];   
	char		pbCistMPVector3<s(1)(1)(0)>[&][75];   
	char		pbCistPTimes<s(1)(1)(0)>[&][30];   
	char		pbCistDTimes<s(1)(1)(0)>[&][30];   
	char		pbCistMTimes<s(1)(1)(0)>[&][30];   
	pbCistPState_Tval<s(1)(1)(0)>[T] pbCistPState<s(1)(1)(0)>[&];   
	int		pbCistPInfoIs<s(1)(1)(0)>[&];   
	pbCistPRole_Tval<s(1)(1)(0)>[T] pbCistPRole<s(1)(1)(0)>[&];   
	pbCistPPState_Tval<s(1)(1)(0)>[T] pbCistPPState<s(1)(1)(0)>[&];
	int		pbMstRcvdInternal<s(1)(1)(0)>[&];   
	pbPortBpduRule_Tval<s(1)(1)(0)>[T] pbPortBpduRule<s(1)(1)(0)>[&];
	pbPortOperEdge_Tval<s(1)(1)(0)>[T] pbPortOperEdge<s(1)(1)(0)>[&];
}MIBpbCistPortStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbCistPortStateTable_t:1)[[TYPENAME:MIBpbCistPortStateTable_t]]






























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstiPortStateTable_Did<s(0)(0)(0)>[&];(D1:pbMstiPortStateTable_Did:0)

   
typedef enum {
	pbMstiPState_psDisable<s(0)(0)(0)>[&]=0,
	pbMstiPState_psBlocking<s(0)(0)(0)>[&]=1,
	pbMstiPState_psLearning<s(0)(0)(0)>[&]=2,
	pbMstiPState_psForwarding<s(0)(0)(0)>[&]=3
} pbMstiPState_Tval<s(0)(0)(0)>[&];(D1:pbMstiPState_Tval:1)[[TYPENAME:pbMstiPState_Tval]]

typedef enum {
	pbMstiPRole_prDisable<s(0)(0)(0)>[&]=0,
	pbMstiPRole_prRoot<s(0)(0)(0)>[&]=1,
	pbMstiPRole_prDesignated<s(0)(0)(0)>[&]=2,
	pbMstiPRole_prAlternate<s(0)(0)(0)>[&]=3,
	pbMstiPRole_prBackup<s(0)(0)(0)>[&]=4,
	pbMstiPRole_prMaster<s(0)(0)(0)>[&]=5
} pbMstiPRole_Tval<s(0)(0)(0)>[&];(D1:pbMstiPRole_Tval:1)[[TYPENAME:pbMstiPRole_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                       
	PbEthInterfaceType_Tval<s(1)(1)(0)>[T] pbMstPortType<s(1)(1)(0)>[&];                    
	int		pbPortNo<s(1)(1)(0)>[&];                                            
	int		pbMstiNumber<s(1)(1)(0)>[&];                                        
	char		pbMstiPPVector1<s(1)(1)(0)>[&][75];   
	char		pbMstiPPVector2<s(1)(1)(0)>[&][75];   
	char		pbMstiDPVector1<s(1)(1)(0)>[&][75];   
	char		pbMstiDPVector2<s(1)(1)(0)>[&][75];   
	char		pbMstiMPVector1<s(1)(1)(0)>[&][75];   
	char		pbMstiMPVector2<s(1)(1)(0)>[&][75];   
	char		pbMstiPTimes<s(1)(1)(0)>[&][30];   
	char		pbMstiDTimes<s(1)(1)(0)>[&][30];   
	char		pbMstiMTimes<s(1)(1)(0)>[&][30];   
	pbMstiPState_Tval<s(1)(1)(0)>[T] pbMstiPState<s(1)(1)(0)>[&];   
	int		pbMstiPInfoIs<s(1)(1)(0)>[&];   
	pbMstiPRole_Tval<s(1)(1)(0)>[T] pbMstiPRole<s(1)(1)(0)>[&];   
	int		pbMstiPSelectedRole<s(1)(1)(0)>[&];   
}MIBpbMstiPortStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbMstiPortStateTable_t:1)[[TYPENAME:MIBpbMstiPortStateTable_t]]
























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCistBridgeStateTable_Did<s(0)(0)(0)>[&];(D1:pbCistBridgeStateTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	int		pbMstBaseNumPorts<s(1)(1)(0)>[&];   
	char		pbCistRPVector1<s(1)(1)(0)>[&][75];   
	char		pbCistRPVector2<s(1)(1)(0)>[&][75];   
	char		pbCistRPVector3<s(1)(1)(0)>[&][75];   
	int		pbMstRootMaxAge<s(1)(1)(0)>[&];
	int		pbMstRootMsgAge<s(1)(1)(0)>[&];   
	int		pbMstRootHelloTime<s(1)(1)(0)>[&];   
	int		pbMstRootForwardDelay<s(1)(1)(0)>[&];   
	int		pbCistRootRemainingHops<s(1)(1)(0)>[&];   
	int		pbCistRootPortId<s(1)(1)(0)>[&];   
	int		pbMstCfgDigest_len<s(1)(1)(0)>[&];
	char		pbMstCfgDigest<s(1)(1)(0)>[&][16];   
}MIBpbCistBridgeStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbCistBridgeStateTable_t:1)[[TYPENAME:MIBpbCistBridgeStateTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstiBridgeStateTable_Did<s(0)(0)(0)>[&];(D1:pbMstiBridgeStateTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	int		pbMstiNumber<s(1)(1)(0)>[&];                                                
	char		pbMstiRPVector1<s(1)(1)(0)>[&][75];   
	char		pbMstiRPVector2<s(1)(1)(0)>[&][75];   
	int		pbMstiRootRemainingHops<s(1)(1)(0)>[&];   
	int		pbMstiRootPortId<s(1)(1)(0)>[&];   
}MIBpbMstiBridgeStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbMstiBridgeStateTable_t:1)[[TYPENAME:MIBpbMstiBridgeStateTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCistPortTable_Did<s(0)(0)(0)>[&];(D1:pbCistPortTable_Did:0)

   
typedef enum {
	pbMstPortAdminPointToPoint_forceTrue<s(0)(0)(0)>[&]=0,
	pbMstPortAdminPointToPoint_forceFalse<s(0)(0)(0)>[&]=1,
	pbMstPortAdminPointToPoint_auto<s(0)(0)(0)>[&]=2
} pbMstPortAdminPointToPoint_Tval<s(0)(0)(0)>[&];(D1:pbMstPortAdminPointToPoint_Tval:1)[[TYPENAME:pbMstPortAdminPointToPoint_Tval]]

typedef enum {
	pbMstPortBpduMode_standardMode<s(0)(0)(0)>[&]=0,
	pbMstPortBpduMode_tagMode<s(0)(0)(0)>[&]=1
} pbMstPortBpduMode_Tval<s(0)(0)(0)>[&];(D1:pbMstPortBpduMode_Tval:1)[[TYPENAME:pbMstPortBpduMode_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                                     
	PbEthInterfaceType_Tval<s(1)(1)(0)>[T] pbMstPortType<s(1)(1)(0)>[&];                                  
	int		pbPortNo<s(1)(1)(0)>[&];                                                          
	int		pbMstPort<s(1)(1)(0)>[&];   
	int		pbCistPortPriority<s(1)(1)(0)>[&];   
	int		pbCistExPortPathCost<s(1)(1)(0)>[&];   
	int		pbCistInPortPathCost<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMstPortAdminEdgePort<s(1)(1)(0)>[&];   
	pbMstPortAdminPointToPoint_Tval<s(1)(1)(0)>[T] pbMstPortAdminPointToPoint<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMstPortEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMstPortCheck<s(1)(1)(0)>[&];
	pbMstPortBpduMode_Tval<s(1)(1)(0)>[T] pbMstPortBpduMode<s(1)(1)(0)>[&];
}MIBpbCistPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbCistPortTable_t:1)[[TYPENAME:MIBpbCistPortTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstiPortTable_Did<s(0)(0)(0)>[&];(D1:pbMstiPortTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                     
	PbEthInterfaceType_Tval<s(1)(1)(0)>[T] pbMstPortType<s(1)(1)(0)>[&];                  
	int		pbPortNo<s(1)(1)(0)>[&];                                          
	int		pbMstiNumber<s(1)(1)(0)>[&];                                      
	int		pbMstiPortPriority<s(1)(1)(0)>[&];   
	int		pbMstiPortPathCost<s(1)(1)(0)>[&];   
}MIBpbMstiPortTable_t<s(0)(0)(0)>[&];(D1:MIBpbMstiPortTable_t:1)[[TYPENAME:MIBpbMstiPortTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCistBridgeTable_Did<s(0)(0)(0)>[&];(D1:pbCistBridgeTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                               
	int		pbMstBaseBridgeAddress_len<s(1)(1)(0)>[&];
	char		pbMstBaseBridgeAddress<s(1)(1)(0)>[&][6];   
	int		pbCistPriority<s(1)(1)(0)>[&];   
	int		pbMstForceVersion<s(1)(1)(0)>[&];   
	int		pbMstBridgeMaxAge<s(1)(1)(0)>[&];   
	int		pbMstBridgeHelloTime<s(1)(1)(0)>[&];   
	int		pbMstBridgeForwardDelay<s(1)(1)(0)>[&];   
	int		pbMstTxHoldCount<s(1)(1)(0)>[&];   
	int		pbMstMaxHops<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMstMstpBEGIN<s(1)(1)(0)>[&];   
	char		pbMstMstpConfigName<s(1)(1)(0)>[&][33];   
	int		pbMstMstpRevisonLevel<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMstEventSwitch<s(1)(1)(0)>[&];
}MIBpbCistBridgeTable_t<s(0)(0)(0)>[&];(D1:MIBpbCistBridgeTable_t:1)[[TYPENAME:MIBpbCistBridgeTable_t]]




















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMstiBridgeTable_Did<s(0)(0)(0)>[&];(D1:pbMstiBridgeTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                 
	int		pbMstiNumber<s(1)(1)(0)>[&];                                     
	char		pbMstiVlanNumber<s(1)(1)(0)>[&][255];   
	int		pbMstiPriority<s(1)(1)(0)>[&];   
}MIBpbMstiBridgeTable_t<s(0)(0)(0)>[&];(D1:MIBpbMstiBridgeTable_t:1)[[TYPENAME:MIBpbMstiBridgeTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] enterpriseMstpMIB_Did<s(0)(0)(0)>[&];(D1:enterpriseMstpMIB_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIpRouteTable_Did<s(0)(0)(0)>[&];(D1:pbIpRouteTable_Did:0)

   
typedef enum {
	pbIpRouteProto_other<s(0)(0)(0)>[&]=1,
	pbIpRouteProto_local<s(0)(0)(0)>[&]=2,
	pbIpRouteProto_netmgmt<s(0)(0)(0)>[&]=3,
	pbIpRouteProto_icmp<s(0)(0)(0)>[&]=4,
	pbIpRouteProto_egp<s(0)(0)(0)>[&]=5,
	pbIpRouteProto_ggp<s(0)(0)(0)>[&]=6,
	pbIpRouteProto_hello<s(0)(0)(0)>[&]=7,
	pbIpRouteProto_rip<s(0)(0)(0)>[&]=8,
	pbIpRouteProto_is_is<s(0)(0)(0)>[&]=9,
	pbIpRouteProto_es_is<s(0)(0)(0)>[&]=10,
	pbIpRouteProto_ciscoIgrp<s(0)(0)(0)>[&]=11,
	pbIpRouteProto_bbnSpfIgp<s(0)(0)(0)>[&]=12,
	pbIpRouteProto_ospf<s(0)(0)(0)>[&]=13,
	pbIpRouteProto_bgp<s(0)(0)(0)>[&]=14
} pbIpRouteProto_Tval<s(0)(0)(0)>[&];(D1:pbIpRouteProto_Tval:1)[[TYPENAME:pbIpRouteProto_Tval]]

typedef enum {
	pbIpRouteType_other<s(0)(0)(0)>[&]=1,
	pbIpRouteType_invalid<s(0)(0)(0)>[&]=2,
	pbIpRouteType_direct<s(0)(0)(0)>[&]=3,
	pbIpRouteType_indirect<s(0)(0)(0)>[&]=4
} pbIpRouteType_Tval<s(0)(0)(0)>[&];(D1:pbIpRouteType_Tval:1)[[TYPENAME:pbIpRouteType_Tval]]

typedef struct
{
	unsigned int	pbIpRouteDest<s(1)(1)(0)>[&];                            
	unsigned int	pbIpRouteMask<s(1)(1)(0)>[&];                            
	pbIpRouteProto_Tval<s(1)(1)(0)>[T] pbIpRouteProto<s(1)(1)(0)>[&];                    
	int		pbIpRouteIfIndex<s(1)(1)(0)>[&];   
	unsigned int	pbIpRouteNextHop<s(1)(1)(0)>[&];   
	pbIpRouteType_Tval<s(1)(1)(0)>[T] pbIpRouteType<s(1)(1)(0)>[&];   
	int		pbIpRouteAge<s(1)(1)(0)>[&];   
	int		pbIpRouteMetric1<s(1)(1)(0)>[&];   
	int		pbIpRouteMetric2<s(1)(1)(0)>[&];   
	int		pbIpRouteMetric3<s(1)(1)(0)>[&];   
	int		pbIpRouteMetric4<s(1)(1)(0)>[&];   
	int		pbIpRouteMetric5<s(1)(1)(0)>[&];   
}MIBpbIpRouteTable_t<s(0)(0)(0)>[&];(D1:MIBpbIpRouteTable_t:1)[[TYPENAME:MIBpbIpRouteTable_t]]



















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] dccCfgTable_Did<s(0)(0)(0)>[&];(D1:dccCfgTable_Did:0)

   
typedef enum {
	mode_ms<s(0)(0)(0)>[&]=0,
	mode_rs<s(0)(0)(0)>[&]=1,
	mode_hcoc9<s(0)(0)(0)>[&]=2,
	mode_hcoc27<s(0)(0)(0)>[&]=3,
	mode_ecc<s(0)(0)(0)>[&]=4
} mode_Tval<s(0)(0)(0)>[&];(D1:mode_Tval:1)[[TYPENAME:mode_Tval]]

typedef enum {
	state_disable<s(0)(0)(0)>[&]=1,
	state_enable<s(0)(0)(0)>[&]=2,
	state_transparent<s(0)(0)(0)>[&]=3
} state_Tval<s(0)(0)(0)>[&];(D1:state_Tval:1)[[TYPENAME:state_Tval]]

typedef enum {
	protocol_ppp<s(0)(0)(0)>[&]=1,
	protocol_osi<s(0)(0)(0)>[&]=2,
	protocol_iptunnel<s(0)(0)(0)>[&]=3
} protocol_Tval<s(0)(0)(0)>[&];(D1:protocol_Tval:1)[[TYPENAME:protocol_Tval]]

typedef enum {
	linkStatus_down<s(0)(0)(0)>[&]=1,
	linkStatus_up<s(0)(0)(0)>[&]=2
} linkStatus_Tval<s(0)(0)(0)>[&];(D1:linkStatus_Tval:1)[[TYPENAME:linkStatus_Tval]]

typedef enum {
	mspStatus_nonprotected<s(0)(0)(0)>[&]=1,
	mspStatus_protected<s(0)(0)(0)>[&]=2
} mspStatus_Tval<s(0)(0)(0)>[&];(D1:mspStatus_Tval:1)[[TYPENAME:mspStatus_Tval]]

typedef enum {
	crcMode_crc16<s(0)(0)(0)>[&]=1,
	crcMode_crc32<s(0)(0)(0)>[&]=2
} crcMode_Tval<s(0)(0)(0)>[&];(D1:crcMode_Tval:1)[[TYPENAME:crcMode_Tval]]

typedef enum {
	multilink_open<s(0)(0)(0)>[&]=1,
	multilink_close<s(0)(0)(0)>[&]=2
} multilink_Tval<s(0)(0)(0)>[&];(D1:multilink_Tval:1)[[TYPENAME:multilink_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];               
	int		pbPortNo<s(1)(1)(0)>[&];                                    
	mode_Tval<s(1)(1)(0)>[T] mode<s(1)(1)(0)>[&];                                      
	state_Tval<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];   
	protocol_Tval<s(1)(1)(0)>[T] protocol<s(1)(1)(0)>[&];   
	unsigned int	dccBundleNumber<s(1)(1)(0)>[&];   
	linkStatus_Tval<s(1)(1)(0)>[T] linkStatus<s(1)(1)(0)>[&];   
	mspStatus_Tval<s(1)(1)(0)>[T] mspStatus<s(1)(1)(0)>[&];   
	int		destSlot<s(1)(1)(0)>[&];   
	int		destPort<s(1)(1)(0)>[&];   
	int		mtu<s(1)(1)(0)>[&];
	crcMode_Tval<s(1)(1)(0)>[T] crcMode<s(1)(1)(0)>[&];   
	int		hcocIndex<s(1)(1)(0)>[&];   
	multilink_Tval<s(1)(1)(0)>[T] multilink<s(1)(1)(0)>[&];   
}MIBdccCfgTable_t<s(0)(0)(0)>[&];(D1:MIBdccCfgTable_t:1)[[TYPENAME:MIBdccCfgTable_t]]





















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] ipInIpCfgTable_Did<s(0)(0)(0)>[&];(D1:ipInIpCfgTable_Did:0)

   
typedef struct
{
	unsigned int	ipInIpIfIpAddr<s(1)(1)(0)>[&];                               
	unsigned int	ipInIpIfMask<s(1)(1)(0)>[&];                                 
	unsigned int	ipInIpDestIpAddr<s(1)(1)(0)>[&];                             
	unsigned int	ipInIpSourcIpAddr<s(1)(1)(0)>[&];   
	unsigned int	ipInIpIfIndex<s(1)(1)(0)>[&];   
	unsigned int	ipInIpIfMtu<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] ipInIpRowStatus<s(1)(1)(0)>[&];
	unsigned int	ipInIpPeerIfIpAddr<s(1)(1)(0)>[&];   
}MIBipInIpCfgTable_t<s(0)(0)(0)>[&];(D1:MIBipInIpCfgTable_t:1)[[TYPENAME:MIBipInIpCfgTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mpBundleCfgTable_Did<s(0)(0)(0)>[&];(D1:mpBundleCfgTable_Did:0)

   
typedef enum {
	bundleTOS_enable<s(0)(0)(0)>[&]=1,
	bundleTOS_disable<s(0)(0)(0)>[&]=2
} bundleTOS_Tval<s(0)(0)(0)>[&];(D1:bundleTOS_Tval:1)[[TYPENAME:bundleTOS_Tval]]

typedef struct
{
	unsigned int	bundlePeerIpAddr<s(1)(1)(0)>[&];                         
	unsigned int	bundleIndex<s(1)(1)(0)>[&];   
	int		bundleStatus<s(1)(1)(0)>[&];   
	int		bundleNumber<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] bundleRowStatus<s(1)(1)(0)>[&];   
	bundleTOS_Tval<s(1)(1)(0)>[T] bundleTOS<s(1)(1)(0)>[&];
}MIBmpBundleCfgTable_t<s(0)(0)(0)>[&];(D1:MIBmpBundleCfgTable_t:1)[[TYPENAME:MIBmpBundleCfgTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbStaticIpRouteTable_Did<s(0)(0)(0)>[&];(D1:pbStaticIpRouteTable_Did:0)

   
typedef enum {
	pbStaticIpRouteProto_local<s(0)(0)(0)>[&]=1
} pbStaticIpRouteProto_Tval<s(0)(0)(0)>[&];(D1:pbStaticIpRouteProto_Tval:1)[[TYPENAME:pbStaticIpRouteProto_Tval]]

typedef enum {
	pbStaticIpRouteMetricType_none<s(0)(0)(0)>[&]=0,
	pbStaticIpRouteMetricType_aseType1Metric<s(0)(0)(0)>[&]=1,
	pbStaticIpRouteMetricType_aseType2Metric<s(0)(0)(0)>[&]=2
} pbStaticIpRouteMetricType_Tval<s(0)(0)(0)>[&];(D1:pbStaticIpRouteMetricType_Tval:1)[[TYPENAME:pbStaticIpRouteMetricType_Tval]]

typedef struct
{
	unsigned int	pbStaticIpRouteDest<s(1)(1)(0)>[&];                                          
	unsigned int	pbStaticIpRouteMask<s(1)(1)(0)>[&];                                          
	pbStaticIpRouteProto_Tval<s(1)(1)(0)>[T] pbStaticIpRouteProto<s(1)(1)(0)>[&];                            
	int		pbStaticIpRouteIfIndex<s(1)(1)(0)>[&];   
	unsigned int	pbStaticIpRouteNextHop<s(1)(1)(0)>[&];   
	RouteStatus_Tval<s(1)(1)(0)>[T] pbStaticIpRouteAdminStatus<s(1)(1)(0)>[&];   
	RouteStatus_Tval<s(1)(1)(0)>[T] pbStaticIpRouteOperStatus<s(1)(1)(0)>[&];   
	pbStaticIpRouteMetricType_Tval<s(1)(1)(0)>[T] pbStaticIpRouteMetricType<s(1)(1)(0)>[&];   
	int		pbStaticIpRouteCost<s(1)(1)(0)>[&];   
}MIBpbStaticIpRouteTable_t<s(0)(0)(0)>[&];(D1:MIBpbStaticIpRouteTable_t:1)[[TYPENAME:MIBpbStaticIpRouteTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] tracertCfgTable_Did<s(0)(0)(0)>[&];(D1:tracertCfgTable_Did:0)

   
typedef enum {
	tracertStart_start<s(0)(0)(0)>[&]=1,
	tracertStart_stop<s(0)(0)(0)>[&]=2
} tracertStart_Tval<s(0)(0)(0)>[&];(D1:tracertStart_Tval:1)[[TYPENAME:tracertStart_Tval]]

typedef struct
{
	unsigned int	tracertPeerIpAddr<s(1)(1)(0)>[&];                       
	unsigned int	tracertTimeout<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] tracertRowStatus<s(1)(1)(0)>[&];
	tracertStart_Tval<s(1)(1)(0)>[T] tracertStart<s(1)(1)(0)>[&];
}MIBtracertCfgTable_t<s(0)(0)(0)>[&];(D1:MIBtracertCfgTable_t:1)[[TYPENAME:MIBtracertCfgTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] tracertResultTable_Did<s(0)(0)(0)>[&];(D1:tracertResultTable_Did:0)

   
typedef struct
{
	int		tracertTtlNumber<s(1)(1)(0)>[&];                                      
	int		tracertTripTime1<s(1)(1)(0)>[&];
	int		tracertTripTime2<s(1)(1)(0)>[&];
	int		tracertTripTime3<s(1)(1)(0)>[&];
	unsigned int	tracertPeerIpAddrDis<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] tracertRstRowStatus<s(1)(1)(0)>[&];
}MIBtracertResultTable_t<s(0)(0)(0)>[&];(D1:MIBtracertResultTable_t:1)[[TYPENAME:MIBtracertResultTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pingCfgTable_Did<s(0)(0)(0)>[&];(D1:pingCfgTable_Did:0)

   
typedef enum {
	pingStart_start<s(0)(0)(0)>[&]=1,
	pingStart_stop<s(0)(0)(0)>[&]=2
} pingStart_Tval<s(0)(0)(0)>[&];(D1:pingStart_Tval:1)[[TYPENAME:pingStart_Tval]]

typedef struct
{
	unsigned int	pingTargetIpAddr<s(1)(1)(0)>[&];                      
	int		pingDataSize<s(1)(1)(0)>[&];
	int		pingCounts<s(1)(1)(0)>[&];
	int		pingTimeout<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] pingRowStatus<s(1)(1)(0)>[&];
	pingStart_Tval<s(1)(1)(0)>[T] pingStart<s(1)(1)(0)>[&];
}MIBpingCfgTable_t<s(0)(0)(0)>[&];(D1:MIBpingCfgTable_t:1)[[TYPENAME:MIBpingCfgTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pingResultTable_Did<s(0)(0)(0)>[&];(D1:pingResultTable_Did:0)

   
typedef struct
{
	int		pingIndex<s(1)(1)(0)>[&];                                           
	unsigned int	pingTargetIpAddrDis<s(1)(1)(0)>[&];
	int		pingDataSizeDis<s(1)(1)(0)>[&];
	int		pingTripTime<s(1)(1)(0)>[&];
	int		pingTtlnumber<s(1)(1)(0)>[&];
	int		pingResult<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] pingRstRowStatus<s(1)(1)(0)>[&];
}MIBpingResultTable_t<s(0)(0)(0)>[&];(D1:MIBpingResultTable_t:1)[[TYPENAME:MIBpingResultTable_t]]














 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] dccReservePortTable_Did<s(0)(0)(0)>[&];(D1:dccReservePortTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];         
	int		phyPortNum<s(1)(1)(0)>[&];                            
	int		logPortNum<s(1)(1)(0)>[&];
}MIBdccReservePortTable_t<s(0)(0)(0)>[&];(D1:MIBdccReservePortTable_t:1)[[TYPENAME:MIBdccReservePortTable_t]]










 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbDccModule_Did<s(0)(0)(0)>[&];(D1:pbDccModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIpTunnelCfgTable_Did<s(0)(0)(0)>[&];(D1:pbIpTunnelCfgTable_Did:0)

   
typedef enum {
	pbSdhServerType_ms<s(0)(0)(0)>[&]=0,
	pbSdhServerType_rs<s(0)(0)(0)>[&]=1,
	pbSdhServerType_hcoc9<s(0)(0)(0)>[&]=2,
	pbSdhServerType_hcoc27<s(0)(0)(0)>[&]=3
} pbSdhServerType_Tval<s(0)(0)(0)>[&];(D1:pbSdhServerType_Tval:1)[[TYPENAME:pbSdhServerType_Tval]]

typedef enum {
	pbLapdNetworkSide_user<s(0)(0)(0)>[&]=0,
	pbLapdNetworkSide_network<s(0)(0)(0)>[&]=1
} pbLapdNetworkSide_Tval<s(0)(0)(0)>[&];(D1:pbLapdNetworkSide_Tval:1)[[TYPENAME:pbLapdNetworkSide_Tval]]

typedef enum {
	pbLapdAITS_unconfirmed<s(0)(0)(0)>[&]=0,
	pbLapdAITS_acknowledged<s(0)(0)(0)>[&]=1
} pbLapdAITS_Tval<s(0)(0)(0)>[&];(D1:pbLapdAITS_Tval:1)[[TYPENAME:pbLapdAITS_Tval]]

typedef enum {
	pbIpTunnelByPass_nobypass<s(0)(0)(0)>[&]=0,
	pbIpTunnelByPass_bypass<s(0)(0)(0)>[&]=1
} pbIpTunnelByPass_Tval<s(0)(0)(0)>[&];(D1:pbIpTunnelByPass_Tval:1)[[TYPENAME:pbIpTunnelByPass_Tval]]

typedef enum {
	pbIpTunnelDstMode_ms<s(0)(0)(0)>[&]=0,
	pbIpTunnelDstMode_rs<s(0)(0)(0)>[&]=1
} pbIpTunnelDstMode_Tval<s(0)(0)(0)>[&];(D1:pbIpTunnelDstMode_Tval:1)[[TYPENAME:pbIpTunnelDstMode_Tval]]

typedef enum {
	pbIpTunnelStatus_deactive<s(0)(0)(0)>[&]=0,
	pbIpTunnelStatus_active<s(0)(0)(0)>[&]=1
} pbIpTunnelStatus_Tval<s(0)(0)(0)>[&];(D1:pbIpTunnelStatus_Tval:1)[[TYPENAME:pbIpTunnelStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                             
	int		pbPortNo<s(1)(1)(0)>[&];                                                  
	pbSdhServerType_Tval<s(1)(1)(0)>[T] pbSdhServerType<s(1)(1)(0)>[&];                           
	pbLapdNetworkSide_Tval<s(1)(1)(0)>[T] pbLapdNetworkSide<s(1)(1)(0)>[&];   
	int		pbLapdT200<s(1)(1)(0)>[&];   
	int		pbLapdT203<s(1)(1)(0)>[&];   
	int		pbLapdN200<s(1)(1)(0)>[&];   
	pbLapdAITS_Tval<s(1)(1)(0)>[T] pbLapdAITS<s(1)(1)(0)>[&];   
	int		pbLapdWindow<s(1)(1)(0)>[&];   
	unsigned int	pbIpTunnelSrcIpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbIpTunnelDesIpAddress<s(1)(1)(0)>[&];   
	pbIpTunnelByPass_Tval<s(1)(1)(0)>[T] pbIpTunnelByPass<s(1)(1)(0)>[&];   
	int		pbIpTunnelDstSlot<s(1)(1)(0)>[&];   
	int		pbIpTunnelDstPort<s(1)(1)(0)>[&];   
	pbIpTunnelDstMode_Tval<s(1)(1)(0)>[T] pbIpTunnelDstMode<s(1)(1)(0)>[&];   
	pbIpTunnelStatus_Tval<s(1)(1)(0)>[T] pbIpTunnelStatus<s(1)(1)(0)>[&];   
}MIBpbIpTunnelCfgTable_t<s(0)(0)(0)>[&];(D1:MIBpbIpTunnelCfgTable_t:1)[[TYPENAME:MIBpbIpTunnelCfgTable_t]]























 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbIpTunnelModule_Did<s(0)(0)(0)>[&];(D1:pbIpTunnelModule_Did:0)

   







 




 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbOsiConfigTable_Did<s(0)(0)(0)>[&];(D1:pbOsiConfigTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                   
	int		pbPortNo<s(1)(1)(0)>[&];                                        
	int		pbOsiNetworkSide<s(1)(1)(0)>[&];   
	int		pbOsiT200<s(1)(1)(0)>[&];   
	int		pbOsiT203<s(1)(1)(0)>[&];   
	int		pbOsiN200<s(1)(1)(0)>[&];   
	int		pbOsiAITS<s(1)(1)(0)>[&];   
	int		pbOsiWindow<s(1)(1)(0)>[&];   
	int		pbOsiConfigTimer<s(1)(1)(0)>[&];   
	int		pbOsiTTL<s(1)(1)(0)>[&];   
	char		pbOsiLocalNasp<s(1)(1)(0)>[&][41];   
	char		pbOsiRemoteNasp<s(1)(1)(0)>[&][41];   
	unsigned int	pbOsiSrcIpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbOsiDesIpAddress<s(1)(1)(0)>[&];   
	int		pbOsiIpIfMtu<s(1)(1)(0)>[&];   
}MIBpbOsiConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbOsiConfigTable_t:1)[[TYPENAME:MIBpbOsiConfigTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] osiTunnelConfigTable_Did<s(0)(0)(0)>[&];(D1:osiTunnelConfigTable_Did:0)

   
typedef enum {
	osiTunnelStatus_deactive<s(0)(0)(0)>[&]=0,
	osiTunnelStatus_active<s(0)(0)(0)>[&]=1
} osiTunnelStatus_Tval<s(0)(0)(0)>[&];(D1:osiTunnelStatus_Tval:1)[[TYPENAME:osiTunnelStatus_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];                           
	int		pbPortNo<s(1)(1)(0)>[&];                                                
	int		pbSdhServerType<s(1)(1)(0)>[&];                                            
	int		osiTunnelNetworkSide<s(1)(1)(0)>[&];   
	int		osiTunnelT200<s(1)(1)(0)>[&];   
	int		osiTunnelT203<s(1)(1)(0)>[&];   
	int		osiTunnelN200<s(1)(1)(0)>[&];   
	int		osiTunnelAITS<s(1)(1)(0)>[&];   
	int		osiTunnelWindow<s(1)(1)(0)>[&];   
	int		osiTunnelConfigTimer<s(1)(1)(0)>[&];   
	int		osiTunnelTTL<s(1)(1)(0)>[&];   
	char		osiTunnelLocalNasp<s(1)(1)(0)>[&][41];   
	char		osiTunnelRemoteNasp<s(1)(1)(0)>[&][41];   
	unsigned int	osiTunnelSrcIpAddress<s(1)(1)(0)>[&];   
	unsigned int	osiTunnelDesIpAddress<s(1)(1)(0)>[&];   
	int		osiTunnelIpIfMtu<s(1)(1)(0)>[&];   
	osiTunnelStatus_Tval<s(1)(1)(0)>[T] osiTunnelStatus<s(1)(1)(0)>[&];
	unsigned int	osiTunnelIndex<s(1)(1)(0)>[&];   
}MIBosiTunnelConfigTable_t<s(0)(0)(0)>[&];(D1:MIBosiTunnelConfigTable_t:1)[[TYPENAME:MIBosiTunnelConfigTable_t]]

























 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbOsiModule_Did<s(0)(0)(0)>[&];(D1:pbOsiModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] epgGroup_Did<s(0)(0)(0)>[&];(D1:epgGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] msspringGroup_Did<s(0)(0)(0)>[&];(D1:msspringGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] mspGroup_Did<s(0)(0)(0)>[&];(D1:mspGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] sncpGroup_Did<s(0)(0)(0)>[&];(D1:sncpGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fGroup_Did<s(0)(0)(0)>[&];(D1:mssp4fGroup_Did:0)

   


 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fConfigTable_Did<s(0)(0)(0)>[&];(D1:mssp4fConfigTable_Did:0)

   
typedef enum {
	mssp4fProtectMode_normal<s(0)(0)(0)>[&]=1,
	mssp4fProtectMode_transoceanic<s(0)(0)(0)>[&]=2
} mssp4fProtectMode_Tval<s(0)(0)(0)>[&];(D1:mssp4fProtectMode_Tval:1)[[TYPENAME:mssp4fProtectMode_Tval]]

typedef enum {
	mssp4fRingType_none<s(0)(0)(0)>[&]=0,
	mssp4fRingType_stm_1<s(0)(0)(0)>[&]=1,
	mssp4fRingType_stm_4<s(0)(0)(0)>[&]=4,
	mssp4fRingType_stm_16<s(0)(0)(0)>[&]=16,
	mssp4fRingType_stm_64<s(0)(0)(0)>[&]=64
} mssp4fRingType_Tval<s(0)(0)(0)>[&];(D1:mssp4fRingType_Tval:1)[[TYPENAME:mssp4fRingType_Tval]]

typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                                                     
	mssp4fProtectMode_Tval<s(1)(1)(0)>[T] mssp4fProtectMode<s(1)(1)(0)>[&];   
	char		mssp4fRingName<s(1)(1)(0)>[&][64];   
	unsigned int	mssp4fGroupId<s(1)(1)(0)>[&];   
	unsigned int	mssp4fWaitToRestore<s(1)(1)(0)>[&];   
	mssp4fRingType_Tval<s(1)(1)(0)>[T] mssp4fRingType<s(1)(1)(0)>[&];   
	char		mssp4fWestWorkChannelNutInfo<s(1)(1)(0)>[&][64];   
	char		mssp4fEastWorkChannelNutInfo<s(1)(1)(0)>[&][64];   
	TruthValue_Tval<s(1)(1)(0)>[T] mssp4fConfigEnabled<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] mssp4fConfigDeleted<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] mssp4fRingSuspended<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] mssp4fAutoSquelchEnabled<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] mssp4fAutoMappingEnabled<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fWestWorkSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fWestWorkPortType<s(1)(1)(0)>[&];   
	unsigned int	mssp4fWestWorkPortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fWestProtSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fWestProtPortType<s(1)(1)(0)>[&];   
	unsigned int	mssp4fWestProtPortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fEastWorkSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fEastWorkPortType<s(1)(1)(0)>[&];   
	unsigned int	mssp4fEastWorkPortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fEastProtSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fEastProtPortType<s(1)(1)(0)>[&];   
	unsigned int	mssp4fEastProtPortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fPeerWestWorkSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fPeerWestWorkPortType<s(1)(1)(0)>[&];
	unsigned int	mssp4fPeerWestWorkPortNum<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fPeerWestProtSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fPeerWestProtPortType<s(1)(1)(0)>[&];
	unsigned int	mssp4fPeerWestProtPortNum<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fPeerEastWorkSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fPeerEastWorkPortType<s(1)(1)(0)>[&];
	unsigned int	mssp4fPeerEastWorkPortNum<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] mssp4fPeerEastProtSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] mssp4fPeerEastProtPortType<s(1)(1)(0)>[&];
	unsigned int	mssp4fPeerEastProtPortNum<s(1)(1)(0)>[&];
}MIBmssp4fConfigTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fConfigTable_t:1)[[TYPENAME:MIBmssp4fConfigTable_t]]












































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fTopologyTable_Did<s(0)(0)(0)>[&];(D1:mssp4fTopologyTable_Did:0)

   
typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                          
	unsigned int	mssp4fSumOfNodes<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId0<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId1<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId2<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId3<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId4<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId5<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId6<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId7<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId8<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId9<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId10<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId11<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId12<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId13<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId14<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeId15<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp0<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp1<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp2<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp3<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp4<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp5<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp6<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp7<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp8<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp9<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp10<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp11<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp12<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp13<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp14<s(1)(1)(0)>[&];
	unsigned int	mssp4fNodeIp15<s(1)(1)(0)>[&];
}MIBmssp4fTopologyTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fTopologyTable_t:1)[[TYPENAME:MIBmssp4fTopologyTable_t]]









































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fCommandTable_Did<s(0)(0)(0)>[&];(D1:mssp4fCommandTable_Did:0)

   
typedef enum {
	mssp4fCommandCurrentSide_west<s(0)(0)(0)>[&]=0,
	mssp4fCommandCurrentSide_east<s(0)(0)(0)>[&]=1
} mssp4fCommandCurrentSide_Tval<s(0)(0)(0)>[&];(D1:mssp4fCommandCurrentSide_Tval:1)[[TYPENAME:mssp4fCommandCurrentSide_Tval]]

typedef enum {
	mssp4fCommand_exerciseRing<s(0)(0)(0)>[&]=3,
	mssp4fCommand_exerciseSpan<s(0)(0)(0)>[&]=4,
	mssp4fCommand_manualSwitchRing<s(0)(0)(0)>[&]=6,
	mssp4fCommand_manualSwitchSpan<s(0)(0)(0)>[&]=7,
	mssp4fCommand_forcedSwitchRing<s(0)(0)(0)>[&]=13,
	mssp4fCommand_forcedSwitchSpan<s(0)(0)(0)>[&]=14,
	mssp4fCommand_lockoutProtection<s(0)(0)(0)>[&]=15,
	mssp4fCommand_clear<s(0)(0)(0)>[&]=21,
	mssp4fCommand_noCommand<s(0)(0)(0)>[&]=23
} mssp4fCommand_Tval<s(0)(0)(0)>[&];(D1:mssp4fCommand_Tval:1)[[TYPENAME:mssp4fCommand_Tval]]

typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                                          
	mssp4fCommandCurrentSide_Tval<s(1)(1)(0)>[T] mssp4fCommandCurrentSide<s(1)(1)(0)>[&];             
	mssp4fCommand_Tval<s(1)(1)(0)>[T] mssp4fCommand<s(1)(1)(0)>[&];
	char		mssp4fLastCommandStatus<s(1)(1)(0)>[&][64];   
}MIBmssp4fCommandTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fCommandTable_t:1)[[TYPENAME:MIBmssp4fCommandTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fNodeStatusTable_Did<s(0)(0)(0)>[&];(D1:mssp4fNodeStatusTable_Did:0)

   
typedef enum {
	mssp4fNodeAgentState_init<s(0)(0)(0)>[&]=0,
	mssp4fNodeAgentState_ready<s(0)(0)(0)>[&]=1,
	mssp4fNodeAgentState_suspend<s(0)(0)(0)>[&]=2
} mssp4fNodeAgentState_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeAgentState_Tval:1)[[TYPENAME:mssp4fNodeAgentState_Tval]]

typedef enum {
	mssp4fNodeState_idle<s(0)(0)(0)>[&]=0,
	mssp4fNodeState_passthough<s(0)(0)(0)>[&]=1,
	mssp4fNodeState_switching<s(0)(0)(0)>[&]=2,
	mssp4fNodeState_isolated<s(0)(0)(0)>[&]=3
} mssp4fNodeState_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeState_Tval:1)[[TYPENAME:mssp4fNodeState_Tval]]

typedef enum {
	mssp4fNodeCurrentSide_west<s(0)(0)(0)>[&]=0,
	mssp4fNodeCurrentSide_east<s(0)(0)(0)>[&]=1
} mssp4fNodeCurrentSide_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentSide_Tval:1)[[TYPENAME:mssp4fNodeCurrentSide_Tval]]

typedef enum {
	mssp4fNodeCurrentReq_idle<s(0)(0)(0)>[&]=0,
	mssp4fNodeCurrentReq_bridge<s(0)(0)(0)>[&]=1,
	mssp4fNodeCurrentReq_bridgeAndSwitch<s(0)(0)(0)>[&]=2,
	mssp4fNodeCurrentReq_passthrough<s(0)(0)(0)>[&]=3
} mssp4fNodeCurrentReq_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentReq_Tval:1)[[TYPENAME:mssp4fNodeCurrentReq_Tval]]

typedef enum {
	mssp4fNodeCurrentSrc_kByte<s(0)(0)(0)>[&]=0,
	mssp4fNodeCurrentSrc_line<s(0)(0)(0)>[&]=1,
	mssp4fNodeCurrentSrc_external<s(0)(0)(0)>[&]=2
} mssp4fNodeCurrentSrc_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentSrc_Tval:1)[[TYPENAME:mssp4fNodeCurrentSrc_Tval]]

typedef enum {
	mssp4fNodeKExpressMode_autoLocal<s(0)(0)(0)>[&]=0,
	mssp4fNodeKExpressMode_autoExpress<s(0)(0)(0)>[&]=1,
	mssp4fNodeKExpressMode_forceExpress<s(0)(0)(0)>[&]=2,
	mssp4fNodeKExpressMode_forceLocal<s(0)(0)(0)>[&]=3
} mssp4fNodeKExpressMode_Tval<s(0)(0)(0)>[&];(D1:mssp4fNodeKExpressMode_Tval:1)[[TYPENAME:mssp4fNodeKExpressMode_Tval]]

typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                                        
	mssp4fNodeAgentState_Tval<s(1)(1)(0)>[T] mssp4fNodeAgentState<s(1)(1)(0)>[&];
	mssp4fNodeState_Tval<s(1)(1)(0)>[T] mssp4fNodeState<s(1)(1)(0)>[&];   
	mssp4fNodeCurrentSide_Tval<s(1)(1)(0)>[T] mssp4fNodeCurrentSide<s(1)(1)(0)>[&];
	mssp4fNodeCurrentReq_Tval<s(1)(1)(0)>[T] mssp4fNodeCurrentReq<s(1)(1)(0)>[&];
	mssp4fNodeCurrentSrc_Tval<s(1)(1)(0)>[T] mssp4fNodeCurrentSrc<s(1)(1)(0)>[&];
	mssp4fNodeKExpressMode_Tval<s(1)(1)(0)>[T] mssp4fNodeKExpressMode<s(1)(1)(0)>[&];
	Mssp4fSwitchCommand_Tval<s(1)(1)(0)>[T] mssp4fWestSwitchCommand<s(1)(1)(0)>[&];
	Mssp4fLineRequest_Tval<s(1)(1)(0)>[T] mssp4fWestLineReq<s(1)(1)(0)>[&];
	Mssp4fSwitchCommand_Tval<s(1)(1)(0)>[T] mssp4fWestLastSwitchCmd<s(1)(1)(0)>[&];
	int		mssp4fWestSwitchStatus_len<s(1)(1)(0)>[&];
	char		mssp4fWestSwitchStatus<s(1)(1)(0)>[&][64];   
	unsigned int	mssp4fWestK1byteInput<s(1)(1)(0)>[&];
	unsigned int	mssp4fWestK2byteInput<s(1)(1)(0)>[&];
	unsigned int	mssp4fWestK1byteOutput<s(1)(1)(0)>[&];
	unsigned int	mssp4fWestK2byteOutput<s(1)(1)(0)>[&];
	Mssp4fSwitchCommand_Tval<s(1)(1)(0)>[T] mssp4fEastSwitchCommand<s(1)(1)(0)>[&];
	Mssp4fLineRequest_Tval<s(1)(1)(0)>[T] mssp4fEastLineReq<s(1)(1)(0)>[&];
	Mssp4fSwitchCommand_Tval<s(1)(1)(0)>[T] mssp4fEastLastSwitchCmd<s(1)(1)(0)>[&];
	int		mssp4fEastSwitchStatus_len<s(1)(1)(0)>[&];
	char		mssp4fEastSwitchStatus<s(1)(1)(0)>[&][64];   
	unsigned int	mssp4fEastK1byteInput<s(1)(1)(0)>[&];
	unsigned int	mssp4fEastK2byteInput<s(1)(1)(0)>[&];
	unsigned int	mssp4fEastK1byteOutput<s(1)(1)(0)>[&];
	unsigned int	mssp4fEastK2byteOutput<s(1)(1)(0)>[&];
	unsigned int	mssp4fPassNodeId<s(1)(1)(0)>[&];
}MIBmssp4fNodeStatusTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fNodeStatusTable_t:1)[[TYPENAME:MIBmssp4fNodeStatusTable_t]]































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fAutoMappingTable_Did<s(0)(0)(0)>[&];(D1:mssp4fAutoMappingTable_Did:0)

   
typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                                                
	unsigned int	mssp4fNodeId<s(1)(1)(0)>[&];                                                
	int		mssp4fWestWorkMappingString_len<s(1)(1)(0)>[&];
	char		mssp4fWestWorkMappingString<s(1)(1)(0)>[&][192];
	int		mssp4fEastWorkMappingString_len<s(1)(1)(0)>[&];
	char		mssp4fEastWorkMappingString<s(1)(1)(0)>[&][192];
	RowStatus_Tval<s(1)(1)(0)>[T] mssp4fAutomappingRowStatus<s(1)(1)(0)>[&];
}MIBmssp4fAutoMappingTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fAutoMappingTable_t:1)[[TYPENAME:MIBmssp4fAutoMappingTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] mssp4fXcTable_Did<s(0)(0)(0)>[&];(D1:mssp4fXcTable_Did:0)

   
typedef enum {
	mssp4fXcSide_west<s(0)(0)(0)>[&]=0,
	mssp4fXcSide_east<s(0)(0)(0)>[&]=1,
	mssp4fXcSide_both<s(0)(0)(0)>[&]=2
} mssp4fXcSide_Tval<s(0)(0)(0)>[&];(D1:mssp4fXcSide_Tval:1)[[TYPENAME:mssp4fXcSide_Tval]]

typedef enum {
	mssp4fXcOrder_au4clear<s(0)(0)(0)>[&]=0,
	mssp4fXcOrder_au44c<s(0)(0)(0)>[&]=1,
	mssp4fXcOrder_au416c<s(0)(0)(0)>[&]=2,
	mssp4fXcOrder_au464c<s(0)(0)(0)>[&]=3
} mssp4fXcOrder_Tval<s(0)(0)(0)>[&];(D1:mssp4fXcOrder_Tval:1)[[TYPENAME:mssp4fXcOrder_Tval]]

typedef enum {
	mssp4fXcType_adddrop<s(0)(0)(0)>[&]=0,
	mssp4fXcType_passthrough<s(0)(0)(0)>[&]=1,
	mssp4fXcType_nonrelated<s(0)(0)(0)>[&]=2,
	mssp4fXcType_invalid<s(0)(0)(0)>[&]=3
} mssp4fXcType_Tval<s(0)(0)(0)>[&];(D1:mssp4fXcType_Tval:1)[[TYPENAME:mssp4fXcType_Tval]]

typedef struct
{
	unsigned int	mssp4fRingId<s(1)(1)(0)>[&];                          
	unsigned int	mssp4fNodeId<s(1)(1)(0)>[&];                          
	mssp4fXcSide_Tval<s(1)(1)(0)>[T] mssp4fXcSide<s(1)(1)(0)>[&];                     
	unsigned int	mssp4fXcTimeSlot<s(1)(1)(0)>[&];                      
	mssp4fXcOrder_Tval<s(1)(1)(0)>[T] mssp4fXcOrder<s(1)(1)(0)>[&];
	mssp4fXcType_Tval<s(1)(1)(0)>[T] mssp4fXcType<s(1)(1)(0)>[&];
}MIBmssp4fXcTable_t<s(0)(0)(0)>[&];(D1:MIBmssp4fXcTable_t:1)[[TYPENAME:MIBmssp4fXcTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSncpConfigTable_Did<s(0)(0)(0)>[&];(D1:pbSncpConfigTable_Did:0)

   
typedef struct
{
	PbXcCapacity_Tval<s(1)(1)(0)>[T] pbSncpTPType<s(1)(1)(0)>[&];                                            
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSncpWorkChSlotNum<s(1)(1)(0)>[&];                                 
	PbPortType_Tval<s(1)(1)(0)>[T] pbSncpWorkChPortType<s(1)(1)(0)>[&];                                   
	int		pbSncpWorkChPortNum<s(1)(1)(0)>[&];                                                  
	int		pbSncpWorkSource<s(1)(1)(0)>[&];                                                     
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSncpProtectChSlotNum<s(1)(1)(0)>[&];                              
	PbPortType_Tval<s(1)(1)(0)>[T] pbSncpProtectChPortType<s(1)(1)(0)>[&];                                
	int		pbSncpProtectChPortNum<s(1)(1)(0)>[&];                                               
	int		pbSncpProtectSource<s(1)(1)(0)>[&];                                                  
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbSncpSrcOrDstSlotNum<s(1)(1)(0)>[&];                               
	PbPortType_Tval<s(1)(1)(0)>[T] pbSncpSrcOrDstPortType<s(1)(1)(0)>[&];                                    
	int		pbSncpSrcOrDstPortNum<s(1)(1)(0)>[&];                                                
	int		pbSncpSrcOrDstSource<s(1)(1)(0)>[&];                                                 
	PbSNCPSignalDirection_Tval<s(1)(1)(0)>[T] pbSncpSignalDircetion<s(1)(1)(0)>[&];                          
	int		pbSncpGroupId<s(1)(1)(0)>[&];   
	PbSNCPChannelState_Tval<s(1)(1)(0)>[T] pbSncpWorkChState<s(1)(1)(0)>[&];   
	PbSNCPExternalCmd_Tval<s(1)(1)(0)>[T] pbSncpExternalCmd<s(1)(1)(0)>[&];   
	PbSNCPExCmdRslt_Tval<s(1)(1)(0)>[T] pbSncpExCmdRslt<s(1)(1)(0)>[&];   
	PbSNCPCurrentReq_Tval<s(1)(1)(0)>[T] pbSncpCurSwitchReq<s(1)(1)(0)>[&];   
	PbSNCPSwitchReason_Tval<s(1)(1)(0)>[T] pbSncpSwitchReason<s(1)(1)(0)>[&];   
	unsigned int	pbSncpHoldOffTime<s(1)(1)(0)>[&];   
	PbSNCPRestoreMode_Tval<s(1)(1)(0)>[T] pbSncpRestoreMode<s(1)(1)(0)>[&];   
	unsigned int	pbSncpWTR<s(1)(1)(0)>[&];   
	PBSNCPSignalState_Tval<s(1)(1)(0)>[T] pbSncpWorkSignalState<s(1)(1)(0)>[&];   
	PBSNCPSignalState_Tval<s(1)(1)(0)>[T] pbSncpProtectSignalState<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbSncpRowStatus<s(1)(1)(0)>[&];   
	char		pbSncpLable<s(1)(1)(0)>[&][64];   
	PBSNCPAddRslt_Tval<s(1)(1)(0)>[T] pbSncpAddRslt<s(1)(1)(0)>[&];   
	unsigned int	pbDNIId<s(1)(1)(0)>[&];   
	PBSNCPIntrusive_Tval<s(1)(1)(0)>[T] pbSncpIntrusive<s(1)(1)(0)>[&];   
	int		pbSncpWorkGmplsVcNumber<s(1)(1)(0)>[&];   
	char		pbSncpWorkGmplsCallName<s(1)(1)(0)>[&][255];   
	int		pbSncpProtectGmplsVcNumber<s(1)(1)(0)>[&];   
	char		pbSncpProtectGmplsCallName<s(1)(1)(0)>[&][255];   
	PBSNCPWorkorProtToCC_Tval<s(1)(1)(0)>[T] pbSncpWorkorProtToCC<s(1)(1)(0)>[&];   
	PbSncpCircuitDirection_Tval<s(1)(1)(0)>[T] pbSncpDirection<s(1)(1)(0)>[&];   
	PbSncpFrom_Tval<s(1)(1)(0)>[T] pbSncpFrom<s(1)(1)(0)>[&];   
	PbGmplsSncpDirection_Tval<s(1)(1)(0)>[T] pbGmplsSncpDirection<s(1)(1)(0)>[&];   
	PBSNCPAction_Tval<s(1)(1)(0)>[T] pbSncpAction<s(1)(1)(0)>[&];   
}MIBpbSncpConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbSncpConfigTable_t:1)[[TYPENAME:MIBpbSncpConfigTable_t]]














































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbSncpStateTable_Did<s(0)(0)(0)>[&];(D1:pbSncpStateTable_Did:0)

   
typedef struct
{
	int		pbSncpStateLineId<s(1)(1)(0)>[&];                                                    
	char		pbSncpDetailedStateString1<s(1)(1)(0)>[&][255];   
	char		pbSncpDetailedStateString2<s(1)(1)(0)>[&][255];   
	char		pbSncpDetailedStateString3<s(1)(1)(0)>[&][255];   
	char		pbSncpDetailedStateString4<s(1)(1)(0)>[&][255];   
}MIBpbSncpStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbSncpStateTable_t:1)[[TYPENAME:MIBpbSncpStateTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbDpnpConfigTable_Did<s(0)(0)(0)>[&];(D1:pbDpnpConfigTable_Did:0)

   
typedef struct
{
	PbXcCapacity_Tval<s(1)(1)(0)>[T] pbDpnpTPType<s(1)(1)(0)>[&];                                         
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbDpnpDstSlotNum<s(1)(1)(0)>[&];                                 
	PbPortType_Tval<s(1)(1)(0)>[T] pbDpnpDstPortType<s(1)(1)(0)>[&];                                      
	int		pbDpnpDstPortNum<s(1)(1)(0)>[&];                                                  
	int		pbDpnpDstSource<s(1)(1)(0)>[&];                                                   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbVSncpWorkChSlotNum<s(1)(1)(0)>[&];                             
	PbPortType_Tval<s(1)(1)(0)>[T] pbVSncpWorkChPortType<s(1)(1)(0)>[&];                                  
	int		pbVSncpWorkChPortNum<s(1)(1)(0)>[&];                                              
	int		pbVSncpWorkSource<s(1)(1)(0)>[&];                                                 
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbVSncpProtectChSlotNum<s(1)(1)(0)>[&];                          
	PbPortType_Tval<s(1)(1)(0)>[T] pbVSncpProtectChPortType<s(1)(1)(0)>[&];                               
	int		pbVSncpProtectChPortNum<s(1)(1)(0)>[&];                                           
	int		pbVSncpProtectSource<s(1)(1)(0)>[&];                                              
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbVMsspringWorkChSlotNum<s(1)(1)(0)>[&];                         
	PbPortType_Tval<s(1)(1)(0)>[T] pbVMsspringWorkChPortType<s(1)(1)(0)>[&];                              
	int		pbVMsspringWorkChPortNum<s(1)(1)(0)>[&];                                          
	int		pbVMsspringWorkSource<s(1)(1)(0)>[&];                                             
	PbSNCPSignalDirection_Tval<s(1)(1)(0)>[T] pbDpnpSignalDircetion<s(1)(1)(0)>[&];                       
	int		pbDpnpGroupId<s(1)(1)(0)>[&];
	PbSNCPChannelState_Tval<s(1)(1)(0)>[T] pbDpnpWorkChState<s(1)(1)(0)>[&];
	PbSNCPExternalCmd_Tval<s(1)(1)(0)>[T] pbDpnpExternalCmd<s(1)(1)(0)>[&];
	PbSNCPExCmdRslt_Tval<s(1)(1)(0)>[T] pbDpnpExCmdRslt<s(1)(1)(0)>[&];
	PbSNCPCurrentReq_Tval<s(1)(1)(0)>[T] pbDpnpCurSwitchReq<s(1)(1)(0)>[&];
	PbSNCPSwitchReason_Tval<s(1)(1)(0)>[T] pbDpnpSwitchReason<s(1)(1)(0)>[&];
	unsigned int	pbDpnpHoldOffTime<s(1)(1)(0)>[&];
	PbSNCPRestoreMode_Tval<s(1)(1)(0)>[T] pbDpnpRestoreMode<s(1)(1)(0)>[&];
	unsigned int	pbDpnpWTR<s(1)(1)(0)>[&];
	PBSNCPSignalState_Tval<s(1)(1)(0)>[T] pbDpnpWorkSignalState<s(1)(1)(0)>[&];
	PBSNCPSignalState_Tval<s(1)(1)(0)>[T] pbDpnpProtectSignalState<s(1)(1)(0)>[&];
	PBSNCPSignalState_Tval<s(1)(1)(0)>[T] pbDpnpVMsspringSignalState<s(1)(1)(0)>[&];
	RowStatus_Tval<s(1)(1)(0)>[T] pbDpnpRowStatus<s(1)(1)(0)>[&];
	char		pbDpnpLable<s(1)(1)(0)>[&][64];
	PBSNCPAddRslt_Tval<s(1)(1)(0)>[T] pbDpnpAddRslt<s(1)(1)(0)>[&];
	unsigned int	pbDpnpDNIId<s(1)(1)(0)>[&];
	PBSNCPIntrusive_Tval<s(1)(1)(0)>[T] pbDpnpIntrusive<s(1)(1)(0)>[&];
	PbSncpCircuitDirection_Tval<s(1)(1)(0)>[T] pbDpnpDirection<s(1)(1)(0)>[&];
	PbSncpFrom_Tval<s(1)(1)(0)>[T] pbDpnpFrom<s(1)(1)(0)>[&];
	PbDpnpSwitchEvent_Tval<s(1)(1)(0)>[T] pbDpnpSwitchEvent<s(1)(1)(0)>[&];
	PbGmplsSncpDirection_Tval<s(1)(1)(0)>[T] pbGmplsDpnpDirection<s(1)(1)(0)>[&];
}MIBpbDpnpConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbDpnpConfigTable_t:1)[[TYPENAME:MIBpbDpnpConfigTable_t]]














































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbDpnpStateTable_Did<s(0)(0)(0)>[&];(D1:pbDpnpStateTable_Did:0)

   
typedef struct
{
	int		pbDpnpStateLineId<s(1)(1)(0)>[&];                                                 
	char		pbDpnpDetailedStateString1<s(1)(1)(0)>[&][255];
	char		pbDpnpDetailedStateString2<s(1)(1)(0)>[&][255];
	char		pbDpnpDetailedStateString3<s(1)(1)(0)>[&][255];
	char		pbDpnpDetailedStateString4<s(1)(1)(0)>[&][255];
}MIBpbDpnpStateTable_t<s(0)(0)(0)>[&];(D1:MIBpbDpnpStateTable_t:1)[[TYPENAME:MIBpbDpnpStateTable_t]]












 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSncpExtendParaGroup_Did<s(0)(0)(0)>[&];(D1:pbSncpExtendParaGroup_Did:0)

   
typedef struct
{
	unsigned int	pbLoSncpWTR<s(1)(1)(0)>[&];
	unsigned int	pbLoSncpHoldOffTime<s(1)(1)(0)>[&];
}MIBpbSncpExtendParaGroup_t<s(0)(0)(0)>[&];(D1:MIBpbSncpExtendParaGroup_t:1)[[TYPENAME:MIBpbSncpExtendParaGroup_t]]







 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMspConfigTable_Did<s(0)(0)(0)>[&];(D1:pbMspConfigTable_Did:0)

   
typedef struct
{
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspGroupActPortType<s(1)(1)(0)>[&];                                
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspProtectChSlotNum<s(1)(1)(0)>[&];                             
	int		pbMspProtectChPortNum<s(1)(1)(0)>[&];                                              
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspProtectChPortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspProtectChSignalState<s(1)(1)(0)>[&];
	int		pbMspGroupId<s(1)(1)(0)>[&];   
	PBMSPType_Tval<s(1)(1)(0)>[T] pbMspType<s(1)(1)(0)>[&];   
	PbMSPSignalDirection_Tval<s(1)(1)(0)>[T] pbMspSignalDircetion<s(1)(1)(0)>[&];   
	PbMSPRestoreMode_Tval<s(1)(1)(0)>[T] pbMspRestoreMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspExTrafficEnable<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspEnable<s(1)(1)(0)>[&];
	PbMSPExternalCmd_Tval<s(1)(1)(0)>[T] pbMspExternalCmd<s(1)(1)(0)>[&];   
	PbMspChNumberType_Tval<s(1)(1)(0)>[T] pbMspExtCmdParam<s(1)(1)(0)>[&];
	PbMSPExCmdRslt_Tval<s(1)(1)(0)>[T] pbMspExCmdRslt<s(1)(1)(0)>[&];   
	PbMspChNumberType_Tval<s(1)(1)(0)>[T] pbMspSwitchState<s(1)(1)(0)>[&];
	PbMSPCurrentReq_Tval<s(1)(1)(0)>[T] pbMspCurSwitchReq<s(1)(1)(0)>[&];   
	PbMSPSwitchReason_Tval<s(1)(1)(0)>[T] pbMspSwitchReason<s(1)(1)(0)>[&];   
	unsigned int	pbMspWTR<s(1)(1)(0)>[&];   
	int		pbMspWorkChNum<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh1SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh1PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh1PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh1SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh1PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh2SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh2PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh2PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh2SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh2PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh3SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh3PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh3PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh3SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh3PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh4SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh4PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh4PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh4SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh4PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh5SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh5PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh5PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh5SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh5PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh6SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh6PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh6PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh6SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh6PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh7SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh7PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh7PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh7SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh7PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh8SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh8PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh8PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh8SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh8PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh9SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh9PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh9PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh9SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh9PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh10SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh10PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh10PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh10SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh10PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh11SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh11PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh11PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh11SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh11PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh12SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh12PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh12PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh12SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh12PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh13SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh13PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh13PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh13SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh13PriState<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMspWorkCh14SlotNum<s(1)(1)(0)>[&];
	int		pbMspWorkCh14PortNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMspWorkCh14PortType<s(1)(1)(0)>[&];
	PBMSPSignalState_Tval<s(1)(1)(0)>[T] pbMspWorkCh14SignalState<s(1)(1)(0)>[&];
	PBMSPChPriState_Tval<s(1)(1)(0)>[T] pbMspWorkCh14PriState<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspK2Bit5Mismatch<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspK1Bit1to4Mismatch<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspK1Bit5to8Mismatch<s(1)(1)(0)>[&];   
	int		pbMspReceiveK1<s(1)(1)(0)>[&];   
	int		pbMspReceiveK2<s(1)(1)(0)>[&];   
	int		pbMspSendoutK1<s(1)(1)(0)>[&];   
	int		pbMspSendoutK2<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbMspRowStatus<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMspFreeze<s(1)(1)(0)>[&];
	char		pbMspLable<s(1)(1)(0)>[&][255];   
}MIBpbMspConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbMspConfigTable_t:1)[[TYPENAME:MIBpbMspConfigTable_t]]










































































































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMConfigTable_Did<s(0)(0)(0)>[&];(D1:pbMSMConfigTable_Did:0)

   
typedef enum {
	pbMSMProtectMode_none<s(0)(0)(0)>[&]=1,
	pbMSMProtectMode_msspring<s(0)(0)(0)>[&]=2,
	pbMSMProtectMode_ulsr<s(0)(0)(0)>[&]=3
} pbMSMProtectMode_Tval<s(0)(0)(0)>[&];(D1:pbMSMProtectMode_Tval:1)[[TYPENAME:pbMSMProtectMode_Tval]]

typedef enum {
	pbMSMConfigSdBerThreshold_ber10_5<s(0)(0)(0)>[&]=1,
	pbMSMConfigSdBerThreshold_ber10_6<s(0)(0)(0)>[&]=2,
	pbMSMConfigSdBerThreshold_ber10_7<s(0)(0)(0)>[&]=3,
	pbMSMConfigSdBerThreshold_ber10_8<s(0)(0)(0)>[&]=4,
	pbMSMConfigSdBerThreshold_ber10_9<s(0)(0)(0)>[&]=5,
	pbMSMConfigSdBerThreshold_global_sd<s(0)(0)(0)>[&]=6
} pbMSMConfigSdBerThreshold_Tval<s(0)(0)(0)>[&];(D1:pbMSMConfigSdBerThreshold_Tval:1)[[TYPENAME:pbMSMConfigSdBerThreshold_Tval]]

typedef enum {
	pbMSMConfigSfBerThreshold_ber10_3<s(0)(0)(0)>[&]=1,
	pbMSMConfigSfBerThreshold_ber10_4<s(0)(0)(0)>[&]=2,
	pbMSMConfigSfBerThreshold_ber10_5<s(0)(0)(0)>[&]=3,
	pbMSMConfigSfBerThreshold_global_sf<s(0)(0)(0)>[&]=4
} pbMSMConfigSfBerThreshold_Tval<s(0)(0)(0)>[&];(D1:pbMSMConfigSfBerThreshold_Tval:1)[[TYPENAME:pbMSMConfigSfBerThreshold_Tval]]

typedef enum {
	pbMSMCardFunction_none<s(0)(0)(0)>[&]=0,
	pbMSMCardFunction_stm_4<s(0)(0)(0)>[&]=4,
	pbMSMCardFunction_stm_16<s(0)(0)(0)>[&]=16,
	pbMSMCardFunction_stm_64<s(0)(0)(0)>[&]=64
} pbMSMCardFunction_Tval<s(0)(0)(0)>[&];(D1:pbMSMCardFunction_Tval:1)[[TYPENAME:pbMSMCardFunction_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                                     
	pbMSMProtectMode_Tval<s(1)(1)(0)>[T] pbMSMProtectMode<s(1)(1)(0)>[&];   
	char		pbMSMSNMRingName<s(1)(1)(0)>[&][64];   
	int		pbMSMRingIdx<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMSMWestSideSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] pbMSMWestSidePortType<s(1)(1)(0)>[&];   
	int		pbMSMWestSidePortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMSMWestProtSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMSMWestProtPortType<s(1)(1)(0)>[&];
	int		pbMSMWestProtPortNum<s(1)(1)(0)>[&];
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMSMEastSideSlotNum<s(1)(1)(0)>[&];   
	PbPortType_Tval<s(1)(1)(0)>[T] pbMSMEastSidePortType<s(1)(1)(0)>[&];   
	int		pbMSMEastSidePortNum<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbMSMEastProtSlotNum<s(1)(1)(0)>[&];
	PbPortType_Tval<s(1)(1)(0)>[T] pbMSMEastProtPortType<s(1)(1)(0)>[&];
	int		pbMSMEastProtPortNum<s(1)(1)(0)>[&];
	PbOnOff_Tval<s(1)(1)(0)>[T] pbMSMAutoSquelchDiscovery<s(1)(1)(0)>[&];
	PbOnOff_Tval<s(1)(1)(0)>[T] pbMSMAutoRingDiscovery<s(1)(1)(0)>[&];
	unsigned int	pbMSMPeerWestAddress<s(1)(1)(0)>[&];   
	int		pbMSMPeerWestSlotNum<s(1)(1)(0)>[&];   
	int		pbMSMPeerWestPortType<s(1)(1)(0)>[&];   
	int		pbMSMPeerWestPortNum<s(1)(1)(0)>[&];   
	unsigned int	pbMSMPeerEastAddress<s(1)(1)(0)>[&];   
	int		pbMSMPeerEastSlotNum<s(1)(1)(0)>[&];   
	int		pbMSMPeerEastPortType<s(1)(1)(0)>[&];   
	int		pbMSMPeerEastPortNum<s(1)(1)(0)>[&];   
	pbMSMConfigSdBerThreshold_Tval<s(1)(1)(0)>[T] pbMSMConfigSdBerThreshold<s(1)(1)(0)>[&];
	pbMSMConfigSfBerThreshold_Tval<s(1)(1)(0)>[T] pbMSMConfigSfBerThreshold<s(1)(1)(0)>[&];
	int		pbMSMConfigWaitToRestore<s(1)(1)(0)>[&];   
	PbOnOff_Tval<s(1)(1)(0)>[T] pbMSMConfigExtraTraffic<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMConfigEnable<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMConfigDelete<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMSquelchFin<s(1)(1)(0)>[&];
	pbMSMCardFunction_Tval<s(1)(1)(0)>[T] pbMSMCardFunction<s(1)(1)(0)>[&];   
	char		pbMSMChannelInfo<s(1)(1)(0)>[&][255];   
	unsigned int	pbMSMSelfAddress<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMStartAutoSquelch<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMAutoMappingEnable<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMSMPortMapRefresh<s(1)(1)(0)>[&];   
}MIBpbMSMConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMConfigTable_t:1)[[TYPENAME:MIBpbMSMConfigTable_t]]














































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMStatusTable_Did<s(0)(0)(0)>[&];(D1:pbMSMStatusTable_Did:0)

   
typedef enum {
	pbMSMSide_west<s(0)(0)(0)>[&]=0,
	pbMSMSide_east<s(0)(0)(0)>[&]=1
} pbMSMSide_Tval<s(0)(0)(0)>[&];(D1:pbMSMSide_Tval:1)[[TYPENAME:pbMSMSide_Tval]]

typedef enum {
	pbMSMTransBridgeReq_noRequest<s(0)(0)(0)>[&]=0,
	pbMSMTransBridgeReq_reverseRequestRing<s(0)(0)(0)>[&]=1,
	pbMSMTransBridgeReq_reverseRequestSpan<s(0)(0)(0)>[&]=2,
	pbMSMTransBridgeReq_exerciserRing<s(0)(0)(0)>[&]=3,
	pbMSMTransBridgeReq_exerciserSpan<s(0)(0)(0)>[&]=4,
	pbMSMTransBridgeReq_waitToRestore<s(0)(0)(0)>[&]=5,
	pbMSMTransBridgeReq_manualSwitchRing<s(0)(0)(0)>[&]=6,
	pbMSMTransBridgeReq_manualSwitchSpan<s(0)(0)(0)>[&]=7,
	pbMSMTransBridgeReq_signalDegradeRing<s(0)(0)(0)>[&]=8,
	pbMSMTransBridgeReq_signalDegradeSpan<s(0)(0)(0)>[&]=9,
	pbMSMTransBridgeReq_signalDegradeProtection<s(0)(0)(0)>[&]=10,
	pbMSMTransBridgeReq_signalFailRing<s(0)(0)(0)>[&]=11,
	pbMSMTransBridgeReq_signalFailSpan<s(0)(0)(0)>[&]=12,
	pbMSMTransBridgeReq_forcedSwitchRing<s(0)(0)(0)>[&]=13,
	pbMSMTransBridgeReq_forcedSwitchSpan<s(0)(0)(0)>[&]=14,
	pbMSMTransBridgeReq_lockoutProtection<s(0)(0)(0)>[&]=15
} pbMSMTransBridgeReq_Tval<s(0)(0)(0)>[&];(D1:pbMSMTransBridgeReq_Tval:1)[[TYPENAME:pbMSMTransBridgeReq_Tval]]

typedef enum {
	pbMSMTransLongShort_shortPath<s(0)(0)(0)>[&]=0,
	pbMSMTransLongShort_longPath<s(0)(0)(0)>[&]=1
} pbMSMTransLongShort_Tval<s(0)(0)(0)>[&];(D1:pbMSMTransLongShort_Tval:1)[[TYPENAME:pbMSMTransLongShort_Tval]]

typedef enum {
	pbMSMTransStatus_idle<s(0)(0)(0)>[&]=0,
	pbMSMTransStatus_bridged<s(0)(0)(0)>[&]=1,
	pbMSMTransStatus_bridgedAndSwitched<s(0)(0)(0)>[&]=2,
	pbMSMTransStatus_extraTraffic<s(0)(0)(0)>[&]=3,
	pbMSMTransStatus_msRDI<s(0)(0)(0)>[&]=6,
	pbMSMTransStatus_msAIS<s(0)(0)(0)>[&]=7
} pbMSMTransStatus_Tval<s(0)(0)(0)>[&];(D1:pbMSMTransStatus_Tval:1)[[TYPENAME:pbMSMTransStatus_Tval]]

typedef enum {
	pbMSMReceiveBridgeReq_noRequest<s(0)(0)(0)>[&]=0,
	pbMSMReceiveBridgeReq_reverseRequestRing<s(0)(0)(0)>[&]=1,
	pbMSMReceiveBridgeReq_reverseRequestSpan<s(0)(0)(0)>[&]=2,
	pbMSMReceiveBridgeReq_exerciserRing<s(0)(0)(0)>[&]=3,
	pbMSMReceiveBridgeReq_exerciserSpan<s(0)(0)(0)>[&]=4,
	pbMSMReceiveBridgeReq_waitToRestore<s(0)(0)(0)>[&]=5,
	pbMSMReceiveBridgeReq_manualSwitchRing<s(0)(0)(0)>[&]=6,
	pbMSMReceiveBridgeReq_manualSwitchSpan<s(0)(0)(0)>[&]=7,
	pbMSMReceiveBridgeReq_signalDegradeRing<s(0)(0)(0)>[&]=8,
	pbMSMReceiveBridgeReq_signalDegradeSpan<s(0)(0)(0)>[&]=9,
	pbMSMReceiveBridgeReq_signalDegradeProtection<s(0)(0)(0)>[&]=10,
	pbMSMReceiveBridgeReq_signalFailRing<s(0)(0)(0)>[&]=11,
	pbMSMReceiveBridgeReq_signalFailSpan<s(0)(0)(0)>[&]=12,
	pbMSMReceiveBridgeReq_forcedSwitchRing<s(0)(0)(0)>[&]=13,
	pbMSMReceiveBridgeReq_forcedSwitchSpan<s(0)(0)(0)>[&]=14,
	pbMSMReceiveBridgeReq_lockoutProtection<s(0)(0)(0)>[&]=15
} pbMSMReceiveBridgeReq_Tval<s(0)(0)(0)>[&];(D1:pbMSMReceiveBridgeReq_Tval:1)[[TYPENAME:pbMSMReceiveBridgeReq_Tval]]

typedef enum {
	pbMSMReceiveLongShort_shortPath<s(0)(0)(0)>[&]=0,
	pbMSMReceiveLongShort_longPath<s(0)(0)(0)>[&]=1
} pbMSMReceiveLongShort_Tval<s(0)(0)(0)>[&];(D1:pbMSMReceiveLongShort_Tval:1)[[TYPENAME:pbMSMReceiveLongShort_Tval]]

typedef enum {
	pbMSMReceiveStatus_idle<s(0)(0)(0)>[&]=0,
	pbMSMReceiveStatus_bridged<s(0)(0)(0)>[&]=1,
	pbMSMReceiveStatus_bridgedAndSwitched<s(0)(0)(0)>[&]=2,
	pbMSMReceiveStatus_extraTraffic<s(0)(0)(0)>[&]=3,
	pbMSMReceiveStatus_msRDI<s(0)(0)(0)>[&]=6,
	pbMSMReceiveStatus_msAIS<s(0)(0)(0)>[&]=7
} pbMSMReceiveStatus_Tval<s(0)(0)(0)>[&];(D1:pbMSMReceiveStatus_Tval:1)[[TYPENAME:pbMSMReceiveStatus_Tval]]

typedef enum {
	pbMSMSideReq_noRequest<s(0)(0)(0)>[&]=0,
	pbMSMSideReq_reverseRequestRing<s(0)(0)(0)>[&]=1,
	pbMSMSideReq_reverseRequestSpan<s(0)(0)(0)>[&]=2,
	pbMSMSideReq_exerciserRing<s(0)(0)(0)>[&]=3,
	pbMSMSideReq_exerciserSpan<s(0)(0)(0)>[&]=4,
	pbMSMSideReq_waitToRestore<s(0)(0)(0)>[&]=5,
	pbMSMSideReq_manualSwitchRing<s(0)(0)(0)>[&]=6,
	pbMSMSideReq_manualSwitchSpan<s(0)(0)(0)>[&]=7,
	pbMSMSideReq_signalDegradeRing<s(0)(0)(0)>[&]=8,
	pbMSMSideReq_signalDegradeSpan<s(0)(0)(0)>[&]=9,
	pbMSMSideReq_signalDegradeProtection<s(0)(0)(0)>[&]=10,
	pbMSMSideReq_signalFailRing<s(0)(0)(0)>[&]=11,
	pbMSMSideReq_signalFailSpan<s(0)(0)(0)>[&]=12,
	pbMSMSideReq_forcedSwitchRing<s(0)(0)(0)>[&]=13,
	pbMSMSideReq_forcedSwitchSpan<s(0)(0)(0)>[&]=14,
	pbMSMSideReq_lockoutProtection<s(0)(0)(0)>[&]=15,
	pbMSMSideReq_reset<s(0)(0)(0)>[&]=20,
	pbMSMSideReq_clear<s(0)(0)(0)>[&]=21,
	pbMSMSideReq_lockoutService<s(0)(0)(0)>[&]=22
} pbMSMSideReq_Tval<s(0)(0)(0)>[&];(D1:pbMSMSideReq_Tval:1)[[TYPENAME:pbMSMSideReq_Tval]]

typedef enum {
	pbMSMSideSrc_kByte<s(0)(0)(0)>[&]=0,
	pbMSMSideSrc_line<s(0)(0)(0)>[&]=1,
	pbMSMSideSrc_external<s(0)(0)(0)>[&]=2
} pbMSMSideSrc_Tval<s(0)(0)(0)>[&];(D1:pbMSMSideSrc_Tval:1)[[TYPENAME:pbMSMSideSrc_Tval]]

typedef enum {
	pbMSMSwitchCommand_idle<s(0)(0)(0)>[&]=0,
	pbMSMSwitchCommand_bridge<s(0)(0)(0)>[&]=1,
	pbMSMSwitchCommand_bridgeAndSwitch<s(0)(0)(0)>[&]=2,
	pbMSMSwitchCommand_passthough<s(0)(0)(0)>[&]=3
} pbMSMSwitchCommand_Tval<s(0)(0)(0)>[&];(D1:pbMSMSwitchCommand_Tval:1)[[TYPENAME:pbMSMSwitchCommand_Tval]]

typedef enum {
	pbMSMLineReq_signalDegradeRing<s(0)(0)(0)>[&]=8,
	pbMSMLineReq_signalFailRing<s(0)(0)(0)>[&]=11,
	pbMSMLineReq_clear<s(0)(0)(0)>[&]=21
} pbMSMLineReq_Tval<s(0)(0)(0)>[&];(D1:pbMSMLineReq_Tval:1)[[TYPENAME:pbMSMLineReq_Tval]]

typedef enum {
	pbMSMCmndReq_manualSwitchRing<s(0)(0)(0)>[&]=6,
	pbMSMCmndReq_forcedSwitchRing<s(0)(0)(0)>[&]=13,
	pbMSMCmndReq_lockoutProtection<s(0)(0)(0)>[&]=15,
	pbMSMCmndReq_reset<s(0)(0)(0)>[&]=21
} pbMSMCmndReq_Tval<s(0)(0)(0)>[&];(D1:pbMSMCmndReq_Tval:1)[[TYPENAME:pbMSMCmndReq_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                            
	pbMSMSide_Tval<s(1)(1)(0)>[T] pbMSMSide<s(1)(1)(0)>[&];                                          
	pbMSMTransBridgeReq_Tval<s(1)(1)(0)>[T] pbMSMTransBridgeReq<s(1)(1)(0)>[&];   
	int		pbMSMTransDestNodeId<s(1)(1)(0)>[&];   
	int		pbMSMTransSrcNodeId<s(1)(1)(0)>[&];   
	pbMSMTransLongShort_Tval<s(1)(1)(0)>[T] pbMSMTransLongShort<s(1)(1)(0)>[&];   
	pbMSMTransStatus_Tval<s(1)(1)(0)>[T] pbMSMTransStatus<s(1)(1)(0)>[&];   
	pbMSMReceiveBridgeReq_Tval<s(1)(1)(0)>[T] pbMSMReceiveBridgeReq<s(1)(1)(0)>[&];   
	int		pbMSMReceiveDestNodeId<s(1)(1)(0)>[&];   
	int		pbMSMReceiveSrcNodeId<s(1)(1)(0)>[&];   
	pbMSMReceiveLongShort_Tval<s(1)(1)(0)>[T] pbMSMReceiveLongShort<s(1)(1)(0)>[&];   
	pbMSMReceiveStatus_Tval<s(1)(1)(0)>[T] pbMSMReceiveStatus<s(1)(1)(0)>[&];   
	pbMSMSideReq_Tval<s(1)(1)(0)>[T] pbMSMSideReq<s(1)(1)(0)>[&];   
	pbMSMSideSrc_Tval<s(1)(1)(0)>[T] pbMSMSideSrc<s(1)(1)(0)>[&];   
	pbMSMSwitchCommand_Tval<s(1)(1)(0)>[T] pbMSMSwitchCommand<s(1)(1)(0)>[&];   
	pbMSMLineReq_Tval<s(1)(1)(0)>[T] pbMSMLineReq<s(1)(1)(0)>[&];   
	pbMSMCmndReq_Tval<s(1)(1)(0)>[T] pbMSMCmndReq<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMIsSquelched<s(1)(1)(0)>[&];   
}MIBpbMSMStatusTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMStatusTable_t:1)[[TYPENAME:MIBpbMSMStatusTable_t]]

























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMNodeStatusTable_Did<s(0)(0)(0)>[&];(D1:pbMSMNodeStatusTable_Did:0)

   
typedef enum {
	pbMSMNodeKExpressMode_autoLocal<s(0)(0)(0)>[&]=0,
	pbMSMNodeKExpressMode_autoExpress<s(0)(0)(0)>[&]=1,
	pbMSMNodeKExpressMode_forceExpress<s(0)(0)(0)>[&]=2,
	pbMSMNodeKExpressMode_forceLocal<s(0)(0)(0)>[&]=3
} pbMSMNodeKExpressMode_Tval<s(0)(0)(0)>[&];(D1:pbMSMNodeKExpressMode_Tval:1)[[TYPENAME:pbMSMNodeKExpressMode_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                            
	PbMsspAgentState_Tval<s(1)(1)(0)>[T] pbMSMNodeAgentState<s(1)(1)(0)>[&];   
	PbMsspNodeState_Tval<s(1)(1)(0)>[T] pbMSMNodeState<s(1)(1)(0)>[&];   
	PbMsspNodeSide_Tval<s(1)(1)(0)>[T] pbMSMNodeCurrentSide<s(1)(1)(0)>[&];   
	PbMsspRequest_Tval<s(1)(1)(0)>[T] pbMSMNodeCurrentReq<s(1)(1)(0)>[&];   
	PbMsspRequestSource_Tval<s(1)(1)(0)>[T] pbMSMNodeCurrentSrc<s(1)(1)(0)>[&];   
	pbMSMNodeKExpressMode_Tval<s(1)(1)(0)>[T] pbMSMNodeKExpressMode<s(1)(1)(0)>[&];   
	PbMsspRequest_Tval<s(1)(1)(0)>[T] pbMSMEastSwitchCommand<s(1)(1)(0)>[&];   
	PbMsspLineRequest_Tval<s(1)(1)(0)>[T] pbMSMEastLineReq<s(1)(1)(0)>[&];   
	PbMsspRequest_Tval<s(1)(1)(0)>[T] pbMSMEastLastSwitchCmd<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMEastIsSquelched<s(1)(1)(0)>[&];   
	PbMsspRequest_Tval<s(1)(1)(0)>[T] pbMSMWestSwitchCommand<s(1)(1)(0)>[&];   
	PbMsspLineRequest_Tval<s(1)(1)(0)>[T] pbMSMWestLineReq<s(1)(1)(0)>[&];   
	PbMsspRequest_Tval<s(1)(1)(0)>[T] pbMSMWestLastSwitchCmd<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbMSMWestIsSquelched<s(1)(1)(0)>[&];   
	PbMsspSwitchStatus_Tval<s(1)(1)(0)>[T] pbMSMEastSwitchStatus<s(1)(1)(0)>[&];   
	PbMsspSwitchStatus_Tval<s(1)(1)(0)>[T] pbMSMWestSwitchStatus<s(1)(1)(0)>[&];   
	int		pbMSMPassNodeId<s(1)(1)(0)>[&];   
}MIBpbMSMNodeStatusTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMNodeStatusTable_t:1)[[TYPENAME:MIBpbMSMNodeStatusTable_t]]

























 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMTopoConfigTable_Did<s(0)(0)(0)>[&];(D1:pbMSMTopoConfigTable_Did:0)

   
typedef enum {
	pbMSMTopoStatus_unconfigured<s(0)(0)(0)>[&]=0,
	pbMSMTopoStatus_closed<s(0)(0)(0)>[&]=1,
	pbMSMTopoStatus_open<s(0)(0)(0)>[&]=2,
	pbMSMTopoStatus_locallyMisconfigured<s(0)(0)(0)>[&]=3,
	pbMSMTopoStatus_remotelyMisconfigured<s(0)(0)(0)>[&]=4
} pbMSMTopoStatus_Tval<s(0)(0)(0)>[&];(D1:pbMSMTopoStatus_Tval:1)[[TYPENAME:pbMSMTopoStatus_Tval]]

typedef enum {
	pbMSMTopoConfig_unsuspend<s(0)(0)(0)>[&]=1,
	pbMSMTopoConfig_suspend<s(0)(0)(0)>[&]=2
} pbMSMTopoConfig_Tval<s(0)(0)(0)>[&];(D1:pbMSMTopoConfig_Tval:1)[[TYPENAME:pbMSMTopoConfig_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                                    
	int		pbMSMTopoNumOfNodes<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId0<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId1<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId2<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId3<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId4<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId5<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId6<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId7<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId8<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId9<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId10<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId11<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId12<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId13<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId14<s(1)(1)(0)>[&];   
	int		pbMSMTopoNodeId15<s(1)(1)(0)>[&];   
	pbMSMTopoStatus_Tval<s(1)(1)(0)>[T] pbMSMTopoStatus<s(1)(1)(0)>[&];   
	pbMSMTopoConfig_Tval<s(1)(1)(0)>[T] pbMSMTopoConfig<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId0IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId1IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId2IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId3IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId4IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId5IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId6IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId7IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId8IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId9IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId10IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId11IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId12IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId13IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId14IpAddress<s(1)(1)(0)>[&];   
	unsigned int	pbMSMTopoNodeId15IpAddress<s(1)(1)(0)>[&];   
}MIBpbMSMTopoConfigTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMTopoConfigTable_t:1)[[TYPENAME:MIBpbMSMTopoConfigTable_t]]











































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMSquelchTable_Did<s(0)(0)(0)>[&];(D1:pbMSMSquelchTable_Did:0)

   
typedef enum {
	pbMSMSquelchType_none<s(0)(0)(0)>[&]=0,
	pbMSMSquelchType_add<s(0)(0)(0)>[&]=1,
	pbMSMSquelchType_drop<s(0)(0)(0)>[&]=2,
	pbMSMSquelchType_passthrough<s(0)(0)(0)>[&]=3
} pbMSMSquelchType_Tval<s(0)(0)(0)>[&];(D1:pbMSMSquelchType_Tval:1)[[TYPENAME:pbMSMSquelchType_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                            
	PbMsspNodeSide_Tval<s(1)(1)(0)>[T] pbMSMSquelchSide<s(1)(1)(0)>[&];                              
	PbMsspTrafficDirection_Tval<s(1)(1)(0)>[T] pbMSMSquelchGress<s(1)(1)(0)>[&];                     
	int		pbMSMSquelchTimeSlot<s(1)(1)(0)>[&];                                         
	PbMsspTrafficOrder_Tval<s(1)(1)(0)>[T] pbMSMSquelchOrder<s(1)(1)(0)>[&];   
	pbMSMSquelchType_Tval<s(1)(1)(0)>[T] pbMSMSquelchType<s(1)(1)(0)>[&];   
	int		pbMSMSquelchSrcNodeId<s(1)(1)(0)>[&];   
	int		pbMSMSquelchDstNodeId<s(1)(1)(0)>[&];   
	int		pbMSMSquelchReference<s(1)(1)(0)>[&];   
	int		pbMSMSquelchOpTimeSlot<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbMSMSquelchRowStatus<s(1)(1)(0)>[&];   
}MIBpbMSMSquelchTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMSquelchTable_t:1)[[TYPENAME:MIBpbMSMSquelchTable_t]]


















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbMSMCommandTable_Did<s(0)(0)(0)>[&];(D1:pbMSMCommandTable_Did:0)

   
typedef enum {
	pbMSMCommandResult_unknown<s(0)(0)(0)>[&]=0,
	pbMSMCommandResult_success<s(0)(0)(0)>[&]=1,
	pbMSMCommandResult_fail<s(0)(0)(0)>[&]=2
} pbMSMCommandResult_Tval<s(0)(0)(0)>[&];(D1:pbMSMCommandResult_Tval:1)[[TYPENAME:pbMSMCommandResult_Tval]]

typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                              
	PbMsspNodeSide_Tval<s(1)(1)(0)>[T] pbMSMCommandCurrentSide<s(1)(1)(0)>[&];                         
	PbMsspExternalCommand_Tval<s(1)(1)(0)>[T] pbMSMCommandSwitch<s(1)(1)(0)>[&];   
	char		pbMSMLastCommandStatus<s(1)(1)(0)>[&][64];   
	pbMSMCommandResult_Tval<s(1)(1)(0)>[T] pbMSMCommandResult<s(1)(1)(0)>[&];   
}MIBpbMSMCommandTable_t<s(0)(0)(0)>[&];(D1:MIBpbMSMCommandTable_t:1)[[TYPENAME:MIBpbMSMCommandTable_t]]












 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbAutoMappingTable_Did<s(0)(0)(0)>[&];(D1:pbAutoMappingTable_Did:0)

   
typedef struct
{
	int		pbMSMSNMRingId<s(1)(1)(0)>[&];                                            
	int		pbAutoNodeId<s(1)(1)(0)>[&];                                                 
	int		pbPortMappingString_len<s(1)(1)(0)>[&];
	char		pbPortMappingString<s(1)(1)(0)>[&][768];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbAutoMappingRowStatus<s(1)(1)(0)>[&];   
}MIBpbAutoMappingTable_t<s(0)(0)(0)>[&];(D1:MIBpbAutoMappingTable_t:1)[[TYPENAME:MIBpbAutoMappingTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbEpgTable_Did<s(0)(0)(0)>[&];(D1:pbEpgTable_Did:0)

   
typedef enum {
	pbEpgType_onevsn<s(0)(0)(0)>[&]=1,
	pbEpgType_oneplusone<s(0)(0)(0)>[&]=2
} pbEpgType_Tval<s(0)(0)(0)>[&];(D1:pbEpgType_Tval:1)[[TYPENAME:pbEpgType_Tval]]

typedef enum {
	pbEpgProtMode_none<s(0)(0)(0)>[&]=0,
	pbEpgProtMode_revertive<s(0)(0)(0)>[&]=1,
	pbEpgProtMode_nonrevertive<s(0)(0)(0)>[&]=2
} pbEpgProtMode_Tval<s(0)(0)(0)>[&];(D1:pbEpgProtMode_Tval:1)[[TYPENAME:pbEpgProtMode_Tval]]

typedef struct
{
	int		pbEpgId<s(1)(1)(0)>[&];                                                  
	PbBoardStyle_Tval<s(1)(1)(0)>[T] pbEpgBoardType<s(1)(1)(0)>[&];   
	pbEpgType_Tval<s(1)(1)(0)>[T] pbEpgType<s(1)(1)(0)>[&];   
	pbEpgProtMode_Tval<s(1)(1)(0)>[T] pbEpgProtMode<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbEpgEnable<s(1)(1)(0)>[&];   
	PbEpgSwitchRequest_Tval<s(1)(1)(0)>[T] pbEpgExtCmd<s(1)(1)(0)>[&];   
	int		pbEpgExtCmdParam<s(1)(1)(0)>[&];   
	PbEpgCmdResult_Tval<s(1)(1)(0)>[T] pbEpgExtCmdResult<s(1)(1)(0)>[&];   
	int		pbEpgWtr<s(1)(1)(0)>[&];   
	PbEpgSwitchRequest_Tval<s(1)(1)(0)>[T] pbEpgPreSwitchReason<s(1)(1)(0)>[&];   
	PbEpgSwitchRequest_Tval<s(1)(1)(0)>[T] pbEpgCurRequest<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgProtState<s(1)(1)(0)>[&];   
	int		pbEpgHoldOffTime<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgProtSlotNum<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgProtSlotState<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum1<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot1State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum2<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot2State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum3<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot3State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum4<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot4State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum5<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot5State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum6<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot6State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum7<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot7State<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbEpgWorkSlotNum8<s(1)(1)(0)>[&];   
	PbEpgFunctionCardStatus_Tval<s(1)(1)(0)>[T] pbEpgWorkSlot8State<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbEpgRowStatus<s(1)(1)(0)>[&];   
}MIBpbEpgTable_t<s(0)(0)(0)>[&];(D1:MIBpbEpgTable_t:1)[[TYPENAME:MIBpbEpgTable_t]]







































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCpgTable_Did<s(0)(0)(0)>[&];(D1:pbCpgTable_Did:0)

   
typedef enum {
	pbCpgProtectStatus_worker<s(0)(0)(0)>[&]=0,
	pbCpgProtectStatus_protector<s(0)(0)(0)>[&]=1,
	pbCpgProtectStatus_na<s(0)(0)(0)>[&]=2
} pbCpgProtectStatus_Tval<s(0)(0)(0)>[&];(D1:pbCpgProtectStatus_Tval:1)[[TYPENAME:pbCpgProtectStatus_Tval]]

typedef enum {
	pbCpgAct_none<s(0)(0)(0)>[&]=0,
	pbCpgAct_force_Worker<s(0)(0)(0)>[&]=1,
	pbCpgAct_force_Protector<s(0)(0)(0)>[&]=2,
	pbCpgAct_manual_Worker<s(0)(0)(0)>[&]=3,
	pbCpgAct_manual_Protector<s(0)(0)(0)>[&]=4,
	pbCpgAct_clear<s(0)(0)(0)>[&]=5,
	pbCpgAct_lockout_protection<s(0)(0)(0)>[&]=6
} pbCpgAct_Tval<s(0)(0)(0)>[&];(D1:pbCpgAct_Tval:1)[[TYPENAME:pbCpgAct_Tval]]

typedef enum {
	pbCpgActStatus_no_Request<s(0)(0)(0)>[&]=0,
	pbCpgActStatus_force_Worker<s(0)(0)(0)>[&]=1,
	pbCpgActStatus_force_Protector<s(0)(0)(0)>[&]=2,
	pbCpgActStatus_manual_Worker<s(0)(0)(0)>[&]=3,
	pbCpgActStatus_manual_Protector<s(0)(0)(0)>[&]=4,
	pbCpgActStatus_ufur_Worker<s(0)(0)(0)>[&]=5,
	pbCpgActStatus_ufur_Protector<s(0)(0)(0)>[&]=6,
	pbCpgActStatus_latchon_Worker<s(0)(0)(0)>[&]=7,
	pbCpgActStatus_latchon_Protector<s(0)(0)(0)>[&]=8,
	pbCpgActStatus_lockout_protection<s(0)(0)(0)>[&]=9
} pbCpgActStatus_Tval<s(0)(0)(0)>[&];(D1:pbCpgActStatus_Tval:1)[[TYPENAME:pbCpgActStatus_Tval]]

typedef enum {
	pbCpgCurActStatus_no_Request<s(0)(0)(0)>[&]=0,
	pbCpgCurActStatus_force_Worker<s(0)(0)(0)>[&]=1,
	pbCpgCurActStatus_force_Protector<s(0)(0)(0)>[&]=2,
	pbCpgCurActStatus_manual_Worker<s(0)(0)(0)>[&]=3,
	pbCpgCurActStatus_manual_Protector<s(0)(0)(0)>[&]=4,
	pbCpgCurActStatus_ufur_Worker<s(0)(0)(0)>[&]=5,
	pbCpgCurActStatus_ufur_Protector<s(0)(0)(0)>[&]=6,
	pbCpgCurActStatus_latchon_Worker<s(0)(0)(0)>[&]=7,
	pbCpgCurActStatus_latchon_Protector<s(0)(0)(0)>[&]=8,
	pbCpgCurActStatus_lockout_protection<s(0)(0)(0)>[&]=9
} pbCpgCurActStatus_Tval<s(0)(0)(0)>[&];(D1:pbCpgCurActStatus_Tval:1)[[TYPENAME:pbCpgCurActStatus_Tval]]

typedef struct
{
	int		pbCpgIndexNo<s(1)(1)(0)>[&];                                         
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbCpgWorkerSlot<s(1)(1)(0)>[&];   
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbCpgProtectorSlot<s(1)(1)(0)>[&];   
	pbCpgProtectStatus_Tval<s(1)(1)(0)>[T] pbCpgProtectStatus<s(1)(1)(0)>[&];   
	PbCpgCardStatus_Tval<s(1)(1)(0)>[T] pbWorkerStatus<s(1)(1)(0)>[&];   
	PbCpgCardStatus_Tval<s(1)(1)(0)>[T] pbProtectorStatus<s(1)(1)(0)>[&];   
	pbCpgAct_Tval<s(1)(1)(0)>[T] pbCpgAct<s(1)(1)(0)>[&];   
	pbCpgActStatus_Tval<s(1)(1)(0)>[T] pbCpgActStatus<s(1)(1)(0)>[&];   
	pbCpgCurActStatus_Tval<s(1)(1)(0)>[T] pbCpgCurActStatus<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbCpgReadyToSwitch<s(1)(1)(0)>[&];   
}MIBpbCpgTable_t<s(0)(0)(0)>[&];(D1:MIBpbCpgTable_t:1)[[TYPENAME:MIBpbCpgTable_t]]

















 



 
extern MIBDid_t<s(0)(0)(0)>[T] scEpgGroup_Did<s(0)(0)(0)>[&];(D1:scEpgGroup_Did:0)

   
typedef enum {
	scEpgRequest_clear<s(0)(0)(0)>[&]=0,
	scEpgRequest_lockout<s(0)(0)(0)>[&]=1,
	scEpgRequest_manual_switch_to_sc1<s(0)(0)(0)>[&]=2,
	scEpgRequest_manual_switch_to_sc2<s(0)(0)(0)>[&]=3,
	scEpgRequest_no_Request<s(0)(0)(0)>[&]=4
} scEpgRequest_Tval<s(0)(0)(0)>[&];(D1:scEpgRequest_Tval:1)[[TYPENAME:scEpgRequest_Tval]]

typedef enum {
	scEpgLastSwichReason_no_Request<s(0)(0)(0)>[&]=0,
	scEpgLastSwichReason_manual_switch_to_sc1<s(0)(0)(0)>[&]=1,
	scEpgLastSwichReason_manual_switch_to_sc2<s(0)(0)(0)>[&]=2,
	scEpgLastSwichReason_latchon_Switch<s(0)(0)(0)>[&]=3,
	scEpgLastSwichReason_uf2_Switch<s(0)(0)(0)>[&]=4,
	scEpgLastSwichReason_uf1_Switch<s(0)(0)(0)>[&]=5,
	scEpgLastSwichReason_cr_Switch<s(0)(0)(0)>[&]=6,
	scEpgLastSwichReason_lockout_protection<s(0)(0)(0)>[&]=7
} scEpgLastSwichReason_Tval<s(0)(0)(0)>[&];(D1:scEpgLastSwichReason_Tval:1)[[TYPENAME:scEpgLastSwichReason_Tval]]

typedef enum {
	scEpgStandbySc_failed<s(0)(0)(0)>[&]=0,
	scEpgStandbySc_ok<s(0)(0)(0)>[&]=1
} scEpgStandbySc_Tval<s(0)(0)(0)>[&];(D1:scEpgStandbySc_Tval:1)[[TYPENAME:scEpgStandbySc_Tval]]

typedef enum {
	scEpgASCSwithchState_no_switch<s(0)(0)(0)>[&]=0,
	scEpgASCSwithchState_begin_switch<s(0)(0)(0)>[&]=1,
	scEpgASCSwithchState_end_switch<s(0)(0)(0)>[&]=2
} scEpgASCSwithchState_Tval<s(0)(0)(0)>[&];(D1:scEpgASCSwithchState_Tval:1)[[TYPENAME:scEpgASCSwithchState_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] scEpgScWorkerSlot<s(1)(1)(0)>[&];   
	int		scEpgSc1Status<s(1)(1)(0)>[&];   
	int		scEpgSc2Status<s(1)(1)(0)>[&];   
	scEpgRequest_Tval<s(1)(1)(0)>[T] scEpgRequest<s(1)(1)(0)>[&];   
	scEpgLastSwichReason_Tval<s(1)(1)(0)>[T] scEpgLastSwichReason<s(1)(1)(0)>[&];   
	scEpgStandbySc_Tval<s(1)(1)(0)>[T] scEpgStandbySc<s(1)(1)(0)>[&];   
	scEpgASCSwithchState_Tval<s(1)(1)(0)>[T] scEpgASCSwithchState<s(1)(1)(0)>[&];
}MIBscEpgGroup_t<s(0)(0)(0)>[&];(D1:MIBscEpgGroup_t:1)[[TYPENAME:MIBscEpgGroup_t]]












 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSDHProtectionModule_Did<s(0)(0)(0)>[&];(D1:pbSDHProtectionModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] securityGlobalSettingGroup_Did<s(0)(0)(0)>[&];(D1:securityGlobalSettingGroup_Did:0)

   
typedef enum {
	securityTCBehavior_none<s(0)(0)(0)>[&]=1,
	securityTCBehavior_alarm<s(0)(0)(0)>[&]=2,
	securityTCBehavior_disable_account<s(0)(0)(0)>[&]=3
} securityTCBehavior_Tval<s(0)(0)(0)>[&];(D1:securityTCBehavior_Tval:1)[[TYPENAME:securityTCBehavior_Tval]]

typedef struct
{
	int		securityPasswordMinLen<s(1)(1)(0)>[&];   
	int		securityMaxInvalidLogin<s(1)(1)(0)>[&];   
	int		securityUnauthorizedAccessThreshold<s(1)(1)(0)>[&];   
	securityTCBehavior_Tval<s(1)(1)(0)>[T] securityTCBehavior<s(1)(1)(0)>[&];   
}MIBsecurityGlobalSettingGroup_t<s(0)(0)(0)>[&];(D1:MIBsecurityGlobalSettingGroup_t:1)[[TYPENAME:MIBsecurityGlobalSettingGroup_t]]









 



 
extern MIBDid_t<s(0)(0)(0)>[T] securityAlarmInhibitGroup_Did<s(0)(0)(0)>[&];(D1:securityAlarmInhibitGroup_Did:0)

   
typedef struct
{
	PbEnableDisable_Tval<s(1)(1)(0)>[T] securityULEInhibit<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] securityUAInhibit<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] securityAEDInhibit<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] securityLTWInhibit<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] securityLFAInhibit<s(1)(1)(0)>[&];   
}MIBsecurityAlarmInhibitGroup_t<s(0)(0)(0)>[&];(D1:MIBsecurityAlarmInhibitGroup_t:1)[[TYPENAME:MIBsecurityAlarmInhibitGroup_t]]










 



 
extern MIBDid_t<s(0)(0)(0)>[T] snmpSecurityGroup_Did<s(0)(0)(0)>[&];(D1:snmpSecurityGroup_Did:0)

   


 



 
extern MIBDid_t<s(0)(0)(0)>[T] securityLogGroup_Did<s(0)(0)(0)>[&];(D1:securityLogGroup_Did:0)

   
typedef enum {
	securityLogGetStatus_inactive<s(0)(0)(0)>[&]=0,
	securityLogGetStatus_getStarted<s(0)(0)(0)>[&]=1,
	securityLogGetStatus_getPrepared<s(0)(0)(0)>[&]=2,
	securityLogGetStatus_getCompleted<s(0)(0)(0)>[&]=3,
	securityLogGetStatus_getCompletedNotClear<s(0)(0)(0)>[&]=4
} securityLogGetStatus_Tval<s(0)(0)(0)>[&];(D1:securityLogGetStatus_Tval:1)[[TYPENAME:securityLogGetStatus_Tval]]

typedef enum {
	securityLogFullBehavior_wrap_around<s(0)(0)(0)>[&]=1,
	securityLogFullBehavior_stop<s(0)(0)(0)>[&]=2
} securityLogFullBehavior_Tval<s(0)(0)(0)>[&];(D1:securityLogFullBehavior_Tval:1)[[TYPENAME:securityLogFullBehavior_Tval]]

typedef enum {
	securityLogControl_active<s(0)(0)(0)>[&]=1,
	securityLogControl_hold<s(0)(0)(0)>[&]=2,
	securityLogControl_purge<s(0)(0)(0)>[&]=3,
	securityLogControl_trap<s(0)(0)(0)>[&]=4
} securityLogControl_Tval<s(0)(0)(0)>[&];(D1:securityLogControl_Tval:1)[[TYPENAME:securityLogControl_Tval]]

typedef struct
{
	int		securityLogMaxSize<s(1)(1)(0)>[&];
	securityLogGetStatus_Tval<s(1)(1)(0)>[T] securityLogGetStatus<s(1)(1)(0)>[&];
	int		securityLogFullWarningThreshold<s(1)(1)(0)>[&];
	securityLogFullBehavior_Tval<s(1)(1)(0)>[T] securityLogFullBehavior<s(1)(1)(0)>[&];
	securityLogControl_Tval<s(1)(1)(0)>[T] securityLogControl<s(1)(1)(0)>[&];
}MIBsecurityLogGroup_t<s(0)(0)(0)>[&];(D1:MIBsecurityLogGroup_t:1)[[TYPENAME:MIBsecurityLogGroup_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbTrapDestinationTable_Did<s(0)(0)(0)>[&];(D1:pbTrapDestinationTable_Did:0)

   
typedef enum {
	trapDestAccessMode_read<s(0)(0)(0)>[&]=1,
	trapDestAccessMode_write<s(0)(0)(0)>[&]=2
} trapDestAccessMode_Tval<s(0)(0)(0)>[&];(D1:trapDestAccessMode_Tval:1)[[TYPENAME:trapDestAccessMode_Tval]]

typedef struct
{
	unsigned int	pbTrapDestIPAddress<s(1)(1)(0)>[&];                                    
	int		pbTrapDestAlarmPort<s(1)(1)(0)>[&];                                            
	int		pbTrapDestOperationPort<s(1)(1)(0)>[&];                                        
	PbUpDown_Tval<s(1)(1)(0)>[T] pbTrapDestAdminStatus<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbTrapDestRowStatus<s(1)(1)(0)>[&];   
	trapDestAccessMode_Tval<s(1)(1)(0)>[T] trapDestAccessMode<s(1)(1)(0)>[&];   
	DateTime<s(1)(1)(0)>[T]	trapDestLastWrite<s(1)(1)(0)>[&];   
	char		trapDestUserName<s(1)(1)(0)>[&][66];   
	unsigned int	trapDestClientIP<s(1)(1)(0)>[&];
	unsigned int	trapDestSysUpTime<s(1)(1)(0)>[&];
}MIBpbTrapDestinationTable_t<s(0)(0)(0)>[&];(D1:MIBpbTrapDestinationTable_t:1)[[TYPENAME:MIBpbTrapDestinationTable_t]]

















 



 
extern MIBDid_t<s(0)(0)(0)>[T] writeAccessGroup_Did<s(0)(0)(0)>[&];(D1:writeAccessGroup_Did:0)

   
typedef struct
{
	int		writeAccessTimeout<s(1)(1)(0)>[&];   
	int		writeAccessAutoCleanup<s(1)(1)(0)>[&];
}MIBwriteAccessGroup_t<s(0)(0)(0)>[&];(D1:MIBwriteAccessGroup_t:1)[[TYPENAME:MIBwriteAccessGroup_t]]







 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] portProtectforTCPorUDPTable_Did<s(0)(0)(0)>[&];(D1:portProtectforTCPorUDPTable_Did:0)

   
typedef enum {
	portProtecttype_tcp<s(0)(0)(0)>[&]=1,
	portProtecttype_udp<s(0)(0)(0)>[&]=2
} portProtecttype_Tval<s(0)(0)(0)>[&];(D1:portProtecttype_Tval:1)[[TYPENAME:portProtecttype_Tval]]

typedef struct
{
	int		portProtectIndex<s(1)(1)(0)>[&];                                        
	portProtecttype_Tval<s(1)(1)(0)>[T] portProtecttype<s(1)(1)(0)>[&];                         
	char		portProtectDescrption<s(1)(1)(0)>[&][64];
	RowStatus_Tval<s(1)(1)(0)>[T] portProtectStatus<s(1)(1)(0)>[&];
}MIBportProtectforTCPorUDPTable_t<s(0)(0)(0)>[&];(D1:MIBportProtectforTCPorUDPTable_t:1)[[TYPENAME:MIBportProtectforTCPorUDPTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] usmUserExtendedTable_Did<s(0)(0)(0)>[&];(D1:usmUserExtendedTable_Did:0)

   
typedef struct
{
	int		usmUserEngineID_len<s(1)(1)(0)>[&];
	char		usmUserEngineID<s(1)(1)(0)>[&][32];                                                  
	char		usmUserName<s(1)(1)(0)>[&][32];                                                      
	RowStatus_Tval<s(1)(1)(0)>[T] usmUserExtRowStatus<s(1)(1)(0)>[&];
	DateTime<s(1)(1)(0)>[T]	usmUserLastSucLogin<s(1)(1)(0)>[&];
	int		usmUserInvalidLoginAttempts<s(1)(1)(0)>[&];
	int		usmUserUnauthAccessAttempts<s(1)(1)(0)>[&];
	int		usmUserPwExpirationDate<s(1)(1)(0)>[&];
	int		usmUserPwExpirationPeriod<s(1)(1)(0)>[&];
	int		usmUserAccountExpirationDate<s(1)(1)(0)>[&];
	int		usmUserID<s(1)(1)(0)>[&];
}MIBusmUserExtendedTable_t<s(0)(0)(0)>[&];(D1:MIBusmUserExtendedTable_t:1)[[TYPENAME:MIBusmUserExtendedTable_t]]

















 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbSecurityModule_Did<s(0)(0)(0)>[&];(D1:pbSecurityModule_Did:0)

   







 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] tasksGroup_Did<s(0)(0)(0)>[&];(D1:tasksGroup_Did:0)

   
typedef struct
{
	char		applTableVer<s(1)(1)(0)>[&][30];
}MIBtasksGroup_t<s(0)(0)(0)>[&];(D1:MIBtasksGroup_t:1)[[TYPENAME:MIBtasksGroup_t]]






 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] applTable_Did<s(0)(0)(0)>[&];(D1:applTable_Did:0)

   
typedef enum {
	applStart_none<s(0)(0)(0)>[&]=0,
	applStart_full<s(0)(0)(0)>[&]=1,
	applStart_diag<s(0)(0)(0)>[&]=2,
	applStart_always<s(0)(0)(0)>[&]=3
} applStart_Tval<s(0)(0)(0)>[&];(D1:applStart_Tval:1)[[TYPENAME:applStart_Tval]]

typedef struct
{
	int		applIndex<s(1)(1)(0)>[&];                                       
	PbBoardFunction_Tval<s(1)(1)(0)>[T] applBoardFunction<s(1)(1)(0)>[&];
	PbBoardProperty_Tval<s(1)(1)(0)>[T] applBoardProperty<s(1)(1)(0)>[&];
	PbBoardStyle_Tval<s(1)(1)(0)>[T] applBoardStyle<s(1)(1)(0)>[&];
	PbChassisType_Tval<s(1)(1)(0)>[T] applChassisType<s(1)(1)(0)>[&];
	char		applName<s(1)(1)(0)>[&][30];
	int		applNumber<s(1)(1)(0)>[&];
	char		applFname<s(1)(1)(0)>[&][15];
	char		applEntryfn<s(1)(1)(0)>[&][30];
	char		applTaskName<s(1)(1)(0)>[&][30];
	int		applTaskPri<s(1)(1)(0)>[&];
	int		applTaskStack<s(1)(1)(0)>[&];
	int		applLogLevels<s(1)(1)(0)>[&];
	int		applOptions<s(1)(1)(0)>[&];
	applStart_Tval<s(1)(1)(0)>[T] applStart<s(1)(1)(0)>[&];
}MIBapplTable_t<s(0)(0)(0)>[&];(D1:MIBapplTable_t:1)[[TYPENAME:MIBapplTable_t]]






















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] aapplTable_Did<s(0)(0)(0)>[&];(D1:aapplTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] aapplSlotNo<s(1)(1)(0)>[&];              
	int		aapplNumber<s(1)(1)(0)>[&];                               
	char		aapplName<s(1)(1)(0)>[&][30];
	int		aapplCpuUsage<s(1)(1)(0)>[&];
	int		aapplLogLevels<s(1)(1)(0)>[&];
	int		aapplOptions<s(1)(1)(0)>[&];
	PbApplState_Tval<s(1)(1)(0)>[T] aapplStatus<s(1)(1)(0)>[&];
	int		aapplLoadOrder<s(1)(1)(0)>[&];
}MIBaapplTable_t<s(0)(0)(0)>[&];(D1:MIBaapplTable_t:1)[[TYPENAME:MIBaapplTable_t]]















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] bootpTable_Did<s(0)(0)(0)>[&];(D1:bootpTable_Did:0)

   
typedef struct
{
	PbBoardStyle_Tval<s(1)(1)(0)>[T] bootpBoardType<s(1)(1)(0)>[&];                  
	char		bootpFname<s(1)(1)(0)>[&][20];   
}MIBbootpTable_t<s(0)(0)(0)>[&];(D1:MIBbootpTable_t:1)[[TYPENAME:MIBbootpTable_t]]









 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbIntVcTable_Did<s(0)(0)(0)>[&];(D1:pbIntVcTable_Did:0)

   
typedef struct
{
	int		pbIntVcLocalIntf<s(1)(1)(0)>[&];                                   
	int		pbIntVcLocalVpi<s(1)(1)(0)>[&];                                    
	int		pbIntVcLocalVci<s(1)(1)(0)>[&];                                    
	int		pbIntVcRemoteIntf<s(1)(1)(0)>[&];                                  
	int		pbIntVcRemoteVpi<s(1)(1)(0)>[&];                                   
	int		pbIntVcRemoteVci<s(1)(1)(0)>[&];                                   
}MIBpbIntVcTable_t<s(0)(0)(0)>[&];(D1:MIBpbIntVcTable_t:1)[[TYPENAME:MIBpbIntVcTable_t]]













 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbFileSystemTable_Did<s(0)(0)(0)>[&];(D1:pbFileSystemTable_Did:0)

   
typedef struct
{
	char		pbFileDir<s(1)(1)(0)>[&][50];                       
	char		pbFileName<s(1)(1)(0)>[&][50];                      
	int		pbFileSize<s(1)(1)(0)>[&];   
	int		pbFileSlot<s(1)(1)(0)>[&];   
}MIBpbFileSystemTable_t<s(0)(0)(0)>[&];(D1:MIBpbFileSystemTable_t:1)[[TYPENAME:MIBpbFileSystemTable_t]]











 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbDivaMTable_Did<s(0)(0)(0)>[&];(D1:pbDivaMTable_Did:0)

   
typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbDivaMslotno<s(1)(1)(0)>[&];             
	int		pbDivaMportno<s(1)(1)(0)>[&];                              
	int		pbDivaMmetric<s(1)(1)(0)>[&];   
}MIBpbDivaMTable_t<s(0)(0)(0)>[&];(D1:MIBpbDivaMTable_t:1)[[TYPENAME:MIBpbDivaMTable_t]]










 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] moduleTable_Did<s(0)(0)(0)>[&];(D1:moduleTable_Did:0)

   
typedef enum {
	moduleStart_none<s(0)(0)(0)>[&]=0,
	moduleStart_full<s(0)(0)(0)>[&]=1,
	moduleStart_diag<s(0)(0)(0)>[&]=2,
	moduleStart_always<s(0)(0)(0)>[&]=3
} moduleStart_Tval<s(0)(0)(0)>[&];(D1:moduleStart_Tval:1)[[TYPENAME:moduleStart_Tval]]

typedef struct
{
	int		moduleIndex<s(1)(1)(0)>[&];                                         
	PbBoardFunction_Tval<s(1)(1)(0)>[T] moduleBoardFunction<s(1)(1)(0)>[&];
	PbBoardProperty_Tval<s(1)(1)(0)>[T] moduleBoardProperty<s(1)(1)(0)>[&];
	PbBoardStyle_Tval<s(1)(1)(0)>[T] moduleBoardStyle<s(1)(1)(0)>[&];
	PbChassisType_Tval<s(1)(1)(0)>[T] moduleChassisType<s(1)(1)(0)>[&];
	char		moduleName<s(1)(1)(0)>[&][30];
	char		moduleFname<s(1)(1)(0)>[&][15];
	moduleStart_Tval<s(1)(1)(0)>[T] moduleStart<s(1)(1)(0)>[&];
	char		moduleInit<s(1)(1)(0)>[&][30];
}MIBmoduleTable_t<s(0)(0)(0)>[&];(D1:MIBmoduleTable_t:1)[[TYPENAME:MIBmoduleTable_t]]
















 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbPortLedsTable_Did<s(0)(0)(0)>[&];(D1:pbPortLedsTable_Did:0)

   
typedef enum {
	pbPortLedColor_off<s(0)(0)(0)>[&]=0,
	pbPortLedColor_green<s(0)(0)(0)>[&]=1,
	pbPortLedColor_yellow<s(0)(0)(0)>[&]=2,
	pbPortLedColor_red<s(0)(0)(0)>[&]=3,
	pbPortLedColor_blinkingGreen<s(0)(0)(0)>[&]=4,
	pbPortLedColor_blinkingYellow<s(0)(0)(0)>[&]=5,
	pbPortLedColor_blinkingRed<s(0)(0)(0)>[&]=6
} pbPortLedColor_Tval<s(0)(0)(0)>[&];(D1:pbPortLedColor_Tval:1)[[TYPENAME:pbPortLedColor_Tval]]

typedef struct
{
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbPortLedProxySlot<s(1)(1)(0)>[&];                  
	PbSlotNumberType_Tval<s(1)(1)(0)>[T] pbPortLedSlot<s(1)(1)(0)>[&];                       
	int		pbPortLedIndexNo<s(1)(1)(0)>[&];                                     
	pbPortLedColor_Tval<s(1)(1)(0)>[T] pbPortLedColor<s(1)(1)(0)>[&];   
}MIBpbPortLedsTable_t<s(0)(0)(0)>[&];(D1:MIBpbPortLedsTable_t:1)[[TYPENAME:MIBpbPortLedsTable_t]]
















 




 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbMgnt_Did<s(0)(0)(0)>[&];(D1:pbMgnt_Did:0)

   
typedef struct
{
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbTelnetLogin<s(1)(1)(0)>[&];   
	char		pbPhotonCommunityString<s(1)(1)(0)>[&][8];   
	char		pbPhotonTrapCommunity<s(1)(1)(0)>[&][8];   
}MIBpbMgnt_t<s(0)(0)(0)>[&];(D1:MIBpbMgnt_t:1)[[TYPENAME:MIBpbMgnt_t]]








 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbUserTable_Did<s(0)(0)(0)>[&];(D1:pbUserTable_Did:0)

   
typedef struct
{
	char		pbUserName<s(1)(1)(0)>[&][64];                                                  
	char		pbUserPassword<s(1)(1)(0)>[&][64];   
	int		pbUserInactivityTimeout<s(1)(1)(0)>[&];   
	PbUserAccessLevel_Tval<s(1)(1)(0)>[T] pbUserAccessLevel<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserLoggedIn<s(1)(1)(0)>[&];   
	int		pbUserTimeLoggedIn<s(1)(1)(0)>[&];   
	int		pbUserLastAccessed<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserAccessBrowser<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserAccessCraft<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserAccessTL1<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserAccessFTP<s(1)(1)(0)>[&];   
	TruthValue_Tval<s(1)(1)(0)>[T] pbUserAccessCLI<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbCriticalAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMajorAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMinorAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbWarningAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbInfoAudible<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbCriticalVisual<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMajorVisual<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbMinorVisual<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbWarningVisual<s(1)(1)(0)>[&];   
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbInfoVisual<s(1)(1)(0)>[&];   
	PbUserAccessLevel_Tval<s(1)(1)(0)>[T] pbUserCurrentAccessLevel<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbUserRowStatus<s(1)(1)(0)>[&];   
	int		pbUserLoginCount<s(1)(1)(0)>[&];   
}MIBpbUserTable_t<s(0)(0)(0)>[&];(D1:MIBpbUserTable_t:1)[[TYPENAME:MIBpbUserTable_t]]
































 



 
 
extern MIBDid_t<s(0)(0)(0)>[T] pbCommunityStrTable_Did<s(0)(0)(0)>[&];(D1:pbCommunityStrTable_Did:0)

   
typedef struct
{
	char		pbCommunityStringName<s(1)(1)(0)>[&][32];                                               
	PbCommunityStringAccessLevel_Tval<s(1)(1)(0)>[T] pbCommunityStringAccessLevel<s(1)(1)(0)>[&];   
	RowStatus_Tval<s(1)(1)(0)>[T] pbCommunityStringRowStatus<s(1)(1)(0)>[&];   
	char		pbCommunityStringComment<s(1)(1)(0)>[&][64];   
}MIBpbCommunityStrTable_t<s(0)(0)(0)>[&];(D1:MIBpbCommunityStrTable_t:1)[[TYPENAME:MIBpbCommunityStrTable_t]]











 



 
extern MIBDid_t<s(0)(0)(0)>[T] pbPrivateManagement_Did<s(0)(0)(0)>[&];(D1:pbPrivateManagement_Did:0)

   




typedef struct {
	MIBDID<s(1)(1)(0)>[T] did<s(1)(1)(0)>[&];
	int    last_oid<s(1)(1)(0)>[&];
} LeafInfo<s(0)(0)(0)>[&];(D1:LeafInfo:1)[[TYPENAME:LeafInfo]]

extern LeafInfo<s(0)(0)(0)>[T] pbUserTable_cookie<s(0)(0)(0)>[&];(D1:pbUserTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTelnetLogin_cookie<s(0)(0)(0)>[&];(D1:pbTelnetLogin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCommunityStrTable_cookie<s(0)(0)(0)>[&];(D1:pbCommunityStrTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPhotonCommunityString_cookie<s(0)(0)(0)>[&];(D1:pbPhotonCommunityString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPhotonTrapCommunity_cookie<s(0)(0)(0)>[&];(D1:pbPhotonTrapCommunity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCommunityStringName_cookie<s(0)(0)(0)>[&];(D1:pbCommunityStringName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCommunityStringAccessLevel_cookie<s(0)(0)(0)>[&];(D1:pbCommunityStringAccessLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCommunityStringRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbCommunityStringRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCommunityStringComment_cookie<s(0)(0)(0)>[&];(D1:pbCommunityStringComment_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserName_cookie<s(0)(0)(0)>[&];(D1:pbUserName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserPassword_cookie<s(0)(0)(0)>[&];(D1:pbUserPassword_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserInactivityTimeout_cookie<s(0)(0)(0)>[&];(D1:pbUserInactivityTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessLevel_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserLoggedIn_cookie<s(0)(0)(0)>[&];(D1:pbUserLoggedIn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserTimeLoggedIn_cookie<s(0)(0)(0)>[&];(D1:pbUserTimeLoggedIn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserLastAccessed_cookie<s(0)(0)(0)>[&];(D1:pbUserLastAccessed_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessBrowser_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessBrowser_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessCraft_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessCraft_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessTL1_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessTL1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessFTP_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessFTP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserAccessCLI_cookie<s(0)(0)(0)>[&];(D1:pbUserAccessCLI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCriticalAudible_cookie<s(0)(0)(0)>[&];(D1:pbCriticalAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMajorAudible_cookie<s(0)(0)(0)>[&];(D1:pbMajorAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMinorAudible_cookie<s(0)(0)(0)>[&];(D1:pbMinorAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWarningAudible_cookie<s(0)(0)(0)>[&];(D1:pbWarningAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInfoAudible_cookie<s(0)(0)(0)>[&];(D1:pbInfoAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCriticalVisual_cookie<s(0)(0)(0)>[&];(D1:pbCriticalVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMajorVisual_cookie<s(0)(0)(0)>[&];(D1:pbMajorVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMinorVisual_cookie<s(0)(0)(0)>[&];(D1:pbMinorVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWarningVisual_cookie<s(0)(0)(0)>[&];(D1:pbWarningVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInfoVisual_cookie<s(0)(0)(0)>[&];(D1:pbInfoVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserCurrentAccessLevel_cookie<s(0)(0)(0)>[&];(D1:pbUserCurrentAccessLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbUserRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUserLoginCount_cookie<s(0)(0)(0)>[&];(D1:pbUserLoginCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] dod_cookie<s(0)(0)(0)>[&];(D1:dod_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] internet_cookie<s(0)(0)(0)>[&];(D1:internet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mgmt_cookie<s(0)(0)(0)>[&];(D1:mgmt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] private_cookie<s(0)(0)(0)>[&];(D1:private_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpV2_cookie<s(0)(0)(0)>[&];(D1:snmpV2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpModules_cookie<s(0)(0)(0)>[&];(D1:snmpModules_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMIB_cookie<s(0)(0)(0)>[&];(D1:snmpMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkMIB_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDMIB_cookie<s(0)(0)(0)>[&];(D1:snmpMPDMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetMIB_cookie<s(0)(0)(0)>[&];(D1:snmpTargetMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotificationMIB_cookie<s(0)(0)(0)>[&];(D1:snmpNotificationMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpUsmMIB_cookie<s(0)(0)(0)>[&];(D1:snmpUsmMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpVacmMIB_cookie<s(0)(0)(0)>[&];(D1:snmpVacmMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityMIB_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityMIBObjects_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityMIBConformance_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityMIBGroups_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityTable_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrExtTable_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrExtTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTrapAddress_cookie<s(0)(0)(0)>[&];(D1:snmpTrapAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTrapCommunity_cookie<s(0)(0)(0)>[&];(D1:snmpTrapCommunity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrName_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTMask_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrMMS_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrMMS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityIndex_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityName_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunitySecurityName_cookie<s(0)(0)(0)>[&];(D1:snmpCommunitySecurityName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityContextEngineID_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityContextEngineID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityContextName_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityContextName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityTransportTag_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityTransportTag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityStorageType_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpCommunityStatus_cookie<s(0)(0)(0)>[&];(D1:snmpCommunityStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmMIBObjects_cookie<s(0)(0)(0)>[&];(D1:vacmMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmMIBConformance_cookie<s(0)(0)(0)>[&];(D1:vacmMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:vacmMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmMIBGroups_cookie<s(0)(0)(0)>[&];(D1:vacmMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmContextTable_cookie<s(0)(0)(0)>[&];(D1:vacmContextTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmSecurityToGroupTable_cookie<s(0)(0)(0)>[&];(D1:vacmSecurityToGroupTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessTable_cookie<s(0)(0)(0)>[&];(D1:vacmAccessTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmMIBViews_cookie<s(0)(0)(0)>[&];(D1:vacmMIBViews_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewSpinLock_cookie<s(0)(0)(0)>[&];(D1:vacmViewSpinLock_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyTable_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyViewName_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyViewName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilySubtree_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilySubtree_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyMask_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyType_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyStorageType_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmViewTreeFamilyStatus_cookie<s(0)(0)(0)>[&];(D1:vacmViewTreeFamilyStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmGroupName_cookie<s(0)(0)(0)>[&];(D1:vacmGroupName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessContextPrefix_cookie<s(0)(0)(0)>[&];(D1:vacmAccessContextPrefix_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessSecurityModel_cookie<s(0)(0)(0)>[&];(D1:vacmAccessSecurityModel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessSecurityLevel_cookie<s(0)(0)(0)>[&];(D1:vacmAccessSecurityLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessContextMatch_cookie<s(0)(0)(0)>[&];(D1:vacmAccessContextMatch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessReadViewName_cookie<s(0)(0)(0)>[&];(D1:vacmAccessReadViewName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessWriteViewName_cookie<s(0)(0)(0)>[&];(D1:vacmAccessWriteViewName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessNotifyViewName_cookie<s(0)(0)(0)>[&];(D1:vacmAccessNotifyViewName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessStorageType_cookie<s(0)(0)(0)>[&];(D1:vacmAccessStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmAccessStatus_cookie<s(0)(0)(0)>[&];(D1:vacmAccessStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmSecurityModel_cookie<s(0)(0)(0)>[&];(D1:vacmSecurityModel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmSecurityName_cookie<s(0)(0)(0)>[&];(D1:vacmSecurityName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmGroupName_cookie<s(0)(0)(0)>[&];(D1:vacmGroupName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmSecurityToGroupStorageType_cookie<s(0)(0)(0)>[&];(D1:vacmSecurityToGroupStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmSecurityToGroupStatus_cookie<s(0)(0)(0)>[&];(D1:vacmSecurityToGroupStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vacmContextName_cookie<s(0)(0)(0)>[&];(D1:vacmContextName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmMIBObjects_cookie<s(0)(0)(0)>[&];(D1:usmMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmMIBConformance_cookie<s(0)(0)(0)>[&];(D1:usmMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:usmMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmMIBGroups_cookie<s(0)(0)(0)>[&];(D1:usmMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStats_cookie<s(0)(0)(0)>[&];(D1:usmStats_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUser_cookie<s(0)(0)(0)>[&];(D1:usmUser_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserSpinLock_cookie<s(0)(0)(0)>[&];(D1:usmUserSpinLock_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserTable_cookie<s(0)(0)(0)>[&];(D1:usmUserTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserEngineID_cookie<s(0)(0)(0)>[&];(D1:usmUserEngineID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserName_cookie<s(0)(0)(0)>[&];(D1:usmUserName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserSecurityName_cookie<s(0)(0)(0)>[&];(D1:usmUserSecurityName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserCloneFrom_cookie<s(0)(0)(0)>[&];(D1:usmUserCloneFrom_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserAuthProtocol_cookie<s(0)(0)(0)>[&];(D1:usmUserAuthProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserAuthKeyChange_cookie<s(0)(0)(0)>[&];(D1:usmUserAuthKeyChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserOwnAuthKeyChange_cookie<s(0)(0)(0)>[&];(D1:usmUserOwnAuthKeyChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserPrivProtocol_cookie<s(0)(0)(0)>[&];(D1:usmUserPrivProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserPrivKeyChange_cookie<s(0)(0)(0)>[&];(D1:usmUserPrivKeyChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserOwnPrivKeyChange_cookie<s(0)(0)(0)>[&];(D1:usmUserOwnPrivKeyChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserPublic_cookie<s(0)(0)(0)>[&];(D1:usmUserPublic_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserStorageType_cookie<s(0)(0)(0)>[&];(D1:usmUserStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserStatus_cookie<s(0)(0)(0)>[&];(D1:usmUserStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsUnsupportedSecLevels_cookie<s(0)(0)(0)>[&];(D1:usmStatsUnsupportedSecLevels_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsNotInTimeWindows_cookie<s(0)(0)(0)>[&];(D1:usmStatsNotInTimeWindows_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsUnknownUserNames_cookie<s(0)(0)(0)>[&];(D1:usmStatsUnknownUserNames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsUnknownEngineIDs_cookie<s(0)(0)(0)>[&];(D1:usmStatsUnknownEngineIDs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsWrongDigests_cookie<s(0)(0)(0)>[&];(D1:usmStatsWrongDigests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmStatsDecryptionErrors_cookie<s(0)(0)(0)>[&];(D1:usmStatsDecryptionErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyObjects_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyConformance_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyGroups_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyTable_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterProfileTable_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterTable_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterProfileName_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterSubtree_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterSubtree_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterMask_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterType_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterStorageType_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterRowStatus_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsName_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterProfileName_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterProfileStorType_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileStorType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyFilterProfileRowStatus_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyFilterProfileRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyName_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyTag_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyTag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyType_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyStorageType_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpNotifyRowStatus_cookie<s(0)(0)(0)>[&];(D1:snmpNotifyRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetObjects_cookie<s(0)(0)(0)>[&];(D1:snmpTargetObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetConformance_cookie<s(0)(0)(0)>[&];(D1:snmpTargetConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpTargetCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetGroups_cookie<s(0)(0)(0)>[&];(D1:snmpTargetGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetSpinLock_cookie<s(0)(0)(0)>[&];(D1:snmpTargetSpinLock_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTable_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsTable_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpUnavailableContexts_cookie<s(0)(0)(0)>[&];(D1:snmpUnavailableContexts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpUnknownContexts_cookie<s(0)(0)(0)>[&];(D1:snmpUnknownContexts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsName_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsMPModel_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsMPModel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsSecurityModel_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsSecurityModel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsSecurityName_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsSecurityName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsSecurityLevel_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsSecurityLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsStorageType_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetParamsRowStatus_cookie<s(0)(0)(0)>[&];(D1:snmpTargetParamsRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrName_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTDomain_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTDomain_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTAddress_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTimeout_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrRetryCount_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrRetryCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrTagList_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrTagList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrParams_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrParams_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrStorageType_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrStorageType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTargetAddrRowStatus_cookie<s(0)(0)(0)>[&];(D1:snmpTargetAddrRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDAdmin_cookie<s(0)(0)(0)>[&];(D1:snmpMPDAdmin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDMIBObjects_cookie<s(0)(0)(0)>[&];(D1:snmpMPDMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDMIBConformance_cookie<s(0)(0)(0)>[&];(D1:snmpMPDMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpMPDMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDMIBGroups_cookie<s(0)(0)(0)>[&];(D1:snmpMPDMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMPDStats_cookie<s(0)(0)(0)>[&];(D1:snmpMPDStats_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpUnknownSecurityModels_cookie<s(0)(0)(0)>[&];(D1:snmpUnknownSecurityModels_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInvalidMsgs_cookie<s(0)(0)(0)>[&];(D1:snmpInvalidMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpUnknownPDUHandlers_cookie<s(0)(0)(0)>[&];(D1:snmpUnknownPDUHandlers_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkAdmin_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkAdmin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkMIBObjects_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkMIBConformance_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpFrameworkMIBGroups_cookie<s(0)(0)(0)>[&];(D1:snmpFrameworkMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEngine_cookie<s(0)(0)(0)>[&];(D1:snmpEngine_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEngineID_cookie<s(0)(0)(0)>[&];(D1:snmpEngineID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEngineBoots_cookie<s(0)(0)(0)>[&];(D1:snmpEngineBoots_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEngineTime_cookie<s(0)(0)(0)>[&];(D1:snmpEngineTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEngineMaxMessageSize_cookie<s(0)(0)(0)>[&];(D1:snmpEngineMaxMessageSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpAuthProtocols_cookie<s(0)(0)(0)>[&];(D1:snmpAuthProtocols_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpPrivProtocols_cookie<s(0)(0)(0)>[&];(D1:snmpPrivProtocols_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmNoPrivProtocol_cookie<s(0)(0)(0)>[&];(D1:usmNoPrivProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmDESPrivProtocol_cookie<s(0)(0)(0)>[&];(D1:usmDESPrivProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmNoAuthProtocol_cookie<s(0)(0)(0)>[&];(D1:usmNoAuthProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmHMACMD5AuthProtocol_cookie<s(0)(0)(0)>[&];(D1:usmHMACMD5AuthProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmHMACSHAAuthProtocol_cookie<s(0)(0)(0)>[&];(D1:usmHMACSHAAuthProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMIBObjects_cookie<s(0)(0)(0)>[&];(D1:snmpMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMIBConformance_cookie<s(0)(0)(0)>[&];(D1:snmpMIBConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:snmpMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpMIBGroups_cookie<s(0)(0)(0)>[&];(D1:snmpMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTrap_cookie<s(0)(0)(0)>[&];(D1:snmpTrap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTraps_cookie<s(0)(0)(0)>[&];(D1:snmpTraps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpSet_cookie<s(0)(0)(0)>[&];(D1:snmpSet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpSetSerialNo_cookie<s(0)(0)(0)>[&];(D1:snmpSetSerialNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTrapOID_cookie<s(0)(0)(0)>[&];(D1:snmpTrapOID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpTrapEnterprise_cookie<s(0)(0)(0)>[&];(D1:snmpTrapEnterprise_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterprises_cookie<s(0)(0)(0)>[&];(D1:enterprises_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseRoot_cookie<s(0)(0)(0)>[&];(D1:enterpriseRoot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseCommonRoot_cookie<s(0)(0)(0)>[&];(D1:enterpriseCommonRoot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseReg_cookie<s(0)(0)(0)>[&];(D1:enterpriseReg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseGeneric_cookie<s(0)(0)(0)>[&];(D1:enterpriseGeneric_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseProducts_cookie<s(0)(0)(0)>[&];(D1:enterpriseProducts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseCaps_cookie<s(0)(0)(0)>[&];(D1:enterpriseCaps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseReqs_cookie<s(0)(0)(0)>[&];(D1:enterpriseReqs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseExpr_cookie<s(0)(0)(0)>[&];(D1:enterpriseExpr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1Products_cookie<s(0)(0)(0)>[&];(D1:productSeries1Products_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1Common_cookie<s(0)(0)(0)>[&];(D1:productSeries1Common_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1CmnConf_cookie<s(0)(0)(0)>[&];(D1:productSeries1CmnConf_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1CmnObjs_cookie<s(0)(0)(0)>[&];(D1:productSeries1CmnObjs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1CmnEvents_cookie<s(0)(0)(0)>[&];(D1:productSeries1CmnEvents_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1CmnTCs_cookie<s(0)(0)(0)>[&];(D1:productSeries1CmnTCs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1TrapGroup_cookie<s(0)(0)(0)>[&];(D1:productSeries1TrapGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapTimeStamp_cookie<s(0)(0)(0)>[&];(D1:pbTrapTimeStamp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNode_cookie<s(0)(0)(0)>[&];(D1:pbNode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEvents_cookie<s(0)(0)(0)>[&];(D1:pbEvents_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCircuitBasedTransport_cookie<s(0)(0)(0)>[&];(D1:pbCircuitBasedTransport_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMS_cookie<s(0)(0)(0)>[&];(D1:pbTMS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOspf_cookie<s(0)(0)(0)>[&];(D1:pbOspf_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMoln_cookie<s(0)(0)(0)>[&];(D1:pbMoln_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDcc_cookie<s(0)(0)(0)>[&];(D1:pbDcc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernet_cookie<s(0)(0)(0)>[&];(D1:pbEthernet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDiagnostics_cookie<s(0)(0)(0)>[&];(D1:pbDiagnostics_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOpticsMonitor_cookie<s(0)(0)(0)>[&];(D1:pbOpticsMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPowerCircuitMonitor_cookie<s(0)(0)(0)>[&];(D1:pbPowerCircuitMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOr_cookie<s(0)(0)(0)>[&];(D1:pbOr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrunk_cookie<s(0)(0)(0)>[&];(D1:pbTrunk_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXcExtend_cookie<s(0)(0)(0)>[&];(D1:pbXcExtend_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhXcTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhXcTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRpr_cookie<s(0)(0)(0)>[&];(D1:pbRpr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAObjects_cookie<s(0)(0)(0)>[&];(D1:pbOAObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsi_cookie<s(0)(0)(0)>[&];(D1:pbOsi_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnel_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbProtection_cookie<s(0)(0)(0)>[&];(D1:pbProtection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSecurity_cookie<s(0)(0)(0)>[&];(D1:pbSecurity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityGlobalSettingGroup_cookie<s(0)(0)(0)>[&];(D1:securityGlobalSettingGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityAlarmInhibitGroup_cookie<s(0)(0)(0)>[&];(D1:securityAlarmInhibitGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpSecurityGroup_cookie<s(0)(0)(0)>[&];(D1:snmpSecurityGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogGroup_cookie<s(0)(0)(0)>[&];(D1:securityLogGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestinationTable_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestinationTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] writeAccessGroup_cookie<s(0)(0)(0)>[&];(D1:writeAccessGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portProtectforTCPorUDPTable_cookie<s(0)(0)(0)>[&];(D1:portProtectforTCPorUDPTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portProtectIndex_cookie<s(0)(0)(0)>[&];(D1:portProtectIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portProtecttype_cookie<s(0)(0)(0)>[&];(D1:portProtecttype_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portProtectDescrption_cookie<s(0)(0)(0)>[&];(D1:portProtectDescrption_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portProtectStatus_cookie<s(0)(0)(0)>[&];(D1:portProtectStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] writeAccessTimeout_cookie<s(0)(0)(0)>[&];(D1:writeAccessTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] writeAccessAutoCleanup_cookie<s(0)(0)(0)>[&];(D1:writeAccessAutoCleanup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestIPAddress_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestIPAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestAlarmPort_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestAlarmPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestOperationPort_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestOperationPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestAdminStatus_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTrapDestRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbTrapDestRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] trapDestAccessMode_cookie<s(0)(0)(0)>[&];(D1:trapDestAccessMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] trapDestLastWrite_cookie<s(0)(0)(0)>[&];(D1:trapDestLastWrite_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] trapDestUserName_cookie<s(0)(0)(0)>[&];(D1:trapDestUserName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] trapDestClientIP_cookie<s(0)(0)(0)>[&];(D1:trapDestClientIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] trapDestSysUpTime_cookie<s(0)(0)(0)>[&];(D1:trapDestSysUpTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogMaxSize_cookie<s(0)(0)(0)>[&];(D1:securityLogMaxSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogGetStatus_cookie<s(0)(0)(0)>[&];(D1:securityLogGetStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogFullWarningThreshold_cookie<s(0)(0)(0)>[&];(D1:securityLogFullWarningThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogFullBehavior_cookie<s(0)(0)(0)>[&];(D1:securityLogFullBehavior_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLogControl_cookie<s(0)(0)(0)>[&];(D1:securityLogControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserExtendedTable_cookie<s(0)(0)(0)>[&];(D1:usmUserExtendedTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserEngineID_cookie<s(0)(0)(0)>[&];(D1:usmUserEngineID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserName_cookie<s(0)(0)(0)>[&];(D1:usmUserName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserExtRowStatus_cookie<s(0)(0)(0)>[&];(D1:usmUserExtRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserLastSucLogin_cookie<s(0)(0)(0)>[&];(D1:usmUserLastSucLogin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserInvalidLoginAttempts_cookie<s(0)(0)(0)>[&];(D1:usmUserInvalidLoginAttempts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserUnauthAccessAttempts_cookie<s(0)(0)(0)>[&];(D1:usmUserUnauthAccessAttempts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserPwExpirationDate_cookie<s(0)(0)(0)>[&];(D1:usmUserPwExpirationDate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserPwExpirationPeriod_cookie<s(0)(0)(0)>[&];(D1:usmUserPwExpirationPeriod_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserAccountExpirationDate_cookie<s(0)(0)(0)>[&];(D1:usmUserAccountExpirationDate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] usmUserID_cookie<s(0)(0)(0)>[&];(D1:usmUserID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityULEInhibit_cookie<s(0)(0)(0)>[&];(D1:securityULEInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityUAInhibit_cookie<s(0)(0)(0)>[&];(D1:securityUAInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityAEDInhibit_cookie<s(0)(0)(0)>[&];(D1:securityAEDInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLTWInhibit_cookie<s(0)(0)(0)>[&];(D1:securityLTWInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityLFAInhibit_cookie<s(0)(0)(0)>[&];(D1:securityLFAInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityPasswordMinLen_cookie<s(0)(0)(0)>[&];(D1:securityPasswordMinLen_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityMaxInvalidLogin_cookie<s(0)(0)(0)>[&];(D1:securityMaxInvalidLogin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityUnauthorizedAccessThreshold_cookie<s(0)(0)(0)>[&];(D1:securityUnauthorizedAccessThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] securityTCBehavior_cookie<s(0)(0)(0)>[&];(D1:securityTCBehavior_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] epgGroup_cookie<s(0)(0)(0)>[&];(D1:epgGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] msspringGroup_cookie<s(0)(0)(0)>[&];(D1:msspringGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mspGroup_cookie<s(0)(0)(0)>[&];(D1:mspGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sncpGroup_cookie<s(0)(0)(0)>[&];(D1:sncpGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fGroup_cookie<s(0)(0)(0)>[&];(D1:mssp4fGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fConfigTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fTopologyTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fTopologyTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fCommandTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fCommandTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeStatusTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fAutoMappingTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fAutoMappingTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fXcTable_cookie<s(0)(0)(0)>[&];(D1:mssp4fXcTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fXcSide_cookie<s(0)(0)(0)>[&];(D1:mssp4fXcSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fXcTimeSlot_cookie<s(0)(0)(0)>[&];(D1:mssp4fXcTimeSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fXcOrder_cookie<s(0)(0)(0)>[&];(D1:mssp4fXcOrder_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fXcType_cookie<s(0)(0)(0)>[&];(D1:mssp4fXcType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestWorkMappingString_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestWorkMappingString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastWorkMappingString_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastWorkMappingString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fAutomappingRowStatus_cookie<s(0)(0)(0)>[&];(D1:mssp4fAutomappingRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeAgentState_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeAgentState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeState_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeCurrentSide_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeCurrentReq_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeCurrentSrc_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeCurrentSrc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeKExpressMode_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeKExpressMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestSwitchCommand_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestSwitchCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestLineReq_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestLineReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestLastSwitchCmd_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestLastSwitchCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestSwitchStatus_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestSwitchStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestK1byteInput_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestK1byteInput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestK2byteInput_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestK2byteInput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestK1byteOutput_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestK1byteOutput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestK2byteOutput_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestK2byteOutput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastSwitchCommand_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastSwitchCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastLineReq_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastLineReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastLastSwitchCmd_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastLastSwitchCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastSwitchStatus_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastSwitchStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastK1byteInput_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastK1byteInput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastK2byteInput_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastK2byteInput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastK1byteOutput_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastK1byteOutput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastK2byteOutput_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastK2byteOutput_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPassNodeId_cookie<s(0)(0)(0)>[&];(D1:mssp4fPassNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fCommandCurrentSide_cookie<s(0)(0)(0)>[&];(D1:mssp4fCommandCurrentSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fCommand_cookie<s(0)(0)(0)>[&];(D1:mssp4fCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fLastCommandStatus_cookie<s(0)(0)(0)>[&];(D1:mssp4fLastCommandStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fSumOfNodes_cookie<s(0)(0)(0)>[&];(D1:mssp4fSumOfNodes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId0_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId1_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId2_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId3_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId4_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId5_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId6_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId6_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId7_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId7_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId8_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId8_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId9_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId9_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId10_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId10_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId11_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId11_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId12_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId12_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId13_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId13_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId14_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId14_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeId15_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeId15_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp0_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp1_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp2_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp3_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp4_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp5_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp6_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp6_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp7_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp7_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp8_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp8_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp9_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp9_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp10_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp10_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp11_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp11_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp12_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp12_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp13_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp13_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp14_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp14_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fNodeIp15_cookie<s(0)(0)(0)>[&];(D1:mssp4fNodeIp15_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingId_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fProtectMode_cookie<s(0)(0)(0)>[&];(D1:mssp4fProtectMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingName_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fGroupId_cookie<s(0)(0)(0)>[&];(D1:mssp4fGroupId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWaitToRestore_cookie<s(0)(0)(0)>[&];(D1:mssp4fWaitToRestore_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingType_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestWorkChannelNutInfo_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestWorkChannelNutInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastWorkChannelNutInfo_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastWorkChannelNutInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fConfigEnabled_cookie<s(0)(0)(0)>[&];(D1:mssp4fConfigEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fConfigDeleted_cookie<s(0)(0)(0)>[&];(D1:mssp4fConfigDeleted_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fRingSuspended_cookie<s(0)(0)(0)>[&];(D1:mssp4fRingSuspended_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fAutoSquelchEnabled_cookie<s(0)(0)(0)>[&];(D1:mssp4fAutoSquelchEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fAutoMappingEnabled_cookie<s(0)(0)(0)>[&];(D1:mssp4fAutoMappingEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestWorkSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestWorkSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestWorkPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestWorkPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestWorkPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestWorkPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestProtPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fWestProtPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fWestProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastWorkSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastWorkSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastWorkPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastWorkPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastWorkPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastWorkPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastProtPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fEastProtPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fEastProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestWorkSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestWorkSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestWorkPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestWorkPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestWorkPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestWorkPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestProtPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerWestProtPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerWestProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastWorkSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastWorkSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastWorkPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastWorkPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastWorkPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastWorkPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastProtPortType_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mssp4fPeerEastProtPortNum_cookie<s(0)(0)(0)>[&];(D1:mssp4fPeerEastProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbSncpConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpStateTable_cookie<s(0)(0)(0)>[&];(D1:pbSncpStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbDpnpConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpStateTable_cookie<s(0)(0)(0)>[&];(D1:pbDpnpStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpExtendParaGroup_cookie<s(0)(0)(0)>[&];(D1:pbSncpExtendParaGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLoSncpWTR_cookie<s(0)(0)(0)>[&];(D1:pbLoSncpWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLoSncpHoldOffTime_cookie<s(0)(0)(0)>[&];(D1:pbLoSncpHoldOffTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpStateLineId_cookie<s(0)(0)(0)>[&];(D1:pbDpnpStateLineId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDetailedStateString1_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDetailedStateString1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDetailedStateString2_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDetailedStateString2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDetailedStateString3_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDetailedStateString3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDetailedStateString4_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDetailedStateString4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpTPType_cookie<s(0)(0)(0)>[&];(D1:pbDpnpTPType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDstSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDstSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDstPortType_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDstPortNum_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDstPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDstSource_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDstSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpWorkChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbVSncpWorkChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpWorkChPortType_cookie<s(0)(0)(0)>[&];(D1:pbVSncpWorkChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpWorkChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbVSncpWorkChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpWorkSource_cookie<s(0)(0)(0)>[&];(D1:pbVSncpWorkSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpProtectChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbVSncpProtectChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpProtectChPortType_cookie<s(0)(0)(0)>[&];(D1:pbVSncpProtectChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpProtectChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbVSncpProtectChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVSncpProtectSource_cookie<s(0)(0)(0)>[&];(D1:pbVSncpProtectSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVMsspringWorkChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbVMsspringWorkChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVMsspringWorkChPortType_cookie<s(0)(0)(0)>[&];(D1:pbVMsspringWorkChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVMsspringWorkChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbVMsspringWorkChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVMsspringWorkSource_cookie<s(0)(0)(0)>[&];(D1:pbVMsspringWorkSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpSignalDircetion_cookie<s(0)(0)(0)>[&];(D1:pbDpnpSignalDircetion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpGroupId_cookie<s(0)(0)(0)>[&];(D1:pbDpnpGroupId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpWorkChState_cookie<s(0)(0)(0)>[&];(D1:pbDpnpWorkChState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpExternalCmd_cookie<s(0)(0)(0)>[&];(D1:pbDpnpExternalCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpExCmdRslt_cookie<s(0)(0)(0)>[&];(D1:pbDpnpExCmdRslt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpCurSwitchReq_cookie<s(0)(0)(0)>[&];(D1:pbDpnpCurSwitchReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpSwitchReason_cookie<s(0)(0)(0)>[&];(D1:pbDpnpSwitchReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpHoldOffTime_cookie<s(0)(0)(0)>[&];(D1:pbDpnpHoldOffTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpRestoreMode_cookie<s(0)(0)(0)>[&];(D1:pbDpnpRestoreMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpWTR_cookie<s(0)(0)(0)>[&];(D1:pbDpnpWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpWorkSignalState_cookie<s(0)(0)(0)>[&];(D1:pbDpnpWorkSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpProtectSignalState_cookie<s(0)(0)(0)>[&];(D1:pbDpnpProtectSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpVMsspringSignalState_cookie<s(0)(0)(0)>[&];(D1:pbDpnpVMsspringSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbDpnpRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpLable_cookie<s(0)(0)(0)>[&];(D1:pbDpnpLable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpAddRslt_cookie<s(0)(0)(0)>[&];(D1:pbDpnpAddRslt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDNIId_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDNIId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpIntrusive_cookie<s(0)(0)(0)>[&];(D1:pbDpnpIntrusive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpDirection_cookie<s(0)(0)(0)>[&];(D1:pbDpnpDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpFrom_cookie<s(0)(0)(0)>[&];(D1:pbDpnpFrom_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDpnpSwitchEvent_cookie<s(0)(0)(0)>[&];(D1:pbDpnpSwitchEvent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmplsDpnpDirection_cookie<s(0)(0)(0)>[&];(D1:pbGmplsDpnpDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpStateLineId_cookie<s(0)(0)(0)>[&];(D1:pbSncpStateLineId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpDetailedStateString1_cookie<s(0)(0)(0)>[&];(D1:pbSncpDetailedStateString1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpDetailedStateString2_cookie<s(0)(0)(0)>[&];(D1:pbSncpDetailedStateString2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpDetailedStateString3_cookie<s(0)(0)(0)>[&];(D1:pbSncpDetailedStateString3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpDetailedStateString4_cookie<s(0)(0)(0)>[&];(D1:pbSncpDetailedStateString4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpTPType_cookie<s(0)(0)(0)>[&];(D1:pbSncpTPType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkChPortType_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkSource_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectChPortType_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectSource_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSrcOrDstSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpSrcOrDstSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSrcOrDstPortType_cookie<s(0)(0)(0)>[&];(D1:pbSncpSrcOrDstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSrcOrDstPortNum_cookie<s(0)(0)(0)>[&];(D1:pbSncpSrcOrDstPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSrcOrDstSource_cookie<s(0)(0)(0)>[&];(D1:pbSncpSrcOrDstSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSignalDircetion_cookie<s(0)(0)(0)>[&];(D1:pbSncpSignalDircetion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpGroupId_cookie<s(0)(0)(0)>[&];(D1:pbSncpGroupId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkChState_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkChState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpExternalCmd_cookie<s(0)(0)(0)>[&];(D1:pbSncpExternalCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpExCmdRslt_cookie<s(0)(0)(0)>[&];(D1:pbSncpExCmdRslt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpCurSwitchReq_cookie<s(0)(0)(0)>[&];(D1:pbSncpCurSwitchReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpSwitchReason_cookie<s(0)(0)(0)>[&];(D1:pbSncpSwitchReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpHoldOffTime_cookie<s(0)(0)(0)>[&];(D1:pbSncpHoldOffTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpRestoreMode_cookie<s(0)(0)(0)>[&];(D1:pbSncpRestoreMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWTR_cookie<s(0)(0)(0)>[&];(D1:pbSncpWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkSignalState_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectSignalState_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbSncpRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpLable_cookie<s(0)(0)(0)>[&];(D1:pbSncpLable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpAddRslt_cookie<s(0)(0)(0)>[&];(D1:pbSncpAddRslt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDNIId_cookie<s(0)(0)(0)>[&];(D1:pbDNIId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpIntrusive_cookie<s(0)(0)(0)>[&];(D1:pbSncpIntrusive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkGmplsVcNumber_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkGmplsVcNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkGmplsCallName_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkGmplsCallName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectGmplsVcNumber_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectGmplsVcNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpProtectGmplsCallName_cookie<s(0)(0)(0)>[&];(D1:pbSncpProtectGmplsCallName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpWorkorProtToCC_cookie<s(0)(0)(0)>[&];(D1:pbSncpWorkorProtToCC_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpDirection_cookie<s(0)(0)(0)>[&];(D1:pbSncpDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpFrom_cookie<s(0)(0)(0)>[&];(D1:pbSncpFrom_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmplsSncpDirection_cookie<s(0)(0)(0)>[&];(D1:pbGmplsSncpDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSncpAction_cookie<s(0)(0)(0)>[&];(D1:pbSncpAction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbMspConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspGroupActPortType_cookie<s(0)(0)(0)>[&];(D1:pbMspGroupActPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspProtectChSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspProtectChSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspProtectChPortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspProtectChPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspProtectChPortType_cookie<s(0)(0)(0)>[&];(D1:pbMspProtectChPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspProtectChSignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspProtectChSignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspGroupId_cookie<s(0)(0)(0)>[&];(D1:pbMspGroupId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspType_cookie<s(0)(0)(0)>[&];(D1:pbMspType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspSignalDircetion_cookie<s(0)(0)(0)>[&];(D1:pbMspSignalDircetion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspRestoreMode_cookie<s(0)(0)(0)>[&];(D1:pbMspRestoreMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspExTrafficEnable_cookie<s(0)(0)(0)>[&];(D1:pbMspExTrafficEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspEnable_cookie<s(0)(0)(0)>[&];(D1:pbMspEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspExternalCmd_cookie<s(0)(0)(0)>[&];(D1:pbMspExternalCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspExtCmdParam_cookie<s(0)(0)(0)>[&];(D1:pbMspExtCmdParam_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspExCmdRslt_cookie<s(0)(0)(0)>[&];(D1:pbMspExCmdRslt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspSwitchState_cookie<s(0)(0)(0)>[&];(D1:pbMspSwitchState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspCurSwitchReq_cookie<s(0)(0)(0)>[&];(D1:pbMspCurSwitchReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspSwitchReason_cookie<s(0)(0)(0)>[&];(D1:pbMspSwitchReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWTR_cookie<s(0)(0)(0)>[&];(D1:pbMspWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkChNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkChNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh1SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh1SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh1PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh1PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh1PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh1PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh1SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh1SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh1PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh1PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh2SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh2SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh2PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh2PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh2PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh2PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh2SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh2SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh2PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh2PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh3SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh3SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh3PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh3PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh3PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh3PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh3SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh3SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh3PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh3PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh4SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh4SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh4PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh4PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh4PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh4PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh4SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh4SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh4PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh4PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh5SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh5SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh5PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh5PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh5PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh5PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh5SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh5SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh5PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh5PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh6SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh6SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh6PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh6PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh6PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh6PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh6SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh6SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh6PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh6PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh7SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh7SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh7PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh7PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh7PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh7PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh7SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh7SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh7PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh7PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh8SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh8SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh8PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh8PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh8PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh8PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh8SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh8SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh8PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh8PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh9SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh9SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh9PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh9PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh9PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh9PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh9SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh9SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh9PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh9PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh10SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh10SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh10PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh10PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh10PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh10PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh10SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh10SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh10PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh10PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh11SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh11SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh11PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh11PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh11PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh11PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh11SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh11SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh11PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh11PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh12SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh12SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh12PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh12PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh12PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh12PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh12SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh12SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh12PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh12PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh13SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh13SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh13PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh13PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh13PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh13PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh13SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh13SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh13PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh13PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh14SlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh14SlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh14PortNum_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh14PortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh14PortType_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh14PortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh14SignalState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh14SignalState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspWorkCh14PriState_cookie<s(0)(0)(0)>[&];(D1:pbMspWorkCh14PriState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspK2Bit5Mismatch_cookie<s(0)(0)(0)>[&];(D1:pbMspK2Bit5Mismatch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspK1Bit1to4Mismatch_cookie<s(0)(0)(0)>[&];(D1:pbMspK1Bit1to4Mismatch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspK1Bit5to8Mismatch_cookie<s(0)(0)(0)>[&];(D1:pbMspK1Bit5to8Mismatch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspReceiveK1_cookie<s(0)(0)(0)>[&];(D1:pbMspReceiveK1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspReceiveK2_cookie<s(0)(0)(0)>[&];(D1:pbMspReceiveK2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspSendoutK1_cookie<s(0)(0)(0)>[&];(D1:pbMspSendoutK1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspSendoutK2_cookie<s(0)(0)(0)>[&];(D1:pbMspSendoutK2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbMspRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspFreeze_cookie<s(0)(0)(0)>[&];(D1:pbMspFreeze_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMspLable_cookie<s(0)(0)(0)>[&];(D1:pbMspLable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMStatusTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeStatusTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCommandTable_cookie<s(0)(0)(0)>[&];(D1:pbMSMCommandTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoMappingTable_cookie<s(0)(0)(0)>[&];(D1:pbAutoMappingTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoNodeId_cookie<s(0)(0)(0)>[&];(D1:pbAutoNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortMappingString_cookie<s(0)(0)(0)>[&];(D1:pbPortMappingString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoMappingRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbAutoMappingRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCommandCurrentSide_cookie<s(0)(0)(0)>[&];(D1:pbMSMCommandCurrentSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCommandSwitch_cookie<s(0)(0)(0)>[&];(D1:pbMSMCommandSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMLastCommandStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMLastCommandStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCommandResult_cookie<s(0)(0)(0)>[&];(D1:pbMSMCommandResult_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchSide_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchGress_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchGress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchTimeSlot_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchTimeSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchOrder_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchOrder_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchType_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchSrcNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchSrcNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchDstNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchDstNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchReference_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchReference_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchOpTimeSlot_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchOpTimeSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNumOfNodes_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNumOfNodes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId0_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId1_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId2_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId3_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId4_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId5_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId6_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId6_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId7_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId7_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId8_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId8_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId9_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId9_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId10_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId10_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId11_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId11_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId12_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId12_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId13_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId13_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId14_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId14_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId15_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId15_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoConfig_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoConfig_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId0IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId0IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId1IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId1IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId2IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId2IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId3IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId3IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId4IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId4IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId5IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId5IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId6IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId6IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId7IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId7IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId8IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId8IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId9IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId9IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId10IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId10IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId11IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId11IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId12IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId12IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId13IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId13IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId14IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId14IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTopoNodeId15IpAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMTopoNodeId15IpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeAgentState_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeAgentState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeState_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeCurrentSide_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeCurrentSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeCurrentReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeCurrentReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeCurrentSrc_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeCurrentSrc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMNodeKExpressMode_cookie<s(0)(0)(0)>[&];(D1:pbMSMNodeKExpressMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastSwitchCommand_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastSwitchCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastLineReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastLineReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastLastSwitchCmd_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastLastSwitchCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastIsSquelched_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastIsSquelched_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestSwitchCommand_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestSwitchCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestLineReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestLineReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestLastSwitchCmd_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestLastSwitchCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestIsSquelched_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestIsSquelched_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastSwitchStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastSwitchStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestSwitchStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestSwitchStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPassNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMPassNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSide_cookie<s(0)(0)(0)>[&];(D1:pbMSMSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTransBridgeReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMTransBridgeReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTransDestNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMTransDestNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTransSrcNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMTransSrcNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTransLongShort_cookie<s(0)(0)(0)>[&];(D1:pbMSMTransLongShort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMTransStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMTransStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMReceiveBridgeReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMReceiveBridgeReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMReceiveDestNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMReceiveDestNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMReceiveSrcNodeId_cookie<s(0)(0)(0)>[&];(D1:pbMSMReceiveSrcNodeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMReceiveLongShort_cookie<s(0)(0)(0)>[&];(D1:pbMSMReceiveLongShort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMReceiveStatus_cookie<s(0)(0)(0)>[&];(D1:pbMSMReceiveStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSideReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMSideReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSideSrc_cookie<s(0)(0)(0)>[&];(D1:pbMSMSideSrc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSwitchCommand_cookie<s(0)(0)(0)>[&];(D1:pbMSMSwitchCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMLineReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMLineReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCmndReq_cookie<s(0)(0)(0)>[&];(D1:pbMSMCmndReq_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMIsSquelched_cookie<s(0)(0)(0)>[&];(D1:pbMSMIsSquelched_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingId_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMProtectMode_cookie<s(0)(0)(0)>[&];(D1:pbMSMProtectMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSNMRingName_cookie<s(0)(0)(0)>[&];(D1:pbMSMSNMRingName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMRingIdx_cookie<s(0)(0)(0)>[&];(D1:pbMSMRingIdx_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestSideSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestSideSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestSidePortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestSidePortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestSidePortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestSidePortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestProtPortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMWestProtPortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMWestProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastSideSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastSideSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastSidePortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastSidePortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastSidePortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastSidePortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastProtPortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastProtPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMEastProtPortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMEastProtPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMAutoSquelchDiscovery_cookie<s(0)(0)(0)>[&];(D1:pbMSMAutoSquelchDiscovery_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMAutoRingDiscovery_cookie<s(0)(0)(0)>[&];(D1:pbMSMAutoRingDiscovery_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerWestAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerWestAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerWestSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerWestSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerWestPortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerWestPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerWestPortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerWestPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerEastAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerEastAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerEastSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerEastSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerEastPortType_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerEastPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPeerEastPortNum_cookie<s(0)(0)(0)>[&];(D1:pbMSMPeerEastPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigSdBerThreshold_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigSdBerThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigSfBerThreshold_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigSfBerThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigWaitToRestore_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigWaitToRestore_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigExtraTraffic_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigExtraTraffic_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigEnable_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMConfigDelete_cookie<s(0)(0)(0)>[&];(D1:pbMSMConfigDelete_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSquelchFin_cookie<s(0)(0)(0)>[&];(D1:pbMSMSquelchFin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMCardFunction_cookie<s(0)(0)(0)>[&];(D1:pbMSMCardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMChannelInfo_cookie<s(0)(0)(0)>[&];(D1:pbMSMChannelInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMSelfAddress_cookie<s(0)(0)(0)>[&];(D1:pbMSMSelfAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMStartAutoSquelch_cookie<s(0)(0)(0)>[&];(D1:pbMSMStartAutoSquelch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMAutoMappingEnable_cookie<s(0)(0)(0)>[&];(D1:pbMSMAutoMappingEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMSMPortMapRefresh_cookie<s(0)(0)(0)>[&];(D1:pbMSMPortMapRefresh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgTable_cookie<s(0)(0)(0)>[&];(D1:pbEpgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgTable_cookie<s(0)(0)(0)>[&];(D1:pbCpgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgGroup_cookie<s(0)(0)(0)>[&];(D1:scEpgGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgScWorkerSlot_cookie<s(0)(0)(0)>[&];(D1:scEpgScWorkerSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgSc1Status_cookie<s(0)(0)(0)>[&];(D1:scEpgSc1Status_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgSc2Status_cookie<s(0)(0)(0)>[&];(D1:scEpgSc2Status_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgRequest_cookie<s(0)(0)(0)>[&];(D1:scEpgRequest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgLastSwichReason_cookie<s(0)(0)(0)>[&];(D1:scEpgLastSwichReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgStandbySc_cookie<s(0)(0)(0)>[&];(D1:scEpgStandbySc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] scEpgASCSwithchState_cookie<s(0)(0)(0)>[&];(D1:scEpgASCSwithchState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgIndexNo_cookie<s(0)(0)(0)>[&];(D1:pbCpgIndexNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgWorkerSlot_cookie<s(0)(0)(0)>[&];(D1:pbCpgWorkerSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgProtectorSlot_cookie<s(0)(0)(0)>[&];(D1:pbCpgProtectorSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgProtectStatus_cookie<s(0)(0)(0)>[&];(D1:pbCpgProtectStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWorkerStatus_cookie<s(0)(0)(0)>[&];(D1:pbWorkerStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbProtectorStatus_cookie<s(0)(0)(0)>[&];(D1:pbProtectorStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgAct_cookie<s(0)(0)(0)>[&];(D1:pbCpgAct_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgActStatus_cookie<s(0)(0)(0)>[&];(D1:pbCpgActStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgCurActStatus_cookie<s(0)(0)(0)>[&];(D1:pbCpgCurActStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCpgReadyToSwitch_cookie<s(0)(0)(0)>[&];(D1:pbCpgReadyToSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgId_cookie<s(0)(0)(0)>[&];(D1:pbEpgId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgBoardType_cookie<s(0)(0)(0)>[&];(D1:pbEpgBoardType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgType_cookie<s(0)(0)(0)>[&];(D1:pbEpgType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgProtMode_cookie<s(0)(0)(0)>[&];(D1:pbEpgProtMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgEnable_cookie<s(0)(0)(0)>[&];(D1:pbEpgEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgExtCmd_cookie<s(0)(0)(0)>[&];(D1:pbEpgExtCmd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgExtCmdParam_cookie<s(0)(0)(0)>[&];(D1:pbEpgExtCmdParam_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgExtCmdResult_cookie<s(0)(0)(0)>[&];(D1:pbEpgExtCmdResult_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWtr_cookie<s(0)(0)(0)>[&];(D1:pbEpgWtr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgPreSwitchReason_cookie<s(0)(0)(0)>[&];(D1:pbEpgPreSwitchReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgCurRequest_cookie<s(0)(0)(0)>[&];(D1:pbEpgCurRequest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgProtState_cookie<s(0)(0)(0)>[&];(D1:pbEpgProtState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgHoldOffTime_cookie<s(0)(0)(0)>[&];(D1:pbEpgHoldOffTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgProtSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbEpgProtSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgProtSlotState_cookie<s(0)(0)(0)>[&];(D1:pbEpgProtSlotState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum1_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot1State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot1State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum2_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot2State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot2State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum3_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot3State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot3State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum4_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot4State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot4State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum5_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot5State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot5State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum6_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum6_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot6State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot6State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum7_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum7_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot7State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot7State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlotNum8_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlotNum8_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgWorkSlot8State_cookie<s(0)(0)(0)>[&];(D1:pbEpgWorkSlot8State_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEpgRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEpgRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelCfgTable_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhServerType_cookie<s(0)(0)(0)>[&];(D1:pbSdhServerType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdNetworkSide_cookie<s(0)(0)(0)>[&];(D1:pbLapdNetworkSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdT200_cookie<s(0)(0)(0)>[&];(D1:pbLapdT200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdT203_cookie<s(0)(0)(0)>[&];(D1:pbLapdT203_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdN200_cookie<s(0)(0)(0)>[&];(D1:pbLapdN200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdAITS_cookie<s(0)(0)(0)>[&];(D1:pbLapdAITS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLapdWindow_cookie<s(0)(0)(0)>[&];(D1:pbLapdWindow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelSrcIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelSrcIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelDesIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelDesIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelByPass_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelByPass_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelDstSlot_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelDstSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelDstPort_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelDstPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelDstMode_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelDstMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelStatus_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbOsiConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelConfigTable_cookie<s(0)(0)(0)>[&];(D1:osiTunnelConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhServerType_cookie<s(0)(0)(0)>[&];(D1:pbSdhServerType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelNetworkSide_cookie<s(0)(0)(0)>[&];(D1:osiTunnelNetworkSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelT200_cookie<s(0)(0)(0)>[&];(D1:osiTunnelT200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelT203_cookie<s(0)(0)(0)>[&];(D1:osiTunnelT203_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelN200_cookie<s(0)(0)(0)>[&];(D1:osiTunnelN200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelAITS_cookie<s(0)(0)(0)>[&];(D1:osiTunnelAITS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelWindow_cookie<s(0)(0)(0)>[&];(D1:osiTunnelWindow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelConfigTimer_cookie<s(0)(0)(0)>[&];(D1:osiTunnelConfigTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelTTL_cookie<s(0)(0)(0)>[&];(D1:osiTunnelTTL_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelLocalNasp_cookie<s(0)(0)(0)>[&];(D1:osiTunnelLocalNasp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelRemoteNasp_cookie<s(0)(0)(0)>[&];(D1:osiTunnelRemoteNasp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelSrcIpAddress_cookie<s(0)(0)(0)>[&];(D1:osiTunnelSrcIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelDesIpAddress_cookie<s(0)(0)(0)>[&];(D1:osiTunnelDesIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelIpIfMtu_cookie<s(0)(0)(0)>[&];(D1:osiTunnelIpIfMtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelStatus_cookie<s(0)(0)(0)>[&];(D1:osiTunnelStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] osiTunnelIndex_cookie<s(0)(0)(0)>[&];(D1:osiTunnelIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiNetworkSide_cookie<s(0)(0)(0)>[&];(D1:pbOsiNetworkSide_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiT200_cookie<s(0)(0)(0)>[&];(D1:pbOsiT200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiT203_cookie<s(0)(0)(0)>[&];(D1:pbOsiT203_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiN200_cookie<s(0)(0)(0)>[&];(D1:pbOsiN200_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiAITS_cookie<s(0)(0)(0)>[&];(D1:pbOsiAITS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiWindow_cookie<s(0)(0)(0)>[&];(D1:pbOsiWindow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiConfigTimer_cookie<s(0)(0)(0)>[&];(D1:pbOsiConfigTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiTTL_cookie<s(0)(0)(0)>[&];(D1:pbOsiTTL_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiLocalNasp_cookie<s(0)(0)(0)>[&];(D1:pbOsiLocalNasp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiRemoteNasp_cookie<s(0)(0)(0)>[&];(D1:pbOsiRemoteNasp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiSrcIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbOsiSrcIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiDesIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbOsiDesIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiIpIfMtu_cookie<s(0)(0)(0)>[&];(D1:pbOsiIpIfMtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOATable_cookie<s(0)(0)(0)>[&];(D1:pbOATable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOASlotNo_cookie<s(0)(0)(0)>[&];(D1:pbOASlotNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPortNo_cookie<s(0)(0)(0)>[&];(D1:pbOAPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAModuleConfiguration_cookie<s(0)(0)(0)>[&];(D1:pbOAModuleConfiguration_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAModuleType_cookie<s(0)(0)(0)>[&];(D1:pbOAModuleType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAHWVersion_cookie<s(0)(0)(0)>[&];(D1:pbOAHWVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOASWVersion_cookie<s(0)(0)(0)>[&];(D1:pbOASWVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOASerialNumber_cookie<s(0)(0)(0)>[&];(D1:pbOASerialNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAInputPower_cookie<s(0)(0)(0)>[&];(D1:pbOAInputPower_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOACurrentOutputPower_cookie<s(0)(0)(0)>[&];(D1:pbOACurrentOutputPower_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOACurrentModuleGain_cookie<s(0)(0)(0)>[&];(D1:pbOACurrentModuleGain_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPump1Power_cookie<s(0)(0)(0)>[&];(D1:pbOAPump1Power_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPump2Power_cookie<s(0)(0)(0)>[&];(D1:pbOAPump2Power_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOATemperature_cookie<s(0)(0)(0)>[&];(D1:pbOATemperature_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPump1DriveCurrent_cookie<s(0)(0)(0)>[&];(D1:pbOAPump1DriveCurrent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPump2DriveCurrent_cookie<s(0)(0)(0)>[&];(D1:pbOAPump2DriveCurrent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAPowerSupplyVoltage_cookie<s(0)(0)(0)>[&];(D1:pbOAPowerSupplyVoltage_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAOperationMode_cookie<s(0)(0)(0)>[&];(D1:pbOAOperationMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAExpectedOutputPower_cookie<s(0)(0)(0)>[&];(D1:pbOAExpectedOutputPower_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAExpectedModuleGain_cookie<s(0)(0)(0)>[&];(D1:pbOAExpectedModuleGain_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAInputThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOAInputThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAOutputThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOAOutputThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAShutdownThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOAShutdownThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOALowTThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOALowTThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAHighTThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOAHighTThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAAutoShutdown_cookie<s(0)(0)(0)>[&];(D1:pbOAAutoShutdown_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAMaxoutputpower_cookie<s(0)(0)(0)>[&];(D1:pbOAMaxoutputpower_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAMaxPump1Current_cookie<s(0)(0)(0)>[&];(D1:pbOAMaxPump1Current_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOAMaxPump2Current_cookie<s(0)(0)(0)>[&];(D1:pbOAMaxPump2Current_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealOperationMode_cookie<s(0)(0)(0)>[&];(D1:pbOARealOperationMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealExpectedOutputPower_cookie<s(0)(0)(0)>[&];(D1:pbOARealExpectedOutputPower_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealExpectedModuleGain_cookie<s(0)(0)(0)>[&];(D1:pbOARealExpectedModuleGain_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealInputThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOARealInputThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealOutputThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOARealOutputThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealShutdownThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOARealShutdownThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealLowTThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOARealLowTThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealHighTThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOARealHighTThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealAutoShutdown_cookie<s(0)(0)(0)>[&];(D1:pbOARealAutoShutdown_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOARealCoolPumpTemp_cookie<s(0)(0)(0)>[&];(D1:pbOARealCoolPumpTemp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprGeneral_cookie<s(0)(0)(0)>[&];(D1:rprGeneral_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprProtocols_cookie<s(0)(0)(0)>[&];(D1:rprProtocols_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprService_cookie<s(0)(0)(0)>[&];(D1:rprService_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprWan_cookie<s(0)(0)(0)>[&];(D1:rprWan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwPassThrough_cookie<s(0)(0)(0)>[&];(D1:rprHwPassThrough_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcTable_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcCapacity_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcCapacity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcSrcSlot_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcSrcSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcSrcPort_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcSrcPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcSource_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcDstSlot_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcDstSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcDstPort_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcDstPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcDestination_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcDestination_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcSrcPortType_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcSrcPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcDstPortType_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcDstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcConnectId_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcConnectId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcCircuitDirection_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcCircuitDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcCcsRpmMsgType_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcCcsRpmMsgType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcCcsRpmMsgState_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcCcsRpmMsgState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcCcsRpmMsgPriority_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcCcsRpmMsgPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcSrcSlotCard_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcSrcSlotCard_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcDstSlotCard_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcDstSlotCard_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcReason_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcRowStatus_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprHwpXcTableClass_cookie<s(0)(0)(0)>[&];(D1:rprHwpXcTableClass_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbRprWanConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprLCASBase_cookie<s(0)(0)(0)>[&];(D1:pbRprLCASBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSOLCASConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbRprSOLCASConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSKLCASConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbRprSKLCASConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSKLCASWanPort_cookie<s(0)(0)(0)>[&];(D1:pbRprSKLCASWanPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSKLCASState_cookie<s(0)(0)(0)>[&];(D1:pbRprSKLCASState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSOLCASActive_cookie<s(0)(0)(0)>[&];(D1:pbRprSOLCASActive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSOLCASWanPort_cookie<s(0)(0)(0)>[&];(D1:pbRprSOLCASWanPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSOLCASState_cookie<s(0)(0)(0)>[&];(D1:pbRprSOLCASState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanPortLabel_cookie<s(0)(0)(0)>[&];(D1:pbRprWanPortLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanPortCapacity_cookie<s(0)(0)(0)>[&];(D1:pbRprWanPortCapacity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanPortMonitored_cookie<s(0)(0)(0)>[&];(D1:pbRprWanPortMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanPortXVType_cookie<s(0)(0)(0)>[&];(D1:pbRprWanPortXVType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanLCASSupport_cookie<s(0)(0)(0)>[&];(D1:pbRprWanLCASSupport_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanPortCapacityTrigger_cookie<s(0)(0)(0)>[&];(D1:pbRprWanPortCapacityTrigger_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanGFPFCS_cookie<s(0)(0)(0)>[&];(D1:pbRprWanGFPFCS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanGFPFCSAutoDetect_cookie<s(0)(0)(0)>[&];(D1:pbRprWanGFPFCSAutoDetect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprWanFlowControl_cookie<s(0)(0)(0)>[&];(D1:pbRprWanFlowControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprServiceTable_cookie<s(0)(0)(0)>[&];(D1:rprServiceTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRateProfileTable_cookie<s(0)(0)(0)>[&];(D1:rprRateProfileTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprMultiCastTable_cookie<s(0)(0)(0)>[&];(D1:pbRprMultiCastTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprAclTable_cookie<s(0)(0)(0)>[&];(D1:pbRprAclTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprMultiBroadCastTable_cookie<s(0)(0)(0)>[&];(D1:pbRprMultiBroadCastTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiBroadCastId_cookie<s(0)(0)(0)>[&];(D1:rprMultiBroadCastId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiBroadCastTimeInterval_cookie<s(0)(0)(0)>[&];(D1:rprMultiBroadCastTimeInterval_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiBroadCastPacketsInterval_cookie<s(0)(0)(0)>[&];(D1:rprMultiBroadCastPacketsInterval_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprServiceId_cookie<s(0)(0)(0)>[&];(D1:rprServiceId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclMacAddress_cookie<s(0)(0)(0)>[&];(D1:rprAclMacAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclMacType_cookie<s(0)(0)(0)>[&];(D1:rprAclMacType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclDoubleVlanId_cookie<s(0)(0)(0)>[&];(D1:rprAclDoubleVlanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclPortsList_cookie<s(0)(0)(0)>[&];(D1:rprAclPortsList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclMode_cookie<s(0)(0)(0)>[&];(D1:rprAclMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclRowStatus_cookie<s(0)(0)(0)>[&];(D1:rprAclRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprAclTblIdx_cookie<s(0)(0)(0)>[&];(D1:rprAclTblIdx_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprServiceId_cookie<s(0)(0)(0)>[&];(D1:rprServiceId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiCastMacAddress_cookie<s(0)(0)(0)>[&];(D1:rprMultiCastMacAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiCastDoubleVlanId_cookie<s(0)(0)(0)>[&];(D1:rprMultiCastDoubleVlanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiCastPortsList_cookie<s(0)(0)(0)>[&];(D1:rprMultiCastPortsList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiCastGMRP_cookie<s(0)(0)(0)>[&];(D1:rprMultiCastGMRP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprMultiCastRowStatus_cookie<s(0)(0)(0)>[&];(D1:rprMultiCastRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRateProfNo_cookie<s(0)(0)(0)>[&];(D1:rprRateProfNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTokenRate_cookie<s(0)(0)(0)>[&];(D1:rprTokenRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprBurstSize_cookie<s(0)(0)(0)>[&];(D1:rprBurstSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprExcessBurstSize_cookie<s(0)(0)(0)>[&];(D1:rprExcessBurstSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprServiceId_cookie<s(0)(0)(0)>[&];(D1:rprServiceId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprLocalEthPortNo_cookie<s(0)(0)(0)>[&];(D1:rprLocalEthPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprLocalVID_cookie<s(0)(0)(0)>[&];(D1:rprLocalVID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprLocalVPrio_cookie<s(0)(0)(0)>[&];(D1:rprLocalVPrio_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcClassifyType_cookie<s(0)(0)(0)>[&];(D1:rprSvcClassifyType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprServiceType_cookie<s(0)(0)(0)>[&];(D1:rprServiceType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcMode_cookie<s(0)(0)(0)>[&];(D1:rprSvcMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRmtStationMac_cookie<s(0)(0)(0)>[&];(D1:rprRmtStationMac_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRingletSel_cookie<s(0)(0)(0)>[&];(D1:rprSvcRingletSel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRealRingletSel_cookie<s(0)(0)(0)>[&];(D1:rprSvcRealRingletSel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcAutoRingletSelEn_cookie<s(0)(0)(0)>[&];(D1:rprSvcAutoRingletSelEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcCos_cookie<s(0)(0)(0)>[&];(D1:rprSvcCos_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcTtlMode_cookie<s(0)(0)(0)>[&];(D1:rprSvcTtlMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcTtl0_cookie<s(0)(0)(0)>[&];(D1:rprSvcTtl0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcTtl1_cookie<s(0)(0)(0)>[&];(D1:rprSvcTtl1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRealTtl0_cookie<s(0)(0)(0)>[&];(D1:rprSvcRealTtl0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRealTtl1_cookie<s(0)(0)(0)>[&];(D1:rprSvcRealTtl1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcWe_cookie<s(0)(0)(0)>[&];(D1:rprSvcWe_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcSteered_cookie<s(0)(0)(0)>[&];(D1:rprSvcSteered_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRateProfIndex_cookie<s(0)(0)(0)>[&];(D1:rprSvcRateProfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcTokenRate_cookie<s(0)(0)(0)>[&];(D1:rprSvcTokenRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcBurstSize_cookie<s(0)(0)(0)>[&];(D1:rprSvcBurstSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcMaxDelay_cookie<s(0)(0)(0)>[&];(D1:rprSvcMaxDelay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcMaxJitter_cookie<s(0)(0)(0)>[&];(D1:rprSvcMaxJitter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcWeight_cookie<s(0)(0)(0)>[&];(D1:rprSvcWeight_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprGmiiSel_cookie<s(0)(0)(0)>[&];(D1:rprGmiiSel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprDoubleVlanEn_cookie<s(0)(0)(0)>[&];(D1:rprDoubleVlanEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprDoubleVID_cookie<s(0)(0)(0)>[&];(D1:rprDoubleVID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprDoubleVPrio_cookie<s(0)(0)(0)>[&];(D1:rprDoubleVPrio_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcLoop_cookie<s(0)(0)(0)>[&];(D1:rprSvcLoop_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcActive_cookie<s(0)(0)(0)>[&];(D1:rprSvcActive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcCurStatus_cookie<s(0)(0)(0)>[&];(D1:rprSvcCurStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcReason_cookie<s(0)(0)(0)>[&];(D1:rprSvcReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcLabel_cookie<s(0)(0)(0)>[&];(D1:rprSvcLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFlowRuleID_cookie<s(0)(0)(0)>[&];(D1:rprFlowRuleID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcMulBrdCastID_cookie<s(0)(0)(0)>[&];(D1:rprSvcMulBrdCastID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcMulBrdCastEn_cookie<s(0)(0)(0)>[&];(D1:rprSvcMulBrdCastEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSvcRowStatus_cookie<s(0)(0)(0)>[&];(D1:rprSvcRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageTable_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessTable_cookie<s(0)(0)(0)>[&];(D1:rprFairnessTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamTable_cookie<s(0)(0)(0)>[&];(D1:rprOamTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoRingInfoTable_cookie<s(0)(0)(0)>[&];(D1:rprTopoRingInfoTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingMultiChoke0_cookie<s(0)(0)(0)>[&];(D1:rprRingMultiChoke0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingMultiChoke1_cookie<s(0)(0)(0)>[&];(D1:rprRingMultiChoke1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingMtuSize_cookie<s(0)(0)(0)>[&];(D1:rprRingMtuSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingTotalHopsTx0_cookie<s(0)(0)(0)>[&];(D1:rprRingTotalHopsTx0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingTotalHopsTx1_cookie<s(0)(0)(0)>[&];(D1:rprRingTotalHopsTx1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingLastNeighborMac0_cookie<s(0)(0)(0)>[&];(D1:rprRingLastNeighborMac0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingLastNeighborMac1_cookie<s(0)(0)(0)>[&];(D1:rprRingLastNeighborMac1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingCheckSum_cookie<s(0)(0)(0)>[&];(D1:rprRingCheckSum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingNeighborCheckSum0_cookie<s(0)(0)(0)>[&];(D1:rprRingNeighborCheckSum0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingNeighborCheckSum1_cookie<s(0)(0)(0)>[&];(D1:rprRingNeighborCheckSum1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingCheckSumValid_cookie<s(0)(0)(0)>[&];(D1:rprRingCheckSumValid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingNeighborCksValid0_cookie<s(0)(0)(0)>[&];(D1:rprRingNeighborCksValid0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprRingNeighborCksValid1_cookie<s(0)(0)(0)>[&];(D1:rprRingNeighborCksValid1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamActionType_cookie<s(0)(0)(0)>[&];(D1:rprOamActionType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamDestAddress_cookie<s(0)(0)(0)>[&];(D1:rprOamDestAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamRequestRinglet_cookie<s(0)(0)(0)>[&];(D1:rprOamRequestRinglet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamResponseRinglet_cookie<s(0)(0)(0)>[&];(D1:rprOamResponseRinglet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamClassOfService_cookie<s(0)(0)(0)>[&];(D1:rprOamClassOfService_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamUserData_cookie<s(0)(0)(0)>[&];(D1:rprOamUserData_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamProtected_cookie<s(0)(0)(0)>[&];(D1:rprOamProtected_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamRequestCount_cookie<s(0)(0)(0)>[&];(D1:rprOamRequestCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamTimeout_cookie<s(0)(0)(0)>[&];(D1:rprOamTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamControl_cookie<s(0)(0)(0)>[&];(D1:rprOamControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamResponseCount_cookie<s(0)(0)(0)>[&];(D1:rprOamResponseCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamAvResponseTime_cookie<s(0)(0)(0)>[&];(D1:rprOamAvResponseTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprOamResponseStatus_cookie<s(0)(0)(0)>[&];(D1:rprOamResponseStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRinglet_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRinglet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRingletWeight_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRingletWeight_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessReservedRate_cookie<s(0)(0)(0)>[&];(D1:rprFairnessReservedRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessMaxAllowed_cookie<s(0)(0)(0)>[&];(D1:rprFairnessMaxAllowed_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessAgeCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessAgeCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessLpCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessLpCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessAdvertisementRatio_cookie<s(0)(0)(0)>[&];(D1:rprFairnessAdvertisementRatio_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessMcffReportCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessMcffReportCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessActiveWeightsCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessActiveWeightsCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessSTQHighThreshold_cookie<s(0)(0)(0)>[&];(D1:rprFairnessSTQHighThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessSTQMedThreshold_cookie<s(0)(0)(0)>[&];(D1:rprFairnessSTQMedThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessSTQLowThreshold_cookie<s(0)(0)(0)>[&];(D1:rprFairnessSTQLowThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRateHighThreshold_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRateHighThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRateLowThreshold_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRateLowThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessResetWaterMarks_cookie<s(0)(0)(0)>[&];(D1:rprFairnessResetWaterMarks_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessSTQHighWaterMark_cookie<s(0)(0)(0)>[&];(D1:rprFairnessSTQHighWaterMark_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessSTQLowWaterMark_cookie<s(0)(0)(0)>[&];(D1:rprFairnessSTQLowWaterMark_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRampUpCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRampUpCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprFairnessRampDnCoef_cookie<s(0)(0)(0)>[&];(D1:rprFairnessRampDnCoef_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageMacAddress_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageMacAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageSecMacAddress1_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageSecMacAddress1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageSecMacAddress2_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageSecMacAddress2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageStationIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageStationIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageStationName_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageStationName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageCapability_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageCapability_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRinglet0Hops_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRinglet0Hops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRinglet0ReservedRate_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRinglet0ReservedRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRinglet1Hops_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRinglet1Hops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRinglet1ReservedRate_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRinglet1ReservedRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageWestProtectionStatus_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageWestProtectionStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageWestWeight_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageWestWeight_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageEastProtectionStatus_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageEastProtectionStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageEastWeight_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageEastWeight_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageStatus_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRemoteNEAddress_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRemoteNEAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprTopoImageRemoteSlotNumber_cookie<s(0)(0)(0)>[&];(D1:rprTopoImageRemoteSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfTable_cookie<s(0)(0)(0)>[&];(D1:rprIfTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanTable_cookie<s(0)(0)(0)>[&];(D1:rprSpanTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionTable_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCardProtectionTable_cookie<s(0)(0)(0)>[&];(D1:rprCardProtectionTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCardProtectionId_cookie<s(0)(0)(0)>[&];(D1:rprCardProtectionId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfWorkSlot_cookie<s(0)(0)(0)>[&];(D1:rprCpfWorkSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfProtSlot_cookie<s(0)(0)(0)>[&];(D1:rprCpfProtSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfActiveSlot_cookie<s(0)(0)(0)>[&];(D1:rprCpfActiveSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfCoordSlot_cookie<s(0)(0)(0)>[&];(D1:rprCpfCoordSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfCoordProtGroup_cookie<s(0)(0)(0)>[&];(D1:rprCpfCoordProtGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprCpfEnable_cookie<s(0)(0)(0)>[&];(D1:rprCpfEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanId_cookie<s(0)(0)(0)>[&];(D1:rprSpanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionNeighborValid_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionNeighborValid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionHoldOffTimer_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionHoldOffTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionCommand_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionCount_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionDuration_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionDuration_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionLastActivationTime_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionLastActivationTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanProtectionCountReset_cookie<s(0)(0)(0)>[&];(D1:rprSpanProtectionCountReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanId_cookie<s(0)(0)(0)>[&];(D1:rprSpanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanTotalRingletReservedRate_cookie<s(0)(0)(0)>[&];(D1:rprSpanTotalRingletReservedRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanCurrentStatus_cookie<s(0)(0)(0)>[&];(D1:rprSpanCurrentStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanWanPortNo_cookie<s(0)(0)(0)>[&];(D1:rprSpanWanPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanHopsToWrap_cookie<s(0)(0)(0)>[&];(D1:rprSpanHopsToWrap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfStationsOnRing_cookie<s(0)(0)(0)>[&];(D1:rprIfStationsOnRing_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfReversionMode_cookie<s(0)(0)(0)>[&];(D1:rprIfReversionMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfProtectionWTR_cookie<s(0)(0)(0)>[&];(D1:rprIfProtectionWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfProtectionFastTimer_cookie<s(0)(0)(0)>[&];(D1:rprIfProtectionFastTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfProtectionSlowTimer_cookie<s(0)(0)(0)>[&];(D1:rprIfProtectionSlowTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfAtdTimer_cookie<s(0)(0)(0)>[&];(D1:rprIfAtdTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfKeepaliveTimeout_cookie<s(0)(0)(0)>[&];(D1:rprIfKeepaliveTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfFairnessMode_cookie<s(0)(0)(0)>[&];(D1:rprIfFairnessMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfPtqSize_cookie<s(0)(0)(0)>[&];(D1:rprIfPtqSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfStqSize_cookie<s(0)(0)(0)>[&];(D1:rprIfStqSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfSTQFullThreshold_cookie<s(0)(0)(0)>[&];(D1:rprIfSTQFullThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIdleThreshold_cookie<s(0)(0)(0)>[&];(D1:rprIfIdleThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfSesThreshold_cookie<s(0)(0)(0)>[&];(D1:rprIfSesThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfProtectionMode_cookie<s(0)(0)(0)>[&];(D1:rprIfProtectionMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfJumboFramePreferred_cookie<s(0)(0)(0)>[&];(D1:rprIfJumboFramePreferred_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfMacOperModes_cookie<s(0)(0)(0)>[&];(D1:rprIfMacOperModes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRingOperModes_cookie<s(0)(0)(0)>[&];(D1:rprIfRingOperModes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfCurrentStatus_cookie<s(0)(0)(0)>[&];(D1:rprIfCurrentStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfLinkRate_cookie<s(0)(0)(0)>[&];(D1:rprIfLinkRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfMplsMode_cookie<s(0)(0)(0)>[&];(D1:rprIfMplsMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfMplsTypeTag_cookie<s(0)(0)(0)>[&];(D1:rprIfMplsTypeTag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfVlanPrioEn_cookie<s(0)(0)(0)>[&];(D1:rprIfVlanPrioEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfMyMacAddress_cookie<s(0)(0)(0)>[&];(D1:rprIfMyMacAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfPassThroughEn_cookie<s(0)(0)(0)>[&];(D1:rprIfPassThroughEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfHwPassThrough_cookie<s(0)(0)(0)>[&];(D1:rprIfHwPassThrough_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfHwPassThroughStatus_cookie<s(0)(0)(0)>[&];(D1:rprIfHwPassThroughStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfResRateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfResRateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfResRateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfResRateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfA0RateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfA0RateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfA0RateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfA0RateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfA1RateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfA1RateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfA1RateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfA1RateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfBcirRateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfBcirRateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfBcirRateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfBcirRateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealA0RateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfRealA0RateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealA0RateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfRealA0RateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealA1RateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfRealA1RateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealA1RateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfRealA1RateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealBcirRateR0_cookie<s(0)(0)(0)>[&];(D1:rprIfRealBcirRateR0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfRealBcirRateR1_cookie<s(0)(0)(0)>[&];(D1:rprIfRealBcirRateR1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfAlarmMon_cookie<s(0)(0)(0)>[&];(D1:rprIfAlarmMon_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfStationName_cookie<s(0)(0)(0)>[&];(D1:rprIfStationName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfInterWorking_cookie<s(0)(0)(0)>[&];(D1:rprIfInterWorking_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfBandMode_cookie<s(0)(0)(0)>[&];(D1:rprIfBandMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfMulBrdCastEn_cookie<s(0)(0)(0)>[&];(D1:rprIfMulBrdCastEn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfCardProtection_cookie<s(0)(0)(0)>[&];(D1:rprIfCardProtection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfCardProtectionState_cookie<s(0)(0)(0)>[&];(D1:rprIfCardProtectionState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfL2RateLimitMode_cookie<s(0)(0)(0)>[&];(D1:rprIfL2RateLimitMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfCrossPortsList_cookie<s(0)(0)(0)>[&];(D1:rprIfCrossPortsList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfLogSave_cookie<s(0)(0)(0)>[&];(D1:rprIfLogSave_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfL2CosFlowControl_cookie<s(0)(0)(0)>[&];(D1:rprIfL2CosFlowControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectCapacity_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectCapacity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectSrcSlot_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectSrcSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectSrcPort_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectSrcPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectSrcPortType_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectSrcPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectSource_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectDstSlot_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectDstSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectDstPort_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectDstPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectDstPortType_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectDstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectDestination_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectDestination_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectId_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectCircuitId_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectCircuitId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectStatus_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectReason_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectReason_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectType_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectCircuitDirection_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectCircuitDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectAction_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectAction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConFrom_cookie<s(0)(0)(0)>[&];(D1:pbXConFrom_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbXConRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConConnectReqNo_cookie<s(0)(0)(0)>[&];(D1:pbXConConnectReqNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXCGmplsVcNumber_cookie<s(0)(0)(0)>[&];(D1:pbXCGmplsVcNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXCGmplsCallName_cookie<s(0)(0)(0)>[&];(D1:pbXCGmplsCallName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmplsCcDirection_cookie<s(0)(0)(0)>[&];(D1:pbGmplsCcDirection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXCExtendObjects_cookie<s(0)(0)(0)>[&];(D1:pbXCExtendObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhXcNewContextTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhXcNewContextTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhXcNewLoMapTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhXcNewLoMapTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXcMigrationGroup_cookie<s(0)(0)(0)>[&];(D1:pbXcMigrationGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbForwardXcId_cookie<s(0)(0)(0)>[&];(D1:pbForwardXcId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbReverseXcId_cookie<s(0)(0)(0)>[&];(D1:pbReverseXcId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXcMigrationCommand_cookie<s(0)(0)(0)>[&];(D1:pbXcMigrationCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXcMigrationStatus_cookie<s(0)(0)(0)>[&];(D1:pbXcMigrationStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLOCCSlot_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLOCCSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLOCCPortType_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLOCCPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLOCCPort_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLOCCPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapHOCCIndex_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapHOCCIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLCSlot_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLCSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLCPortType_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLCPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLCPort_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLCPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConLoMapLCTP_cookie<s(0)(0)(0)>[&];(D1:pbXConLoMapLCTP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] gmplsReservationStatus_cookie<s(0)(0)(0)>[&];(D1:gmplsReservationStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] gmplsReservationOperate_cookie<s(0)(0)(0)>[&];(D1:gmplsReservationOperate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConContextLOCCBusNum_cookie<s(0)(0)(0)>[&];(D1:pbXConContextLOCCBusNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConContextLOCCAuNum_cookie<s(0)(0)(0)>[&];(D1:pbXConContextLOCCAuNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConContextHOCCAu3Num_cookie<s(0)(0)(0)>[&];(D1:pbXConContextHOCCAu3Num_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConContextHOCCAu3Step_cookie<s(0)(0)(0)>[&];(D1:pbXConContextHOCCAu3Step_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXConContextHOCCAu3Count_cookie<s(0)(0)(0)>[&];(D1:pbXConContextHOCCAu3Count_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthGlobalPortTable_cookie<s(0)(0)(0)>[&];(D1:pbEthGlobalPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbEthConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWanConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbEthWanConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMACTable_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMACTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMulticastTable_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMulticastTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanPortCoSTable_cookie<s(0)(0)(0)>[&];(D1:pbVlanPortCoSTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNameTable_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNameTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortQueueTable_cookie<s(0)(0)(0)>[&];(D1:pbPortQueueTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLTable_cookie<s(0)(0)(0)>[&];(D1:pbEthACLTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBase_cookie<s(0)(0)(0)>[&];(D1:pbRstpBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusTable_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanPortQinQTable_cookie<s(0)(0)(0)>[&];(D1:pbVlanPortQinQTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthProtPktACLTable_cookie<s(0)(0)(0)>[&];(D1:pbEthProtPktACLTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthReservedTable_cookie<s(0)(0)(0)>[&];(D1:pbEthReservedTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIGMPSnooping_cookie<s(0)(0)(0)>[&];(D1:pbIGMPSnooping_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstpBase_cookie<s(0)(0)(0)>[&];(D1:pbMstpBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbLagConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpConfig_cookie<s(0)(0)(0)>[&];(D1:pbLacpConfig_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMplsTable_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMplsTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eosMapper_cookie<s(0)(0)(0)>[&];(D1:eosMapper_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpBase_cookie<s(0)(0)(0)>[&];(D1:pbGvrpBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingTable_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthColorTable_cookie<s(0)(0)(0)>[&];(D1:pbEthColorTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredTable_cookie<s(0)(0)(0)>[&];(D1:pbEthWredTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLTable_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpBase_cookie<s(0)(0)(0)>[&];(D1:pbGmrpBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpBridgeTable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpBridgeTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortTable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanGmrpTable_cookie<s(0)(0)(0)>[&];(D1:pbVlanGmrpTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpDMacTable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpDMacTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpVlanId_cookie<s(0)(0)(0)>[&];(D1:pbGmrpVlanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbGmrpMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpMacMemberPort1_cookie<s(0)(0)(0)>[&];(D1:pbGmrpMacMemberPort1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpMacMemberPort2_cookie<s(0)(0)(0)>[&];(D1:pbGmrpMacMemberPort2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbGmrpVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanGmrpEnable_cookie<s(0)(0)(0)>[&];(D1:pbVlanGmrpEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanGmrpRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbVlanGmrpRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortType_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortNo_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortRegAdminCtrl_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortRegAdminCtrl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpPortApplAdminCtrl_cookie<s(0)(0)(0)>[&];(D1:pbGmrpPortApplAdminCtrl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpForwardAllEnable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpForwardAllEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpBlockPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpBlockPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpBridgeAddress_cookie<s(0)(0)(0)>[&];(D1:pbGmrpBridgeAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpEnable_cookie<s(0)(0)(0)>[&];(D1:pbGmrpEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpJoinTimer_cookie<s(0)(0)(0)>[&];(D1:pbGmrpJoinTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpLeaveTimer_cookie<s(0)(0)(0)>[&];(D1:pbGmrpLeaveTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpLeaveallTimer_cookie<s(0)(0)(0)>[&];(D1:pbGmrpLeaveallTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpMaxDMacNum_cookie<s(0)(0)(0)>[&];(D1:pbGmrpMaxDMacNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortCls_cookie<s(0)(0)(0)>[&];(D1:pbEthPortCls_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLVid_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLVid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLItemType_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLItemType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLCoS_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBasedACLEntryRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBasedACLEntryRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthWredIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredLowThr0_cookie<s(0)(0)(0)>[&];(D1:pbEthWredLowThr0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredUpThr0_cookie<s(0)(0)(0)>[&];(D1:pbEthWredUpThr0_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredLowThr1_cookie<s(0)(0)(0)>[&];(D1:pbEthWredLowThr1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredUpThr1_cookie<s(0)(0)(0)>[&];(D1:pbEthWredUpThr1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredLowThr2_cookie<s(0)(0)(0)>[&];(D1:pbEthWredLowThr2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredUpThr2_cookie<s(0)(0)(0)>[&];(D1:pbEthWredUpThr2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthWredRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredCount_cookie<s(0)(0)(0)>[&];(D1:pbEthWredCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthColorIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthColorIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio0Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio0Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio1Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio1Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio2Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio2Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio3Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio3Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio4Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio4Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio5Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio5Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio6Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio6Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPrio7Color_cookie<s(0)(0)(0)>[&];(D1:pbEthPrio7Color_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthColorRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthColorRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthColorCount_cookie<s(0)(0)(0)>[&];(D1:pbEthColorCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingName_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingMode_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingEIRPIR_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingEIRPIR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingCIR_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingCIR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingEBSPBS_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingEBSPBS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingCBS_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingCBS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingColorAware_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingColorAware_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingDiscardColor_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingDiscardColor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPolicingCount_cookie<s(0)(0)(0)>[&];(D1:pbEthPolicingCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpBridgeTable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpBridgeTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortTable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpDVlanTable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpDVlanTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpDPortType_cookie<s(0)(0)(0)>[&];(D1:pbGvrpDPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpDPortNo_cookie<s(0)(0)(0)>[&];(D1:pbGvrpDPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpDVlanList_cookie<s(0)(0)(0)>[&];(D1:pbGvrpDVlanList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortType_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortNo_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortRegAdminCtrl_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortRegAdminCtrl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpPortApplAdminCtrl_cookie<s(0)(0)(0)>[&];(D1:pbGvrpPortApplAdminCtrl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpBlockPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpBlockPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpBridgeAddress_cookie<s(0)(0)(0)>[&];(D1:pbGvrpBridgeAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpEnable_cookie<s(0)(0)(0)>[&];(D1:pbGvrpEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpJoinTimer_cookie<s(0)(0)(0)>[&];(D1:pbGvrpJoinTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpLeaveTimer_cookie<s(0)(0)(0)>[&];(D1:pbGvrpLeaveTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpLeaveallTimer_cookie<s(0)(0)(0)>[&];(D1:pbGvrpLeaveallTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpVlanList_cookie<s(0)(0)(0)>[&];(D1:pbGvrpVlanList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpMaxDVlanNum_cookie<s(0)(0)(0)>[&];(D1:pbGvrpMaxDVlanNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgConfigTable_cookie<s(0)(0)(0)>[&];(D1:vcgConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eosGlobalConfigTable_cookie<s(0)(0)(0)>[&];(D1:eosGlobalConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSOLCASConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbSOLCASConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSKLCASConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbSKLCASConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSKLCASVCGPort_cookie<s(0)(0)(0)>[&];(D1:pbSKLCASVCGPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSKLCASState_cookie<s(0)(0)(0)>[&];(D1:pbSKLCASState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSOLCASActive_cookie<s(0)(0)(0)>[&];(D1:pbSOLCASActive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSOLCASVCGPort_cookie<s(0)(0)(0)>[&];(D1:pbSOLCASVCGPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSOLCASState_cookie<s(0)(0)(0)>[&];(D1:pbSOLCASState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eosIPGConfig_cookie<s(0)(0)(0)>[&];(D1:eosIPGConfig_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eosMTUSize_cookie<s(0)(0)(0)>[&];(D1:eosMTUSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eosEslConfig_cookie<s(0)(0)(0)>[&];(D1:eosEslConfig_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgNo_cookie<s(0)(0)(0)>[&];(D1:vcgNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgLabel_cookie<s(0)(0)(0)>[&];(D1:vcgLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgXVType_cookie<s(0)(0)(0)>[&];(D1:vcgXVType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgChannelId_cookie<s(0)(0)(0)>[&];(D1:vcgChannelId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgLCASSupport_cookie<s(0)(0)(0)>[&];(D1:vcgLCASSupport_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgCapacityTrigger_cookie<s(0)(0)(0)>[&];(D1:vcgCapacityTrigger_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgPauseTransparent_cookie<s(0)(0)(0)>[&];(D1:vcgPauseTransparent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgLcasHoldOffTime_cookie<s(0)(0)(0)>[&];(D1:vcgLcasHoldOffTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgGfpMode_cookie<s(0)(0)(0)>[&];(D1:vcgGfpMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgGfpType_cookie<s(0)(0)(0)>[&];(D1:vcgGfpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgGfpFCS_cookie<s(0)(0)(0)>[&];(D1:vcgGfpFCS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgGfpFcsAutoDetect_cookie<s(0)(0)(0)>[&];(D1:vcgGfpFcsAutoDetect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgGfpCsfAutoMode_cookie<s(0)(0)(0)>[&];(D1:vcgGfpCsfAutoMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgPortMonMode_cookie<s(0)(0)(0)>[&];(D1:vcgPortMonMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgPortAlarmDisable_cookie<s(0)(0)(0)>[&];(D1:vcgPortAlarmDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgPLCTThreshold_cookie<s(0)(0)(0)>[&];(D1:vcgPLCTThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vcgPLCRThreshold_cookie<s(0)(0)(0)>[&];(D1:vcgPLCRThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthLspLabel_cookie<s(0)(0)(0)>[&];(D1:pbEthLspLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInPort_cookie<s(0)(0)(0)>[&];(D1:pbEthInPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthInPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPort_cookie<s(0)(0)(0)>[&];(D1:pbEthPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthOutPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMplsPolicingID_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMplsPolicingID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMplsColorID_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMplsColorID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStaticMplsStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthStaticMplsStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthLspName_cookie<s(0)(0)(0)>[&];(D1:pbEthLspName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpGlobalCfgTable_cookie<s(0)(0)(0)>[&];(D1:pbLacpGlobalCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgInformTable_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgInformTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpApConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbLacpApConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpApInformTable_cookie<s(0)(0)(0)>[&];(D1:pbLacpApInformTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortType_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortLinkState_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortLinkState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortBelongAg_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortBelongAg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortSync_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortSync_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortOperKey_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortOperKey_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerPortNo_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerPortMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerPortMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerPortPri_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerPortPri_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerOperKey_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerOperKey_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerPortState_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerPortState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortType_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpTimeoutMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpTimeoutMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortIndiv_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortIndiv_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpActiveMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpActiveMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpDesigAggor_cookie<s(0)(0)(0)>[&];(D1:pbLacpDesigAggor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortPri_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortPri_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortBpduMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortBpduMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgNo_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgOperKey_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgOperKey_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortList_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerMac_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerMac_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerSysPri_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerSysPri_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPartnerAgOperKey_cookie<s(0)(0)(0)>[&];(D1:pbLacpPartnerAgOperKey_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortTypeInAg_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortTypeInAg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpPortSpeedInAg_cookie<s(0)(0)(0)>[&];(D1:pbLacpPortSpeedInAg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgNo_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgName_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgMac_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgMac_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpAgRowState_cookie<s(0)(0)(0)>[&];(D1:pbLacpAgRowState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpEnable_cookie<s(0)(0)(0)>[&];(D1:pbLacpEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpSystemID_cookie<s(0)(0)(0)>[&];(D1:pbLacpSystemID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpSystemPri_cookie<s(0)(0)(0)>[&];(D1:pbLacpSystemPri_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLacpHashMode_cookie<s(0)(0)(0)>[&];(D1:pbLacpHashMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagId_cookie<s(0)(0)(0)>[&];(D1:pbLagId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagType_cookie<s(0)(0)(0)>[&];(D1:pbLagType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagFlowControl_cookie<s(0)(0)(0)>[&];(D1:pbLagFlowControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagPvid_cookie<s(0)(0)(0)>[&];(D1:pbLagPvid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagVlan_cookie<s(0)(0)(0)>[&];(D1:pbLagVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagTagMode_cookie<s(0)(0)(0)>[&];(D1:pbLagTagMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagInputRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbLagInputRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagBroadCastRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbLagBroadCastRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagDefaultVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbLagDefaultVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagTxPriAlg_cookie<s(0)(0)(0)>[&];(D1:pbLagTxPriAlg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagTxEnableHol_cookie<s(0)(0)(0)>[&];(D1:pbLagTxEnableHol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagChangeCoS_cookie<s(0)(0)(0)>[&];(D1:pbLagChangeCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagQinQStatus_cookie<s(0)(0)(0)>[&];(D1:pbLagQinQStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagQinQNewVlan_cookie<s(0)(0)(0)>[&];(D1:pbLagQinQNewVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagQinQNewVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbLagQinQNewVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagPortList_cookie<s(0)(0)(0)>[&];(D1:pbLagPortList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLagEnableWred_cookie<s(0)(0)(0)>[&];(D1:pbLagEnableWred_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstpBridgeBase_cookie<s(0)(0)(0)>[&];(D1:pbMstpBridgeBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstpPortBase_cookie<s(0)(0)(0)>[&];(D1:pbMstpPortBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstpBridgeStateBase_cookie<s(0)(0)(0)>[&];(D1:pbMstpBridgeStateBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstpPortStateBase_cookie<s(0)(0)(0)>[&];(D1:pbMstpPortStateBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPortStateTable_cookie<s(0)(0)(0)>[&];(D1:pbCistPortStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPortStateTable_cookie<s(0)(0)(0)>[&];(D1:pbMstiPortStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortType_cookie<s(0)(0)(0)>[&];(D1:pbMstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiNumber_cookie<s(0)(0)(0)>[&];(D1:pbMstiNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPPVector1_cookie<s(0)(0)(0)>[&];(D1:pbMstiPPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPPVector2_cookie<s(0)(0)(0)>[&];(D1:pbMstiPPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiDPVector1_cookie<s(0)(0)(0)>[&];(D1:pbMstiDPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiDPVector2_cookie<s(0)(0)(0)>[&];(D1:pbMstiDPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiMPVector1_cookie<s(0)(0)(0)>[&];(D1:pbMstiMPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiMPVector2_cookie<s(0)(0)(0)>[&];(D1:pbMstiMPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPTimes_cookie<s(0)(0)(0)>[&];(D1:pbMstiPTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiDTimes_cookie<s(0)(0)(0)>[&];(D1:pbMstiDTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiMTimes_cookie<s(0)(0)(0)>[&];(D1:pbMstiMTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPState_cookie<s(0)(0)(0)>[&];(D1:pbMstiPState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPInfoIs_cookie<s(0)(0)(0)>[&];(D1:pbMstiPInfoIs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPRole_cookie<s(0)(0)(0)>[&];(D1:pbMstiPRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPSelectedRole_cookie<s(0)(0)(0)>[&];(D1:pbMstiPSelectedRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortType_cookie<s(0)(0)(0)>[&];(D1:pbMstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbCistPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPPVector1_cookie<s(0)(0)(0)>[&];(D1:pbCistPPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPPVector2_cookie<s(0)(0)(0)>[&];(D1:pbCistPPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPPVector3_cookie<s(0)(0)(0)>[&];(D1:pbCistPPVector3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistDPVector1_cookie<s(0)(0)(0)>[&];(D1:pbCistDPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistDPVector2_cookie<s(0)(0)(0)>[&];(D1:pbCistDPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistDPVector3_cookie<s(0)(0)(0)>[&];(D1:pbCistDPVector3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistMPVector1_cookie<s(0)(0)(0)>[&];(D1:pbCistMPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistMPVector2_cookie<s(0)(0)(0)>[&];(D1:pbCistMPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistMPVector3_cookie<s(0)(0)(0)>[&];(D1:pbCistMPVector3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPTimes_cookie<s(0)(0)(0)>[&];(D1:pbCistPTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistDTimes_cookie<s(0)(0)(0)>[&];(D1:pbCistDTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistMTimes_cookie<s(0)(0)(0)>[&];(D1:pbCistMTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPState_cookie<s(0)(0)(0)>[&];(D1:pbCistPState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPInfoIs_cookie<s(0)(0)(0)>[&];(D1:pbCistPInfoIs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPRole_cookie<s(0)(0)(0)>[&];(D1:pbCistPRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPPState_cookie<s(0)(0)(0)>[&];(D1:pbCistPPState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstRcvdInternal_cookie<s(0)(0)(0)>[&];(D1:pbMstRcvdInternal_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortBpduRule_cookie<s(0)(0)(0)>[&];(D1:pbPortBpduRule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortOperEdge_cookie<s(0)(0)(0)>[&];(D1:pbPortOperEdge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistBridgeStateTable_cookie<s(0)(0)(0)>[&];(D1:pbCistBridgeStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiBridgeStateTable_cookie<s(0)(0)(0)>[&];(D1:pbMstiBridgeStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiNumber_cookie<s(0)(0)(0)>[&];(D1:pbMstiNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiRPVector1_cookie<s(0)(0)(0)>[&];(D1:pbMstiRPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiRPVector2_cookie<s(0)(0)(0)>[&];(D1:pbMstiRPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiRootRemainingHops_cookie<s(0)(0)(0)>[&];(D1:pbMstiRootRemainingHops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiRootPortId_cookie<s(0)(0)(0)>[&];(D1:pbMstiRootPortId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstBaseNumPorts_cookie<s(0)(0)(0)>[&];(D1:pbMstBaseNumPorts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistRPVector1_cookie<s(0)(0)(0)>[&];(D1:pbCistRPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistRPVector2_cookie<s(0)(0)(0)>[&];(D1:pbCistRPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistRPVector3_cookie<s(0)(0)(0)>[&];(D1:pbCistRPVector3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstRootMaxAge_cookie<s(0)(0)(0)>[&];(D1:pbMstRootMaxAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstRootMsgAge_cookie<s(0)(0)(0)>[&];(D1:pbMstRootMsgAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstRootHelloTime_cookie<s(0)(0)(0)>[&];(D1:pbMstRootHelloTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstRootForwardDelay_cookie<s(0)(0)(0)>[&];(D1:pbMstRootForwardDelay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistRootRemainingHops_cookie<s(0)(0)(0)>[&];(D1:pbCistRootRemainingHops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistRootPortId_cookie<s(0)(0)(0)>[&];(D1:pbCistRootPortId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstCfgDigest_cookie<s(0)(0)(0)>[&];(D1:pbMstCfgDigest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPortTable_cookie<s(0)(0)(0)>[&];(D1:pbCistPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPortTable_cookie<s(0)(0)(0)>[&];(D1:pbMstiPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortType_cookie<s(0)(0)(0)>[&];(D1:pbMstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiNumber_cookie<s(0)(0)(0)>[&];(D1:pbMstiNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPortPriority_cookie<s(0)(0)(0)>[&];(D1:pbMstiPortPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPortPathCost_cookie<s(0)(0)(0)>[&];(D1:pbMstiPortPathCost_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortType_cookie<s(0)(0)(0)>[&];(D1:pbMstPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPort_cookie<s(0)(0)(0)>[&];(D1:pbMstPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPortPriority_cookie<s(0)(0)(0)>[&];(D1:pbCistPortPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistExPortPathCost_cookie<s(0)(0)(0)>[&];(D1:pbCistExPortPathCost_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistInPortPathCost_cookie<s(0)(0)(0)>[&];(D1:pbCistInPortPathCost_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortAdminEdgePort_cookie<s(0)(0)(0)>[&];(D1:pbMstPortAdminEdgePort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortAdminPointToPoint_cookie<s(0)(0)(0)>[&];(D1:pbMstPortAdminPointToPoint_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbMstPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortCheck_cookie<s(0)(0)(0)>[&];(D1:pbMstPortCheck_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstPortBpduMode_cookie<s(0)(0)(0)>[&];(D1:pbMstPortBpduMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistBridgeTable_cookie<s(0)(0)(0)>[&];(D1:pbCistBridgeTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiBridgeTable_cookie<s(0)(0)(0)>[&];(D1:pbMstiBridgeTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiNumber_cookie<s(0)(0)(0)>[&];(D1:pbMstiNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbMstiVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstiPriority_cookie<s(0)(0)(0)>[&];(D1:pbMstiPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstBaseBridgeAddress_cookie<s(0)(0)(0)>[&];(D1:pbMstBaseBridgeAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCistPriority_cookie<s(0)(0)(0)>[&];(D1:pbCistPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstForceVersion_cookie<s(0)(0)(0)>[&];(D1:pbMstForceVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstBridgeMaxAge_cookie<s(0)(0)(0)>[&];(D1:pbMstBridgeMaxAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstBridgeHelloTime_cookie<s(0)(0)(0)>[&];(D1:pbMstBridgeHelloTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstBridgeForwardDelay_cookie<s(0)(0)(0)>[&];(D1:pbMstBridgeForwardDelay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstTxHoldCount_cookie<s(0)(0)(0)>[&];(D1:pbMstTxHoldCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstMaxHops_cookie<s(0)(0)(0)>[&];(D1:pbMstMaxHops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstMstpBEGIN_cookie<s(0)(0)(0)>[&];(D1:pbMstMstpBEGIN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstMstpConfigName_cookie<s(0)(0)(0)>[&];(D1:pbMstMstpConfigName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstMstpRevisonLevel_cookie<s(0)(0)(0)>[&];(D1:pbMstMstpRevisonLevel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMstEventSwitch_cookie<s(0)(0)(0)>[&];(D1:pbMstEventSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingGlobalTable_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingGlobalTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanIgmpSnoopingTable_cookie<s(0)(0)(0)>[&];(D1:pbVlanIgmpSnoopingTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingIpGroupTable_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingIpGroupTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingMacGroupTable_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingMacGroupTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingMulRouterTable_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingMulRouterTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbIgmpVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpMulRouterPort_cookie<s(0)(0)(0)>[&];(D1:pbIgmpMulRouterPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbIgmpVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbIgmpMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpMacMemberPort_cookie<s(0)(0)(0)>[&];(D1:pbIgmpMacMemberPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbIgmpVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGroupIp_cookie<s(0)(0)(0)>[&];(D1:pbGroupIp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbIgmpMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpIpMemberPort_cookie<s(0)(0)(0)>[&];(D1:pbIgmpIpMemberPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpVlanNumber_cookie<s(0)(0)(0)>[&];(D1:pbIgmpVlanNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanIgmpSnoopingEnable_cookie<s(0)(0)(0)>[&];(D1:pbVlanIgmpSnoopingEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanIgmpSnoopingRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbVlanIgmpSnoopingRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingEnable_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIgmpSnoopingAgingTime_cookie<s(0)(0)(0)>[&];(D1:pbIgmpSnoopingAgingTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthReserveIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthReserveIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthReservedCfg_cookie<s(0)(0)(0)>[&];(D1:pbEthReservedCfg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthReservedRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthReservedRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbEthACLMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthProtPktACLPort_cookie<s(0)(0)(0)>[&];(D1:pbEthProtPktACLPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthProtPktACLIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthProtPktACLIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthProtPktACLRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthProtPktACLRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortCls_cookie<s(0)(0)(0)>[&];(D1:pbEthPortCls_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlan_cookie<s(0)(0)(0)>[&];(D1:pbEthVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQNewVlanId_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQNewVlanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQNewVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQNewVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanPortQinQIndex_cookie<s(0)(0)(0)>[&];(D1:pbVlanPortQinQIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPortQinQRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPortQinQRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQNewVlanPriMode_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQNewVlanPriMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQVlanSwapEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQVlanSwapEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQVlanSwapVid_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQVlanSwapVid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQinQVlanSwapMode_cookie<s(0)(0)(0)>[&];(D1:pbEthQinQVlanSwapMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusPortStyle_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusPortStyle_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusPortOperStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusPortOperStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLaserIBias_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLaserIBias_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLaserRecvPwr_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLaserRecvPwr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLaserTransPwr_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLaserTransPwr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLaserTemp_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLaserTemp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusCompliance8472_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusCompliance8472_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusNominalMBps_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusNominalMBps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusWavelength_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusWavelength_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLinkLength9125_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLinkLength9125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLinkLength50125_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLinkLength50125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLinkLength62125_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLinkLength62125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusLinkLengthCopper_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusLinkLengthCopper_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusVendorName_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusVendorName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusVendorPN_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusVendorPN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusVendorSN_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusVendorSN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusManuDate_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusManuDate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusTransCode_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusTransCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusVendorOUI_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusVendorOUI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthStatusConnectorType_cookie<s(0)(0)(0)>[&];(D1:pbEthStatusConnectorType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthsSAGPartNumber_cookie<s(0)(0)(0)>[&];(D1:pbEthsSAGPartNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthnClLaserTemp_cookie<s(0)(0)(0)>[&];(D1:pbEthnClLaserTemp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthnTECCurrent_cookie<s(0)(0)(0)>[&];(D1:pbEthnTECCurrent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeTable_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortTable_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeStateTable_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortStateTable_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortStateTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortType_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortNo_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPEnable_cookie<s(0)(0)(0)>[&];(D1:pbRstpPEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPPVector1_cookie<s(0)(0)(0)>[&];(D1:pbRstpPPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPPVector2_cookie<s(0)(0)(0)>[&];(D1:pbRstpPPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpDsgPVector1_cookie<s(0)(0)(0)>[&];(D1:pbRstpDsgPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpDsgPVector2_cookie<s(0)(0)(0)>[&];(D1:pbRstpDsgPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpMsgPVector1_cookie<s(0)(0)(0)>[&];(D1:pbRstpMsgPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpMsgPVector2_cookie<s(0)(0)(0)>[&];(D1:pbRstpMsgPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPTimes_cookie<s(0)(0)(0)>[&];(D1:pbRstpPTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpDsgTimes_cookie<s(0)(0)(0)>[&];(D1:pbRstpDsgTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpMsgTimes_cookie<s(0)(0)(0)>[&];(D1:pbRstpMsgTimes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPForward_cookie<s(0)(0)(0)>[&];(D1:pbRstpPForward_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPLearn_cookie<s(0)(0)(0)>[&];(D1:pbRstpPLearn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPInfoIs_cookie<s(0)(0)(0)>[&];(D1:pbRstpPInfoIs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPRole_cookie<s(0)(0)(0)>[&];(D1:pbRstpPRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPSelectedRole_cookie<s(0)(0)(0)>[&];(D1:pbRstpPSelectedRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRPVector1_cookie<s(0)(0)(0)>[&];(D1:pbRstpRPVector1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRPVector2_cookie<s(0)(0)(0)>[&];(D1:pbRstpRPVector2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRootMaxAge_cookie<s(0)(0)(0)>[&];(D1:pbRstpRootMaxAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRootHelloTime_cookie<s(0)(0)(0)>[&];(D1:pbRstpRootHelloTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRootForwardDelay_cookie<s(0)(0)(0)>[&];(D1:pbRstpRootForwardDelay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpRootPortId_cookie<s(0)(0)(0)>[&];(D1:pbRstpRootPortId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortType_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortNo_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortPriority_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortEnable_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortPathCost_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortPathCost_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortAdminEdgePort_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortAdminEdgePort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpPortAdminPointToPoint_cookie<s(0)(0)(0)>[&];(D1:pbRstpPortAdminPointToPoint_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeAddress_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgePriority_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgePriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeMaxAge_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeMaxAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeHelloTime_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeHelloTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBridgeForwardDelay_cookie<s(0)(0)(0)>[&];(D1:pbRstpBridgeForwardDelay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpTxHoldCount_cookie<s(0)(0)(0)>[&];(D1:pbRstpTxHoldCount_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpBEGIN_cookie<s(0)(0)(0)>[&];(D1:pbRstpBEGIN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRstpEventSwitch_cookie<s(0)(0)(0)>[&];(D1:pbRstpEventSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbEthACLMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLVid_cookie<s(0)(0)(0)>[&];(D1:pbEthACLVid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLItemType_cookie<s(0)(0)(0)>[&];(D1:pbEthACLItemType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbEthACLRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLCoS_cookie<s(0)(0)(0)>[&];(D1:pbEthACLCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthACLIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLEntryRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthACLEntryRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortStyle_cookie<s(0)(0)(0)>[&];(D1:pbEthPortStyle_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthTxQueNo_cookie<s(0)(0)(0)>[&];(D1:pbEthTxQueNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortQueueWeight_cookie<s(0)(0)(0)>[&];(D1:pbEthPortQueueWeight_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQueueWredID_cookie<s(0)(0)(0)>[&];(D1:pbEthQueueWredID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthNamedVlan_cookie<s(0)(0)(0)>[&];(D1:pbEthNamedVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanName_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanEnableMacLearning_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanEnableMacLearning_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortCls_cookie<s(0)(0)(0)>[&];(D1:pbEthPortCls_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlan_cookie<s(0)(0)(0)>[&];(D1:pbEthVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRateLimitValue_cookie<s(0)(0)(0)>[&];(D1:pbEthRateLimitValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanCoS_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanDisable_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRedirectionPort_cookie<s(0)(0)(0)>[&];(D1:pbEthRedirectionPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanPortCoSIndex_cookie<s(0)(0)(0)>[&];(D1:pbVlanPortCoSIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPortCoSRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPortCoSRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPolicingID_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPolicingID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanColorID_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanColorID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastVlan_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastPortList_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastPortList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastIndex_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticMulticastForGmrp_cookie<s(0)(0)(0)>[&];(D1:pbStaticMulticastForGmrp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryMacAddr_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryMacAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryVid_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryVid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryPort_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryTagged_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryTagged_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryIndex_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMACEntryRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbMACEntryRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanLabel_cookie<s(0)(0)(0)>[&];(D1:pbWanLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanVlanList_cookie<s(0)(0)(0)>[&];(D1:pbWanVlanList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanTaggedVlanList_cookie<s(0)(0)(0)>[&];(D1:pbWanTaggedVlanList_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanDefaultVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbWanDefaultVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanChangeCoS_cookie<s(0)(0)(0)>[&];(D1:pbWanChangeCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanPvid_cookie<s(0)(0)(0)>[&];(D1:pbWanPvid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanTagMode_cookie<s(0)(0)(0)>[&];(D1:pbWanTagMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanFlowControl_cookie<s(0)(0)(0)>[&];(D1:pbWanFlowControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanTxPriAlg_cookie<s(0)(0)(0)>[&];(D1:pbWanTxPriAlg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanTxEnableHol_cookie<s(0)(0)(0)>[&];(D1:pbWanTxEnableHol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanQinQStatus_cookie<s(0)(0)(0)>[&];(D1:pbWanQinQStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanQinQNewVlan_cookie<s(0)(0)(0)>[&];(D1:pbWanQinQNewVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanQinQNewVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbWanQinQNewVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanTPID_cookie<s(0)(0)(0)>[&];(D1:pbWanTPID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanMirrorPort_cookie<s(0)(0)(0)>[&];(D1:pbWanMirrorPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanLinkStatus_cookie<s(0)(0)(0)>[&];(D1:pbWanLinkStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanPortWorkMode_cookie<s(0)(0)(0)>[&];(D1:pbWanPortWorkMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWanEnableWred_cookie<s(0)(0)(0)>[&];(D1:pbWanEnableWred_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortAdminStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthPortAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLinkStatus_cookie<s(0)(0)(0)>[&];(D1:pbPortLinkStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortAutoNego_cookie<s(0)(0)(0)>[&];(D1:pbEthPortAutoNego_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortFlowControl_cookie<s(0)(0)(0)>[&];(D1:pbEthPortFlowControl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortSpeed_cookie<s(0)(0)(0)>[&];(D1:pbEthPortSpeed_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortDuplex_cookie<s(0)(0)(0)>[&];(D1:pbEthPortDuplex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortVlan_cookie<s(0)(0)(0)>[&];(D1:pbEthPortVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortPvid_cookie<s(0)(0)(0)>[&];(D1:pbEthPortPvid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUnTagMode_cookie<s(0)(0)(0)>[&];(D1:pbUnTagMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortInputRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbPortInputRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortMode_cookie<s(0)(0)(0)>[&];(D1:pbEthPortMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortBroadCastRateLimit_cookie<s(0)(0)(0)>[&];(D1:pbEthPortBroadCastRateLimit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortDefaultVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbPortDefaultVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortLabel_cookie<s(0)(0)(0)>[&];(D1:pbEthPortLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanTxPriAlg_cookie<s(0)(0)(0)>[&];(D1:pbLanTxPriAlg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanTaggedVlan_cookie<s(0)(0)(0)>[&];(D1:pbLanTaggedVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortLoopback_cookie<s(0)(0)(0)>[&];(D1:pbEthPortLoopback_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthTxEnableHol_cookie<s(0)(0)(0)>[&];(D1:pbEthTxEnableHol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthAutoLaserShutdown_cookie<s(0)(0)(0)>[&];(D1:pbEthAutoLaserShutdown_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthAlsMode_cookie<s(0)(0)(0)>[&];(D1:pbEthAlsMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortAlarmDisable_cookie<s(0)(0)(0)>[&];(D1:pbEthPortAlarmDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ethPortOnCSF_cookie<s(0)(0)(0)>[&];(D1:ethPortOnCSF_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ethMDIorMDIX_cookie<s(0)(0)(0)>[&];(D1:ethMDIorMDIX_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanChangeCoS_cookie<s(0)(0)(0)>[&];(D1:pbLanChangeCoS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanQinQStatus_cookie<s(0)(0)(0)>[&];(D1:pbLanQinQStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanQinQNewVlan_cookie<s(0)(0)(0)>[&];(D1:pbLanQinQNewVlan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanQinQNewVlanPriority_cookie<s(0)(0)(0)>[&];(D1:pbLanQinQNewVlanPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanTPID_cookie<s(0)(0)(0)>[&];(D1:pbLanTPID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLanMirrorPort_cookie<s(0)(0)(0)>[&];(D1:pbLanMirrorPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortClassifier_cookie<s(0)(0)(0)>[&];(D1:pbEthPortClassifier_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPortWorkMode_cookie<s(0)(0)(0)>[&];(D1:pbEthPortWorkMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthEnableWred_cookie<s(0)(0)(0)>[&];(D1:pbEthEnableWred_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSFPWorkMode_cookie<s(0)(0)(0)>[&];(D1:pbSFPWorkMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortTagProtocol_cookie<s(0)(0)(0)>[&];(D1:pbPortTagProtocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAgingTime_cookie<s(0)(0)(0)>[&];(D1:pbAgingTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIPGConfig_cookie<s(0)(0)(0)>[&];(D1:pbIPGConfig_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVlanTagProtocolType_cookie<s(0)(0)(0)>[&];(D1:pbVlanTagProtocolType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMTUSize_cookie<s(0)(0)(0)>[&];(D1:pbMTUSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthACLType_cookie<s(0)(0)(0)>[&];(D1:pbEthACLType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthBroadcastEnableHol_cookie<s(0)(0)(0)>[&];(D1:pbEthBroadcastEnableHol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthTunnelingRxTPID_cookie<s(0)(0)(0)>[&];(D1:pbEthTunnelingRxTPID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthQoSIEEE802Version_cookie<s(0)(0)(0)>[&];(D1:pbEthQoSIEEE802Version_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthChangeCoSMode_cookie<s(0)(0)(0)>[&];(D1:pbEthChangeCoSMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthLabelBase_cookie<s(0)(0)(0)>[&];(D1:pbEthLabelBase_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthWredDropProbability_cookie<s(0)(0)(0)>[&];(D1:pbEthWredDropProbability_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteTable_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] dccCfgTable_cookie<s(0)(0)(0)>[&];(D1:dccCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpCfgTable_cookie<s(0)(0)(0)>[&];(D1:ipInIpCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mpBundleCfgTable_cookie<s(0)(0)(0)>[&];(D1:mpBundleCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteTable_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertCfgTable_cookie<s(0)(0)(0)>[&];(D1:tracertCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertResultTable_cookie<s(0)(0)(0)>[&];(D1:tracertResultTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingCfgTable_cookie<s(0)(0)(0)>[&];(D1:pingCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingResultTable_cookie<s(0)(0)(0)>[&];(D1:pingResultTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] dccReservePortTable_cookie<s(0)(0)(0)>[&];(D1:dccReservePortTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] phyPortNum_cookie<s(0)(0)(0)>[&];(D1:phyPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] logPortNum_cookie<s(0)(0)(0)>[&];(D1:logPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingIndex_cookie<s(0)(0)(0)>[&];(D1:pingIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingTargetIpAddrDis_cookie<s(0)(0)(0)>[&];(D1:pingTargetIpAddrDis_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingDataSizeDis_cookie<s(0)(0)(0)>[&];(D1:pingDataSizeDis_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingTripTime_cookie<s(0)(0)(0)>[&];(D1:pingTripTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingTtlnumber_cookie<s(0)(0)(0)>[&];(D1:pingTtlnumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingResult_cookie<s(0)(0)(0)>[&];(D1:pingResult_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingRstRowStatus_cookie<s(0)(0)(0)>[&];(D1:pingRstRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingTargetIpAddr_cookie<s(0)(0)(0)>[&];(D1:pingTargetIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingDataSize_cookie<s(0)(0)(0)>[&];(D1:pingDataSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingCounts_cookie<s(0)(0)(0)>[&];(D1:pingCounts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingTimeout_cookie<s(0)(0)(0)>[&];(D1:pingTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingRowStatus_cookie<s(0)(0)(0)>[&];(D1:pingRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pingStart_cookie<s(0)(0)(0)>[&];(D1:pingStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertTtlNumber_cookie<s(0)(0)(0)>[&];(D1:tracertTtlNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertTripTime1_cookie<s(0)(0)(0)>[&];(D1:tracertTripTime1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertTripTime2_cookie<s(0)(0)(0)>[&];(D1:tracertTripTime2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertTripTime3_cookie<s(0)(0)(0)>[&];(D1:tracertTripTime3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertPeerIpAddrDis_cookie<s(0)(0)(0)>[&];(D1:tracertPeerIpAddrDis_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertRstRowStatus_cookie<s(0)(0)(0)>[&];(D1:tracertRstRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertPeerIpAddr_cookie<s(0)(0)(0)>[&];(D1:tracertPeerIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertTimeout_cookie<s(0)(0)(0)>[&];(D1:tracertTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertRowStatus_cookie<s(0)(0)(0)>[&];(D1:tracertRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tracertStart_cookie<s(0)(0)(0)>[&];(D1:tracertStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteDest_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteDest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteMask_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteProto_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteProto_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteIfIndex_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteNextHop_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteNextHop_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteAdminStatus_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteOperStatus_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteOperStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteMetricType_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteMetricType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStaticIpRouteCost_cookie<s(0)(0)(0)>[&];(D1:pbStaticIpRouteCost_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundlePeerIpAddr_cookie<s(0)(0)(0)>[&];(D1:bundlePeerIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundleIndex_cookie<s(0)(0)(0)>[&];(D1:bundleIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundleStatus_cookie<s(0)(0)(0)>[&];(D1:bundleStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundleNumber_cookie<s(0)(0)(0)>[&];(D1:bundleNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundleRowStatus_cookie<s(0)(0)(0)>[&];(D1:bundleRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bundleTOS_cookie<s(0)(0)(0)>[&];(D1:bundleTOS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpIfIpAddr_cookie<s(0)(0)(0)>[&];(D1:ipInIpIfIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpIfMask_cookie<s(0)(0)(0)>[&];(D1:ipInIpIfMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpDestIpAddr_cookie<s(0)(0)(0)>[&];(D1:ipInIpDestIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpSourcIpAddr_cookie<s(0)(0)(0)>[&];(D1:ipInIpSourcIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpIfIndex_cookie<s(0)(0)(0)>[&];(D1:ipInIpIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpIfMtu_cookie<s(0)(0)(0)>[&];(D1:ipInIpIfMtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpRowStatus_cookie<s(0)(0)(0)>[&];(D1:ipInIpRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInIpPeerIfIpAddr_cookie<s(0)(0)(0)>[&];(D1:ipInIpPeerIfIpAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mode_cookie<s(0)(0)(0)>[&];(D1:mode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] state_cookie<s(0)(0)(0)>[&];(D1:state_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] protocol_cookie<s(0)(0)(0)>[&];(D1:protocol_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] dccBundleNumber_cookie<s(0)(0)(0)>[&];(D1:dccBundleNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] linkStatus_cookie<s(0)(0)(0)>[&];(D1:linkStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mspStatus_cookie<s(0)(0)(0)>[&];(D1:mspStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] destSlot_cookie<s(0)(0)(0)>[&];(D1:destSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] destPort_cookie<s(0)(0)(0)>[&];(D1:destPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mtu_cookie<s(0)(0)(0)>[&];(D1:mtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] crcMode_cookie<s(0)(0)(0)>[&];(D1:crcMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] hcocIndex_cookie<s(0)(0)(0)>[&];(D1:hcocIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] multilink_cookie<s(0)(0)(0)>[&];(D1:multilink_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteDest_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteDest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMask_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteProto_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteProto_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteIfIndex_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteNextHop_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteNextHop_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteType_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteAge_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMetric1_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMetric1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMetric2_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMetric2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMetric3_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMetric3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMetric4_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMetric4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpRouteMetric5_cookie<s(0)(0)(0)>[&];(D1:pbIpRouteMetric5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceTable_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSSysTimingGroup_cookie<s(0)(0)(0)>[&];(D1:pbTMSSysTimingGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkInTable_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkInTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutTable_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutIndex_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutType_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutMonitored_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutSaBit_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutSaBit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutQlThreshold_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutQlThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutSquelchMode_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutSquelchMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSStClkOutOhm_cookie<s(0)(0)(0)>[&];(D1:tMSStClkOutOhm_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutQlIn_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutQlIn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutQl_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutQl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsStClkOutputMode_cookie<s(0)(0)(0)>[&];(D1:tmsStClkOutputMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkOutState_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkOutState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkInIndex_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkInIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkInType_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkInType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkInMonitored_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkInMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkInSaBit_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkInSaBit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSStClkInOhm_cookie<s(0)(0)(0)>[&];(D1:tMSStClkInOhm_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSSwitchRequest_cookie<s(0)(0)(0)>[&];(D1:pbTMSSwitchRequest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSActiveTimingSource_cookie<s(0)(0)(0)>[&];(D1:pbTMSActiveTimingSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSTimingState_cookie<s(0)(0)(0)>[&];(D1:pbTMSTimingState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSSysTimingMode_cookie<s(0)(0)(0)>[&];(D1:pbTMSSysTimingMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSSwitchRequestStatus_cookie<s(0)(0)(0)>[&];(D1:pbTMSSwitchRequestStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSHoldoverDTS_cookie<s(0)(0)(0)>[&];(D1:pbTMSHoldoverDTS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStaClkOutSource_cookie<s(0)(0)(0)>[&];(D1:pbTMSStaClkOutSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSQlEnabled_cookie<s(0)(0)(0)>[&];(D1:pbTMSQlEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSExpectedSMMB_cookie<s(0)(0)(0)>[&];(D1:pbTMSExpectedSMMB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSStClkAutoLoopPrevention_cookie<s(0)(0)(0)>[&];(D1:pbTMSStClkAutoLoopPrevention_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsSysSrcFDThreshold_cookie<s(0)(0)(0)>[&];(D1:tmsSysSrcFDThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsSysFDValue_cookie<s(0)(0)(0)>[&];(D1:tmsSysFDValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceIndex_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceSlot_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourcePort_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourcePort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceMonitored_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSSignalStatus_cookie<s(0)(0)(0)>[&];(D1:pbTMSSignalStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourcePriority_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourcePriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceLockOut_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceLockOut_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceQlIn_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceQlIn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceQl_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceQl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSQlProvionedMode_cookie<s(0)(0)(0)>[&];(D1:pbTMSQlProvionedMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSQlProvioned_cookie<s(0)(0)(0)>[&];(D1:pbTMSQlProvioned_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceValid_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceValid_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSRefSourceWTR_cookie<s(0)(0)(0)>[&];(D1:pbTMSRefSourceWTR_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSIfSdhQLType_cookie<s(0)(0)(0)>[&];(D1:tMSIfSdhQLType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSRefSourceQLOut_cookie<s(0)(0)(0)>[&];(D1:tMSRefSourceQLOut_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSForceDnu_cookie<s(0)(0)(0)>[&];(D1:tMSForceDnu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSSupportQlOut_cookie<s(0)(0)(0)>[&];(D1:tMSSupportQlOut_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tMSPortType_cookie<s(0)(0)(0)>[&];(D1:tMSPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsRefSourceFDUpband_cookie<s(0)(0)(0)>[&];(D1:tmsRefSourceFDUpband_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsRefSourceFDLowband_cookie<s(0)(0)(0)>[&];(D1:tmsRefSourceFDLowband_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsRefSourceFDValue_cookie<s(0)(0)(0)>[&];(D1:tmsRefSourceFDValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tmsStoredDrvClkNum_cookie<s(0)(0)(0)>[&];(D1:tmsStoredDrvClkNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDigitalTransport_cookie<s(0)(0)(0)>[&];(D1:pbDigitalTransport_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSonetSdh_cookie<s(0)(0)(0)>[&];(D1:pbSonetSdh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbPortConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortStatusTable_cookie<s(0)(0)(0)>[&];(D1:pbPortStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortHoTpReserveTable_cookie<s(0)(0)(0)>[&];(D1:pbPortHoTpReserveTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTPConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbTPConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhPmUpLoadInfo_cookie<s(0)(0)(0)>[&];(D1:pbSdhPmUpLoadInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhMostRecentIndex_cookie<s(0)(0)(0)>[&];(D1:pbSdhMostRecentIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhRecentUapPerfMon_cookie<s(0)(0)(0)>[&];(D1:pbSdhRecentUapPerfMon_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhUapPerfMon_cookie<s(0)(0)(0)>[&];(D1:pbSdhUapPerfMon_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhRecentPerfMon_cookie<s(0)(0)(0)>[&];(D1:pbSdhRecentPerfMon_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhCurPerfMon_cookie<s(0)(0)(0)>[&];(D1:pbSdhCurPerfMon_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSPortHisTable_cookie<s(0)(0)(0)>[&];(D1:pbPRBSPortHisTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSPortCurTable_cookie<s(0)(0)(0)>[&];(D1:pbPRBSPortCurTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortStatusTable_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortStatusTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTPConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbOTUTPConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPMFilterConfigGroup_cookie<s(0)(0)(0)>[&];(D1:pbPMFilterConfigGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPMFilterTable_cookie<s(0)(0)(0)>[&];(D1:pbPMFilterTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmFilterType_cookie<s(0)(0)(0)>[&];(D1:pbPmFilterType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTableType_cookie<s(0)(0)(0)>[&];(D1:pbTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmEthId_cookie<s(0)(0)(0)>[&];(D1:pbPmEthId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmReserved_cookie<s(0)(0)(0)>[&];(D1:pbPmReserved_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmDeleteAllFilter_cookie<s(0)(0)(0)>[&];(D1:pbPmDeleteAllFilter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmDeleteSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbPmDeleteSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmDeleteSlotFilter_cookie<s(0)(0)(0)>[&];(D1:pbPmDeleteSlotFilter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmDeleteFilterTypeId_cookie<s(0)(0)(0)>[&];(D1:pbPmDeleteFilterTypeId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmDeleteFilterType_cookie<s(0)(0)(0)>[&];(D1:pbPmDeleteFilterType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTpChannelId_cookie<s(0)(0)(0)>[&];(D1:pbOTUTpChannelId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTpSegment_cookie<s(0)(0)(0)>[&];(D1:pbOTUTpSegment_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTpType_cookie<s(0)(0)(0)>[&];(D1:pbOTUTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUMonitored_cookie<s(0)(0)(0)>[&];(D1:pbOTUMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTimAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUTimAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTimActEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUTimActEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTxTti_cookie<s(0)(0)(0)>[&];(D1:pbOTUTxTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUExpTti_cookie<s(0)(0)(0)>[&];(D1:pbOTUExpTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTURxTti_cookie<s(0)(0)(0)>[&];(D1:pbOTURxTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUDegEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUDegEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUDegThreshold_cookie<s(0)(0)(0)>[&];(D1:pbOTUDegThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUDegIntervals_cookie<s(0)(0)(0)>[&];(D1:pbOTUDegIntervals_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUSendMaintenanceType_cookie<s(0)(0)(0)>[&];(D1:pbOTUSendMaintenanceType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTURecvMaintenanceType_cookie<s(0)(0)(0)>[&];(D1:pbOTURecvMaintenanceType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPlmAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUPlmAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUMsimAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUMsimAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPtAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbOTUPtAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUTxPt_cookie<s(0)(0)(0)>[&];(D1:pbOTUTxPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUExpPt_cookie<s(0)(0)(0)>[&];(D1:pbOTUExpPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTURxPt_cookie<s(0)(0)(0)>[&];(D1:pbOTURxPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmOTUNearEnd15minMonitored_cookie<s(0)(0)(0)>[&];(D1:pmOTUNearEnd15minMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmOTUFarEnd15minMonitored_cookie<s(0)(0)(0)>[&];(D1:pmOTUFarEnd15minMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmOTUNearEnd24hrMonitored_cookie<s(0)(0)(0)>[&];(D1:pmOTUNearEnd24hrMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmOTUFarEnd24hrMonitored_cookie<s(0)(0)(0)>[&];(D1:pmOTUFarEnd24hrMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSMRxTti_cookie<s(0)(0)(0)>[&];(D1:pbSMRxTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRxPt_cookie<s(0)(0)(0)>[&];(D1:pbRxPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRxChannelId_cookie<s(0)(0)(0)>[&];(D1:pbRxChannelId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSEnable_cookie<s(0)(0)(0)>[&];(D1:pbPRBSEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSPattern_cookie<s(0)(0)(0)>[&];(D1:pbPRBSPattern_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSErrorBlocks_cookie<s(0)(0)(0)>[&];(D1:pbPRBSErrorBlocks_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSErrorSeconds_cookie<s(0)(0)(0)>[&];(D1:pbPRBSErrorSeconds_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSStatus_cookie<s(0)(0)(0)>[&];(D1:pbPRBSStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSActualPortType_cookie<s(0)(0)(0)>[&];(D1:pbPRBSActualPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] prbsMode_cookie<s(0)(0)(0)>[&];(D1:prbsMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSHisErrorSeconds_cookie<s(0)(0)(0)>[&];(D1:pbPRBSHisErrorSeconds_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSHisMeanError_cookie<s(0)(0)(0)>[&];(D1:pbPRBSHisMeanError_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSTrapTimeStamp_cookie<s(0)(0)(0)>[&];(D1:pbPRBSTrapTimeStamp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPRBSHisActualPortType_cookie<s(0)(0)(0)>[&];(D1:pbPRBSHisActualPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbEthCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmMonTimeIntervalSet_cookie<s(0)(0)(0)>[&];(D1:pbEthPmMonTimeIntervalSet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmMonTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmMonTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbRprClientCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCurSlipTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhCurSlipTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredNumberTable_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredNumberTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmSlipEventEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmSlipEventEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPMTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPMTable_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanPMTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthTcaPMTable_cookie<s(0)(0)(0)>[&];(D1:pbEthTcaPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbFecCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuCurPMTable_cookie<s(0)(0)(0)>[&];(D1:pbOtuCurPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuTableType_cookie<s(0)(0)(0)>[&];(D1:pbOtuTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbChannelID_cookie<s(0)(0)(0)>[&];(D1:pbChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSegmentNum_cookie<s(0)(0)(0)>[&];(D1:pbSegmentNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbOtuPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuOfsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuOfsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuIaesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuIaesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuBiaesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuBiaesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbOtuPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbOtuPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbOtuPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuPmSuspect_cookie<s(0)(0)(0)>[&];(D1:pbOtuPmSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecTableType_cookie<s(0)(0)(0)>[&];(D1:pbFecTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbFecPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecTecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecTecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecTecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecTecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecZecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecZecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecZecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecZecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecOecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecOecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecOecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecOecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbFecFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbFecPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbFecPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbFecPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecPmSuspect_cookie<s(0)(0)(0)>[&];(D1:pbFecPmSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecUncorrectedBlkHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecUncorrectedBlkHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecUncorrectedBlkLow_cookie<s(0)(0)(0)>[&];(D1:pbFecUncorrectedBlkLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmBbrEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthPmBbrEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmBbrThresholdValue_cookie<s(0)(0)(0)>[&];(D1:pbEthPmBbrThresholdValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmBprEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthPmBprEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmBprThresholdValue_cookie<s(0)(0)(0)>[&];(D1:pbEthPmBprThresholdValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanPmEnableStatus_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanPmEnableStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanPmStartFlag_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanPmStartFlag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanInPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanInPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanInPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanInPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanInBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanInBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanInBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanInBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanDropPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanDropPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanDropPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanDropPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvUnicastFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvUnicastFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvUnicastFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvUnicastFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvTotalFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvTotalFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvTotalFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvTotalFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvUnicastBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvUnicastBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvUnicastBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvUnicastBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvTotalBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvTotalBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRcvTotalBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRcvTotalBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanPmEnableStatus_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanPmEnableStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhTableType_cookie<s(0)(0)(0)>[&];(D1:pbPdhTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhEsPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhEsPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhEsPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhEsPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhEsPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhEsPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhBbePmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhBbePmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhBbePmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhBbePmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhBbePmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhBbePmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhSesPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhSesPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhSesPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhSesPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhSesPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhSesPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUasPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhUasPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUasPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhUasPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUasPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhUasPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCsesPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhCsesPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCsesPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhCsesPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhCsesPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhCsesPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhFcPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPdhFcPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhFcPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPdhFcPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhFcPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPdhFcPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPmSuspect_cookie<s(0)(0)(0)>[&];(D1:pbPdhPmSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthCurPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthCurPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmEnableStatus_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmEnableStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmStartFlag_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmStartFlag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndHostIP_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndHostIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredAll_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredAll_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredCtp_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredCtp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredTtp_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredTtp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredEth_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredEth_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredRprClient_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredRprClient_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredRprSpan_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredRprSpan_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredAtm_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredAtm_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredPdhSlip_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredPdhSlip_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredPdhCrc_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredPdhCrc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredFec_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredFec_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmMonitoredOtu_cookie<s(0)(0)(0)>[&];(D1:pbPmMonitoredOtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipTableType_cookie<s(0)(0)(0)>[&];(D1:pbSlipTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipMonitor_cookie<s(0)(0)(0)>[&];(D1:pbSlipMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPSlipCounter_cookie<s(0)(0)(0)>[&];(D1:pbPSlipCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPSlipThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPSlipThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPSlipThreshold_cookie<s(0)(0)(0)>[&];(D1:pbPSlipThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNSlipCounter_cookie<s(0)(0)(0)>[&];(D1:pbNSlipCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNSlipThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbNSlipThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNSlipThreshold_cookie<s(0)(0)(0)>[&];(D1:pbNSlipThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipTableReset_cookie<s(0)(0)(0)>[&];(D1:pbSlipTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbSlipTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbSlipTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipSuspect_cookie<s(0)(0)(0)>[&];(D1:pbSlipSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanId_cookie<s(0)(0)(0)>[&];(D1:rprSpanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInWrapFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInWrapFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInWrapFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInWrapFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInDataFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInDataFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInDataFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInDataFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInCtrlFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInCtrlFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInCtrlFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInCtrlFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInFaFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInFaFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInFaFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInFaFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutAddFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutAddFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutAddFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutAddFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutTransitFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutTransitFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutTransitFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutTransitFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutWrapFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutWrapFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutWrapFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutWrapFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutTpFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutTpFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutTpFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutTpFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutFaFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutFaFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutFaFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutFaFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutOamFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutOamFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutOamFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutOamFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrHecFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrHecFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrHecFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrHecFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrParityFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrParityFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrParityFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrParityFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrFcsFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrFcsFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrFcsFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrFcsFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrEdgeFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrEdgeFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrEdgeFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrEdgeFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrSelfSourceFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrSelfSourceFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanErrSelfSourceFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanErrSelfSourceFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanInMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanInMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanOutMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanOutMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprClientTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbRprClientPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbRprClientPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbRprClientPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbRprClientPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbRprClientPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutPassFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutPassFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutPassFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutPassFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutDropFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutDropFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutDropFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutDropFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutErrLenFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutErrLenFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutErrLenFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutErrLenFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutErrCrcFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutErrCrcFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutErrCrcFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutErrCrcFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientInMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientInMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientOutMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientOutMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmReportStatus_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmReportStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmMonitorStatus_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmMonitorStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmFtpHostIP_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmFtpHostIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmFtpPath_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmFtpPath_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmFtpFileName_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmFtpFileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmFtpUsername_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmFtpUsername_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmFtpPassword_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmFtpPassword_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmRequestId_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmRequestId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthPmRespMsg_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthPmRespMsg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbEthPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbEthPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbEthPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbEthPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbEthPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllBadPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllBadPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllBadPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllBadPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllBadBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllBadBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllBadBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllBadBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllGoodBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllGoodBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInAllGoodBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInAllGoodBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInOverSizePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInOverSizePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInOverSizePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInOverSizePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInUnderSizePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInUnderSizePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInUnderSizePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInUnderSizePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInCRCErrPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthInCRCErrPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthInCRCErrPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthInCRCErrPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthOutUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthOutUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthOutMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthOutMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthOutBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthOutBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthOutAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthOutAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutAllGoodBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthOutAllGoodBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthOutAllGoodBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthOutAllGoodBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthBbrEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthBbrEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthBbrThresholdValue_cookie<s(0)(0)(0)>[&];(D1:pbEthBbrThresholdValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthBprEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthBprEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthBprThresholdValue_cookie<s(0)(0)(0)>[&];(D1:pbEthBprThresholdValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllBadPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllBadPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAllBadPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAllBadPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInDropPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInDropPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInDropPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInDropPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInUndersizeGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInUndersizeGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInUndersizeGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInUndersizeGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInOversizeGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInOversizeGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInOversizeGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInOversizeGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn64PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn64PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn64PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn64PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn65To127PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn65To127PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn65To127PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn65To127PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn128To255PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn128To255PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn128To255PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn128To255PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn256To511PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn256To511PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn256To511PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn256To511PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn512To1023PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn512To1023PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn512To1023PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn512To1023PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn1024To1518PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn1024To1518PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurIn1024To1518PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurIn1024To1518PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInPausePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInPausePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInPausePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInPausePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInFragmentPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInFragmentPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInFragmentPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInFragmentPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInJabberPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInJabberPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInJabberPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInJabberPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAlignmentErrorPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAlignmentErrorPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurInAlignmentErrorPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurInAlignmentErrorPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutAllBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutAllBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutAllBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutAllBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutAllPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutAllPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutAllPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutAllPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutGoodPausePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutGoodPausePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutGoodPausePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutGoodPausePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutCollisionPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutCollisionPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthCurOutCollisionPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthCurOutCollisionPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutInvalidSymbolsHigh_cookie<s(0)(0)(0)>[&];(D1:pbCurOutInvalidSymbolsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutInvalidSymbolsLow_cookie<s(0)(0)(0)>[&];(D1:pbCurOutInvalidSymbolsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutSuperblockCrcErrorHigh_cookie<s(0)(0)(0)>[&];(D1:pbCurOutSuperblockCrcErrorHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutSuperblockCrcErrorLow_cookie<s(0)(0)(0)>[&];(D1:pbCurOutSuperblockCrcErrorLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutSuperblockCorrectableCrcErrorHigh_cookie<s(0)(0)(0)>[&];(D1:pbCurOutSuperblockCorrectableCrcErrorHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurOutSuperblockCorrectableCrcErrorLow_cookie<s(0)(0)(0)>[&];(D1:pbCurOutSuperblockCorrectableCrcErrorLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTableType_cookie<s(0)(0)(0)>[&];(D1:pbTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmActualPortType_cookie<s(0)(0)(0)>[&];(D1:pbPmActualPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhPmMonitor_cookie<s(0)(0)(0)>[&];(D1:pbSdhPmMonitor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEsPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbEsPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEsPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbEsPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEsPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbEsPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBbePmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbBbePmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBbePmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbBbePmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBbePmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbBbePmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSesPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbSesPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSesPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbSesPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSesPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbSesPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUasPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbUasPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUasPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbUasPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUasPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbUasPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCsesPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbCsesPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCsesPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbCsesPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCsesPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbCsesPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFcPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbFcPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFcPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbFcPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFcPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbFcPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOfsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOfsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOfsPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbOfsPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOfsPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbOfsPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOfsPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbOfsPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPpjcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPpjcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPpjcPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbPpjcPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPpjcPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbPpjcPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPpjcPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbPpjcPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNpjcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbNpjcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNpjcPmThresholdEnable_cookie<s(0)(0)(0)>[&];(D1:pbNpjcPmThresholdEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNpjcPmThresholdLow_cookie<s(0)(0)(0)>[&];(D1:pbNpjcPmThresholdLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNpjcPmThresholdHigh_cookie<s(0)(0)(0)>[&];(D1:pbNpjcPmThresholdHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmTableReset_cookie<s(0)(0)(0)>[&];(D1:pbPmTableReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbPmTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbPmTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmProtStatus_cookie<s(0)(0)(0)>[&];(D1:pbPmProtStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmTpStatus_cookie<s(0)(0)(0)>[&];(D1:pbPmTpStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmSuspect_cookie<s(0)(0)(0)>[&];(D1:pbPmSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentSlipTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentSlipTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentPMTable_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentChannelID_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentSegmentNum_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentSegmentNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentOfsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentOfsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentIaesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentIaesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentBiaesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentBiaesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuSuspect_cookie<s(0)(0)(0)>[&];(D1:pbOtuSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuComplete_cookie<s(0)(0)(0)>[&];(D1:pbOtuComplete_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentTecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentTecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentTecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentTecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentZecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentZecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentZecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentZecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentOecPmCounterHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentOecPmCounterHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentOecPmCounterLow_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentOecPmCounterLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecSuspect_cookie<s(0)(0)(0)>[&];(D1:pbFecSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecComplete_cookie<s(0)(0)(0)>[&];(D1:pbFecComplete_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecUncorrectedBlkHigh_cookie<s(0)(0)(0)>[&];(D1:pbFecRecUncorrectedBlkHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecUncorrectedBlkLow_cookie<s(0)(0)(0)>[&];(D1:pbFecRecUncorrectedBlkLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentPmStartFlag_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentPmStartFlag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentInPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentInPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentInBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentInBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentDropPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentDropPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentRcvUnicastFrames_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentRcvUnicastFrames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentRcvTotalFrames_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentRcvTotalFrames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentRcvUnicastBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentRcvUnicastBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentRcvTotalBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentRcvTotalBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanFrmStartIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanFrmStartIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentInPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentInPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentInPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentInPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentInBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentInBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentInBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentInBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentDropPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentDropPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentDropPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentDropPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvUnicastFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvUnicastFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvUnicastFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvUnicastFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvTotalFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvTotalFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvTotalFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvTotalFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvUnicastBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvUnicastBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvUnicastBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvUnicastBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvTotalBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvTotalBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentRcvTotalBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentRcvTotalBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhSuspect_cookie<s(0)(0)(0)>[&];(D1:pbPdhSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhComplete_cookie<s(0)(0)(0)>[&];(D1:pbPdhComplete_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentPmStartFlag_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentPmStartFlag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInUnicastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInUnicastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInMulcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInMulcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInBrdcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInBrdcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInAllBadPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInAllBadPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInAllBadBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInAllBadBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInAllGoodPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInAllGoodPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInAllGoodBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInAllGoodBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInOverSizePkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInOverSizePkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInUnderSizePkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInUnderSizePkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentInCRCErrPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentInCRCErrPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentOutUnicastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentOutUnicastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentOutMulcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentOutMulcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentOutBrdcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentOutBrdcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentOutAllGoodPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentOutAllGoodPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentOutAllGoodBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentOutAllGoodBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthFrmStartIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthFrmStartIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInAllBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInAllBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInAllPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInAllPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInAllGoodPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInAllGoodPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInAllBadPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInAllBadPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInUnicastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInUnicastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInMulcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInMulcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInBrdcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInBrdcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInDropPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInDropPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInUndersizeGoodPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInUndersizeGoodPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInOversizeGoodPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInOversizeGoodPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn64Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn64Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn65To127Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn65To127Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn128To255Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn128To255Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn256To511Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn256To511Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn512To1023Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn512To1023Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntIn1024To1518Pkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntIn1024To1518Pkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInPausePkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInPausePkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInFragmentPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInFragmentPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInJabberPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInJabberPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntInAlignmentErrorPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntInAlignmentErrorPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutAllBytes_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutAllBytes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutAllPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutAllPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutUnicastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutUnicastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutMulcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutMulcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutBrdcastPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutBrdcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutGoodPausePkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutGoodPausePkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRcntOutCollisionPkts_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRcntOutCollisionPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentSlipTableType_cookie<s(0)(0)(0)>[&];(D1:pbRecentSlipTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentSlipTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbRecentSlipTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentPSlipCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentPSlipCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentNSlipCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentNSlipCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbSlipTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentSlipSuspect_cookie<s(0)(0)(0)>[&];(D1:pbRecentSlipSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanId_cookie<s(0)(0)(0)>[&];(D1:rprSpanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanTableRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanTableRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInWrapFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInWrapFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInWrapFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInWrapFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInDataFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInDataFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInDataFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInDataFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInCtrlFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInCtrlFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInCtrlFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInCtrlFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInFaFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInFaFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInFaFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInFaFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutAddFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutAddFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutAddFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutAddFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutTransitFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutTransitFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutTransitFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutTransitFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutWrapFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutWrapFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutWrapFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutWrapFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutTpFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutTpFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutTpFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutTpFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutFaFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutFaFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutFaFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutFaFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutOamFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutOamFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutOamFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutOamFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrHecFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrHecFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrHecFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrHecFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrParityFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrParityFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrParityFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrParityFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrFcsFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrFcsFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrFcsFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrFcsFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrEdgeFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrEdgeFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrEdgeFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrEdgeFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrSelfSourceFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrSelfSourceFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentErrSelfSourceFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentErrSelfSourceFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentInMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentInMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentOutMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentOutMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientTableRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbRprClientTableRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutAllFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutAllFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutAllFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutAllFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutPassFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutPassFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutPassFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutPassFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutDropFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutDropFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutDropFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutDropFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutErrLenFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutErrLenFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutErrLenFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutErrLenFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutErrCrcFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutErrCrcFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutErrCrcFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutErrCrcFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentInMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentInMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutUcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutUcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassAFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassAFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassAFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassAFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassAOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassAOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassAOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassAOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBCirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBCirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBCirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBCirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBCirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBCirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBCirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBCirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBEirFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBEirFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBEirFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBEirFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBEirOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBEirOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassBEirOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassBEirOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassCFramesHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassCFramesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassCFramesLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassCFramesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassCOctetsHigh_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassCOctetsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentOutMcastClassCOctetsLow_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentOutMcastClassCOctetsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentPmTimeSuspect_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentPmTimeSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllBadPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllBadPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllBadPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllBadPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllBadBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllBadBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllBadBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllBadBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllGoodBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllGoodBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInAllGoodBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInAllGoodBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInOverSizePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInOverSizePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInOverSizePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInOverSizePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInUnderSizePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInUnderSizePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInUnderSizePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInUnderSizePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInCRCErrPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInCRCErrPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentInCRCErrPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentInCRCErrPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutAllGoodBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutAllGoodBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentOutAllGoodBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentOutAllGoodBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllBadPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllBadPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAllBadPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAllBadPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInDropPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInDropPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInDropPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInDropPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInUndersizeGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInUndersizeGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInUndersizeGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInUndersizeGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInOversizeGoodPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInOversizeGoodPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInOversizeGoodPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInOversizeGoodPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn64PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn64PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn64PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn64PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn65To127PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn65To127PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn65To127PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn65To127PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn128To255PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn128To255PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn128To255PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn128To255PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn256To511PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn256To511PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn256To511PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn256To511PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn512To1023PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn512To1023PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn512To1023PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn512To1023PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn1024To1518PktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn1024To1518PktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntIn1024To1518PktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntIn1024To1518PktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInPausePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInPausePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInPausePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInPausePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInFragmentPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInFragmentPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInFragmentPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInFragmentPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInJabberPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInJabberPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInJabberPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInJabberPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAlignmentErrorPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAlignmentErrorPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntInAlignmentErrorPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntInAlignmentErrorPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutAllBytesHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutAllBytesHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutAllBytesLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutAllBytesLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutAllPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutAllPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutAllPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutAllPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutUnicastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutUnicastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutUnicastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutUnicastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutMulcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutMulcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutMulcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutMulcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutBrdcastPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutBrdcastPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutBrdcastPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutBrdcastPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutGoodPausePktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutGoodPausePktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutGoodPausePktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutGoodPausePktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutCollisionPktsHigh_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutCollisionPktsHigh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRcntOutCollisionPktsLow_cookie<s(0)(0)(0)>[&];(D1:pbEthRcntOutCollisionPktsLow_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentTableType_cookie<s(0)(0)(0)>[&];(D1:pbRecentTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbRecentTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentEsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentEsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentBbePmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentBbePmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentSesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentSesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentUasPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentUasPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentCsesPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentCsesPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentFcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentFcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentOfsPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentOfsPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentPpjcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentPpjcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentNpjcPmCounter_cookie<s(0)(0)(0)>[&];(D1:pbRecentNpjcPmCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentPmTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbRecentPmTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSuspect_cookie<s(0)(0)(0)>[&];(D1:pbSuspect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbComplete_cookie<s(0)(0)(0)>[&];(D1:pbComplete_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbOtuUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUapChannelID_cookie<s(0)(0)(0)>[&];(D1:pbUapChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUapSegmentNum_cookie<s(0)(0)(0)>[&];(D1:pbUapSegmentNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUapType_cookie<s(0)(0)(0)>[&];(D1:pbOtuUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuIsAtUap_cookie<s(0)(0)(0)>[&];(D1:pbOtuIsAtUap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUAPCounter_cookie<s(0)(0)(0)>[&];(D1:pbOtuUAPCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbOtuUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUapTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbOtuUapTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUAPReset_cookie<s(0)(0)(0)>[&];(D1:pbOtuUAPReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUapType_cookie<s(0)(0)(0)>[&];(D1:pbPdhUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhIsAtUap_cookie<s(0)(0)(0)>[&];(D1:pbPdhIsAtUap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUAPCounter_cookie<s(0)(0)(0)>[&];(D1:pbPdhUAPCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbPdhUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUapTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbPdhUapTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUAPReset_cookie<s(0)(0)(0)>[&];(D1:pbPdhUAPReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmUapType_cookie<s(0)(0)(0)>[&];(D1:pbPmUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIsAtUap_cookie<s(0)(0)(0)>[&];(D1:pbIsAtUap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUAPCounter_cookie<s(0)(0)(0)>[&];(D1:pbUAPCounter_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUapTimeElapse_cookie<s(0)(0)(0)>[&];(D1:pbUapTimeElapse_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUAPReset_cookie<s(0)(0)(0)>[&];(D1:pbUAPReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhRecentUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhRecentUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUapPMTable_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUapPMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecUapChannelID_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecUapChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecUapSegmentNum_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecUapSegmentNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecUapType_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuUapTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbOtuUapTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUapTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUapTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecUapType_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhUapTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbPdhUapTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUapTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUapTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmRecUapType_cookie<s(0)(0)(0)>[&];(D1:pbPmRecUapType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUapTimesIndex_cookie<s(0)(0)(0)>[&];(D1:pbUapTimesIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentUapTimeStart_cookie<s(0)(0)(0)>[&];(D1:pbRecentUapTimeStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentUapTimeEnd_cookie<s(0)(0)(0)>[&];(D1:pbRecentUapTimeEnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbEthMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbRprClientMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbSlipMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbPdhMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbFecMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuMostRecentIndexTable_cookie<s(0)(0)(0)>[&];(D1:pbOtuMostRecentIndexTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecChannelID_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecSegmentNum_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecSegmentNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecIntervalTblType_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecIntervalTblType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUapTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUapTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOtuRecentUapUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbOtuRecentUapUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecIntervalTblType_cookie<s(0)(0)(0)>[&];(D1:pbFecRecIntervalTblType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbFecRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthVlanRecentIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthVlanRecentIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanIndexTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanIndexTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanNo_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthVlanRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthVlanRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecIntervalTblType_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecIntervalTblType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUapTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUapTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhRecentUapUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbPdhRecentUapUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthIndexPortType_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthIndexPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthRecentIndex_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthRecentIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlipRecentTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbSlipRecentTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprSpanId_cookie<s(0)(0)(0)>[&];(D1:rprSpanId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanIndexTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanIndexTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprSpanRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbRprSpanRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] rprIfIndex_cookie<s(0)(0)(0)>[&];(D1:rprIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientIndexTableType_cookie<s(0)(0)(0)>[&];(D1:pbRprClientIndexTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprClientRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbRprClientRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthIndexTableType_cookie<s(0)(0)(0)>[&];(D1:pbEthIndexTableType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthIndexPmPortType_cookie<s(0)(0)(0)>[&];(D1:pbEthIndexPmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbEthRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPmRecIntervalTblType_cookie<s(0)(0)(0)>[&];(D1:pbPmRecIntervalTblType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentIntervalTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbRecentIntervalTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentIntervalUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbRecentIntervalUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentUapTblMRI_cookie<s(0)(0)(0)>[&];(D1:pbRecentUapTblMRI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRecentUapUpMaxIndex_cookie<s(0)(0)(0)>[&];(D1:pbRecentUapUpMaxIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhPMUpLoadTable_cookie<s(0)(0)(0)>[&];(D1:pbSdhPMUpLoadTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthUploadTable_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthUploadTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthFtpHostIP_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthFtpHostIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthFtpFileName_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthFtpFileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthFtpUsername_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthFtpUsername_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbxSecEthFtpPassword_cookie<s(0)(0)(0)>[&];(D1:pbxSecEthFtpPassword_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndHostIP_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndHostIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndPath_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndPath_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpFileName_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpFileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndUsername_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndUsername_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndPassword_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndPassword_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdhFtpCmndLastState_cookie<s(0)(0)(0)>[&];(D1:pbSdhFtpCmndLastState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAdjustTimeDircetion_cookie<s(0)(0)(0)>[&];(D1:pbAdjustTimeDircetion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAdjustTimeDays_cookie<s(0)(0)(0)>[&];(D1:pbAdjustTimeDays_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAdjustTimeHours_cookie<s(0)(0)(0)>[&];(D1:pbAdjustTimeHours_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAdjustTimeMins_cookie<s(0)(0)(0)>[&];(D1:pbAdjustTimeMins_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAdjustTimeSecs_cookie<s(0)(0)(0)>[&];(D1:pbAdjustTimeSecs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpLoadStatus_cookie<s(0)(0)(0)>[&];(D1:pbUpLoadStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortLabel_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortMode_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortAlarmDisable_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortAlarmDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortLoopback_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortLoopback_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecEnable_cookie<s(0)(0)(0)>[&];(D1:pbFecEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInsFecErrEnable_cookie<s(0)(0)(0)>[&];(D1:pbInsFecErrEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInsFecErrRate_cookie<s(0)(0)(0)>[&];(D1:pbInsFecErrRate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWaveLengthId_cookie<s(0)(0)(0)>[&];(D1:pbWaveLengthId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSMTimAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbSMTimAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSMTimActEnable_cookie<s(0)(0)(0)>[&];(D1:pbSMTimActEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSMTxTti_cookie<s(0)(0)(0)>[&];(D1:pbSMTxTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSMExpTti_cookie<s(0)(0)(0)>[&];(D1:pbSMExpTti_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPTAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbPTAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTxPt_cookie<s(0)(0)(0)>[&];(D1:pbTxPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExpPt_cookie<s(0)(0)(0)>[&];(D1:pbExpPt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCIDAlmEnable_cookie<s(0)(0)(0)>[&];(D1:pbCIDAlmEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTxChannelId_cookie<s(0)(0)(0)>[&];(D1:pbTxChannelId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoAdjustManulStopEnable_cookie<s(0)(0)(0)>[&];(D1:pbAutoAdjustManulStopEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortPathMapping_cookie<s(0)(0)(0)>[&];(D1:pbPortPathMapping_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUFecMode_cookie<s(0)(0)(0)>[&];(D1:pbOTUFecMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortAdminStatus_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOTUPortUsageStatus_cookie<s(0)(0)(0)>[&];(D1:pbOTUPortUsageStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpType_cookie<s(0)(0)(0)>[&];(D1:pbTpType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTpIndex_cookie<s(0)(0)(0)>[&];(D1:pbTpIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMonitored_cookie<s(0)(0)(0)>[&];(D1:pbMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOutSignalType_cookie<s(0)(0)(0)>[&];(D1:pbOutSignalType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInSignalType_cookie<s(0)(0)(0)>[&];(D1:pbInSignalType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTransPsl_cookie<s(0)(0)(0)>[&];(D1:pbTransPsl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExpPsl_cookie<s(0)(0)(0)>[&];(D1:pbExpPsl_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSLEnable_cookie<s(0)(0)(0)>[&];(D1:pbSLEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSLAccept_cookie<s(0)(0)(0)>[&];(D1:pbSLAccept_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiEnabled_cookie<s(0)(0)(0)>[&];(D1:pbTtiEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTimAisDis_cookie<s(0)(0)(0)>[&];(D1:pbTimAisDis_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiTransmitMode_cookie<s(0)(0)(0)>[&];(D1:pbTtiTransmitMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiReceiveMode_cookie<s(0)(0)(0)>[&];(D1:pbTtiReceiveMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiOctetTransmitted_cookie<s(0)(0)(0)>[&];(D1:pbTtiOctetTransmitted_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiOctetExpected_cookie<s(0)(0)(0)>[&];(D1:pbTtiOctetExpected_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTtiOctetAccepted_cookie<s(0)(0)(0)>[&];(D1:pbTtiOctetAccepted_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSdMode_cookie<s(0)(0)(0)>[&];(D1:pbSdMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBurstyEnable_cookie<s(0)(0)(0)>[&];(D1:pbBurstyEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBurstyPeriod_cookie<s(0)(0)(0)>[&];(D1:pbBurstyPeriod_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBurstyPercent_cookie<s(0)(0)(0)>[&];(D1:pbBurstyPercent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDegEnable_cookie<s(0)(0)(0)>[&];(D1:pbDegEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDegThreshold_cookie<s(0)(0)(0)>[&];(D1:pbDegThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExcEnable_cookie<s(0)(0)(0)>[&];(D1:pbExcEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExcThreshold_cookie<s(0)(0)(0)>[&];(D1:pbExcThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAISEnable_cookie<s(0)(0)(0)>[&];(D1:pbAISEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRDIEnable_cookie<s(0)(0)(0)>[&];(D1:pbRDIEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmNearEnd15minMonitored_cookie<s(0)(0)(0)>[&];(D1:pmNearEnd15minMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmFarEnd15minMonitored_cookie<s(0)(0)(0)>[&];(D1:pmFarEnd15minMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmNearEnd24hrMonitored_cookie<s(0)(0)(0)>[&];(D1:pmNearEnd24hrMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pmFarEnd24hrMonitored_cookie<s(0)(0)(0)>[&];(D1:pmFarEnd24hrMonitored_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vc4ReservationStatus_cookie<s(0)(0)(0)>[&];(D1:vc4ReservationStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] vc4ReservationOperate_cookie<s(0)(0)(0)>[&];(D1:vc4ReservationOperate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tpOperationLock_cookie<s(0)(0)(0)>[&];(D1:tpOperationLock_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortStatus_cookie<s(0)(0)(0)>[&];(D1:pbPortStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortOperStatus_cookie<s(0)(0)(0)>[&];(D1:pbPortOperStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLaserIBias_cookie<s(0)(0)(0)>[&];(D1:pbLaserIBias_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLaserRecvPwr_cookie<s(0)(0)(0)>[&];(D1:pbLaserRecvPwr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLaserTransPwr_cookie<s(0)(0)(0)>[&];(D1:pbLaserTransPwr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLaserTemp_cookie<s(0)(0)(0)>[&];(D1:pbLaserTemp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCompliance8472_cookie<s(0)(0)(0)>[&];(D1:pbCompliance8472_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnNominalMBps_cookie<s(0)(0)(0)>[&];(D1:pbnNominalMBps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnWavelength_cookie<s(0)(0)(0)>[&];(D1:pbnWavelength_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnLinkLength9125_cookie<s(0)(0)(0)>[&];(D1:pbnLinkLength9125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnLinkLength50125_cookie<s(0)(0)(0)>[&];(D1:pbnLinkLength50125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnLinkLength62125_cookie<s(0)(0)(0)>[&];(D1:pbnLinkLength62125_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnLinkLengthCopper_cookie<s(0)(0)(0)>[&];(D1:pbnLinkLengthCopper_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsVendorName_cookie<s(0)(0)(0)>[&];(D1:pbsVendorName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsVendorPN_cookie<s(0)(0)(0)>[&];(D1:pbsVendorPN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsVendorSN_cookie<s(0)(0)(0)>[&];(D1:pbsVendorSN_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsManuDate_cookie<s(0)(0)(0)>[&];(D1:pbsManuDate_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnTransCode_cookie<s(0)(0)(0)>[&];(D1:pbnTransCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsVendorOUI_cookie<s(0)(0)(0)>[&];(D1:pbsVendorOUI_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnConnectorType_cookie<s(0)(0)(0)>[&];(D1:pbnConnectorType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnClLaserTemp_cookie<s(0)(0)(0)>[&];(D1:pbnClLaserTemp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbnTECCurrent_cookie<s(0)(0)(0)>[&];(D1:pbnTECCurrent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbsSAGPartNumber_cookie<s(0)(0)(0)>[&];(D1:pbsSAGPartNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortType_cookie<s(0)(0)(0)>[&];(D1:pbPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortNo_cookie<s(0)(0)(0)>[&];(D1:pbPortNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLabel_cookie<s(0)(0)(0)>[&];(D1:pbPortLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortMode_cookie<s(0)(0)(0)>[&];(D1:pbPortMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPdhPortMap_cookie<s(0)(0)(0)>[&];(D1:pbPdhPortMap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortAdminStatus_cookie<s(0)(0)(0)>[&];(D1:pbPortAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortMapRefresh_cookie<s(0)(0)(0)>[&];(D1:pbPortMapRefresh_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortAutoLaserShutdown_cookie<s(0)(0)(0)>[&];(D1:pbPortAutoLaserShutdown_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLoopback_cookie<s(0)(0)(0)>[&];(D1:pbPortLoopback_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFecMode_cookie<s(0)(0)(0)>[&];(D1:pbFecMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActualPortType_cookie<s(0)(0)(0)>[&];(D1:pbActualPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbImpedance_cookie<s(0)(0)(0)>[&];(D1:pbImpedance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCodeType_cookie<s(0)(0)(0)>[&];(D1:pbCodeType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbHaulType_cookie<s(0)(0)(0)>[&];(D1:pbHaulType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRetimingStatus_cookie<s(0)(0)(0)>[&];(D1:pbRetimingStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortAlsMode_cookie<s(0)(0)(0)>[&];(D1:pbPortAlsMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortAlarmDisable_cookie<s(0)(0)(0)>[&];(D1:pbPortAlarmDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] expectedFrameStructure_cookie<s(0)(0)(0)>[&];(D1:expectedFrameStructure_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] crcMultiframeDetector_cookie<s(0)(0)(0)>[&];(D1:crcMultiframeDetector_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portClassification_cookie<s(0)(0)(0)>[&];(D1:portClassification_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portUsageStatus_cookie<s(0)(0)(0)>[&];(D1:portUsageStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portMappingString_cookie<s(0)(0)(0)>[&];(D1:portMappingString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] portOperationLock_cookie<s(0)(0)(0)>[&];(D1:portOperationLock_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmTable_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeCfgTable_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventsTable_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventsTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventTypeCfgTable_cookie<s(0)(0)(0)>[&];(D1:pbEventTypeCfgTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLogSizeGroup_cookie<s(0)(0)(0)>[&];(D1:pbLogSizeGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] alarmPersistentTime_cookie<s(0)(0)(0)>[&];(D1:alarmPersistentTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] logPolicyGroup_cookie<s(0)(0)(0)>[&];(D1:logPolicyGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmStatGroup_cookie<s(0)(0)(0)>[&];(D1:pbAlarmStatGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLogClearGroup_cookie<s(0)(0)(0)>[&];(D1:pbLogClearGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbClearAlarmLog_cookie<s(0)(0)(0)>[&];(D1:pbClearAlarmLog_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbClearEventsLog_cookie<s(0)(0)(0)>[&];(D1:pbClearEventsLog_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfCriticalAlarms_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfCriticalAlarms_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfMajorAlarms_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfMajorAlarms_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfMinorAlarms_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfMinorAlarms_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfWarningAlarms_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfWarningAlarms_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfIndeterminateAlarms_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfIndeterminateAlarms_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfEvents_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfEvents_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eventLogPolicy_cookie<s(0)(0)(0)>[&];(D1:eventLogPolicy_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] alarmDetectionPersistentTime_cookie<s(0)(0)(0)>[&];(D1:alarmDetectionPersistentTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] alarmClearingPersistentTime_cookie<s(0)(0)(0)>[&];(D1:alarmClearingPersistentTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmLogSize_cookie<s(0)(0)(0)>[&];(D1:pbAlarmLogSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventLogSize_cookie<s(0)(0)(0)>[&];(D1:pbEventLogSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventTypeID_cookie<s(0)(0)(0)>[&];(D1:pbEventTypeID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventTypeCategory_cookie<s(0)(0)(0)>[&];(D1:pbEventTypeCategory_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventTypeName_cookie<s(0)(0)(0)>[&];(D1:pbEventTypeName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventTypeSendTrap_cookie<s(0)(0)(0)>[&];(D1:pbEventTypeSendTrap_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventIndex_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventID_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventDTS_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventDTS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventName_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventCategory_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventCategory_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCurrentEventDetails_cookie<s(0)(0)(0)>[&];(D1:pbCurrentEventDetails_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeID_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeCode_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeDesc_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeDesc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeCategory_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeCategory_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeSeverity_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeSeverity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeInhibit_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeInhibit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO1_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO2_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeTrapID_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeTrapID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO3_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO4_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlmClassID_cookie<s(0)(0)(0)>[&];(D1:pbAlmClassID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO5_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO6_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO6_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO7_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO7_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmTypeMDO8_cookie<s(0)(0)(0)>[&];(D1:pbAlarmTypeMDO8_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmIndex_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmCode_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmSeverity_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmSeverity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmSource_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmDTS_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmDTS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmClearDTS_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmClearDTS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmSlotNum_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmSlotNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmPortNum_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmPortNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmPortType_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmDesc_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmDesc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmTypeID_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmTypeID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmCategory_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmCategory_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmPathType_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmPathType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmSeqNum_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmSeqNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmAcknowledge_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmAcknowledge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmState_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmBoardStyle_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmBoardStyle_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbActiveAlarmActualPortType_cookie<s(0)(0)(0)>[&];(D1:pbActiveAlarmActualPortType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] addressGroup_cookie<s(0)(0)(0)>[&];(D1:addressGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] systemGroup_cookie<s(0)(0)(0)>[&];(D1:systemGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ledGroup_cookie<s(0)(0)(0)>[&];(D1:ledGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotTable_cookie<s(0)(0)(0)>[&];(D1:pbSlotTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMibSaveRestoreGroup_cookie<s(0)(0)(0)>[&];(D1:pbMibSaveRestoreGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInterfaceGroup_cookie<s(0)(0)(0)>[&];(D1:pbInterfaceGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeGroup_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbConfigCmndGroup_cookie<s(0)(0)(0)>[&];(D1:pbConfigCmndGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStatsGroup_cookie<s(0)(0)(0)>[&];(D1:pbStatsGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] alarmGroup_cookie<s(0)(0)(0)>[&];(D1:alarmGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeGroup_cookie<s(0)(0)(0)>[&];(D1:pbNodeGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeControlGroup_cookie<s(0)(0)(0)>[&];(D1:nodeControlGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ntpGroup_cookie<s(0)(0)(0)>[&];(D1:ntpGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDateTimeStampGroup_cookie<s(0)(0)(0)>[&];(D1:pbDateTimeStampGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCFCardGroup_cookie<s(0)(0)(0)>[&];(D1:pbCFCardGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] flashSpaceGroup_cookie<s(0)(0)(0)>[&];(D1:flashSpaceGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtensionShelfTable_cookie<s(0)(0)(0)>[&];(D1:pbExtensionShelfTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodePropertyGroup_cookie<s(0)(0)(0)>[&];(D1:nodePropertyGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eowFunctionGroup_cookie<s(0)(0)(0)>[&];(D1:eowFunctionGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] gmplsLicenseGroup_cookie<s(0)(0)(0)>[&];(D1:gmplsLicenseGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] e2romConfigGroup_cookie<s(0)(0)(0)>[&];(D1:e2romConfigGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] systemMonitorGroup_cookie<s(0)(0)(0)>[&];(D1:systemMonitorGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cpuUtilEventGroup_cookie<s(0)(0)(0)>[&];(D1:cpuUtilEventGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] memUtilEventGroup_cookie<s(0)(0)(0)>[&];(D1:memUtilEventGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cfCardUtilEventGroup_cookie<s(0)(0)(0)>[&];(D1:cfCardUtilEventGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] flashUtilEventGroup_cookie<s(0)(0)(0)>[&];(D1:flashUtilEventGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] flashUtilThreshold_cookie<s(0)(0)(0)>[&];(D1:flashUtilThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] flashUtilEventEnable_cookie<s(0)(0)(0)>[&];(D1:flashUtilEventEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cfCardUtilThreshold_cookie<s(0)(0)(0)>[&];(D1:cfCardUtilThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cfCardUtilEventEnable_cookie<s(0)(0)(0)>[&];(D1:cfCardUtilEventEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] memUtilThreshold_cookie<s(0)(0)(0)>[&];(D1:memUtilThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] memUtilEventEnable_cookie<s(0)(0)(0)>[&];(D1:memUtilEventEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cpuUtilThreshold_cookie<s(0)(0)(0)>[&];(D1:cpuUtilThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cpuUtilEventEnable_cookie<s(0)(0)(0)>[&];(D1:cpuUtilEventEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbE2RomConfigTable_cookie<s(0)(0)(0)>[&];(D1:pbE2RomConfigTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbE2RomPageNo_cookie<s(0)(0)(0)>[&];(D1:pbE2RomPageNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbE2RomTlvData_cookie<s(0)(0)(0)>[&];(D1:pbE2RomTlvData_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] gmplsLicenseStatus_cookie<s(0)(0)(0)>[&];(D1:gmplsLicenseStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] gmplsLicenseSyncFlag_cookie<s(0)(0)(0)>[&];(D1:gmplsLicenseSyncFlag_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eowOhccTable_cookie<s(0)(0)(0)>[&];(D1:eowOhccTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siGlobalTable_cookie<s(0)(0)(0)>[&];(D1:siGlobalTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelManageTable_cookie<s(0)(0)(0)>[&];(D1:siChannelManageTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIdx_cookie<s(0)(0)(0)>[&];(D1:ifIdx_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelID_cookie<s(0)(0)(0)>[&];(D1:siChannelID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelGroup_cookie<s(0)(0)(0)>[&];(D1:siChannelGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelName_cookie<s(0)(0)(0)>[&];(D1:siChannelName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelEnable_cookie<s(0)(0)(0)>[&];(D1:siChannelEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelNoiseDetect_cookie<s(0)(0)(0)>[&];(D1:siChannelNoiseDetect_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelNoiseState_cookie<s(0)(0)(0)>[&];(D1:siChannelNoiseState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelRingManage_cookie<s(0)(0)(0)>[&];(D1:siChannelRingManage_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelRingManageState_cookie<s(0)(0)(0)>[&];(D1:siChannelRingManageState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelRingManageDelta_cookie<s(0)(0)(0)>[&];(D1:siChannelRingManageDelta_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelRingManageSwitch_cookie<s(0)(0)(0)>[&];(D1:siChannelRingManageSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siChannelGroupSetting_cookie<s(0)(0)(0)>[&];(D1:siChannelGroupSetting_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIdx_cookie<s(0)(0)(0)>[&];(D1:ifIdx_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siName_cookie<s(0)(0)(0)>[&];(D1:siName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siPhoneNum_cookie<s(0)(0)(0)>[&];(D1:siPhoneNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siClipper_cookie<s(0)(0)(0)>[&];(D1:siClipper_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siEnsThreshold_cookie<s(0)(0)(0)>[&];(D1:siEnsThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siErmThreshold_cookie<s(0)(0)(0)>[&];(D1:siErmThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siErmAtt_cookie<s(0)(0)(0)>[&];(D1:siErmAtt_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siErmStep_cookie<s(0)(0)(0)>[&];(D1:siErmStep_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siWorkingMode_cookie<s(0)(0)(0)>[&];(D1:siWorkingMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siUpdateDsp_cookie<s(0)(0)(0)>[&];(D1:siUpdateDsp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] siUpdateDspState_cookie<s(0)(0)(0)>[&];(D1:siUpdateDspState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eowOhccDestination_cookie<s(0)(0)(0)>[&];(D1:eowOhccDestination_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eowOhccSource_cookie<s(0)(0)(0)>[&];(D1:eowOhccSource_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] eowOhccRingManaged_cookie<s(0)(0)(0)>[&];(D1:eowOhccRingManaged_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeHoccCapability_cookie<s(0)(0)(0)>[&];(D1:nodeHoccCapability_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeLoccCapability_cookie<s(0)(0)(0)>[&];(D1:nodeLoccCapability_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtensionShelfID_cookie<s(0)(0)(0)>[&];(D1:pbExtensionShelfID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMainShelfIP_cookie<s(0)(0)(0)>[&];(D1:pbMainShelfIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMainShelfReadString_cookie<s(0)(0)(0)>[&];(D1:pbMainShelfReadString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMainShelfWriteString_cookie<s(0)(0)(0)>[&];(D1:pbMainShelfWriteString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMainShelfSlot_cookie<s(0)(0)(0)>[&];(D1:pbMainShelfSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMainShelfPort_cookie<s(0)(0)(0)>[&];(D1:pbMainShelfPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfIP_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfReadString_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfReadString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfWriteString_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfWriteString_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfSlot_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfPort_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfLabel_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfDesc_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfDesc_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtesionShelfRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbExtesionShelfRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] boardFlashFreeSpace_cookie<s(0)(0)(0)>[&];(D1:boardFlashFreeSpace_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cfCardFreeSpace_cookie<s(0)(0)(0)>[&];(D1:cfCardFreeSpace_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCFCardStatus_cookie<s(0)(0)(0)>[&];(D1:pbCFCardStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCFCardMIBValidity_cookie<s(0)(0)(0)>[&];(D1:pbCFCardMIBValidity_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbStandbyCFCardStatus_cookie<s(0)(0)(0)>[&];(D1:pbStandbyCFCardStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDateTimeStampSet_cookie<s(0)(0)(0)>[&];(D1:pbDateTimeStampSet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDateTimeStampGet_cookie<s(0)(0)(0)>[&];(D1:pbDateTimeStampGet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTimeZone_cookie<s(0)(0)(0)>[&];(D1:pbTimeZone_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNTPEnabled_cookie<s(0)(0)(0)>[&];(D1:pbNTPEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNTPIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbNTPIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNTPRequestPeriods_cookie<s(0)(0)(0)>[&];(D1:pbNTPRequestPeriods_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbWarmRebootNode_cookie<s(0)(0)(0)>[&];(D1:pbWarmRebootNode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbColdRebootNode_cookie<s(0)(0)(0)>[&];(D1:pbColdRebootNode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbResetNode_cookie<s(0)(0)(0)>[&];(D1:pbResetNode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeShutDown_cookie<s(0)(0)(0)>[&];(D1:pbNodeShutDown_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodePowerOff_cookie<s(0)(0)(0)>[&];(D1:pbNodePowerOff_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeType_cookie<s(0)(0)(0)>[&];(D1:pbNodeType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeSoftwareVersion_cookie<s(0)(0)(0)>[&];(D1:pbNodeSoftwareVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeIntSoftwareVersion_cookie<s(0)(0)(0)>[&];(D1:pbNodeIntSoftwareVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDatabaseVersion_cookie<s(0)(0)(0)>[&];(D1:pbDatabaseVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeAlarmEnabling_cookie<s(0)(0)(0)>[&];(D1:pbNodeAlarmEnabling_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAISEnabled_cookie<s(0)(0)(0)>[&];(D1:pbAISEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRDIEnabled_cookie<s(0)(0)(0)>[&];(D1:pbRDIEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmSuppress_cookie<s(0)(0)(0)>[&];(D1:pbAlarmSuppress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAlarmCutOff_cookie<s(0)(0)(0)>[&];(D1:pbAlarmCutOff_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbACOGroup_cookie<s(0)(0)(0)>[&];(D1:pbACOGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIoaTable_cookie<s(0)(0)(0)>[&];(D1:pbIoaTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDataExcDegTpNum_cookie<s(0)(0)(0)>[&];(D1:pbDataExcDegTpNum_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] alarmRuleSwitchGroup_cookie<s(0)(0)(0)>[&];(D1:alarmRuleSwitchGroup_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSEFEnabled_cookie<s(0)(0)(0)>[&];(D1:pbSEFEnabled_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] lofMonitoringSwitch_cookie<s(0)(0)(0)>[&];(D1:lofMonitoringSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] lomMonitoringSwitch_cookie<s(0)(0)(0)>[&];(D1:lomMonitoringSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] lopMonitoringSwitch_cookie<s(0)(0)(0)>[&];(D1:lopMonitoringSwitch_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIoaIndexNo_cookie<s(0)(0)(0)>[&];(D1:pbIoaIndexNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIoaLabel_cookie<s(0)(0)(0)>[&];(D1:pbIoaLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIoaEnableStatus_cookie<s(0)(0)(0)>[&];(D1:pbIoaEnableStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIoaStatus_cookie<s(0)(0)(0)>[&];(D1:pbIoaStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAudibleACO_cookie<s(0)(0)(0)>[&];(D1:pbAudibleACO_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbVisualACO_cookie<s(0)(0)(0)>[&];(D1:pbVisualACO_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtAudible_cookie<s(0)(0)(0)>[&];(D1:pbExtAudible_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbExtVisual_cookie<s(0)(0)(0)>[&];(D1:pbExtVisual_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNumberOfReboots_cookie<s(0)(0)(0)>[&];(D1:pbNumberOfReboots_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeDownDTS_cookie<s(0)(0)(0)>[&];(D1:pbNodeDownDTS_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibCmnd_cookie<s(0)(0)(0)>[&];(D1:nodeMibCmnd_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibCmndState_cookie<s(0)(0)(0)>[&];(D1:nodeMibCmndState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibCmndCancel_cookie<s(0)(0)(0)>[&];(D1:nodeMibCmndCancel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibNmsOperateArea_cookie<s(0)(0)(0)>[&];(D1:nodeMibNmsOperateArea_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibUpDownLoadStatus_cookie<s(0)(0)(0)>[&];(D1:nodeMibUpDownLoadStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibLastCommand_cookie<s(0)(0)(0)>[&];(D1:nodeMibLastCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMibFailedIndex_cookie<s(0)(0)(0)>[&];(D1:nodeMibFailedIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBackupMIBState_cookie<s(0)(0)(0)>[&];(D1:pbBackupMIBState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMIBOperationDateTimeStamp_cookie<s(0)(0)(0)>[&];(D1:pbMIBOperationDateTimeStamp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeMIBFilesNoCheck_cookie<s(0)(0)(0)>[&];(D1:nodeMIBFilesNoCheck_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeCurrRelease_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeCurrRelease_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeBackupRelease_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeBackupRelease_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeHostIP_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeHostIP_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeHostUsername_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeHostUsername_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeHostPassword_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeHostPassword_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeHostFileName_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeHostFileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeCommand_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeCmndState_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeCmndState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeStateDescr_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeStateDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbUpgradeLoadCancel_cookie<s(0)(0)(0)>[&];(D1:pbUpgradeLoadCancel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeUpgradeLastCommand_cookie<s(0)(0)(0)>[&];(D1:nodeUpgradeLastCommand_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeUpgradeFailedIndex_cookie<s(0)(0)(0)>[&];(D1:nodeUpgradeFailedIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] nodeUpgradeSwitchPhySlot_cookie<s(0)(0)(0)>[&];(D1:nodeUpgradeSwitchPhySlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareInfoTable_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareInfoTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareSlotNumber_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareIndication_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareIndication_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareRole_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareRole_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareName_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] upgradeSoftwareDatetime_cookie<s(0)(0)(0)>[&];(D1:upgradeSoftwareDatetime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPhysicalAdjacencyTable_cookie<s(0)(0)(0)>[&];(D1:pbPhysicalAdjacencyTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoLinkStarted_cookie<s(0)(0)(0)>[&];(D1:pbAutoLinkStarted_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoLinkTable_cookie<s(0)(0)(0)>[&];(D1:pbAutoLinkTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLocalSlot_cookie<s(0)(0)(0)>[&];(D1:pbLocalSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLocalPort_cookie<s(0)(0)(0)>[&];(D1:pbLocalPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemoteIPAddress_cookie<s(0)(0)(0)>[&];(D1:pbRemoteIPAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemoteSlot_cookie<s(0)(0)(0)>[&];(D1:pbRemoteSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemotePort_cookie<s(0)(0)(0)>[&];(D1:pbRemotePort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLocalSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbLocalSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLocalPortNumber_cookie<s(0)(0)(0)>[&];(D1:pbLocalPortNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemoteNodeMolnAdjacencyStatus_cookie<s(0)(0)(0)>[&];(D1:pbRemoteNodeMolnAdjacencyStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemoteNodeIPAddress_cookie<s(0)(0)(0)>[&];(D1:pbRemoteNodeIPAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemoteSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbRemoteSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRemotePortNumber_cookie<s(0)(0)(0)>[&];(D1:pbRemotePortNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLinkOperationalStatus_cookie<s(0)(0)(0)>[&];(D1:pbLinkOperationalStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbInterfaceDescr_cookie<s(0)(0)(0)>[&];(D1:pbInterfaceDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLinkGeneralType_cookie<s(0)(0)(0)>[&];(D1:pbLinkGeneralType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLinkRowStatus_cookie<s(0)(0)(0)>[&];(D1:pbLinkRowStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoSaver_cookie<s(0)(0)(0)>[&];(D1:pbAutoSaver_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoSaverFirstTimer_cookie<s(0)(0)(0)>[&];(D1:pbAutoSaverFirstTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbAutoSaverLastTimer_cookie<s(0)(0)(0)>[&];(D1:pbAutoSaverLastTimer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbConfigType_cookie<s(0)(0)(0)>[&];(D1:pbConfigType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSaveMib_cookie<s(0)(0)(0)>[&];(D1:pbSaveMib_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbClearMibSet_cookie<s(0)(0)(0)>[&];(D1:pbClearMibSet_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotType_cookie<s(0)(0)(0)>[&];(D1:pbSlotType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBoardType_cookie<s(0)(0)(0)>[&];(D1:pbBoardType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBoardFunction_cookie<s(0)(0)(0)>[&];(D1:pbBoardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCardState_cookie<s(0)(0)(0)>[&];(D1:pbCardState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCardDesiredState_cookie<s(0)(0)(0)>[&];(D1:pbCardDesiredState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNumberDisplay_cookie<s(0)(0)(0)>[&];(D1:pbSlotNumberDisplay_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotReset_cookie<s(0)(0)(0)>[&];(D1:pbSlotReset_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotNoFailuresTotal_cookie<s(0)(0)(0)>[&];(D1:pbSlotNoFailuresTotal_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotResetNoFailures_cookie<s(0)(0)(0)>[&];(D1:pbSlotResetNoFailures_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotResetDuration_cookie<s(0)(0)(0)>[&];(D1:pbSlotResetDuration_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotName_cookie<s(0)(0)(0)>[&];(D1:pbSlotName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotDescr_cookie<s(0)(0)(0)>[&];(D1:pbSlotDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotIfCardDumb_cookie<s(0)(0)(0)>[&];(D1:pbSlotIfCardDumb_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotCrashDumpAvail_cookie<s(0)(0)(0)>[&];(D1:pbSlotCrashDumpAvail_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotLastBoardType_cookie<s(0)(0)(0)>[&];(D1:pbSlotLastBoardType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotBoardTypeDifference_cookie<s(0)(0)(0)>[&];(D1:pbSlotBoardTypeDifference_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotExplicitDeletion_cookie<s(0)(0)(0)>[&];(D1:pbSlotExplicitDeletion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbProvisionedCardType_cookie<s(0)(0)(0)>[&];(D1:pbProvisionedCardType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotCardSpecificInfo_cookie<s(0)(0)(0)>[&];(D1:pbSlotCardSpecificInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotTemperatureThreshold_cookie<s(0)(0)(0)>[&];(D1:pbSlotTemperatureThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotTemperatureHysteresis_cookie<s(0)(0)(0)>[&];(D1:pbSlotTemperatureHysteresis_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotTemperatureCleanThreshold_cookie<s(0)(0)(0)>[&];(D1:pbSlotTemperatureCleanThreshold_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotLastBoardFunction_cookie<s(0)(0)(0)>[&];(D1:pbSlotLastBoardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDiagMode_cookie<s(0)(0)(0)>[&];(D1:pbDiagMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDiagActive_cookie<s(0)(0)(0)>[&];(D1:pbDiagActive_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLogicalSlotNumber_cookie<s(0)(0)(0)>[&];(D1:pbLogicalSlotNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotDisable_cookie<s(0)(0)(0)>[&];(D1:pbSlotDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbForceResetSlot_cookie<s(0)(0)(0)>[&];(D1:pbForceResetSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotFailureLedColor_cookie<s(0)(0)(0)>[&];(D1:pbSlotFailureLedColor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotActiveLedColor_cookie<s(0)(0)(0)>[&];(D1:pbSlotActiveLedColor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBoardSerialNumber_cookie<s(0)(0)(0)>[&];(D1:pbBoardSerialNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBoardOption_cookie<s(0)(0)(0)>[&];(D1:pbBoardOption_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbCode_cookie<s(0)(0)(0)>[&];(D1:pbCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLatchState_cookie<s(0)(0)(0)>[&];(D1:pbLatchState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlotAlarmDisable_cookie<s(0)(0)(0)>[&];(D1:pbSlotAlarmDisable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] provisionedCardFunction_cookie<s(0)(0)(0)>[&];(D1:provisionedCardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] slotConfigOption_cookie<s(0)(0)(0)>[&];(D1:slotConfigOption_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardSoftwareVersion_cookie<s(0)(0)(0)>[&];(D1:cardSoftwareVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardBootVersion_cookie<s(0)(0)(0)>[&];(D1:cardBootVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardBootDatetime_cookie<s(0)(0)(0)>[&];(D1:cardBootDatetime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardHardwareVersion_cookie<s(0)(0)(0)>[&];(D1:cardHardwareVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardFusionVersion_cookie<s(0)(0)(0)>[&];(D1:cardFusionVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] cardFpgaVersion_cookie<s(0)(0)(0)>[&];(D1:cardFpgaVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] macAddress_cookie<s(0)(0)(0)>[&];(D1:macAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] slotMaxDCCNumber_cookie<s(0)(0)(0)>[&];(D1:slotMaxDCCNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] slotMapValue_cookie<s(0)(0)(0)>[&];(D1:slotMapValue_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedTest_cookie<s(0)(0)(0)>[&];(D1:pbLedTest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedTable_cookie<s(0)(0)(0)>[&];(D1:pbLedTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedSlotNo_cookie<s(0)(0)(0)>[&];(D1:pbLedSlotNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedIndexNo_cookie<s(0)(0)(0)>[&];(D1:pbLedIndexNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedLabel_cookie<s(0)(0)(0)>[&];(D1:pbLedLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLedColor_cookie<s(0)(0)(0)>[&];(D1:pbLedColor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMode_cookie<s(0)(0)(0)>[&];(D1:pbMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLabel_cookie<s(0)(0)(0)>[&];(D1:pbLabel_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbLocation_cookie<s(0)(0)(0)>[&];(D1:pbLocation_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDescription_cookie<s(0)(0)(0)>[&];(D1:pbDescription_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbContact_cookie<s(0)(0)(0)>[&];(D1:pbContact_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSerialNumber_cookie<s(0)(0)(0)>[&];(D1:pbSerialNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRelease_cookie<s(0)(0)(0)>[&];(D1:pbRelease_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBootImageVersion_cookie<s(0)(0)(0)>[&];(D1:pbBootImageVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBackplaneHwVersion_cookie<s(0)(0)(0)>[&];(D1:pbBackplaneHwVersion_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbBackplaneCode_cookie<s(0)(0)(0)>[&];(D1:pbBackplaneCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpAddress_cookie<s(0)(0)(0)>[&];(D1:pbIpAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpMask_cookie<s(0)(0)(0)>[&];(D1:pbIpMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGatewayAddress_cookie<s(0)(0)(0)>[&];(D1:pbGatewayAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetAddress_cookie<s(0)(0)(0)>[&];(D1:pbEthernetAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetMask_cookie<s(0)(0)(0)>[&];(D1:pbEthernetMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSystemMacAddress_cookie<s(0)(0)(0)>[&];(D1:pbSystemMacAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSlaveEthernetAddress_cookie<s(0)(0)(0)>[&];(D1:pbSlaveEthernetAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetAddressSecondary_cookie<s(0)(0)(0)>[&];(D1:pbEthernetAddressSecondary_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetMaskSecondary_cookie<s(0)(0)(0)>[&];(D1:pbEthernetMaskSecondary_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetEnable_cookie<s(0)(0)(0)>[&];(D1:pbEthernetEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGMPLSIPAddress_cookie<s(0)(0)(0)>[&];(D1:pbGMPLSIPAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGMPLSIPMask_cookie<s(0)(0)(0)>[&];(D1:pbGMPLSIPMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMgmtPort1Status_cookie<s(0)(0)(0)>[&];(D1:pbMgmtPort1Status_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbMgmtPort2Status_cookie<s(0)(0)(0)>[&];(D1:pbMgmtPort2Status_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseModules_cookie<s(0)(0)(0)>[&];(D1:enterpriseModules_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseNetworkingProducts_cookie<s(0)(0)(0)>[&];(D1:enterpriseNetworkingProducts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] product1Reg_cookie<s(0)(0)(0)>[&];(D1:product1Reg_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseGlobalRegModule_cookie<s(0)(0)(0)>[&];(D1:enterpriseGlobalRegModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] productSeries1MibModule_cookie<s(0)(0)(0)>[&];(D1:productSeries1MibModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSecurityModule_cookie<s(0)(0)(0)>[&];(D1:pbSecurityModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEventsModule_cookie<s(0)(0)(0)>[&];(D1:pbEventsModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSonetModule_cookie<s(0)(0)(0)>[&];(D1:pbSonetModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseGlobalTCModule_cookie<s(0)(0)(0)>[&];(D1:enterpriseGlobalTCModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseOAModule_cookie<s(0)(0)(0)>[&];(D1:enterpriseOAModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSDHProtectionModule_cookie<s(0)(0)(0)>[&];(D1:pbSDHProtectionModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseRstpMIB_cookie<s(0)(0)(0)>[&];(D1:enterpriseRstpMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbEthernetModule_cookie<s(0)(0)(0)>[&];(D1:pbEthernetModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbTMSModule_cookie<s(0)(0)(0)>[&];(D1:pbTMSModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXCContextModule_cookie<s(0)(0)(0)>[&];(D1:pbXCContextModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbXCModule_cookie<s(0)(0)(0)>[&];(D1:pbXCModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbSonetSDHPMModule_cookie<s(0)(0)(0)>[&];(D1:pbSonetSDHPMModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbNodeModule_cookie<s(0)(0)(0)>[&];(D1:pbNodeModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbRprModule_cookie<s(0)(0)(0)>[&];(D1:pbRprModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDccModule_cookie<s(0)(0)(0)>[&];(D1:pbDccModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGvrpModule_cookie<s(0)(0)(0)>[&];(D1:pbGvrpModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbOsiModule_cookie<s(0)(0)(0)>[&];(D1:pbOsiModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIpTunnelModule_cookie<s(0)(0)(0)>[&];(D1:pbIpTunnelModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseMstpMIB_cookie<s(0)(0)(0)>[&];(D1:enterpriseMstpMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] enterpriseEOSModule_cookie<s(0)(0)(0)>[&];(D1:enterpriseEOSModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbGmrpModule_cookie<s(0)(0)(0)>[&];(D1:pbGmrpModule_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPrivateManagement_cookie<s(0)(0)(0)>[&];(D1:pbPrivateManagement_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] mib_2_cookie<s(0)(0)(0)>[&];(D1:mib_2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] system_cookie<s(0)(0)(0)>[&];(D1:system_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] at_cookie<s(0)(0)(0)>[&];(D1:at_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] interfaces_cookie<s(0)(0)(0)>[&];(D1:interfaces_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ip_cookie<s(0)(0)(0)>[&];(D1:ip_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmp_cookie<s(0)(0)(0)>[&];(D1:icmp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcp_cookie<s(0)(0)(0)>[&];(D1:tcp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udp_cookie<s(0)(0)(0)>[&];(D1:udp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egp_cookie<s(0)(0)(0)>[&];(D1:egp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] transmission_cookie<s(0)(0)(0)>[&];(D1:transmission_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmp_cookie<s(0)(0)(0)>[&];(D1:snmp_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ianaifType_cookie<s(0)(0)(0)>[&];(D1:ianaifType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifMIB_cookie<s(0)(0)(0)>[&];(D1:ifMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxMIB_cookie<s(0)(0)(0)>[&];(D1:agentxMIB_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxObjects_cookie<s(0)(0)(0)>[&];(D1:agentxObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConformance_cookie<s(0)(0)(0)>[&];(D1:agentxConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxMIBGroups_cookie<s(0)(0)(0)>[&];(D1:agentxMIBGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxMIBCompliances_cookie<s(0)(0)(0)>[&];(D1:agentxMIBCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxGeneral_cookie<s(0)(0)(0)>[&];(D1:agentxGeneral_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnection_cookie<s(0)(0)(0)>[&];(D1:agentxConnection_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSession_cookie<s(0)(0)(0)>[&];(D1:agentxSession_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegistration_cookie<s(0)(0)(0)>[&];(D1:agentxRegistration_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegistrationTableLastChange_cookie<s(0)(0)(0)>[&];(D1:agentxRegistrationTableLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegistrationTable_cookie<s(0)(0)(0)>[&];(D1:agentxRegistrationTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnIndex_cookie<s(0)(0)(0)>[&];(D1:agentxConnIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionIndex_cookie<s(0)(0)(0)>[&];(D1:agentxSessionIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegIndex_cookie<s(0)(0)(0)>[&];(D1:agentxRegIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegContext_cookie<s(0)(0)(0)>[&];(D1:agentxRegContext_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegStart_cookie<s(0)(0)(0)>[&];(D1:agentxRegStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegRangeSubId_cookie<s(0)(0)(0)>[&];(D1:agentxRegRangeSubId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegUpperBound_cookie<s(0)(0)(0)>[&];(D1:agentxRegUpperBound_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegPriority_cookie<s(0)(0)(0)>[&];(D1:agentxRegPriority_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegTimeout_cookie<s(0)(0)(0)>[&];(D1:agentxRegTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxRegInstance_cookie<s(0)(0)(0)>[&];(D1:agentxRegInstance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionTableLastChange_cookie<s(0)(0)(0)>[&];(D1:agentxSessionTableLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionTable_cookie<s(0)(0)(0)>[&];(D1:agentxSessionTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnIndex_cookie<s(0)(0)(0)>[&];(D1:agentxConnIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionIndex_cookie<s(0)(0)(0)>[&];(D1:agentxSessionIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionObjectID_cookie<s(0)(0)(0)>[&];(D1:agentxSessionObjectID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionDescr_cookie<s(0)(0)(0)>[&];(D1:agentxSessionDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionAdminStatus_cookie<s(0)(0)(0)>[&];(D1:agentxSessionAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionOpenTime_cookie<s(0)(0)(0)>[&];(D1:agentxSessionOpenTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionAgentXVer_cookie<s(0)(0)(0)>[&];(D1:agentxSessionAgentXVer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxSessionTimeout_cookie<s(0)(0)(0)>[&];(D1:agentxSessionTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnTableLastChange_cookie<s(0)(0)(0)>[&];(D1:agentxConnTableLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnectionTable_cookie<s(0)(0)(0)>[&];(D1:agentxConnectionTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnIndex_cookie<s(0)(0)(0)>[&];(D1:agentxConnIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnOpenTime_cookie<s(0)(0)(0)>[&];(D1:agentxConnOpenTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnTransportDomain_cookie<s(0)(0)(0)>[&];(D1:agentxConnTransportDomain_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxConnTransportAddress_cookie<s(0)(0)(0)>[&];(D1:agentxConnTransportAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxDefaultTimeout_cookie<s(0)(0)(0)>[&];(D1:agentxDefaultTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] agentxMasterAgentXVer_cookie<s(0)(0)(0)>[&];(D1:agentxMasterAgentXVer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifMIBObjects_cookie<s(0)(0)(0)>[&];(D1:ifMIBObjects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifConformance_cookie<s(0)(0)(0)>[&];(D1:ifConformance_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifGroups_cookie<s(0)(0)(0)>[&];(D1:ifGroups_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifCompliances_cookie<s(0)(0)(0)>[&];(D1:ifCompliances_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifXTable_cookie<s(0)(0)(0)>[&];(D1:ifXTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTableLastChange_cookie<s(0)(0)(0)>[&];(D1:ifTableLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestTable_cookie<s(0)(0)(0)>[&];(D1:ifTestTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifRcvAddressTable_cookie<s(0)(0)(0)>[&];(D1:ifRcvAddressTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifStackTable_cookie<s(0)(0)(0)>[&];(D1:ifStackTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifStackLastChange_cookie<s(0)(0)(0)>[&];(D1:ifStackLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifStackHigherLayer_cookie<s(0)(0)(0)>[&];(D1:ifStackHigherLayer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifStackLowerLayer_cookie<s(0)(0)(0)>[&];(D1:ifStackLowerLayer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifStackStatus_cookie<s(0)(0)(0)>[&];(D1:ifStackStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIndex_cookie<s(0)(0)(0)>[&];(D1:ifIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifRcvAddressAddress_cookie<s(0)(0)(0)>[&];(D1:ifRcvAddressAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifRcvAddressStatus_cookie<s(0)(0)(0)>[&];(D1:ifRcvAddressStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifRcvAddressType_cookie<s(0)(0)(0)>[&];(D1:ifRcvAddressType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIndex_cookie<s(0)(0)(0)>[&];(D1:ifIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestId_cookie<s(0)(0)(0)>[&];(D1:ifTestId_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestStatus_cookie<s(0)(0)(0)>[&];(D1:ifTestStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestType_cookie<s(0)(0)(0)>[&];(D1:ifTestType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestResult_cookie<s(0)(0)(0)>[&];(D1:ifTestResult_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestCode_cookie<s(0)(0)(0)>[&];(D1:ifTestCode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTestOwner_cookie<s(0)(0)(0)>[&];(D1:ifTestOwner_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIndex_cookie<s(0)(0)(0)>[&];(D1:ifIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifName_cookie<s(0)(0)(0)>[&];(D1:ifName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInMulticastPkts_cookie<s(0)(0)(0)>[&];(D1:ifInMulticastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInBroadcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifInBroadcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutMulticastPkts_cookie<s(0)(0)(0)>[&];(D1:ifOutMulticastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutBroadcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifOutBroadcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCInOctets_cookie<s(0)(0)(0)>[&];(D1:ifHCInOctets_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCInUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCInUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCInMulticastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCInMulticastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCInBroadcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCInBroadcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCOutOctets_cookie<s(0)(0)(0)>[&];(D1:ifHCOutOctets_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCOutUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCOutUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCOutMulticastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCOutMulticastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHCOutBroadcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifHCOutBroadcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifLinkUpDownTrapEnable_cookie<s(0)(0)(0)>[&];(D1:ifLinkUpDownTrapEnable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifHighSpeed_cookie<s(0)(0)(0)>[&];(D1:ifHighSpeed_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifPromiscuousMode_cookie<s(0)(0)(0)>[&];(D1:ifPromiscuousMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifConnectorPresent_cookie<s(0)(0)(0)>[&];(D1:ifConnectorPresent_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifAlias_cookie<s(0)(0)(0)>[&];(D1:ifAlias_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifCounterDiscontinuityTime_cookie<s(0)(0)(0)>[&];(D1:ifCounterDiscontinuityTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInPkts_cookie<s(0)(0)(0)>[&];(D1:snmpInPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInBadVersions_cookie<s(0)(0)(0)>[&];(D1:snmpInBadVersions_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutPkts_cookie<s(0)(0)(0)>[&];(D1:snmpOutPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInBadCommunityNames_cookie<s(0)(0)(0)>[&];(D1:snmpInBadCommunityNames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInBadCommunityUses_cookie<s(0)(0)(0)>[&];(D1:snmpInBadCommunityUses_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInASNParseErrs_cookie<s(0)(0)(0)>[&];(D1:snmpInASNParseErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpEnableAuthenTraps_cookie<s(0)(0)(0)>[&];(D1:snmpEnableAuthenTraps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutTraps_cookie<s(0)(0)(0)>[&];(D1:snmpOutTraps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutGetResponses_cookie<s(0)(0)(0)>[&];(D1:snmpOutGetResponses_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutSetRequests_cookie<s(0)(0)(0)>[&];(D1:snmpOutSetRequests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutGetNexts_cookie<s(0)(0)(0)>[&];(D1:snmpOutGetNexts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutGetRequests_cookie<s(0)(0)(0)>[&];(D1:snmpOutGetRequests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutGenErrs_cookie<s(0)(0)(0)>[&];(D1:snmpOutGenErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutBadValues_cookie<s(0)(0)(0)>[&];(D1:snmpOutBadValues_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutNoSuchNames_cookie<s(0)(0)(0)>[&];(D1:snmpOutNoSuchNames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpOutTooBigs_cookie<s(0)(0)(0)>[&];(D1:snmpOutTooBigs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInTraps_cookie<s(0)(0)(0)>[&];(D1:snmpInTraps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInGetResponses_cookie<s(0)(0)(0)>[&];(D1:snmpInGetResponses_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInSetRequests_cookie<s(0)(0)(0)>[&];(D1:snmpInSetRequests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInGetNexts_cookie<s(0)(0)(0)>[&];(D1:snmpInGetNexts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInGetRequests_cookie<s(0)(0)(0)>[&];(D1:snmpInGetRequests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInTotalSetVars_cookie<s(0)(0)(0)>[&];(D1:snmpInTotalSetVars_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInTotalReqVars_cookie<s(0)(0)(0)>[&];(D1:snmpInTotalReqVars_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInGenErrs_cookie<s(0)(0)(0)>[&];(D1:snmpInGenErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInReadOnlys_cookie<s(0)(0)(0)>[&];(D1:snmpInReadOnlys_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInBadValues_cookie<s(0)(0)(0)>[&];(D1:snmpInBadValues_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInNoSuchNames_cookie<s(0)(0)(0)>[&];(D1:snmpInNoSuchNames_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpInTooBigs_cookie<s(0)(0)(0)>[&];(D1:snmpInTooBigs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpSilentDrops_cookie<s(0)(0)(0)>[&];(D1:snmpSilentDrops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] snmpProxyDrops_cookie<s(0)(0)(0)>[&];(D1:snmpProxyDrops_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpInMsgs_cookie<s(0)(0)(0)>[&];(D1:egpInMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpInErrors_cookie<s(0)(0)(0)>[&];(D1:egpInErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpOutMsgs_cookie<s(0)(0)(0)>[&];(D1:egpOutMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpOutErrors_cookie<s(0)(0)(0)>[&];(D1:egpOutErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighTable_cookie<s(0)(0)(0)>[&];(D1:egpNeighTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpAs_cookie<s(0)(0)(0)>[&];(D1:egpAs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighAddr_cookie<s(0)(0)(0)>[&];(D1:egpNeighAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighState_cookie<s(0)(0)(0)>[&];(D1:egpNeighState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighAs_cookie<s(0)(0)(0)>[&];(D1:egpNeighAs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighInMsgs_cookie<s(0)(0)(0)>[&];(D1:egpNeighInMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighInErrs_cookie<s(0)(0)(0)>[&];(D1:egpNeighInErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighOutMsgs_cookie<s(0)(0)(0)>[&];(D1:egpNeighOutMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighOutErrs_cookie<s(0)(0)(0)>[&];(D1:egpNeighOutErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighInErrMsgs_cookie<s(0)(0)(0)>[&];(D1:egpNeighInErrMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighOutErrMsgs_cookie<s(0)(0)(0)>[&];(D1:egpNeighOutErrMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighStateUps_cookie<s(0)(0)(0)>[&];(D1:egpNeighStateUps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighStateDowns_cookie<s(0)(0)(0)>[&];(D1:egpNeighStateDowns_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighIntervalHello_cookie<s(0)(0)(0)>[&];(D1:egpNeighIntervalHello_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighIntervalPoll_cookie<s(0)(0)(0)>[&];(D1:egpNeighIntervalPoll_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighMode_cookie<s(0)(0)(0)>[&];(D1:egpNeighMode_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] egpNeighEventTrigger_cookie<s(0)(0)(0)>[&];(D1:egpNeighEventTrigger_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpInDatagrams_cookie<s(0)(0)(0)>[&];(D1:udpInDatagrams_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpNoPorts_cookie<s(0)(0)(0)>[&];(D1:udpNoPorts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpInErrors_cookie<s(0)(0)(0)>[&];(D1:udpInErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpOutDatagrams_cookie<s(0)(0)(0)>[&];(D1:udpOutDatagrams_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpTable_cookie<s(0)(0)(0)>[&];(D1:udpTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpLocalAddress_cookie<s(0)(0)(0)>[&];(D1:udpLocalAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] udpLocalPort_cookie<s(0)(0)(0)>[&];(D1:udpLocalPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpRtoAlgorithm_cookie<s(0)(0)(0)>[&];(D1:tcpRtoAlgorithm_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpRtoMin_cookie<s(0)(0)(0)>[&];(D1:tcpRtoMin_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpRtoMax_cookie<s(0)(0)(0)>[&];(D1:tcpRtoMax_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpMaxConn_cookie<s(0)(0)(0)>[&];(D1:tcpMaxConn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpActiveOpens_cookie<s(0)(0)(0)>[&];(D1:tcpActiveOpens_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpPassiveOpens_cookie<s(0)(0)(0)>[&];(D1:tcpPassiveOpens_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpAttemptFails_cookie<s(0)(0)(0)>[&];(D1:tcpAttemptFails_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpEstabResets_cookie<s(0)(0)(0)>[&];(D1:tcpEstabResets_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpCurrEstab_cookie<s(0)(0)(0)>[&];(D1:tcpCurrEstab_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpInSegs_cookie<s(0)(0)(0)>[&];(D1:tcpInSegs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpOutSegs_cookie<s(0)(0)(0)>[&];(D1:tcpOutSegs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpRetransSegs_cookie<s(0)(0)(0)>[&];(D1:tcpRetransSegs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnTable_cookie<s(0)(0)(0)>[&];(D1:tcpConnTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpInErrs_cookie<s(0)(0)(0)>[&];(D1:tcpInErrs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpOutRsts_cookie<s(0)(0)(0)>[&];(D1:tcpOutRsts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnLocalAddress_cookie<s(0)(0)(0)>[&];(D1:tcpConnLocalAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnLocalPort_cookie<s(0)(0)(0)>[&];(D1:tcpConnLocalPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnRemAddress_cookie<s(0)(0)(0)>[&];(D1:tcpConnRemAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnRemPort_cookie<s(0)(0)(0)>[&];(D1:tcpConnRemPort_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] tcpConnState_cookie<s(0)(0)(0)>[&];(D1:tcpConnState_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInMsgs_cookie<s(0)(0)(0)>[&];(D1:icmpInMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInErrors_cookie<s(0)(0)(0)>[&];(D1:icmpInErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInDestUnreachs_cookie<s(0)(0)(0)>[&];(D1:icmpInDestUnreachs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInTimeExcds_cookie<s(0)(0)(0)>[&];(D1:icmpInTimeExcds_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInParmProbs_cookie<s(0)(0)(0)>[&];(D1:icmpInParmProbs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInSrcQuenchs_cookie<s(0)(0)(0)>[&];(D1:icmpInSrcQuenchs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInRedirects_cookie<s(0)(0)(0)>[&];(D1:icmpInRedirects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInEchos_cookie<s(0)(0)(0)>[&];(D1:icmpInEchos_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInEchoReps_cookie<s(0)(0)(0)>[&];(D1:icmpInEchoReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInTimestamps_cookie<s(0)(0)(0)>[&];(D1:icmpInTimestamps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInTimestampReps_cookie<s(0)(0)(0)>[&];(D1:icmpInTimestampReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInAddrMasks_cookie<s(0)(0)(0)>[&];(D1:icmpInAddrMasks_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpInAddrMaskReps_cookie<s(0)(0)(0)>[&];(D1:icmpInAddrMaskReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutMsgs_cookie<s(0)(0)(0)>[&];(D1:icmpOutMsgs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutErrors_cookie<s(0)(0)(0)>[&];(D1:icmpOutErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutDestUnreachs_cookie<s(0)(0)(0)>[&];(D1:icmpOutDestUnreachs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutTimeExcds_cookie<s(0)(0)(0)>[&];(D1:icmpOutTimeExcds_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutParmProbs_cookie<s(0)(0)(0)>[&];(D1:icmpOutParmProbs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutSrcQuenchs_cookie<s(0)(0)(0)>[&];(D1:icmpOutSrcQuenchs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutRedirects_cookie<s(0)(0)(0)>[&];(D1:icmpOutRedirects_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutEchos_cookie<s(0)(0)(0)>[&];(D1:icmpOutEchos_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutEchoReps_cookie<s(0)(0)(0)>[&];(D1:icmpOutEchoReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutTimestamps_cookie<s(0)(0)(0)>[&];(D1:icmpOutTimestamps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutTimestampReps_cookie<s(0)(0)(0)>[&];(D1:icmpOutTimestampReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutAddrMasks_cookie<s(0)(0)(0)>[&];(D1:icmpOutAddrMasks_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] icmpOutAddrMaskReps_cookie<s(0)(0)(0)>[&];(D1:icmpOutAddrMaskReps_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipForwarding_cookie<s(0)(0)(0)>[&];(D1:ipForwarding_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipDefaultTTL_cookie<s(0)(0)(0)>[&];(D1:ipDefaultTTL_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInReceives_cookie<s(0)(0)(0)>[&];(D1:ipInReceives_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInHdrErrors_cookie<s(0)(0)(0)>[&];(D1:ipInHdrErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInAddrErrors_cookie<s(0)(0)(0)>[&];(D1:ipInAddrErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipForwDatagrams_cookie<s(0)(0)(0)>[&];(D1:ipForwDatagrams_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInUnknownProtos_cookie<s(0)(0)(0)>[&];(D1:ipInUnknownProtos_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInDiscards_cookie<s(0)(0)(0)>[&];(D1:ipInDiscards_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipInDelivers_cookie<s(0)(0)(0)>[&];(D1:ipInDelivers_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipOutRequests_cookie<s(0)(0)(0)>[&];(D1:ipOutRequests_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipOutDiscards_cookie<s(0)(0)(0)>[&];(D1:ipOutDiscards_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipOutNoRoutes_cookie<s(0)(0)(0)>[&];(D1:ipOutNoRoutes_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipReasmTimeout_cookie<s(0)(0)(0)>[&];(D1:ipReasmTimeout_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipReasmReqds_cookie<s(0)(0)(0)>[&];(D1:ipReasmReqds_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipReasmOKs_cookie<s(0)(0)(0)>[&];(D1:ipReasmOKs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipReasmFails_cookie<s(0)(0)(0)>[&];(D1:ipReasmFails_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipFragOKs_cookie<s(0)(0)(0)>[&];(D1:ipFragOKs_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipFragFails_cookie<s(0)(0)(0)>[&];(D1:ipFragFails_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipFragCreates_cookie<s(0)(0)(0)>[&];(D1:ipFragCreates_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAddrTable_cookie<s(0)(0)(0)>[&];(D1:ipAddrTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteTable_cookie<s(0)(0)(0)>[&];(D1:ipRouteTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipNetToMediaTable_cookie<s(0)(0)(0)>[&];(D1:ipNetToMediaTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRoutingDiscards_cookie<s(0)(0)(0)>[&];(D1:ipRoutingDiscards_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipNetToMediaIfIndex_cookie<s(0)(0)(0)>[&];(D1:ipNetToMediaIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipNetToMediaNetAddress_cookie<s(0)(0)(0)>[&];(D1:ipNetToMediaNetAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipNetToMediaPhysAddress_cookie<s(0)(0)(0)>[&];(D1:ipNetToMediaPhysAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipNetToMediaType_cookie<s(0)(0)(0)>[&];(D1:ipNetToMediaType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteDest_cookie<s(0)(0)(0)>[&];(D1:ipRouteDest_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteIfIndex_cookie<s(0)(0)(0)>[&];(D1:ipRouteIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMetric1_cookie<s(0)(0)(0)>[&];(D1:ipRouteMetric1_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMetric2_cookie<s(0)(0)(0)>[&];(D1:ipRouteMetric2_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMetric3_cookie<s(0)(0)(0)>[&];(D1:ipRouteMetric3_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMetric4_cookie<s(0)(0)(0)>[&];(D1:ipRouteMetric4_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteNextHop_cookie<s(0)(0)(0)>[&];(D1:ipRouteNextHop_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteType_cookie<s(0)(0)(0)>[&];(D1:ipRouteType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteProto_cookie<s(0)(0)(0)>[&];(D1:ipRouteProto_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteAge_cookie<s(0)(0)(0)>[&];(D1:ipRouteAge_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMask_cookie<s(0)(0)(0)>[&];(D1:ipRouteMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteMetric5_cookie<s(0)(0)(0)>[&];(D1:ipRouteMetric5_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipRouteInfo_cookie<s(0)(0)(0)>[&];(D1:ipRouteInfo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAdEntAddr_cookie<s(0)(0)(0)>[&];(D1:ipAdEntAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAdEntIfIndex_cookie<s(0)(0)(0)>[&];(D1:ipAdEntIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAdEntNetMask_cookie<s(0)(0)(0)>[&];(D1:ipAdEntNetMask_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAdEntBcastAddr_cookie<s(0)(0)(0)>[&];(D1:ipAdEntBcastAddr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ipAdEntReasmMaxSize_cookie<s(0)(0)(0)>[&];(D1:ipAdEntReasmMaxSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifNumber_cookie<s(0)(0)(0)>[&];(D1:ifNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifTable_cookie<s(0)(0)(0)>[&];(D1:ifTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifIndex_cookie<s(0)(0)(0)>[&];(D1:ifIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifDescr_cookie<s(0)(0)(0)>[&];(D1:ifDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifType_cookie<s(0)(0)(0)>[&];(D1:ifType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifMtu_cookie<s(0)(0)(0)>[&];(D1:ifMtu_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifSpeed_cookie<s(0)(0)(0)>[&];(D1:ifSpeed_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifPhysAddress_cookie<s(0)(0)(0)>[&];(D1:ifPhysAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifAdminStatus_cookie<s(0)(0)(0)>[&];(D1:ifAdminStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOperStatus_cookie<s(0)(0)(0)>[&];(D1:ifOperStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifLastChange_cookie<s(0)(0)(0)>[&];(D1:ifLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInOctets_cookie<s(0)(0)(0)>[&];(D1:ifInOctets_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifInUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInNUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifInNUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInDiscards_cookie<s(0)(0)(0)>[&];(D1:ifInDiscards_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInErrors_cookie<s(0)(0)(0)>[&];(D1:ifInErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifInUnknownProtos_cookie<s(0)(0)(0)>[&];(D1:ifInUnknownProtos_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutOctets_cookie<s(0)(0)(0)>[&];(D1:ifOutOctets_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifOutUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutNUcastPkts_cookie<s(0)(0)(0)>[&];(D1:ifOutNUcastPkts_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutDiscards_cookie<s(0)(0)(0)>[&];(D1:ifOutDiscards_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutErrors_cookie<s(0)(0)(0)>[&];(D1:ifOutErrors_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifOutQLen_cookie<s(0)(0)(0)>[&];(D1:ifOutQLen_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] ifSpecific_cookie<s(0)(0)(0)>[&];(D1:ifSpecific_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] atTable_cookie<s(0)(0)(0)>[&];(D1:atTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] atIfIndex_cookie<s(0)(0)(0)>[&];(D1:atIfIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] atNetAddress_cookie<s(0)(0)(0)>[&];(D1:atNetAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] atPhysAddress_cookie<s(0)(0)(0)>[&];(D1:atPhysAddress_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysDescr_cookie<s(0)(0)(0)>[&];(D1:sysDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysObjectID_cookie<s(0)(0)(0)>[&];(D1:sysObjectID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysUpTime_cookie<s(0)(0)(0)>[&];(D1:sysUpTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysContact_cookie<s(0)(0)(0)>[&];(D1:sysContact_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysName_cookie<s(0)(0)(0)>[&];(D1:sysName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysLocation_cookie<s(0)(0)(0)>[&];(D1:sysLocation_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysServices_cookie<s(0)(0)(0)>[&];(D1:sysServices_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORLastChange_cookie<s(0)(0)(0)>[&];(D1:sysORLastChange_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORTable_cookie<s(0)(0)(0)>[&];(D1:sysORTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORIndex_cookie<s(0)(0)(0)>[&];(D1:sysORIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORID_cookie<s(0)(0)(0)>[&];(D1:sysORID_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORDescr_cookie<s(0)(0)(0)>[&];(D1:sysORDescr_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] sysORUpTime_cookie<s(0)(0)(0)>[&];(D1:sysORUpTime_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applTable_cookie<s(0)(0)(0)>[&];(D1:applTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplTable_cookie<s(0)(0)(0)>[&];(D1:aapplTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bootpTable_cookie<s(0)(0)(0)>[&];(D1:bootpTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcTable_cookie<s(0)(0)(0)>[&];(D1:pbIntVcTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFileSystemTable_cookie<s(0)(0)(0)>[&];(D1:pbFileSystemTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDivaMTable_cookie<s(0)(0)(0)>[&];(D1:pbDivaMTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleTable_cookie<s(0)(0)(0)>[&];(D1:moduleTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applTableVer_cookie<s(0)(0)(0)>[&];(D1:applTableVer_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLedsTable_cookie<s(0)(0)(0)>[&];(D1:pbPortLedsTable_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLedProxySlot_cookie<s(0)(0)(0)>[&];(D1:pbPortLedProxySlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLedSlot_cookie<s(0)(0)(0)>[&];(D1:pbPortLedSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLedIndexNo_cookie<s(0)(0)(0)>[&];(D1:pbPortLedIndexNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbPortLedColor_cookie<s(0)(0)(0)>[&];(D1:pbPortLedColor_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleIndex_cookie<s(0)(0)(0)>[&];(D1:moduleIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleBoardFunction_cookie<s(0)(0)(0)>[&];(D1:moduleBoardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleBoardProperty_cookie<s(0)(0)(0)>[&];(D1:moduleBoardProperty_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleBoardStyle_cookie<s(0)(0)(0)>[&];(D1:moduleBoardStyle_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleChassisType_cookie<s(0)(0)(0)>[&];(D1:moduleChassisType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleName_cookie<s(0)(0)(0)>[&];(D1:moduleName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleFname_cookie<s(0)(0)(0)>[&];(D1:moduleFname_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleStart_cookie<s(0)(0)(0)>[&];(D1:moduleStart_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] moduleInit_cookie<s(0)(0)(0)>[&];(D1:moduleInit_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDivaMslotno_cookie<s(0)(0)(0)>[&];(D1:pbDivaMslotno_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDivaMportno_cookie<s(0)(0)(0)>[&];(D1:pbDivaMportno_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbDivaMmetric_cookie<s(0)(0)(0)>[&];(D1:pbDivaMmetric_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFileDir_cookie<s(0)(0)(0)>[&];(D1:pbFileDir_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFileName_cookie<s(0)(0)(0)>[&];(D1:pbFileName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFileSize_cookie<s(0)(0)(0)>[&];(D1:pbFileSize_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbFileSlot_cookie<s(0)(0)(0)>[&];(D1:pbFileSlot_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcLocalIntf_cookie<s(0)(0)(0)>[&];(D1:pbIntVcLocalIntf_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcLocalVpi_cookie<s(0)(0)(0)>[&];(D1:pbIntVcLocalVpi_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcLocalVci_cookie<s(0)(0)(0)>[&];(D1:pbIntVcLocalVci_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcRemoteIntf_cookie<s(0)(0)(0)>[&];(D1:pbIntVcRemoteIntf_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcRemoteVpi_cookie<s(0)(0)(0)>[&];(D1:pbIntVcRemoteVpi_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] pbIntVcRemoteVci_cookie<s(0)(0)(0)>[&];(D1:pbIntVcRemoteVci_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bootpBoardType_cookie<s(0)(0)(0)>[&];(D1:bootpBoardType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] bootpFname_cookie<s(0)(0)(0)>[&];(D1:bootpFname_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplSlotNo_cookie<s(0)(0)(0)>[&];(D1:aapplSlotNo_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplNumber_cookie<s(0)(0)(0)>[&];(D1:aapplNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplName_cookie<s(0)(0)(0)>[&];(D1:aapplName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplCpuUsage_cookie<s(0)(0)(0)>[&];(D1:aapplCpuUsage_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplLogLevels_cookie<s(0)(0)(0)>[&];(D1:aapplLogLevels_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplOptions_cookie<s(0)(0)(0)>[&];(D1:aapplOptions_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplStatus_cookie<s(0)(0)(0)>[&];(D1:aapplStatus_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] aapplLoadOrder_cookie<s(0)(0)(0)>[&];(D1:aapplLoadOrder_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applIndex_cookie<s(0)(0)(0)>[&];(D1:applIndex_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applBoardFunction_cookie<s(0)(0)(0)>[&];(D1:applBoardFunction_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applBoardProperty_cookie<s(0)(0)(0)>[&];(D1:applBoardProperty_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applBoardStyle_cookie<s(0)(0)(0)>[&];(D1:applBoardStyle_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applChassisType_cookie<s(0)(0)(0)>[&];(D1:applChassisType_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applName_cookie<s(0)(0)(0)>[&];(D1:applName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applNumber_cookie<s(0)(0)(0)>[&];(D1:applNumber_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applFname_cookie<s(0)(0)(0)>[&];(D1:applFname_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applEntryfn_cookie<s(0)(0)(0)>[&];(D1:applEntryfn_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applTaskName_cookie<s(0)(0)(0)>[&];(D1:applTaskName_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applTaskPri_cookie<s(0)(0)(0)>[&];(D1:applTaskPri_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applTaskStack_cookie<s(0)(0)(0)>[&];(D1:applTaskStack_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applLogLevels_cookie<s(0)(0)(0)>[&];(D1:applLogLevels_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applOptions_cookie<s(0)(0)(0)>[&];(D1:applOptions_cookie:0)
extern LeafInfo<s(0)(0)(0)>[T] applStart_cookie<s(0)(0)(0)>[&];(D1:applStart_cookie:0)




 




















































































































































































































































































































































                                                         



 























































































































































































































































































































 





















































































































































































































































































































typedef enum
{
    FMA_ALM_CLEAR<s(0)(0)(0)>[&] = 0,
    FMA_ALM_SET<s(0)(0)(0)>[&] = 1
}                       FMA_ALM_STATE<s(0)(0)(0)>[&];(D1:FMA_ALM_STATE:1)[[TYPENAME:FMA_ALM_STATE]]

typedef struct
{
    unsigned int    entity<s(1)(1)(0)>[&];
    unsigned int    instance<s(1)(1)(0)>[&];
    HW_PORT_TYPE<s(1)(1)(0)>[T]    portType<s(1)(1)(0)>[&];
    SDH_TP_TYPE<s(1)(1)(0)>[T]     tpType<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          e<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          d<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          c<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          b<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          a<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          k<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          l<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          m<s(1)(1)(0)>[&];    
} FM_TP_PATH_T<s(0)(0)(0)>[&];(D1:FM_TP_PATH_T:1)[[TYPENAME:FM_TP_PATH_T]]

typedef struct {
    BOOL<s(1)(1)(0)>[T] phyPathValid<s(1)(1)(0)>[&];                      
    BOOL<s(1)(1)(0)>[T] realPathValid<s(1)(1)(0)>[&];                     
    BOOL<s(1)(1)(0)>[T] phyPathChanged<s(1)(1)(0)>[&];                    
    BOOL<s(1)(1)(0)>[T] realPathChanged<s(1)(1)(0)>[&];                   
    unsigned int oldRealEntity<s(1)(1)(0)>[&];             
    FM_TP_PATH_T<s(1)(1)(0)>[T] basePath<s(1)(1)(0)>[&];                  
    FM_TP_PATH_T<s(1)(1)(0)>[T] phyPath<s(1)(1)(0)>[&];                   
    FM_TP_PATH_T<s(1)(1)(0)>[T] realPath<s(1)(1)(0)>[&];                  
} FM_PCO_TP_T<s(0)(0)(0)>[&];(D1:FM_PCO_TP_T:1)[[TYPENAME:FM_PCO_TP_T]] 

 


 
typedef unsigned int    FM_AISMODE_T<s(0)(0)(0)>[&];(D1:FM_AISMODE_T:1)[[TYPENAME:FM_AISMODE_T]]



typedef unsigned int    FM_RDIMODE_T<s(0)(0)(0)>[&];(D1:FM_RDIMODE_T:1)[[TYPENAME:FM_RDIMODE_T]]



 










typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*FMA_AlmModDefectFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(FMA_AlmModDefectFunc)(UINT32<s(0)(0)(0)>[T] SlotId<s(0)(0)(0)>[&], INSTANCE_T<s(0)(0)(0)>[T] Instance<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] PortId<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] PortType<s(0)(0)(0)>[&], SDH_TP_TYPE<s(0)(0)(0)>[T] TpType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] TpIndex<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] DefectId<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*FMC_AlmModDefectFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(FMC_AlmModDefectFunc)(UINT32<s(0)(0)(0)>[T] SlotId<s(0)(0)(0)>[&], INSTANCE_T<s(0)(0)(0)>[T] Instance<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] PortId<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] PortType<s(0)(0)(0)>[&], SDH_TP_TYPE<s(0)(0)(0)>[T] TpType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] TpIndex<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] DefectId<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*FMA_AlmModDefectByBusFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(FMA_AlmModDefectByBusFunc)(UINT16<s(0)(0)(0)>[T] busNo<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] vc4No<s(0)(0)(0)>[&], TU_TP_T<s(0)(0)(0)>[T] tpIndex<s(0)(0)(0)>[&], SDH_TP_TYPE<s(0)(0)(0)>[T] tpType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] defectId<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)


 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T]  (*FMA_GetBusBySlot<s(0)(0)(0)>[&])TYPENAME:FUNC:(FMA_GetBusBySlot)(UINT32<s(0)(0)(0)>[T] slotId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] tpIndex<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] * pBusNo<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] * pVc4No<s(0)(0)(0)>[&]);(D1:pVc4No:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T]  (*FMA_GetSlotByBus<s(0)(0)(0)>[&])TYPENAME:FUNC:(FMA_GetSlotByBus)(UINT16<s(0)(0)(0)>[T] busNo<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] vc4No<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] * pSlotId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] * pPortNo<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] * pEDCB<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] * pPortType<s(0)(0)(0)>[&]);(D1:pPortType:0)

extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] FMA_RegisterBusBySlot<s(0)(0)(0)>[&](FMA_GetBusBySlot<s(0)(0)(0)>[T] pFmaBusBySlot<s(0)(0)(0)>[&]);(D1:pFmaBusBySlot:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] FMA_RegisterSlotByBus<s(0)(0)(0)>[&](FMA_GetSlotByBus<s(0)(0)(0)>[T] pFmaSlotByBus<s(0)(0)(0)>[&]);(D1:pFmaSlotByBus:0)





 


































































































 
typedef enum
{
    TMS_SSF_CLEAR<s(0)(0)(0)>[&] = 0,
    TMS_SSF_SET<s(0)(0)(0)>[&] = 1
}TMS_SSF_ACTION<s(0)(0)(0)>[&];(D1:TMS_SSF_ACTION:1)[[TYPENAME:TMS_SSF_ACTION]]


 
typedef void (*TMA_S1ChangeCallbackFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(TMA_S1ChangeCallbackFunc)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ssmb<s(0)(0)(0)>[&]);(D1:ssmb:0)
extern void TMA_S1ChangeCallback<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ssmb<s(0)(0)(0)>[&]);(D1:ssmb:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*TMH_InitCCFPGAFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(TMH_InitCCFPGAFunc)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] ccstate<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] cardstate<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] warm<s(0)(0)(0)>[&]);(D1:warm:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMH_InitCCFPGA<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] ccstate<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] cardstate<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] warm<s(0)(0)(0)>[&]);(D1:warm:0)

 
typedef void (*TMA_ModDefectFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(TMA_ModDefectFunc)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] SlotId<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] PortId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] DefectId<s(0)(0)(0)>[&], TMS_SSF_ACTION<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)
extern void TMA_SetDefect<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] SlotId<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] PortId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] DefectId<s(0)(0)(0)>[&],TMS_SSF_ACTION<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*TMH_SwitchHOCCFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(TMH_SwitchHOCCFunc)(BOOL<s(0)(0)(0)>[T] isWorkHOCC<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bCallTmaStep<s(0)(0)(0)>[&]);(D1:bCallTmaStep:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMH_SwitchHOCC<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] isWorkHOCC<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bCallTmaStep<s(0)(0)(0)>[&]);(D1:bCallTmaStep:0)

extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMT_DetectCardState<s(0)(0)(0)>[&](INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbActive<s(0)(0)(0)>[&]);(D1:pbActive:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMT_DeActivateSICard<s(0)(0)(0)>[&] (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&]);(D1:inst:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMT_ActivateSICard<s(0)(0)(0)>[&] (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bWarm<s(0)(0)(0)>[&]);(D1:bWarm:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] TMT_InitSICard<s(0)(0)(0)>[&] (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulStyle<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulOption<s(0)(0)(0)>[&]);(D1:ulOption:0)
extern void TMI_ReportAlarm<s(0)(0)(0)>[&](FMC_AlmModDefectFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*TM_RptPLLUnlock<s(0)(0)(0)>[&])TYPENAME:FUNC:(TM_RptPLLUnlock)(SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bUnitFail<s(0)(0)(0)>[&]);(D1:bUnitFail:0)
void TMT_RegRptPLLUnlock<s(0)(0)(0)>[&](FMA_AlmModDefectFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
void TMH_RegRptPLLUnlock<s(0)(0)(0)>[&](TM_RptPLLUnlock<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
void TMH_RegReportAlarmFunction<s(0)(0)(0)>[&](FMA_AlmModDefectFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)













  









 
















typedef struct{
    UINT8<s(1)(1)(0)>[T] pbSlotNumber<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] pbPortNo<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] portType<s(1)(1)(0)>[&]; 
    TP_INDEX_T<s(1)(1)(0)>[T] tpIndex<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_TP_NO_T<s(0)(0)(0)>[&];(D1:PM_TP_NO_T:1)[[TYPENAME:PM_TP_NO_T]]  

typedef struct {
    BOOL<s(1)(1)(0)>[T] bRsBipMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bRsOfsMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bMsBipMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bMsReiMon<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PMA_SOH_MON_T<s(0)(0)(0)>[&];(D1:PMA_SOH_MON_T:1)[[TYPENAME:PMA_SOH_MON_T]]

typedef struct {
    BOOL<s(1)(1)(0)>[T] bHpBipMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bHpReiMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bHpNpjcMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bHpPpjcMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bHpFeNpjcMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bHpFePpjcMon<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PMA_HP_MON_T<s(0)(0)(0)>[&];(D1:PMA_HP_MON_T:1)[[TYPENAME:PMA_HP_MON_T]]

typedef struct {
    BOOL<s(1)(1)(0)>[T] bLpBipMon<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bLpReiMon<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PMA_LP_MON_T<s(0)(0)(0)>[&];(D1:PMA_LP_MON_T:1)[[TYPENAME:PMA_LP_MON_T]]


typedef struct
{
    UINT8<s(1)(1)(0)>[T]    pbSlotNumber<s(1)(1)(0)>[&];                                 
    INSTANCE_T<s(1)(1)(0)>[T]            instance<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]        pbPortNo<s(1)(1)(0)>[&];                                                 
    UINT32<s(1)(1)(0)>[T] pbEthTableType<s(1)(1)(0)>[&];                                  
    UINT8<s(1)(1)(0)>[T]   pbEthPmPortType<s(1)(1)(0)>[&];                                  
    UINT32<s(1)(1)(0)>[T] pbEthPmMonitor<s(1)(1)(0)>[&];
    char        pbEthPmTimeStart<s(1)(1)(0)>[&][16];
    unsigned int    pbEthPmTimeElapse<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]            pbEthPmTimeSuspect<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]            pbEthPmTableReset<s(1)(1)(0)>[&];
    unsigned int    pbEthInUnicastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInUnicastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInMulcastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInMulcastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInBrdcastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInBrdcastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllBadPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllBadPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllBadBytesHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllBadBytesLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllGoodPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllGoodPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllGoodBytesHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInAllGoodBytesLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInOverSizePktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInOverSizePktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInUnderSizePktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInUnderSizePktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthInCRCErrPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthInCRCErrPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthOutUnicastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthOutUnicastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthOutMulcastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthOutMulcastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthOutBrdcastPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthOutBrdcastPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthOutAllGoodPktsHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthOutAllGoodPktsLow<s(1)(1)(0)>[&];
    unsigned int    pbEthOutAllGoodBytesHigh<s(1)(1)(0)>[&];
    unsigned int    pbEthOutAllGoodBytesLow<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          pbEthBbrEnable<s(1)(1)(0)>[&];
    int        pbEthBbrThresholdValue<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]         pbEthBprEnable<s(1)(1)(0)>[&];
    int        pbEthBprThresholdValue<s(1)(1)(0)>[&];
}__attribute__ ((packed))  ETH_PM_DTAT_T<s(0)(0)(0)>[&];(D1:ETH_PM_DTAT_T:1)[[TYPENAME:ETH_PM_DTAT_T]]  

typedef struct 
{  
    UINT8<s(1)(1)(0)>[T]                      slot<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                      portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                      actPortType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                      portNo<s(1)(1)(0)>[&];
    TP_INDEX_T<s(1)(1)(0)>[T]             tpIndex<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_TP_INDEX_T<s(0)(0)(0)>[&];(D1:PM_TP_INDEX_T:1)[[TYPENAME:PM_TP_INDEX_T]]


typedef struct
{
	UINT8<s(1)(1)(0)>[T]			   instance<s(1)(1)(0)>[&];
       UINT8<s(1)(1)(0)>[T]                   slot<s(1)(1)(0)>[&];
       UINT8<s(1)(1)(0)>[T]                   portType<s(1)(1)(0)>[&];                         
       UINT8<s(1)(1)(0)>[T]                   portNo<s(1)(1)(0)>[&];                                  
}__attribute__ ((packed))  PM_ETH_INDEX_T<s(0)(0)(0)>[&];(D1:PM_ETH_INDEX_T:1)[[TYPENAME:PM_ETH_INDEX_T]]

 
typedef struct
{
    UINT8<s(1)(1)(0)>[T]  slot<s(1)(1)(0)>[&];
    int     rprIfIndex<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_RPR_CLIENT_INDEX_T<s(0)(0)(0)>[&];(D1:PM_RPR_CLIENT_INDEX_T:1)[[TYPENAME:PM_RPR_CLIENT_INDEX_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]  slot<s(1)(1)(0)>[&];
    int     rprIfIndex<s(1)(1)(0)>[&];
    RprSpan_Tval<s(1)(1)(0)>[T] rprSpanId<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_RPR_SPAN_INDEX_T<s(0)(0)(0)>[&];(D1:PM_RPR_SPAN_INDEX_T:1)[[TYPENAME:PM_RPR_SPAN_INDEX_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]         slot<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]         portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]         portNo<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_PDH_SLIP_INDEX_T<s(0)(0)(0)>[&];(D1:PM_PDH_SLIP_INDEX_T:1)[[TYPENAME:PM_PDH_SLIP_INDEX_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]                 slot<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 portNo<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_PDH_INDEX_T<s(0)(0)(0)>[&];(D1:PM_PDH_INDEX_T:1)[[TYPENAME:PM_PDH_INDEX_T]]

typedef struct
{
    UINT8<s(1)(1)(0)>[T]                 slot<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 portType<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 portNo<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_FEC_INDEX_T<s(0)(0)(0)>[&];(D1:PM_FEC_INDEX_T:1)[[TYPENAME:PM_FEC_INDEX_T]]


typedef struct 
{
	 
	

    
     
    UINT32<s(1)(1)(0)>[T]  ethInAllBytes<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInAllPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInAllGoodPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInAllBadPkts<s(1)(1)(0)>[&];  
    UINT32<s(1)(1)(0)>[T]  ethInUnicastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInMulcastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInBrdcastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInDropPkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethInUndersizeGoodPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInOversizeGoodPkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethIn64Pkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethIn65To127Pkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethIn128To255Pkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethIn256To511Pkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethIn512To1023Pkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethIn1024To1518Pkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInPausePkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethInFragmentPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInJabberPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethInAlignmentErrorPkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethOutAllBytes<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethOutAllPkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethOutUnicastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethOutMulcastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethOutBrdcastPkts<s(1)(1)(0)>[&]; 
    UINT32<s(1)(1)(0)>[T]  ethOutGoodPausePkts<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]  ethOutCollisionPkts<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_ETH_DATA_T<s(0)(0)(0)>[&];(D1:PM_ETH_DATA_T:1)[[TYPENAME:PM_ETH_DATA_T]]

typedef struct
{
	UINT8<s(1)(1)(0)>[T] 				instance<s(1)(1)(0)>[&];
         UINT8<s(1)(1)(0)>[T]                slot<s(1)(1)(0)>[&];
         UINT8<s(1)(1)(0)>[T]                portNo<s(1)(1)(0)>[&]; 
         UINT8<s(1)(1)(0)>[T]                portType<s(1)(1)(0)>[&];
         UINT32<s(1)(1)(0)>[T]              vlanId<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_ETH_VLAN_INDEX_T<s(0)(0)(0)>[&];(D1:PM_ETH_VLAN_INDEX_T:1)[[TYPENAME:PM_ETH_VLAN_INDEX_T]]      

typedef struct 
{
       UINT32<s(1)(1)(0)>[T]    ethVlanInBytes<s(1)(1)(0)>[&];
       UINT32<s(1)(1)(0)>[T]    ethVlanInPkts<s(1)(1)(0)>[&];  
       UINT32<s(1)(1)(0)>[T]    ethVlanDropPkts<s(1)(1)(0)>[&];    
       UINT32<s(1)(1)(0)>[T]    RcvUnicastFrames<s(1)(1)(0)>[&];
       UINT32<s(1)(1)(0)>[T]    RcvTotalFrames<s(1)(1)(0)>[&];
       UINT32<s(1)(1)(0)>[T]    RcvUnicastBytes<s(1)(1)(0)>[&];
       UINT32<s(1)(1)(0)>[T]    RcvTotalBytes<s(1)(1)(0)>[&];
}__attribute__ ((packed))  PM_ETH_VLAN_DATA_T<s(0)(0)(0)>[&];(D1:PM_ETH_VLAN_DATA_T:1)[[TYPENAME:PM_ETH_VLAN_DATA_T]]    

typedef void (*PMP_GetRsOofFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(PMP_GetRsOofFunc)(UINT8<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&]);(D1:portType:0)













 
































































 





























 



 
 
 
 
 
 
















































 

 



















 















 






  
























































 


























 



 



 
typedef enum
{
    TASK_CORE_SECTION<s(0)(0)(0)>[&]       = 0,  
    TASK_URGENT_SECTION<s(0)(0)(0)>[&]     = 1,  
    TASK_MANAGEMENT_SECTION<s(0)(0)(0)>[&] = 2,  
    TASK_NORMAL_SECTION<s(0)(0)(0)>[&]     = 3,  
    TASK_IDLE_SECTION<s(0)(0)(0)>[&]       = 4  
} TASK_PRIORITY_SECTION_T<s(0)(0)(0)>[&];(D1:TASK_PRIORITY_SECTION_T:1)[[TYPENAME:TASK_PRIORITY_SECTION_T]]












 
 
 
 
 

 








 
 
 




















































 






 



































 





 














 







 




















 

 







































 















 


































 























 










































 


 



 




 







 
















































































































































































 







typedef enum msp_switch_type<s(0)(0)(0)>[&]
{
    MSP_REQ_LP<s(0)(0)(0)>[&]        =     127,  
    MSP_REQ_SF_P<s(0)(0)(0)>[&]      =     126,  
    MSP_REQ_FS_W<s(0)(0)(0)>[&]      =     125,  
    MSP_REQ_FS_P<s(0)(0)(0)>[&]      =     123,  
    MSP_REQ_FS_2<s(0)(0)(0)>[&]      =     122,  
    MSP_REQ_FS_3<s(0)(0)(0)>[&]      =     121,  
    MSP_REQ_FS_4<s(0)(0)(0)>[&]      =     120,  
    MSP_REQ_FS_5<s(0)(0)(0)>[&]      =     119,  
    MSP_REQ_FS_6<s(0)(0)(0)>[&]      =     118,  
    MSP_REQ_FS_7<s(0)(0)(0)>[&]      =     117,  
    MSP_REQ_FS_8<s(0)(0)(0)>[&]      =     116,  
    MSP_REQ_FS_9<s(0)(0)(0)>[&]      =     115,  
    MSP_REQ_FS_10<s(0)(0)(0)>[&]     =     114,  
    MSP_REQ_FS_11<s(0)(0)(0)>[&]     =     113,  
    MSP_REQ_FS_12<s(0)(0)(0)>[&]     =     112,  
    MSP_REQ_FS_13<s(0)(0)(0)>[&]     =     111,  
    MSP_REQ_FS_14<s(0)(0)(0)>[&]     =     110,  
    MSP_REQ_FS_15<s(0)(0)(0)>[&]     =     109,  

    MSP_REQ_SF_W<s(0)(0)(0)>[&]      =     108,  
    MSP_REQ_SF_H_2<s(0)(0)(0)>[&]    =     107,  
    MSP_REQ_SF_H_3<s(0)(0)(0)>[&]    =     106,  
    MSP_REQ_SF_H_4<s(0)(0)(0)>[&]    =     105,  
    MSP_REQ_SF_H_5<s(0)(0)(0)>[&]    =     104,  
    MSP_REQ_SF_H_6<s(0)(0)(0)>[&]    =     103,  
    MSP_REQ_SF_H_7<s(0)(0)(0)>[&]    =     102,  
    MSP_REQ_SF_H_8<s(0)(0)(0)>[&]    =     101,  
    MSP_REQ_SF_H_9<s(0)(0)(0)>[&]    =     100,  
    MSP_REQ_SF_H_10<s(0)(0)(0)>[&]   =     99,  
    MSP_REQ_SF_H_11<s(0)(0)(0)>[&]   =     98,  
    MSP_REQ_SF_H_12<s(0)(0)(0)>[&]   =     97,  
    MSP_REQ_SF_H_13<s(0)(0)(0)>[&]   =     96,  
    MSP_REQ_SF_H_14<s(0)(0)(0)>[&]   =     95,  

    MSP_REQ_SF_L_1<s(0)(0)(0)>[&]    =     94,  
    MSP_REQ_SF_L_2<s(0)(0)(0)>[&]    =     93,  
    MSP_REQ_SF_L_3<s(0)(0)(0)>[&]    =     92,  
    MSP_REQ_SF_L_4<s(0)(0)(0)>[&]    =     91,  
    MSP_REQ_SF_L_5<s(0)(0)(0)>[&]    =     90,  
    MSP_REQ_SF_L_6<s(0)(0)(0)>[&]    =     89,  
    MSP_REQ_SF_L_7<s(0)(0)(0)>[&]    =     88,  
    MSP_REQ_SF_L_8<s(0)(0)(0)>[&]    =     87,  
    MSP_REQ_SF_L_9<s(0)(0)(0)>[&]    =     86,  
    MSP_REQ_SF_L_10<s(0)(0)(0)>[&]   =     85,  
    MSP_REQ_SF_L_11<s(0)(0)(0)>[&]   =     84,  
    MSP_REQ_SF_L_12<s(0)(0)(0)>[&]   =     83,  
    MSP_REQ_SF_L_13<s(0)(0)(0)>[&]   =     82,  
    MSP_REQ_SF_L_14<s(0)(0)(0)>[&]   =     81,  

    MSP_REQ_SD_P<s(0)(0)(0)>[&]      =     78,  
    MSP_REQ_SD_W<s(0)(0)(0)>[&]      =     76,  
    MSP_REQ_SD_H_2<s(0)(0)(0)>[&]    =     75,  
    MSP_REQ_SD_H_3<s(0)(0)(0)>[&]    =     74,  
    MSP_REQ_SD_H_4<s(0)(0)(0)>[&]    =     73,  
    MSP_REQ_SD_H_5<s(0)(0)(0)>[&]    =     72,  
    MSP_REQ_SD_H_6<s(0)(0)(0)>[&]    =     71,  
    MSP_REQ_SD_H_7<s(0)(0)(0)>[&]    =     70,  
    MSP_REQ_SD_H_8<s(0)(0)(0)>[&]    =     69,  
    MSP_REQ_SD_H_9<s(0)(0)(0)>[&]    =     68,  
    MSP_REQ_SD_H_10<s(0)(0)(0)>[&]   =     67,  
    MSP_REQ_SD_H_11<s(0)(0)(0)>[&]   =     66,  
    MSP_REQ_SD_H_12<s(0)(0)(0)>[&]   =     65,  
    MSP_REQ_SD_H_13<s(0)(0)(0)>[&]   =     64,  
    MSP_REQ_SD_H_14<s(0)(0)(0)>[&]   =     63,  

    MSP_REQ_SD_L_1<s(0)(0)(0)>[&]    =     62,  
    MSP_REQ_SD_L_2<s(0)(0)(0)>[&]    =     61,  
    MSP_REQ_SD_L_3<s(0)(0)(0)>[&]    =     60,  
    MSP_REQ_SD_L_4<s(0)(0)(0)>[&]    =     59,  
    MSP_REQ_SD_L_5<s(0)(0)(0)>[&]    =     58,  
    MSP_REQ_SD_L_6<s(0)(0)(0)>[&]    =     57,  
    MSP_REQ_SD_L_7<s(0)(0)(0)>[&]    =     56,  
    MSP_REQ_SD_L_8<s(0)(0)(0)>[&]    =     55,  
    MSP_REQ_SD_L_9<s(0)(0)(0)>[&]    =     54,  
    MSP_REQ_SD_L_10<s(0)(0)(0)>[&]   =     53,  
    MSP_REQ_SD_L_11<s(0)(0)(0)>[&]   =     52,  
    MSP_REQ_SD_L_12<s(0)(0)(0)>[&]   =     51,  
    MSP_REQ_SD_L_13<s(0)(0)(0)>[&]   =     50,  
    MSP_REQ_SD_L_14<s(0)(0)(0)>[&]   =     49,  

    MSP_REQ_MS_W<s(0)(0)(0)>[&]      =     46,  
    MSP_REQ_MS_P<s(0)(0)(0)>[&]      =     45,  
    MSP_REQ_MS_2<s(0)(0)(0)>[&]      =     44,  
    MSP_REQ_MS_3<s(0)(0)(0)>[&]      =     43,  
    MSP_REQ_MS_4<s(0)(0)(0)>[&]      =     42,  
    MSP_REQ_MS_5<s(0)(0)(0)>[&]      =     41,  
    MSP_REQ_MS_6<s(0)(0)(0)>[&]      =     40,  
    MSP_REQ_MS_7<s(0)(0)(0)>[&]      =     39,  
    MSP_REQ_MS_8<s(0)(0)(0)>[&]      =     38,  
    MSP_REQ_MS_9<s(0)(0)(0)>[&]      =     37,  
    MSP_REQ_MS_10<s(0)(0)(0)>[&]     =     36,  
    MSP_REQ_MS_11<s(0)(0)(0)>[&]     =     35,  
    MSP_REQ_MS_12<s(0)(0)(0)>[&]     =     34,  
    MSP_REQ_MS_13<s(0)(0)(0)>[&]     =     33,  
    MSP_REQ_MS_14<s(0)(0)(0)>[&]     =     32,  
    MSP_REQ_MS_15<s(0)(0)(0)>[&]     =     31,  
    MSP_REQ_WTR<s(0)(0)(0)>[&]       =     30,  
    MSP_REQ_EXER_0<s(0)(0)(0)>[&]    =     29,  
    MSP_REQ_EXER_1<s(0)(0)(0)>[&]    =     28,  
    MSP_REQ_EXER_2<s(0)(0)(0)>[&]    =     27,  
    MSP_REQ_EXER_3<s(0)(0)(0)>[&]    =     26,  
    MSP_REQ_EXER_4<s(0)(0)(0)>[&]    =     25,  
    MSP_REQ_EXER_5<s(0)(0)(0)>[&]    =     24,  
    MSP_REQ_EXER_6<s(0)(0)(0)>[&]    =     23,  
    MSP_REQ_EXER_7<s(0)(0)(0)>[&]    =     22,  
    MSP_REQ_EXER_8<s(0)(0)(0)>[&]    =     21,  
    MSP_REQ_EXER_9<s(0)(0)(0)>[&]    =     20,  
    MSP_REQ_EXER_10<s(0)(0)(0)>[&]   =     19,  
    MSP_REQ_EXER_11<s(0)(0)(0)>[&]   =     18,  
    MSP_REQ_EXER_12<s(0)(0)(0)>[&]   =     17,  
    MSP_REQ_EXER_13<s(0)(0)(0)>[&]   =     16,  
    MSP_REQ_EXER_14<s(0)(0)(0)>[&]   =     15,  
    MSP_REQ_EXER_15<s(0)(0)(0)>[&]   =     14,  
    MSP_REQ_RR<s(0)(0)(0)>[&]        =     13,  
    MSP_REQ_DNR<s(0)(0)(0)>[&]       =     12,  
    MSP_REQ_NRM<s(0)(0)(0)>[&]       =     0,  
    MSP_REQ_NR<s(0)(0)(0)>[&]        =     0,  
} MSP_SWITCH_REQ_T<s(0)(0)(0)>[&];(D1:MSP_SWITCH_REQ_T:1)[[TYPENAME:MSP_SWITCH_REQ_T]]

typedef enum msp_switch_type_t<s(0)(0)(0)>[&]
{
    MSP_NO_REQUEST<s(0)(0)(0)>[&] = 0,      
    MSP_DNOTREV_REQ<s(0)(0)(0)>[&],         
    MSP_REVERT_REQ<s(0)(0)(0)>[&],          
    MSP_UNUSED3_REQ<s(0)(0)(0)>[&],         
    MSP_EXERCISE_REQ<s(0)(0)(0)>[&],        
    MSP_UNUSED5_REQ<s(0)(0)(0)>[&],         
    MSP_WTR_REQ<s(0)(0)(0)>[&],             
    MSP_UNUSED7_REQ<s(0)(0)(0)>[&],         
    MSP_MAN_REQ<s(0)(0)(0)>[&],             
    MSP_UNUSED9_REQ<s(0)(0)(0)>[&],         
    MSP_SD_LPRI_REQ<s(0)(0)(0)>[&],         
    MSP_SD_HPRI_REQ<s(0)(0)(0)>[&],         
    MSP_SF_LPRI_REQ<s(0)(0)(0)>[&],         
    MSP_SF_HPRI_REQ<s(0)(0)(0)>[&],         
    MSP_FORCED_REQ<s(0)(0)(0)>[&],          
    MSP_LOCK_REQ<s(0)(0)(0)>[&],            
    MSP_UNKNOWN_REQ<s(0)(0)(0)>[&] = 0x10
} MSP_SWITCH_REQ_TYPE_T<s(0)(0)(0)>[&];(D1:MSP_SWITCH_REQ_TYPE_T:1)[[TYPENAME:MSP_SWITCH_REQ_TYPE_T]]

 



typedef enum
{
    CTD_MSP_SIG_STATE_UNKNOWN<s(0)(0)(0)>[&]   = 0x0,
    CTD_MSP_SIG_STATE_NORMAL<s(0)(0)(0)>[&]    = 0x1,
    CTD_MSP_SIG_STATE_DEGRADE<s(0)(0)(0)>[&]   = 0x2,
    CTD_MSP_SIG_STATE_FAIL<s(0)(0)(0)>[&]      = 0x3,
}CTD_MSP_SIG_STATE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_SIG_STATE_T:1)[[TYPENAME:CTD_MSP_SIG_STATE_T]]

typedef enum
{
    CTD_MSP_UNIDIRECTION<s(0)(0)(0)>[&]    = 0x0,
    CTD_MSP_BIDIRECTION<s(0)(0)(0)>[&]     = 0x1,
}CTD_MSP_DIR_MODE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_DIR_MODE_T:1)[[TYPENAME:CTD_MSP_DIR_MODE_T]]

typedef enum
{
    CTD_MSP_NONREVERTIVE<s(0)(0)(0)>[&] = 0x0,
    CTD_MSP_REVERTIVE<s(0)(0)(0)>[&]    = 0x1,
}CTD_MSP_RVT_MODE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_RVT_MODE_T:1)[[TYPENAME:CTD_MSP_RVT_MODE_T]]

typedef enum
{
    CTD_MSP_ACTIVE<s(0)(0)(0)>[&]       = 0x0,
    CTD_MSP_STANDBY<s(0)(0)(0)>[&]      = 0x1,
}CTD_MSP_CH_STATE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_CH_STATE_T:1)[[TYPENAME:CTD_MSP_CH_STATE_T]]

typedef enum
{
    CTD_MSP_PRIORI_HIGH<s(0)(0)(0)>[&]       = 0x0,
    CTD_MSP_PRIORI_LOW<s(0)(0)(0)>[&]        = 0x1,
}CTD_MSP_CH_PRIORITY_T<s(0)(0)(0)>[&];(D1:CTD_MSP_CH_PRIORITY_T:1)[[TYPENAME:CTD_MSP_CH_PRIORITY_T]]

typedef enum
{
    CTD_MSP_CMD_CLEAR<s(0)(0)(0)>[&]               = 0x7F,
    CTD_MSP_LOCK_OUT_PROT<s(0)(0)(0)>[&]           = 0x7E,
    CTD_MSP_FORCE_SWTICH_WORK<s(0)(0)(0)>[&]       = 0x7D,
    CTD_MSP_FORCE_SWITCH_PROT_1<s(0)(0)(0)>[&]     = 0x7B,
    CTD_MSP_FORCE_SWITCH_PROT_2<s(0)(0)(0)>[&]     = 0x7A,
    CTD_MSP_FORCE_SWITCH_PROT_3<s(0)(0)(0)>[&]     = 0x79,    
    CTD_MSP_FORCE_SWITCH_PROT_4<s(0)(0)(0)>[&]     = 0x78,    
    CTD_MSP_FORCE_SWITCH_PROT_5<s(0)(0)(0)>[&]     = 0x77,    
    CTD_MSP_FORCE_SWITCH_PROT_6<s(0)(0)(0)>[&]     = 0x76,    
    CTD_MSP_FORCE_SWITCH_PROT_7<s(0)(0)(0)>[&]     = 0x75,    
    CTD_MSP_FORCE_SWITCH_PROT_8<s(0)(0)(0)>[&]     = 0x74,    
    CTD_MSP_FORCE_SWITCH_PROT_9<s(0)(0)(0)>[&]     = 0x73,    
    CTD_MSP_FORCE_SWITCH_PROT_10<s(0)(0)(0)>[&]    = 0x72,        
    CTD_MSP_FORCE_SWITCH_PROT_11<s(0)(0)(0)>[&]    = 0x71,        
    CTD_MSP_FORCE_SWITCH_PROT_12<s(0)(0)(0)>[&]    = 0x70,        
    CTD_MSP_FORCE_SWITCH_PROT_13<s(0)(0)(0)>[&]    = 0x6F,        
    CTD_MSP_FORCE_SWITCH_PROT_14<s(0)(0)(0)>[&]    = 0x6E,
    CTD_MSP_FORCE_SWITCH_PROT_15<s(0)(0)(0)>[&]    = 0x6D,            
    CTD_MSP_MANUAL_SWITCH_WORK<s(0)(0)(0)>[&]      = 0x2E,
    CTD_MSP_MANUAL_SWITCH_PROT_1<s(0)(0)(0)>[&]    = 0x2D,
    CTD_MSP_MANUAL_SWITCH_PROT_2<s(0)(0)(0)>[&]    = 0x2C,
    CTD_MSP_MANUAL_SWITCH_PROT_3<s(0)(0)(0)>[&]    = 0x2B,
    CTD_MSP_MANUAL_SWITCH_PROT_4<s(0)(0)(0)>[&]    = 0x2A,
    CTD_MSP_MANUAL_SWITCH_PROT_5<s(0)(0)(0)>[&]    = 0x29,
    CTD_MSP_MANUAL_SWITCH_PROT_6<s(0)(0)(0)>[&]    = 0x28,
    CTD_MSP_MANUAL_SWITCH_PROT_7<s(0)(0)(0)>[&]    = 0x27,
    CTD_MSP_MANUAL_SWITCH_PROT_8<s(0)(0)(0)>[&]    = 0x26,
    CTD_MSP_MANUAL_SWITCH_PROT_9<s(0)(0)(0)>[&]    = 0x25,
    CTD_MSP_MANUAL_SWITCH_PROT_10<s(0)(0)(0)>[&]   = 0x24,
    CTD_MSP_MANUAL_SWITCH_PROT_11<s(0)(0)(0)>[&]   = 0x23,
    CTD_MSP_MANUAL_SWITCH_PROT_12<s(0)(0)(0)>[&]   = 0x22,
    CTD_MSP_MANUAL_SWITCH_PROT_13<s(0)(0)(0)>[&]   = 0x21,
    CTD_MSP_MANUAL_SWITCH_PROT_14<s(0)(0)(0)>[&]   = 0x20,
    CTD_MSP_MANUAL_SWITCH_PROT_15<s(0)(0)(0)>[&]   = 0x1F,
    CTD_MSP_EXER_0<s(0)(0)(0)>[&]                  = 0x1D,
    CTD_MSP_EXER_1<s(0)(0)(0)>[&]                  = 0x1C,
    CTD_MSP_EXER_2<s(0)(0)(0)>[&]                  = 0x1B,
    CTD_MSP_EXER_3<s(0)(0)(0)>[&]                  = 0x1A,
    CTD_MSP_EXER_4<s(0)(0)(0)>[&]                  = 0x19,
    CTD_MSP_EXER_5<s(0)(0)(0)>[&]                  = 0x18,
    CTD_MSP_EXER_6<s(0)(0)(0)>[&]                  = 0x17,
    CTD_MSP_EXER_7<s(0)(0)(0)>[&]                  = 0x16,
    CTD_MSP_EXER_8<s(0)(0)(0)>[&]                  = 0x15,
    CTD_MSP_EXER_9<s(0)(0)(0)>[&]                  = 0x14,
    CTD_MSP_EXER_10<s(0)(0)(0)>[&]                 = 0x13,
    CTD_MSP_EXER_11<s(0)(0)(0)>[&]                 = 0x12,
    CTD_MSP_EXER_12<s(0)(0)(0)>[&]                 = 0x11,
    CTD_MSP_EXER_13<s(0)(0)(0)>[&]                 = 0x10,    
    CTD_MSP_EXER_14<s(0)(0)(0)>[&]                 = 0x0F,    
    CTD_MSP_EXER_15<s(0)(0)(0)>[&]                 = 0x0E,
    CTD_MSP_NO_COMMAND<s(0)(0)(0)>[&]              = 0x00,
}CTD_MSP_CMD_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_CMD_TYPE_T:1)[[TYPENAME:CTD_MSP_CMD_TYPE_T]]

typedef enum 
{
    CTD_MSP_CMD_RSLT_SUCC<s(0)(0)(0)>[&]        = 0x1,
    CTD_MSP_CMD_RSLT_LOWPRIORITY<s(0)(0)(0)>[&] = 0x2,
    CTD_MSP_CMD_SWITCH_TO_ACTIVE<s(0)(0)(0)>[&] = 0x3,
    CTD_MSP_CMD_SWITCH_FAIL<s(0)(0)(0)>[&]      = 0x4,   
}CTD_MSP_CMD_RSLT_T<s(0)(0)(0)>[&];(D1:CTD_MSP_CMD_RSLT_T:1)[[TYPENAME:CTD_MSP_CMD_RSLT_T]]

typedef enum
{
    CTD_MSP_RSN_CLEAR_CMD<s(0)(0)(0)>[&]         = 0x1,
    CTD_MSP_RSN_LP_CMD<s(0)(0)(0)>[&]            = 0x2,
    CTD_MSP_RSN_FORCED_SWITCH<s(0)(0)(0)>[&]     = 0x3,
    CTD_MSP_RSN_MANUAL_SWITCH<s(0)(0)(0)>[&]     = 0x4,
    CTD_MSP_RSN_SIGNAL_FAIL<s(0)(0)(0)>[&]       = 0x5,
    CTD_MSP_RSN_SIGNAL_FAIL_CLEAR<s(0)(0)(0)>[&] = 0x6,
    CTD_MSP_RSN_SIGNAL_DEG<s(0)(0)(0)>[&]        = 0x7,
    CTD_MSP_RSN_SIGNAL_DEG_CLEAR<s(0)(0)(0)>[&]  = 0x8,
    CTD_MSP_RSN_NO_SWITCH<s(0)(0)(0)>[&]         = 0x9,
} CTD_MSP_SWITCH_RSN_T<s(0)(0)(0)>[&];(D1:CTD_MSP_SWITCH_RSN_T:1)[[TYPENAME:CTD_MSP_SWITCH_RSN_T]]

typedef enum
{
    CTD_MSP_PRIO_LOW<s(0)(0)(0)>[&]              = 0x0,
    CTD_MSP_PRIO_HIGH<s(0)(0)(0)>[&]             = 0x1,
}CTD_MSP_PRIO_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_PRIO_TYPE_T:1)[[TYPENAME:CTD_MSP_PRIO_TYPE_T]]

typedef struct
{
     
    CTD_MSP_SIG_STATE_T<s(1)(1)(0)>[T]  eWorkSigState<s(1)(1)(0)>[&][14];
    CTD_MSP_CH_STATE_T<s(1)(1)(0)>[T]   eWorkChState<s(1)(1)(0)>[&][14]; 
     
    CTD_MSP_SIG_STATE_T<s(1)(1)(0)>[T]  eProtSigState<s(1)(1)(0)>[&];
    CTD_MSP_CH_STATE_T<s(1)(1)(0)>[T]   eProtChState<s(1)(1)(0)>[&]; 
     
    CTD_MSP_CMD_TYPE_T<s(1)(1)(0)>[T]   eMspExtCmd<s(1)(1)(0)>[&];                          
    CTD_MSP_CMD_RSLT_T<s(1)(1)(0)>[T]   eMspExtCmdRslt<s(1)(1)(0)>[&];  
     
    MSP_SWITCH_REQ_T<s(1)(1)(0)>[T]     eMspCurSwitchReq<s(1)(1)(0)>[&];                         
    CTD_MSP_SWITCH_RSN_T<s(1)(1)(0)>[T] eMspSwitchReason<s(1)(1)(0)>[&];
     
    BOOL<s(1)(1)(0)>[T]                 bFopAlarm<s(1)(1)(0)>[&];
     
    UINT8<s(1)(1)(0)>[T]                ucRcvdK1Value<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                ucRcvdK2Value<s(1)(1)(0)>[&];
     
    UINT8<s(1)(1)(0)>[T]                ucTransK1Value<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                ucTransK2Value<s(1)(1)(0)>[&];
     
    BOOL<s(1)(1)(0)>[T]                 bIsExtra<s(1)(1)(0)>[&];
}CTD_MSP_STATE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_STATE_T:1)[[TYPENAME:CTD_MSP_STATE_T]]

typedef struct
{
    UINT16<s(1)(1)(0)>[T]              usMspGrpNum<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]               ucMspWorkChNum<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]               ucMspType<s(1)(1)(0)>[&];   
    CTD_MSP_STATE_T<s(1)(1)(0)>[T]     *sMspState<s(1)(1)(0)>[&];
}CTD_HW_MSP_STATE_T<s(0)(0)(0)>[&];(D1:CTD_HW_MSP_STATE_T:1)[[TYPENAME:CTD_HW_MSP_STATE_T]]


 
typedef struct
{
     
    UINT16<s(1)(1)(0)>[T] usGrpId<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] usProtSlot<s(1)(1)(0)>[&];                  
    UINT16<s(1)(1)(0)>[T] usProtPort<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]  ucProtPortType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] usWorkNum<s(1)(1)(0)>[&];                   
    UINT16<s(1)(1)(0)>[T] usWorkSlot<s(1)(1)(0)>[&][14];
    UINT16<s(1)(1)(0)>[T] usWorkPort<s(1)(1)(0)>[&][14];
    UINT8<s(1)(1)(0)>[T]  ucWorkPortType<s(1)(1)(0)>[&][14];
    UINT8<s(1)(1)(0)>[T]  ucWorkPrio<s(1)(1)(0)>[&][14];
    UINT32<s(1)(1)(0)>[T]              ulWtrVal<s(1)(1)(0)>[&];	    
    CTD_MSP_CMD_TYPE_T<s(1)(1)(0)>[T]  eCmdType<s(1)(1)(0)>[&];       
    BOOL<s(1)(1)(0)>[T]   bIsExtra<s(1)(1)(0)>[&];                    

    BOOL<s(1)(1)(0)>[T]   bEnable<s(1)(1)(0)>[&];                     
}CTD_MSP_1VSN_CFG_T<s(0)(0)(0)>[&];(D1:CTD_MSP_1VSN_CFG_T:1)[[TYPENAME:CTD_MSP_1VSN_CFG_T]]

typedef struct
{
    UINT16<s(1)(1)(0)>[T] usWorkNum<s(1)(1)(0)>[&];
    CTD_MSP_PRIO_TYPE_T<s(1)(1)(0)>[T] sPrio<s(1)(1)(0)>[&][14];
}CTD_MSP_PRIO_STAT_T<s(0)(0)(0)>[&];(D1:CTD_MSP_PRIO_STAT_T:1)[[TYPENAME:CTD_MSP_PRIO_STAT_T]]

 
typedef struct
{
    UINT16<s(1)(1)(0)>[T] usBusRx<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] usBusTx<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] usVc4<s(1)(1)(0)>[&];
}CTD_TP_PARAM_CFG_T<s(0)(0)(0)>[&];(D1:CTD_TP_PARAM_CFG_T:1)[[TYPENAME:CTD_TP_PARAM_CFG_T]]
typedef struct
{
    UINT16<s(1)(1)(0)>[T] usTpCount<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T] usGrpId<s(1)(1)(0)>[&];
    CTD_TP_PARAM_CFG_T<s(1)(1)(0)>[T] *tp<s(1)(1)(0)>[&];
}CTD_1ToNMSP_TP_CFG_T<s(0)(0)(0)>[&];(D1:CTD_1ToNMSP_TP_CFG_T:1)[[TYPENAME:CTD_1ToNMSP_TP_CFG_T]]
typedef struct
{
     
     
    CTD_1ToNMSP_TP_CFG_T<s(1)(1)(0)>[T] sProtTp<s(1)(1)(0)>[&];                  
    UINT16<s(1)(1)(0)>[T] usWorkNum<s(1)(1)(0)>[&];                   
    CTD_1ToNMSP_TP_CFG_T<s(1)(1)(0)>[T] sWorkTP<s(1)(1)(0)>[&][14];    
    UINT8<s(1)(1)(0)>[T] ucWorkPrio<s(1)(1)(0)>[&][14];    
    UINT32<s(1)(1)(0)>[T]              ulWtrVal<s(1)(1)(0)>[&];	    
    CTD_MSP_CMD_TYPE_T<s(1)(1)(0)>[T]  eCmdType<s(1)(1)(0)>[&];       
    BOOL<s(1)(1)(0)>[T]   bIsExtra<s(1)(1)(0)>[&];                    

    BOOL<s(1)(1)(0)>[T]   bEnable<s(1)(1)(0)>[&];                     
}CTD_MSP_1VSN_DRV_CFG_T<s(0)(0)(0)>[&];(D1:CTD_MSP_1VSN_DRV_CFG_T:1)[[TYPENAME:CTD_MSP_1VSN_DRV_CFG_T]]




typedef struct
{
    UINT16<s(1)(1)(0)>[T]              usGrpId<s(1)(1)(0)>[&];          
    UINT16<s(1)(1)(0)>[T]              usWorkSlot<s(1)(1)(0)>[&];	    
    UINT16<s(1)(1)(0)>[T]              usWorkPort<s(1)(1)(0)>[&];	    
    UINT16<s(1)(1)(0)>[T]              usProtSlot<s(1)(1)(0)>[&];     
    UINT16<s(1)(1)(0)>[T]              usProtPort<s(1)(1)(0)>[&];	    
    HW_PORT_TYPE<s(1)(1)(0)>[T]        ePortType<s(1)(1)(0)>[&];      
    CTD_MSP_DIR_MODE_T<s(1)(1)(0)>[T]  eDirMode<s(1)(1)(0)>[&];       
    CTD_MSP_RVT_MODE_T<s(1)(1)(0)>[T]  eRvtMode<s(1)(1)(0)>[&];       
    UINT32<s(1)(1)(0)>[T]              ulWtrVal<s(1)(1)(0)>[&];	    
    CTD_MSP_CMD_TYPE_T<s(1)(1)(0)>[T]  eCmdType<s(1)(1)(0)>[&];       
    BOOL<s(1)(1)(0)>[T]                bEnable<s(1)(1)(0)>[&];        
}CTD_MSP_1PLUS1_CFG_T<s(0)(0)(0)>[&];(D1:CTD_MSP_1PLUS1_CFG_T:1)[[TYPENAME:CTD_MSP_1PLUS1_CFG_T]]

typedef void (*MPA_Handle_RcvKbyte<s(0)(0)(0)>[&])TYPENAME:FUNC:(MPA_Handle_RcvKbyte)(UINT16<s(0)(0)(0)>[T] usSlot<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ucPort<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPorttype<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucK1<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucK2<s(0)(0)(0)>[&]);(D1:ucK2:0)
typedef void (*MPA_RcvPhyDefect<s(0)(0)(0)>[&])TYPENAME:FUNC:(MPA_RcvPhyDefect)(UINT16<s(0)(0)(0)>[T] usSlot<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ucPort<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPorttype<s(0)(0)(0)>[&], MSP_SWITCH_REQ_T<s(0)(0)(0)>[T] eType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulFlag<s(0)(0)(0)>[&]);(D1:ulFlag:0)
typedef void (*MPA_RprtMspStatus<s(0)(0)(0)>[&])TYPENAME:FUNC:(MPA_RprtMspStatus)(UINT16<s(0)(0)(0)>[T] wMspGrpId<s(0)(0)(0)>[&], CTD_MSP_STATE_T<s(0)(0)(0)>[T] *psMspState<s(0)(0)(0)>[&]);(D1:psMspState:0)




 















 
 
 
 
 
 
 
 	
 
 













































	extern int stack<s(0)(0)(0)>[&](unsigned int *pStack<s(0)(0)(0)>[&][], int levels<s(0)(0)(0)>[&]);(D1:levels:0)
	extern void logBackN<s(0)(0)(0)>[&](const char *title<s(0)(0)(0)>[&], int n<s(0)(0)(0)>[&]);(D1:n:0)
	extern void logBackM<s(0)(0)(0)>[&](const char *title<s(0)(0)(0)>[&], int n<s(0)(0)(0)>[&]);(D1:n:0)
	extern void logExit<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&]);(D1:line:0)
	extern void logDump<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&]);(D1:line:0)
	extern void sys_panic<s(0)(0)(0)>[&](char *file<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&]);(D1:line:0)

















 




























	typedef struct {
		int head<s(1)(1)(0)>[&];
		int tail<s(1)(1)(0)>[&];
		command_tt<s(1)(1)(0)>[T] *queue<s(1)(1)(0)>[&][500 ];
	} LogQ_t<s(0)(0)(0)>[&];(D1:LogQ_t:1)[[TYPENAME:LogQ_t]]

	extern unsigned int utility_log<s(0)(0)(0)>[&];(D1:utility_log:0)
	extern unsigned int MsgRecvLogOpen<s(0)(0)(0)>[&];(D1:MsgRecvLogOpen:0)
	extern unsigned int COL_Log<s(0)(0)(0)>[&];(D1:COL_Log:0)
	
	
	extern LogQ_t<s(0)(0)(0)>[T] logq<s(0)(0)(0)>[&];(D1:logq:0)
	void debug_log_init<s(0)(0)(0)>[&](void);(D1:debug_log_init:0)
	void log_enqueue<s(0)(0)(0)>[&](command_tt<s(0)(0)(0)>[T] * log<s(0)(0)(0)>[&]);(D1:log:0)
	void log_clear<s(0)(0)(0)>[&](void);(D1:log_clear:0)
	void consoleLog<s(0)(0)(0)>[&](const char *fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)
 
	void ulogit<s(0)(0)(0)>[&](int line<s(0)(0)(0)>[&], const char *file_name<s(0)(0)(0)>[&], int global<s(0)(0)(0)>[&], const char *fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)













 


typedef enum 
{
    LC_UNKNOWN<s(0)(0)(0)>[&] = 0,      
    LC_CLEAR<s(0)(0)(0)>[&]   = 1,      
    LC_SD<s(0)(0)(0)>[&]      = 2,      
    LC_SF<s(0)(0)(0)>[&]      = 3,      
    LC_MAX<s(0)(0)(0)>[&]     = 4 
}LINE_COND_T<s(0)(0)(0)>[&];(D1:LINE_COND_T:1)[[TYPENAME:LINE_COND_T]]

typedef enum 
{
    KEXP_AUTO_MODE<s(0)(0)(0)>[&]      = 0,     
    KEXP_LOCAL_HW_MODE<s(0)(0)(0)>[&]  = 1,     
    KEXP_LOCAL_SW_MODE<s(0)(0)(0)>[&]  = 2,     
    KEXP_FORCE_MODE<s(0)(0)(0)>[&]     = 3,     
}CTD_KEXP_MODE_T<s(0)(0)(0)>[&];(D1:CTD_KEXP_MODE_T:1)[[TYPENAME:CTD_KEXP_MODE_T]]

typedef enum 
{
    KEXP_UNKNOWN_STATE<s(0)(0)(0)>[&]     = 0,     
    KEXP_AUTO_LOCAL_STATE<s(0)(0)(0)>[&]  = 1,     
    KEXP_AUTO_EXP_STATE<s(0)(0)(0)>[&]    = 2,     
    KEXP_FORCE_EXP_STATE<s(0)(0)(0)>[&]   = 3,     
    KEXP_FORCE_SW_STATE<s(0)(0)(0)>[&]    = 4,     
    KEXP_FORCE_HW_STATE<s(0)(0)(0)>[&]    = 5,     
}CTD_KEXP_STATE_T<s(0)(0)(0)>[&];(D1:CTD_KEXP_STATE_T:1)[[TYPENAME:CTD_KEXP_STATE_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T]          ulSlot<s(1)(1)(0)>[&];
    HW_PORT_TYPE<s(1)(1)(0)>[T]    ePortType<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          ulPort<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          ulPeerSlot<s(1)(1)(0)>[&];
    HW_PORT_TYPE<s(1)(1)(0)>[T]    ePeerPortType<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]          ulPeerPort<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           ucNodeId<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]           ucNodeNum<s(1)(1)(0)>[&];    
    CTD_KEXP_MODE_T<s(1)(1)(0)>[T] eMode<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]            bEnable<s(1)(1)(0)>[&];
}CTD_MSSP_ENABLE_T<s(0)(0)(0)>[&];(D1:CTD_MSSP_ENABLE_T:1)[[TYPENAME:CTD_MSSP_ENABLE_T]]

typedef struct
{
    UINT32<s(1)(1)(0)>[T]              ulSlot<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              ulPortType<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              ulPort<s(1)(1)(0)>[&];
    union
    {
        struct
        {
            UINT8<s(3)(1)(0)>[T]       ucK1<s(3)(1)(0)>[&];
            UINT8<s(3)(1)(0)>[T]       ucK2<s(3)(1)(0)>[&];
            UINT16<s(3)(1)(0)>[T]      usBackup<s(3)(1)(0)>[&];
        } sKBytes<s(2)(0)(0)>[&];
        LINE_COND_T<s(2)(0)(0)>[T]     eLineCond<s(2)(0)(0)>[&];
    } uRptChange<s(1)(0)(0)>[&];
} CTD_MSSP_CHANGERPT_T<s(0)(0)(0)>[&];(D1:CTD_MSSP_CHANGERPT_T:1)[[TYPENAME:CTD_MSSP_CHANGERPT_T]]

typedef void (*MSA_ChangeKbyteBatch<s(0)(0)(0)>[&])TYPENAME:FUNC:(MSA_ChangeKbyteBatch)(CTD_MSSP_CHANGERPT_T<s(0)(0)(0)>[T] *pKb<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]  batNo<s(0)(0)(0)>[&]);(D1:batNo:0)
typedef void (*MSA_ChangeLineCondBatch<s(0)(0)(0)>[&])TYPENAME:FUNC:(MSA_ChangeLineCondBatch)(CTD_MSSP_CHANGERPT_T<s(0)(0)(0)>[T] *pLc<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]  batNo<s(0)(0)(0)>[&]);(D1:batNo:0)

typedef void (*MST_ChangeOfKb<s(0)(0)(0)>[&])TYPENAME:FUNC:(MST_ChangeOfKb)(UINT32<s(0)(0)(0)>[T] ulSlot<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPortType<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPort<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucK1<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucK2<s(0)(0)(0)>[&]);(D1:ucK2:0)
typedef void (*MST_ChangeOfLineCond<s(0)(0)(0)>[&])TYPENAME:FUNC:(MST_ChangeOfLineCond)(UINT32<s(0)(0)(0)>[T] ulSlot<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPortType<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPort<s(0)(0)(0)>[&], LINE_COND_T<s(0)(0)(0)>[T] eLcCond<s(0)(0)(0)>[&]);(D1:eLcCond:0)




 





 
 
 
 
 
 
 
 
 
 
 
 




























 
typedef enum 
{
    SNCP_BACK_TP<s(0)(0)(0)>[&]       = 0,
    SNCP_WORK_TP1<s(0)(0)(0)>[&]      = 1,
    SNCP_WORK_TP2<s(0)(0)(0)>[&]      = 2,
    SNCP_WORK_TP3<s(0)(0)(0)>[&]      = 3,
    SNCP_WORK_TP4<s(0)(0)(0)>[&]      = 4,
    SNCP_WORK_TP5<s(0)(0)(0)>[&]      = 5,
    SNCP_WORK_TP6<s(0)(0)(0)>[&]      = 6,
    SNCP_WORK_TP7<s(0)(0)(0)>[&]      = 7,
    SNCP_WORK_TP8<s(0)(0)(0)>[&]      = 8,
    SNCP_WORK_TP9<s(0)(0)(0)>[&]      = 9,
    SNCP_WORK_TP10<s(0)(0)(0)>[&]     = 10,
    SNCP_WORK_TP11<s(0)(0)(0)>[&]     = 11,
    SNCP_WORK_TP12<s(0)(0)(0)>[&]     = 12,
    SNCP_WORK_TP13<s(0)(0)(0)>[&]     = 13,
    SNCP_WORK_TP14<s(0)(0)(0)>[&]     = 14,
    SNCP_WORK_TP15<s(0)(0)(0)>[&]     = 15
}SNCP_TP_CHANNEL_T<s(0)(0)(0)>[&];(D1:SNCP_TP_CHANNEL_T:1)[[TYPENAME:SNCP_TP_CHANNEL_T]]

typedef enum 
{
    SNCP_LOGIC_TP<s(0)(0)(0)>[&]      = 0,
    SNCP_PHYSICAL_TP<s(0)(0)(0)>[&]   = 1,
    SNCP_PHYSICAL_TP1<s(0)(0)(0)>[&]  = 2
}SNCP_LOGIC_TP_DEFINE_T<s(0)(0)(0)>[&];(D1:SNCP_LOGIC_TP_DEFINE_T:1)[[TYPENAME:SNCP_LOGIC_TP_DEFINE_T]]


typedef enum 
{
    SNCP_I<s(0)(0)(0)>[&]             = 0,
    SNCP_N<s(0)(0)(0)>[&]             = 1,
}SNCP_INTRUSIVE_T<s(0)(0)(0)>[&];(D1:SNCP_INTRUSIVE_T:1)[[TYPENAME:SNCP_INTRUSIVE_T]]

typedef struct 
{
    UINT16<s(1)(1)(0)>[T]               usSlotNum<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]               usPortType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]               usPortNum<s(1)(1)(0)>[&];
    TP_INDEX_T<s(1)(1)(0)>[T]           TpIndex<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                  bInUse<s(1)(1)(0)>[&];       
}__attribute__ ((packed))  SNCP_CHANNEL_T<s(0)(0)(0)>[&];(D1:SNCP_CHANNEL_T:1)[[TYPENAME:SNCP_CHANNEL_T]]


typedef enum 
{
    SPC_TP_TYPE_PROTECT<s(0)(0)(0)>[&]             = 0,
    SPC_TP_TYPE_PROTECT_MS_PROTECT<s(0)(0)(0)>[&],    
    SPC_TP_TYPE_WORK<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK2<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK2_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK3<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK3_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK4<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK4_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK5<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK5_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK6<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK6_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK7<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK7_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK8<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK8_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK9<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK9_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK10<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK10_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK11<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK11_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK12<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK12_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK13<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK13_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK14<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK14_MS_PROTECT<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK15<s(0)(0)(0)>[&],
    SPC_TP_TYPE_WORK15_MS_PROTECT<s(0)(0)(0)>[&]
}SNCP_TP_TYPE_T<s(0)(0)(0)>[&];(D1:SNCP_TP_TYPE_T:1)[[TYPENAME:SNCP_TP_TYPE_T]]


typedef enum
{
    SNCP_SIGNAL_UNKNOW<s(0)(0)(0)>[&]     = 0,
    SNCP_SIGNAL_NORMAL<s(0)(0)(0)>[&]     = 1,
    SNCP_SIGNAL_FAIL<s(0)(0)(0)>[&]       = 2,
    SNCP_SIGNAL_DEG<s(0)(0)(0)>[&]        = 3,
}SNCP_SIGNAL_STATE_T<s(0)(0)(0)>[&];(D1:SNCP_SIGNAL_STATE_T:1)[[TYPENAME:SNCP_SIGNAL_STATE_T]]

 
typedef enum
{
    SNCP_1J1_TYPE<s(0)(0)(0)>[&]      = 0,
    SNCP_1BN_TYPE<s(0)(0)(0)>[&]      = 1
}SNCP_GROUP_TYPE_T<s(0)(0)(0)>[&];(D1:SNCP_GROUP_TYPE_T:1)[[TYPENAME:SNCP_GROUP_TYPE_T]]

 
typedef struct 
{    
    BOOL<s(1)(1)(0)>[T]                  bEnableSncp<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                ulSncpId<s(1)(1)(0)>[&];										
    UINT16<s(1)(1)(0)>[T]                usWorkBus<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 ucWorkVc4<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                usProtBus<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 ucProtVc4<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                usDestBus<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                 ucDestVc4<s(1)(1)(0)>[&];
     
    BOOL<s(1)(1)(0)>[T]                 bXCEnable<s(1)(1)(0)>[&];
     
    UINT16<s(1)(1)(0)>[T]                usDestFirstBus<s(1)(1)(0)>[&]; 
    UINT8<s(1)(1)(0)>[T]                 ucDestFirstVc4<s(1)(1)(0)>[&];

    UINT8<s(1)(1)(0)>[T]                 ucSncpIntrusive<s(1)(1)(0)>[&];                
    UINT8<s(1)(1)(0)>[T]                 ucSncpRestoreMode<s(1)(1)(0)>[&];                
    UINT16<s(1)(1)(0)>[T]                usHoldOffTime<s(1)(1)(0)>[&];                    
    UINT16<s(1)(1)(0)>[T]                usSncpWTR<s(1)(1)(0)>[&];   
}__attribute__ ((packed))  HW_HO3P_SNCP_CONFIG_T<s(0)(0)(0)>[&];(D1:HW_HO3P_SNCP_CONFIG_T:1)[[TYPENAME:HW_HO3P_SNCP_CONFIG_T]]

typedef struct 
{
    UINT8<s(1)(1)(0)>[T]                ucBus<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                ucVc4<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]               KLM<s(1)(1)(0)>[&];   
}__attribute__ ((packed))  LO_MATRIX_ITEM_T<s(0)(0)(0)>[&];(D1:LO_MATRIX_ITEM_T:1)[[TYPENAME:LO_MATRIX_ITEM_T]]

 
typedef struct 
{    
    BOOL<s(1)(1)(0)>[T]                    bEnableSncp<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                  ulSncpId<s(1)(1)(0)>[&];										
    LO_MATRIX_ITEM_T<s(1)(1)(0)>[T]        WorkItem<s(1)(1)(0)>[&];
    LO_MATRIX_ITEM_T<s(1)(1)(0)>[T]        ProtItem<s(1)(1)(0)>[&];
    LO_MATRIX_ITEM_T<s(1)(1)(0)>[T]        DestItem<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]                	ucSncpIntrusive<s(1)(1)(0)>[&];                
    UINT8<s(1)(1)(0)>[T]                   ucSncpRestoreMode<s(1)(1)(0)>[&];  
    UINT8<s(1)(1)(0)>[T]                   ucSncpExtCmd<s(1)(1)(0)>[&];              
    UINT16<s(1)(1)(0)>[T]                  usHoldOffTime<s(1)(1)(0)>[&];                    
    UINT16<s(1)(1)(0)>[T]                  usSncpWTR<s(1)(1)(0)>[&];   
}__attribute__ ((packed))  HW_LO3P_SNCP_CONFIG_T<s(0)(0)(0)>[&];(D1:HW_LO3P_SNCP_CONFIG_T:1)[[TYPENAME:HW_LO3P_SNCP_CONFIG_T]]

typedef union
{
    HW_HO3P_SNCP_CONFIG_T<s(1)(1)(0)>[T]   HoSncpGroup<s(1)(1)(0)>[&];
    HW_LO3P_SNCP_CONFIG_T<s(1)(1)(0)>[T]   LoScnpGroup<s(1)(1)(0)>[&];
}__attribute__ ((packed))  HW_3P_SNCP_CONFIG_T<s(0)(0)(0)>[&];(D1:HW_3P_SNCP_CONFIG_T:1)[[TYPENAME:HW_3P_SNCP_CONFIG_T]]



 
typedef struct 
{    
    UINT32<s(1)(1)(0)>[T]                ulSncpId<s(1)(1)(0)>[&];													 
    SNCP_GROUP_TYPE_T<s(1)(1)(0)>[T]     GroupType<s(1)(1)(0)>[&];                          
    UINT8<s(1)(1)(0)>[T]                 ucWorkTpNum<s(1)(1)(0)>[&];                        
    UINT32<s(1)(1)(0)>[T]                ulTpType<s(1)(1)(0)>[&];                           
    SNCP_CHANNEL_T<s(1)(1)(0)>[T]  	  Tp<s(1)(1)(0)>[&][1  + 1][3 ];   
    SNCP_CHANNEL_T<s(1)(1)(0)>[T]        destOrSrcTp<s(1)(1)(0)>[&][1 +1];   
    UINT8<s(1)(1)(0)>[T]                 ucSncpIntrusive<s(1)(1)(0)>[&];                    
    UINT8<s(1)(1)(0)>[T]                 ucSncpRestoreMode<s(1)(1)(0)>[&];                  
    UINT16<s(1)(1)(0)>[T]                usHoldOffTime<s(1)(1)(0)>[&];                      
    UINT16<s(1)(1)(0)>[T]                usSncpWTR<s(1)(1)(0)>[&];   
	
 
    UINT8<s(1)(1)(0)>[T]                 ucSncpSignalDircetion<s(1)(1)(0)>[&];              
}__attribute__ ((packed))  HW_SNCP_CONFIG_T<s(0)(0)(0)>[&];(D1:HW_SNCP_CONFIG_T:1)[[TYPENAME:HW_SNCP_CONFIG_T]]
typedef struct 
{    
    UINT32<s(1)(1)(0)>[T]                      ulSncpId<s(1)(1)(0)>[&];                                                    
    SNCP_GROUP_TYPE_T<s(1)(1)(0)>[T]     GroupType<s(1)(1)(0)>[&];                          
    UINT8<s(1)(1)(0)>[T]                       ucWorkTpNum<s(1)(1)(0)>[&];                        
    UINT32<s(1)(1)(0)>[T]                      ulTpType<s(1)(1)(0)>[&];                           
    SNCP_CHANNEL_T<s(1)(1)(0)>[T]          Tp<s(1)(1)(0)>[&][1  + 1][3 ];   
    SNCP_CHANNEL_T<s(1)(1)(0)>[T]          destOrSrcTp<s(1)(1)(0)>[&][1 +1];   
    UINT8<s(1)(1)(0)>[T]                       ucSncpIntrusive<s(1)(1)(0)>[&];                    
    UINT8<s(1)(1)(0)>[T]                       ucSncpRestoreMode<s(1)(1)(0)>[&];                  
    UINT16<s(1)(1)(0)>[T]                      usHoldOffTime<s(1)(1)(0)>[&];                      
    UINT16<s(1)(1)(0)>[T]                      usSncpWTR<s(1)(1)(0)>[&];   
    
 
    UINT8<s(1)(1)(0)>[T]                       ucSncpSignalDircetion<s(1)(1)(0)>[&];              

    UINT8<s(1)(1)(0)>[T]                   ucSncpFrom<s(1)(1)(0)>[&];                           
    BOOL<s(1)(1)(0)>[T]                    SncpNeedReportGMPL<s(1)(1)(0)>[&];           
}__attribute__ ((packed))  HW_SNCP_GMPL_CONFIG_T<s(0)(0)(0)>[&];(D1:HW_SNCP_GMPL_CONFIG_T:1)[[TYPENAME:HW_SNCP_GMPL_CONFIG_T]]  
 
typedef struct 
{
    UINT32<s(1)(1)(0)>[T]     ulSncpId<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T]      ucTpSignalState<s(1)(1)(0)>[&][1  + 1][3 ];         
    UINT8<s(1)(1)(0)>[T]      ucTpTransfer<s(1)(1)(0)>[&][1  + 1];               
    UINT8<s(1)(1)(0)>[T]      ucChannelState<s(1)(1)(0)>[&];                    
    
    UINT16<s(1)(1)(0)>[T]     usTimerStart<s(1)(1)(0)>[&];                       
    UINT32<s(1)(1)(0)>[T]     ulTimerNum<s(1)(1)(0)>[&];
        
    UINT8<s(1)(1)(0)>[T]      ucSncpExternalCmd<s(1)(1)(0)>[&];                            
    UINT8<s(1)(1)(0)>[T]      ucSncpExtCmdResult<s(1)(1)(0)>[&];                           
    UINT8<s(1)(1)(0)>[T]      ucSncpCurSwitchReq<s(1)(1)(0)>[&];                           
    UINT8<s(1)(1)(0)>[T]      ucSncpSwitchReason<s(1)(1)(0)>[&];                           
}__attribute__ ((packed))  HW_SNCP_STATE_T<s(0)(0)(0)>[&];(D1:HW_SNCP_STATE_T:1)[[TYPENAME:HW_SNCP_STATE_T]]

 
typedef struct
{
    UINT32<s(1)(1)(0)>[T]                      ulSncpGroupId<s(1)(1)(0)>[&];
    SNCP_CHANNEL_T<s(1)(1)(0)>[T]              Tp<s(1)(1)(0)>[&];    
    SNCP_TP_TYPE_T<s(1)(1)(0)>[T]              TpId<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                        bEnable<s(1)(1)(0)>[&];
    SNCP_INTRUSIVE_T<s(1)(1)(0)>[T]            Intrusive<s(1)(1)(0)>[&];
}__attribute__ ((packed))  SW_SNCP_TP_ENABLE_STR_T<s(0)(0)(0)>[&];(D1:SW_SNCP_TP_ENABLE_STR_T:1)[[TYPENAME:SW_SNCP_TP_ENABLE_STR_T]]

 
typedef struct
{
    UINT16<s(1)(1)(0)>[T]               slot<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]               portType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]               port<s(1)(1)(0)>[&];
    TP_INDEX_T<s(1)(1)(0)>[T]           Tp<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]               SncpIndex<s(1)(1)(0)>[&];
    SNCP_TP_TYPE_T<s(1)(1)(0)>[T]       WorkTpId<s(1)(1)(0)>[&];
    SNCP_SIGNAL_STATE_T<s(1)(1)(0)>[T]  bSet<s(1)(1)(0)>[&];
}__attribute__ ((packed))  SW_SNCP_STATE_REPORT_T<s(0)(0)(0)>[&];(D1:SW_SNCP_STATE_REPORT_T:1)[[TYPENAME:SW_SNCP_STATE_REPORT_T]]

 

 
typedef void (*SPA_DrvIntHappenFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_DrvIntHappenFunc)(UINT32<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SncpDprFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SncpDprFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pulReportNum<s(0)(0)(0)>[&], SW_SNCP_STATE_REPORT_T<s(0)(0)(0)>[T]** ppsReportData<s(0)(0)(0)>[&]);(D1:ppsReportData:0)
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SncpPollFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SncpPollFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T]* pulReportNum<s(0)(0)(0)>[&], SW_SNCP_STATE_REPORT_T<s(0)(0)(0)>[T]** ppsReportData<s(0)(0)(0)>[&]);(D1:ppsReportData:0)

 
typedef void (*SPA_BoardStateChangeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_BoardStateChangeFunc)(BOARD_EVENT_T<s(0)(0)(0)>[T] ulEvent<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] usSlotNum<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] ulCardType<s(0)(0)(0)>[&]);(D1:ulCardType:0)

 
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SetProtModeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetProtModeFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&],  const SW_SNCP_TP_ENABLE_STR_T<s(0)(0)(0)>[T] *pEnableStr<s(0)(0)(0)>[&]);(D1:pEnableStr:0)

 

 
 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_AddHWSncpToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_AddHWSncpToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&],const HW_3P_SNCP_CONFIG_T<s(0)(0)(0)>[T] *pSncpGrp<s(0)(0)(0)>[&]);(D1:pSncpGrp:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_DelHWSncpToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_DelHWSncpToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] eDelMethod<s(0)(0)(0)>[&]);(D1:eDelMethod:0)

 
 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_ExtSwitchCmdToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_ExtSwitchCmdToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] eCmdType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_SetSncpHoldOffTimeToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetSncpHoldOffTimeToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usTimeCnt<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_SetSncpWtrToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetSncpWtrToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usSncpWtr<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_SetSncpIntrusiveToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetSncpIntrusiveToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], SNCP_INTRUSIVE_T<s(0)(0)(0)>[T] eNIMode<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_SetSncpRvtModeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetSncpRvtModeFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] eRvtMode<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_ConfigSncpEndFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_ConfigSncpEndFunc)(void);(D1:SPA_ConfigSncpEndFunc:0)

 
 
typedef UINT32<s(0)(0)(0)>[T] (*SPA_ReportSncpStateFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_ReportSncpStateFunc)(const HW_SNCP_STATE_T<s(0)(0)(0)>[T] *pSncpGrpState<s(0)(0)(0)>[&]);(D1:pSncpGrpState:0)  


 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SetHapsModeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetHapsModeFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPortType<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], TP_INDEX_T<s(0)(0)(0)>[T] tpIndex<s(0)(0)(0)>[&], SNCP_INTRUSIVE_T<s(0)(0)(0)>[T]  eNIMode<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
typedef UINT32<s(0)(0)(0)>[T] (*SPA_GetProtStatFromDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_GetProtStatFromDrvFunc)(void);(D1:SPA_GetProtStatFromDrvFunc:0)
 
 

 
extern void SPA_RegSetProtMode<s(0)(0)(0)>[&](SPA_SetProtModeFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0) 

 
extern void SPA_RegAddHWSncpToDrv<s(0)(0)(0)>[&](SPA_AddHWSncpToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegDelHWSncpToDrv<s(0)(0)(0)>[&](SPA_DelHWSncpToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
extern void SPA_RegSetExCmdToDrv<s(0)(0)(0)>[&](SPA_ExtSwitchCmdToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegSetHoldoffTimeToDrv<s(0)(0)(0)>[&](SPA_SetSncpHoldOffTimeToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegSetWtrToDrv<s(0)(0)(0)>[&](SPA_SetSncpWtrToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegSetIntrusiveToDrv<s(0)(0)(0)>[&](SPA_SetSncpIntrusiveToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegSetRvtToDrv<s(0)(0)(0)>[&](SPA_SetSncpRvtModeFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
extern void SPA_RegConfigHWEnd<s(0)(0)(0)>[&](SPA_ConfigSncpEndFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
extern void SPA_RegSncpDpr<s(0)(0)(0)>[&](SPA_SncpDprFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
extern void SPA_RegSncpPoll<s(0)(0)(0)>[&](SPA_SncpPollFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
 
extern void SPA_RegSetHapsMode<s(0)(0)(0)>[&](SPA_SetHapsModeFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0) 
extern void SPA_RegGetProtStatFromDrv<s(0)(0)(0)>[&](SPA_GetProtStatFromDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

typedef void (*SPC_BoardStateChangeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPC_BoardStateChangeFunc)(BOARD_EVENT_T<s(0)(0)(0)>[T] ulEvent<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] usSlotNum<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] ulCardType<s(0)(0)(0)>[&]);(D1:ulCardType:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SetForcRrptAlmFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetForcRrptAlmFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&]);(D1:inst:0)
extern void SPA_RegSetForceRrptAlm<s(0)(0)(0)>[&](SPA_SetForcRrptAlmFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
typedef int (*SPA_RegGetPhyDestSncpFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_RegGetPhyDestSncpFunc)(void *pTP<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTpNum<s(0)(0)(0)>[&]);(D1:ulTpNum:0)
extern void SPA_RegGetPhyDestSncp<s(0)(0)(0)>[&](SPA_RegGetPhyDestSncpFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SetLoSncpHoldOffTimeCommonValueToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetLoSncpHoldOffTimeCommonValueToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer1<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer2<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer3<s(0)(0)(0)>[&]);(D1:ulTimer3:0)
 
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SPA_SetLoSncpWtrCommoneValueToDrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(SPA_SetLoSncpWtrCommoneValueToDrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer1<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer2<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer3<s(0)(0)(0)>[&]);(D1:ulTimer3:0)
  
 
extern void SPA_RegSetLoSncpHoldOffTimeCommonValueToDrv<s(0)(0)(0)>[&] (SPA_SetLoSncpHoldOffTimeCommonValueToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern void SPA_RegSetLoSncpWtrCommoneValueToDrv<s(0)(0)(0)>[&] (SPA_SetLoSncpWtrCommoneValueToDrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
 
 
 
typedef int (*funcCCSetSncpGroupAdd<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpGroupAdd)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], HW_3P_SNCP_CONFIG_T<s(0)(0)(0)>[T] *psSncpGrp<s(0)(0)(0)>[&]);(D1:psSncpGrp:0)

typedef int (*funcCCSetSncpExtCmd<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpExtCmd)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] eCmdType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]);(D1:ucDestVc4:0)

typedef int (*funcCCSetSncpHoldOffTime<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpHoldOffTime)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usTimeCnt<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]) ;(D1:ucDestVc4:0)

typedef int (*funcCCSetSncpWtr<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpWtr)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usSncpWtr<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]) ;(D1:ucDestVc4:0)
typedef int (*funcCCSetSncpNIMode<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpNIMode)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], SNCP_INTRUSIVE_T<s(0)(0)(0)>[T] eNIMode<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]) ;(D1:ucDestVc4:0)

typedef int (*funcCCSetSncpRvtMode<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpRvtMode)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] eRvtMode<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&]) ;(D1:ucDestVc4:0)
typedef int (*funcCCSetSncpDelete<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetSncpDelete)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSncpGrpId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] usDestBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucDestVc4<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] eDelMethod<s(0)(0)(0)>[&]) ;(D1:eDelMethod:0)
typedef int (*funcCCSetHoSwitch<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetHoSwitch)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] fromBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] fromVc4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] toBus<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] toVc4<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bSwitch<s(0)(0)(0)>[&]);(D1:bSwitch:0)
 
typedef int (*funcCCReplaceLoSncpW<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCReplaceLoSncpW)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] SncpGroupId<s(0)(0)(0)>[&], LO_MATRIX_ITEM_T<s(0)(0)(0)>[T] srcXcPoint<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bWork<s(0)(0)(0)>[&]);(D1:bWork:0)
typedef int  (*funcCCSetLoSncpGlobalWtr<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetLoSncpGlobalWtr)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulWtrTimer1<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulWtrTimer2<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulWtrTimer3<s(0)(0)(0)>[&]);(D1:ulWtrTimer3:0)
typedef int (*funcCCSetLoSncpGloablHoldoff<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetLoSncpGloablHoldoff)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer1<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer2<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTimer3<s(0)(0)(0)>[&]);(D1:ulTimer3:0)













 




























typedef struct 
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    int state<s(1)(1)(0)>[&];
} PRAApplInitState_t<s(0)(0)(0)>[&];(D1:PRAApplInitState_t:1)[[TYPENAME:PRAApplInitState_t]]

typedef struct
{
    PbSlotNumberType_Tval<s(1)(1)(0)>[T] SlotNo<s(1)(1)(0)>[&];          
    UINT32<s(1)(1)(0)>[T] PortNo<s(1)(1)(0)>[&];              
    PbPortType_Tval<s(1)(1)(0)>[T]            PortType<s(1)(1)(0)>[&];            


    TruthValue_Tval<s(1)(1)(0)>[T]             PRBSEnable<s(1)(1)(0)>[&];        
    pbPRBSPattern_Tval<s(1)(1)(0)>[T]       PRBSPattern<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                          PRBSErrorBlocks<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                          PRBSErrorSeconds<s(1)(1)(0)>[&];
    pbPRBSStatus_Tval<s(1)(1)(0)>[T]         PRBSStatus<s(1)(1)(0)>[&];
    PbActualPortType_Tval<s(1)(1)(0)>[T]        PRBSActualPortType<s(1)(1)(0)>[&];

    prbsMode_Tval<s(1)(1)(0)>[T]   PRBSMode<s(1)(1)(0)>[&];
}PRA_PORTINFO_T<s(0)(0)(0)>[&];(D1:PRA_PORTINFO_T:1)[[TYPENAME:PRA_PORTINFO_T]]


 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] PRA_SetPortStatus<s(0)(0)(0)>[&] (UINT8<s(0)(0)(0)>[T] slotNo<s(0)(0)(0)>[&],
    UINT8<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&],
    UINT8<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&],
    pbPRBSStatus_Tval<s(0)(0)(0)>[T] syncStatus<s(0)(0)(0)>[&]);(D1:syncStatus:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*PRA_SetPortStatus_Func<s(0)(0)(0)>[&])TYPENAME:FUNC:(PRA_SetPortStatus_Func)
    (UINT8<s(0)(0)(0)>[T] slotNo<s(0)(0)(0)>[&],
    UINT8<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&],
    UINT8<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&],
    pbPRBSStatus_Tval<s(0)(0)(0)>[T] syncStatus<s(0)(0)(0)>[&]);(D1:syncStatus:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*PRA_GetPortInfo_Func<s(0)(0)(0)>[&])TYPENAME:FUNC:(PRA_GetPortInfo_Func) 
    (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], 
    UINT32<s(0)(0)(0)>[T] ulSlot<s(0)(0)(0)>[&], 
    HW_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], 
    UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], 
    UINT32<s(0)(0)(0)>[T] *pulPrbsCnt<s(0)(0)(0)>[&]);(D1:pulPrbsCnt:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*PRA_SetPortInfo_Func<s(0)(0)(0)>[&])TYPENAME:FUNC:(PRA_SetPortInfo_Func) 
    (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], 
    UINT32<s(0)(0)(0)>[T] ulSlot<s(0)(0)(0)>[&], 
    HW_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], 
    UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], 
    pbPRBSPattern_Tval<s(0)(0)(0)>[T] ePrbsMode<s(0)(0)(0)>[&], 
    BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)

void PRA_PollData<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] counter<s(0)(0)(0)>[&]);(D1:counter:0)
void PRA_RegGetPortInfo<s(0)(0)(0)>[&](PRA_GetPortInfo_Func<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
void PRA_RegSetPortInfo<s(0)(0)(0)>[&](PRA_SetPortInfo_Func<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)




 











































 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*GFA_CfgAlm2DrvFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(GFA_CfgAlm2DrvFunc)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
extern void GFA_RegSetAlmCfg<s(0)(0)(0)>[&](GFA_CfgAlm2DrvFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 

 
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*GFA_RprtAlarmDetect2GmplsFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(GFA_RprtAlarmDetect2GmplsFunc)(        UINT32<s(0)(0)(0)>[T]          ulSlot<s(0)(0)(0)>[&],         HW_PORT_TYPE<s(0)(0)(0)>[T]    tPortType<s(0)(0)(0)>[&],        HW_PORT_TYPE<s(0)(0)(0)>[T]    tCurPortType<s(0)(0)(0)>[&],        UINT32<s(0)(0)(0)>[T]          ulPort<s(0)(0)(0)>[&],        SDH_TP_TYPE<s(0)(0)(0)>[T]     tpType<s(0)(0)(0)>[&],        COMPACT_TP_T<s(0)(0)(0)>[T]    tpIndex<s(0)(0)(0)>[&],        UINT32<s(0)(0)(0)>[T]          ulDefectId<s(0)(0)(0)>[&],        FMA_ALM_STATE<s(0)(0)(0)>[T]   eState<s(0)(0)(0)>[&]    );(D1:eState:0)

 
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] GFA_AlarmDetect<s(0)(0)(0)>[&](
        UINT32<s(0)(0)(0)>[T]          ulSlot<s(0)(0)(0)>[&], 
        HW_PORT_TYPE<s(0)(0)(0)>[T]    ePortType<s(0)(0)(0)>[&],
        HW_PORT_TYPE<s(0)(0)(0)>[T]    eCurPortType<s(0)(0)(0)>[&],
        UINT32<s(0)(0)(0)>[T]          ulPort<s(0)(0)(0)>[&],
        SDH_TP_TYPE<s(0)(0)(0)>[T]     tpType<s(0)(0)(0)>[&],
        COMPACT_TP_T<s(0)(0)(0)>[T]    tpIndex<s(0)(0)(0)>[&],
        UINT32<s(0)(0)(0)>[T]          ulDefectId<s(0)(0)(0)>[&],
        FMA_ALM_STATE<s(0)(0)(0)>[T]   eState<s(0)(0)(0)>[&]);(D1:eState:0)

 
extern void GFM_BoardStateChange<s(0)(0)(0)>[&](BOARD_EVENT_T<s(0)(0)(0)>[T] ulEvent<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] usSlotNum<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] ulCardType<s(0)(0)(0)>[&]);(D1:ulCardType:0)












 
































 
typedef unsigned char       BYTE<s(0)(0)(0)>[&];(D1:BYTE:1)[[TYPENAME:BYTE]]

typedef unsigned short      WORD<s(0)(0)(0)>[&];(D1:WORD:1)[[TYPENAME:WORD]]
typedef unsigned int        DWORD<s(0)(0)(0)>[&];(D1:DWORD:1)[[TYPENAME:DWORD]]


 



















 




 






 







 










 


typedef enum 
{
     
    CTD_MODE_STM1<s(0)(0)(0)>[&]       = 0x0,
    CTD_MODE_STM1E<s(0)(0)(0)>[&]      = 0x1,
    CTD_MODE_STM4<s(0)(0)(0)>[&]       = 0x2,
    CTD_MODE_STM16<s(0)(0)(0)>[&]      = 0x3,
    CTD_MODE_STM64<s(0)(0)(0)>[&]      = 0x4,
    CTD_MODE_STM256<s(0)(0)(0)>[&]     = 0x5,

     
    CTD_MODE_E1<s(0)(0)(0)>[&]         = 0x6,
    CTD_MODE_DS1<s(0)(0)(0)>[&]        = 0x7,
    CTD_MODE_E3<s(0)(0)(0)>[&]         = 0x8,
    CTD_MODE_DS3<s(0)(0)(0)>[&]        = 0x9,

     
    CTD_MODE_OTU2<s(0)(0)(0)>[&]       = 0xa,
}CTD_MODE_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_MODE_TYPE_T:1)[[TYPENAME:CTD_MODE_TYPE_T]]

 
typedef enum 
{
    CTD_FEC_MODE_RS<s(0)(0)(0)>[&]     = 0x0,
    CTD_FEC_MODE_UFEC<s(0)(0)(0)>[&]   = 0x1,
}CTD_FEC_MODE_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_FEC_MODE_TYPE_T:1)[[TYPENAME:CTD_FEC_MODE_TYPE_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] los<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] oof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
}CTD_RS_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_RS_ALARM_T:1)[[TYPENAME:CTD_RS_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
}CTD_MS_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_MS_ALARM_T:1)[[TYPENAME:CTD_MS_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lop<s(1)(1)(0)>[&];
}CTD_AU_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_AU_ALARM_T:1)[[TYPENAME:CTD_AU_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] plm<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uneq<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lom<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
}CTD_HP_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_HP_ALARM_T:1)[[TYPENAME:CTD_HP_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lop<s(1)(1)(0)>[&];
}CTD_TU_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_TU_ALARM_T:1)[[TYPENAME:CTD_TU_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] plm<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uneq<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rfi<s(1)(1)(0)>[&];
}CTD_LP_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_LP_ALARM_T:1)[[TYPENAME:CTD_LP_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] los<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lom<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
}CTD_PPI_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_PPI_ALARM_T:1)[[TYPENAME:CTD_PPI_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] mcd<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] fcd<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] fma<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] osr<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tcu<s(1)(1)(0)>[&];
}CTD_EQ_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_EQ_ALARM_T:1)[[TYPENAME:CTD_EQ_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] los<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ldf<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] oof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] wca<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] cim<s(1)(1)(0)>[&];
}CTD_TR_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_TR_ALARM_T:1)[[TYPENAME:CTD_TR_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] lfa<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lma<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] iae<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] bdi<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ptm<s(1)(1)(0)>[&];
}CTD_OTU_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_OTU_ALARM_T:1)[[TYPENAME:CTD_OTU_ALARM_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] los<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] mfo<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] dfo<s(1)(1)(0)>[&];
}CTD_E1_ALARM_T<s(0)(0)(0)>[&];(D1:CTD_E1_ALARM_T:1)[[TYPENAME:CTD_E1_ALARM_T]]


 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
}CTD_MSP_ALARM_INT_T<s(0)(0)(0)>[&];(D1:CTD_MSP_ALARM_INT_T:1)[[TYPENAME:CTD_MSP_ALARM_INT_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
}CTD_MSP_ALARM_DELTA_T<s(0)(0)(0)>[&];(D1:CTD_MSP_ALARM_DELTA_T:1)[[TYPENAME:CTD_MSP_ALARM_DELTA_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] lof<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
}CTD_MSP_ALARM_STATE_T<s(0)(0)(0)>[&];(D1:CTD_MSP_ALARM_STATE_T:1)[[TYPENAME:CTD_MSP_ALARM_STATE_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lop<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uneq<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] vcais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
}CTD_SNCP_ALARM_INT_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_ALARM_INT_T:1)[[TYPENAME:CTD_SNCP_ALARM_INT_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lop<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uneq<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] vcais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
}CTD_SNCP_ALARM_DELTA_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_ALARM_DELTA_T:1)[[TYPENAME:CTD_SNCP_ALARM_DELTA_T]]

 
typedef struct
{
    BOOL<s(1)(1)(0)>[T] ais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] lop<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] uneq<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] tim<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] vcais<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] exc<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] deg<s(1)(1)(0)>[&];
}CTD_SNCP_ALARM_STATE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_ALARM_STATE_T:1)[[TYPENAME:CTD_SNCP_ALARM_STATE_T]]

 
typedef enum
{
    CTD_INSERT_ALM_TYPE_MSAIS<s(0)(0)(0)>[&]       =   0x0,
    CTD_INSERT_ALM_TYPE_AUAIS<s(0)(0)(0)>[&]       =   0x1,
    CTD_INSERT_ALM_TYPE_TUAIS<s(0)(0)(0)>[&]       =   0x2,
    CTD_INSERT_ALM_TYPE_AIS<s(0)(0)(0)>[&]         =   0x3,
    CTD_INSERT_ALM_TYPE_UNEQ<s(0)(0)(0)>[&]        =   0x4, 
    CTD_INSERT_ALM_TYPE_RDI<s(0)(0)(0)>[&]         =   0x5,
}CTD_INSERT_ALM_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_INSERT_ALM_TYPE_T:1)[[TYPENAME:CTD_INSERT_ALM_TYPE_T]]

 
typedef enum
{
    CTD_INSERT_ALM_IN_LASER<s(0)(0)(0)>[&]         =   0x0,
    CTD_INSERT_ALM_OUT_LASER<s(0)(0)(0)>[&]        =   0x1,
}CTD_INSERT_ALM_DIR_T<s(0)(0)(0)>[&];(D1:CTD_INSERT_ALM_DIR_T:1)[[TYPENAME:CTD_INSERT_ALM_DIR_T]]

 
typedef enum
{
    CTD_LOOPBACK_TYPE_NONE<s(0)(0)(0)>[&]              =   0x0,
    CTD_LOOPBACK_TYPE_OUTWARD_NEAR<s(0)(0)(0)>[&]      =   0x1,
    CTD_LOOPBACK_TYPE_INWARD_FAR<s(0)(0)(0)>[&]        =   0x2,
    CTD_LOOPBACK_TYPE_INWARD_NEAR<s(0)(0)(0)>[&]       =   0x3,
    CTD_LOOPBACK_TYPE_OUTWARD_FAR<s(0)(0)(0)>[&]       =   0x4, 
    CTD_LOOPBACK_TYPE_OUTWARD_TSI<s(0)(0)(0)>[&]       =   0x5,
}CTD_LOOPBACK_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_LOOPBACK_TYPE_T:1)[[TYPENAME:CTD_LOOPBACK_TYPE_T]]

 
typedef struct 
{
     
    WORD<s(1)(1)(0)>[T]                busNum<s(1)(1)(0)>[&];

    BYTE<s(1)(1)(0)>[T]                portNum<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]                augNum<s(1)(1)(0)>[&];
    CARDTYPE_T<s(1)(1)(0)>[T]          type<s(1)(1)(0)>[&];    
}CTD_CARD_CONFIG_T<s(0)(0)(0)>[&];(D1:CTD_CARD_CONFIG_T:1)[[TYPENAME:CTD_CARD_CONFIG_T]]

 
typedef struct 
{
    BYTE<s(1)(1)(0)>[T]  byPort<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]  bEnable<s(1)(1)(0)>[&];
}CTD_TIMING_CONFIG_T<s(0)(0)(0)>[&];(D1:CTD_TIMING_CONFIG_T:1)[[TYPENAME:CTD_TIMING_CONFIG_T]]

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CPS_GetLatchState<s(0)(0)(0)>[&])TYPENAME:FUNC:(CPS_GetLatchState)(SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], LATCH_STATE_T<s(0)(0)(0)>[T] eLatchState<s(0)(0)(0)>[&]);(D1:eLatchState:0)
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_RprtUnitFail<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_RprtUnitFail)(SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bUnitFail<s(0)(0)(0)>[&]);(D1:bUnitFail:0)
    
 
typedef struct
{
     
    TMA_S1ChangeCallbackFunc<s(1)(1)(0)>[T]        cRprtSsmToTMA<s(1)(1)(0)>[&];
    TMA_ModDefectFunc<s(1)(1)(0)>[T]               cRprtDefectToTMA<s(1)(1)(0)>[&];
     
    FMA_AlmModDefectFunc<s(1)(1)(0)>[T]            cRprtDefectToFMA<s(1)(1)(0)>[&];
    FMA_AlmModDefectByBusFunc<s(1)(1)(0)>[T]       cRptDefectToFmaByBus<s(1)(1)(0)>[&];
     
    PMP_GetRsOofFunc<s(1)(1)(0)>[T]                cRprtRsOofToPMA<s(1)(1)(0)>[&]; 
     
    CPS_GetLatchState<s(1)(1)(0)>[T]               cRprtLatchStateToCPA<s(1)(1)(0)>[&];
     
    CPS_GetLatchState<s(1)(1)(0)>[T]               cRprtLatchStateToCAI<s(1)(1)(0)>[&];
     
    PRA_SetPortStatus_Func<s(1)(1)(0)>[T]          cRprtPrbsStateToPRA<s(1)(1)(0)>[&];  
     
    MPA_Handle_RcvKbyte<s(1)(1)(0)>[T]             cRprtMspKByte<s(1)(1)(0)>[&];
    MPA_RcvPhyDefect<s(1)(1)(0)>[T]                cRprtMspLineCond<s(1)(1)(0)>[&];
    MPA_RprtMspStatus<s(1)(1)(0)>[T]               cRprtMspStatus<s(1)(1)(0)>[&];
     
    MST_ChangeOfKb<s(1)(1)(0)>[T]                  cRprtMsspKByte<s(1)(1)(0)>[&];
    MST_ChangeOfLineCond<s(1)(1)(0)>[T]            cRprtMsspLineCond<s(1)(1)(0)>[&];
     
    MSA_ChangeKbyteBatch<s(1)(1)(0)>[T]            cRprtMsspKByteBatch<s(1)(1)(0)>[&];
    MSA_ChangeLineCondBatch<s(1)(1)(0)>[T]         cRprtMsspLineCondBatch<s(1)(1)(0)>[&];
     
    SPA_DrvIntHappenFunc<s(1)(1)(0)>[T]            cRprtSpaDrvIntHappen<s(1)(1)(0)>[&]; 
    SPA_ReportSncpStateFunc<s(1)(1)(0)>[T]         cRprtSpaSncpState<s(1)(1)(0)>[&];
     
    TMH_InitCCFPGAFunc<s(1)(1)(0)>[T]              cRprtCcInitToTmh<s(1)(1)(0)>[&];
    TMH_SwitchHOCCFunc<s(1)(1)(0)>[T]              cRptCcStateToTmh<s(1)(1)(0)>[&];
     
    GFA_RprtAlarmDetect2GmplsFunc<s(1)(1)(0)>[T]   cRprtDefectToGmpls<s(1)(1)(0)>[&];
     
    CAD_RprtUnitFail<s(1)(1)(0)>[T]                cRprtUnitFailToCAD<s(1)(1)(0)>[&];
}CTD_CALLBACKS_T<s(0)(0)(0)>[&];(D1:CTD_CALLBACKS_T:1)[[TYPENAME:CTD_CALLBACKS_T]]

 
typedef enum
{
    CTD_MSG_TYPE_INT<s(0)(0)(0)>[&]        = 0x0,
    CTD_MSG_TYPE_POLLING<s(0)(0)(0)>[&]    = 0x1,
    CTD_MSG_TYPE_1HZINT<s(0)(0)(0)>[&]     = 0x2,
    CTD_MSG_TYPE_LATCH<s(0)(0)(0)>[&]      = 0x3,
}CTD_MSG_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_MSG_TYPE_T:1)[[TYPENAME:CTD_MSG_TYPE_T]]

 
typedef struct
{
    ENTITY_T<s(1)(1)(0)>[T]            etEntity<s(1)(1)(0)>[&];
    DWORD<s(1)(1)(0)>[T]               dwPos<s(1)(1)(0)>[&];
    CTD_MSG_TYPE_T<s(1)(1)(0)>[T]      eMsgType<s(1)(1)(0)>[&];
}CTD_MSG_DATA_T<s(0)(0)(0)>[&];(D1:CTD_MSG_DATA_T:1)[[TYPENAME:CTD_MSG_DATA_T]]

 
typedef enum
{
    CTD_SNCP_SIG_DIR_UNKNOWN<s(0)(0)(0)>[&]    = 0x0,
    CTD_SNCP_SIG_DIR_SOURCE<s(0)(0)(0)>[&]     = 0x1,
    CTD_SNCP_SIG_DIR_SINK<s(0)(0)(0)>[&]       = 0x2,
    CTD_SNCP_SIG_DIR_BIDRECTION<s(0)(0)(0)>[&] = 0x3,
}CTD_SNCP_SIG_DIR_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_SIG_DIR_T:1)[[TYPENAME:CTD_SNCP_SIG_DIR_T]]

 
typedef enum
{
    CTD_SNCP_CMD_UNKNOWN<s(0)(0)(0)>[&]        = 0x0,
    CTD_SNCP_CMD_CLEAR<s(0)(0)(0)>[&]          = 0x1,
    CTD_SNCP_LOCK_OUT<s(0)(0)(0)>[&]           = 0x2,
    CTD_SNCP_FORCE_SWITCH_TOP<s(0)(0)(0)>[&]   = 0x3,
    CTD_SNCP_FORCE_SWITCH_TOW<s(0)(0)(0)>[&]   = 0x4,
    CTD_SNCP_MANUAL_SWITCH_TOP<s(0)(0)(0)>[&]  = 0x5,
    CTD_SNCP_MANUAL_SWITCH_TOW<s(0)(0)(0)>[&]  = 0x6,
    CTD_SNCP_NO_COMMAND<s(0)(0)(0)>[&]         = 0x7,
}CTD_SNCP_CMD_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_CMD_TYPE_T:1)[[TYPENAME:CTD_SNCP_CMD_TYPE_T]] 

 
typedef enum 
{
    CTD_SNCP_MODE_UNKNOWN<s(0)(0)(0)>[&]       = 0x0,
    CTD_SNCP_MODE_REVERTIVE<s(0)(0)(0)>[&]     = 0x1,
    CTD_SNCP_MODE_NONREVERTIVE<s(0)(0)(0)>[&]  = 0x2,
} CTD_SNCP_MODE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_MODE_T:1)[[TYPENAME:CTD_SNCP_MODE_T]]

 
typedef enum 
{
    CTD_SNCP_REQ_CLEAR<s(0)(0)(0)>[&]              = 0x1,
    CTD_SNCP_REQ_LOCKOUT<s(0)(0)(0)>[&]            = 0x2,
    CTD_SNCP_REQ_FORCE_SWITCH_TOP<s(0)(0)(0)>[&]   = 0x3,
    CTD_SNCP_REQ_FORCE_SWITCH_TOW<s(0)(0)(0)>[&]   = 0x4,
    CTD_SNCP_REQ_SIGNAL_FAIL<s(0)(0)(0)>[&]        = 0x5,
    CTD_SNCP_REQ_MANUAL_SWITCH_TOP<s(0)(0)(0)>[&]  = 0x6,
    CTD_SNCP_REQ_MANUAL_SWITCH_TOW<s(0)(0)(0)>[&]  = 0x7,
    CTD_SNCP_REQ_WAIT_TO_RESTORE<s(0)(0)(0)>[&]    = 0x8,
    CTD_SNCP_REQ_NO_REQUEST<s(0)(0)(0)>[&]         = 0x9,
    CTD_SNCP_REQ_SIGNAL_DEG<s(0)(0)(0)>[&]         = 0xa,
} CTD_SNCP_REQ_TYPE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_REQ_TYPE_T:1)[[TYPENAME:CTD_SNCP_REQ_TYPE_T]]

 
typedef enum 
{
    CTD_SNCP_CMD_RSLT_SUCC<s(0)(0)(0)>[&]              = 0x1,
    CTD_SNCP_CMD_RSLT_LOWPRIORITY<s(0)(0)(0)>[&]       = 0x2,
    CTD_SNCP_CMD_RSLT_SWITCH_TO_ACTIVE<s(0)(0)(0)>[&]  = 0x3,
    CTD_SNCP_CMD_SWITCH_FAIL<s(0)(0)(0)>[&]            = 0x4,
    CTD_SNCP_CMD_SWITCH_TIMEOUT<s(0)(0)(0)>[&]         = 0x5,
    CTD_SNCP_CMD_WAIT_CC_RSP<s(0)(0)(0)>[&]            = 0x6,
    CTD_SNCP_BAD_COMMAND<s(0)(0)(0)>[&]                = 0x7,
} CTD_SNCP_CMD_RSLT_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_CMD_RSLT_T:1)[[TYPENAME:CTD_SNCP_CMD_RSLT_T]]

 
typedef enum 
{
    CTD_SNCP_STATE_ACTIVE<s(0)(0)(0)>[&]  = 0x1,
    CTD_SNCP_STATE_STANDBY<s(0)(0)(0)>[&] = 0x2,
} CTD_SNCP_CHL_STATE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_CHL_STATE_T:1)[[TYPENAME:CTD_SNCP_CHL_STATE_T]]

 
typedef enum 
{
    CTD_SNCP_RSN_CLEAR_CMD<s(0)(0)(0)>[&]         = 0x1,
    CTD_SNCP_RSN_LP_CMD<s(0)(0)(0)>[&]            = 0x2,
    CTD_SNCP_RSN_FORCED_SWITCH<s(0)(0)(0)>[&]     = 0x3,
    CTD_SNCP_RSN_MANUAL_SWITCH<s(0)(0)(0)>[&]     = 0x4,
    CTD_SNCP_RSN_SIGNAL_FAIL<s(0)(0)(0)>[&]       = 0x5,
    CTD_SNCP_RSN_SIGNAL_FAIL_CLEAR<s(0)(0)(0)>[&] = 0x6,
    CTD_SNCP_RSN_NO_SWITCH<s(0)(0)(0)>[&]         = 0x7,
    CTD_SNCP_RSN_SIGNAL_DEG<s(0)(0)(0)>[&]        = 0x8,
    CTD_SNCP_RSN_SIGNAL_DEG_CLEAR<s(0)(0)(0)>[&]  = 0x9,
} CTD_SNCP_SWITCH_RSN_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_SWITCH_RSN_T:1)[[TYPENAME:CTD_SNCP_SWITCH_RSN_T]]

 
typedef struct
{
     
    BOOL<s(1)(1)(0)>[T]                bResult<s(1)(1)(0)>[&];
     
    SNCP_SIGNAL_STATE_T<s(1)(1)(0)>[T] eWorkState<s(1)(1)(0)>[&];
    SNCP_SIGNAL_STATE_T<s(1)(1)(0)>[T] eProtState<s(1)(1)(0)>[&];
     
    CTD_SNCP_REQ_TYPE_T<s(1)(1)(0)>[T] eCmdReq<s(1)(1)(0)>[&];
}CTD_SNCP_STATE_T<s(0)(0)(0)>[&];(D1:CTD_SNCP_STATE_T:1)[[TYPENAME:CTD_SNCP_STATE_T]]




 




 

 


 

 

 

 

 

 


 


 

 


typedef enum
{
    CAH_DEBUG_LEVEL_ERROR<s(0)(0)(0)>[&]       =   0,
    CAH_DEBUG_LEVEL_CFGSET<s(0)(0)(0)>[&]      =   1,
    CAH_DEBUG_LEVEL_CFGGET<s(0)(0)(0)>[&]      =   2,
    CAH_DEBUG_LEVEL_INIT<s(0)(0)(0)>[&]        =   3,
    CAH_DEBUG_LEVEL_INT<s(0)(0)(0)>[&]         =   4,
    CAH_DEBUG_LEVEL_OP<s(0)(0)(0)>[&]          =   5,
    CAH_DEBUG_LEVEL_PMON<s(0)(0)(0)>[&]        =   6,
    CAH_DEBUG_LEVEL_CLOCK<s(0)(0)(0)>[&]       =   7,
    CAH_DEBUG_LEVEL_SNCP<s(0)(0)(0)>[&]        =   8,
    CAH_DEBUG_LEVEL_MSP<s(0)(0)(0)>[&]         =   9,
    CAH_DEBUG_LEVEL_MSSP<s(0)(0)(0)>[&]        =   10,
    CAH_DEBUG_LEVEL_ALARM<s(0)(0)(0)>[&]       =   11
}CAH_DBG_LEVEL_T<s(0)(0)(0)>[&];(D1:CAH_DBG_LEVEL_T:1)[[TYPENAME:CAH_DBG_LEVEL_T]]





 





 





 
typedef enum
{
    CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]       =   0x0,
    CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]       =   0x1,
    CAH_REG_ATTRBT_WO<s(0)(0)(0)>[&]       =   0x2,
    CAH_REG_ATTRBT_RC<s(0)(0)(0)>[&]       =   0x3,
    CAH_REG_ATTRBT_WC<s(0)(0)(0)>[&]       =   0x4,
}CAH_REG_ATTRBT_T<s(0)(0)(0)>[&];(D1:CAH_REG_ATTRBT_T:1)[[TYPENAME:CAH_REG_ATTRBT_T]]

 
typedef struct
{
    DWORD<s(1)(1)(0)>[T]             dwBaseOffset<s(1)(1)(0)>[&];
    BYTE<s(1)(1)(0)>[T]              bySimRegNum<s(1)(1)(0)>[&];
    DWORD<s(1)(1)(0)>[T]             dwSimRegInterval<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]              wValue<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]              wMask<s(1)(1)(0)>[&];
    CAH_REG_ATTRBT_T<s(1)(1)(0)>[T]  eRegAttrbt<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]              wDelayTime<s(1)(1)(0)>[&];
}CAH_INIT_TABLE_T<s(0)(0)(0)>[&];(D1:CAH_INIT_TABLE_T:1)[[TYPENAME:CAH_INIT_TABLE_T]]

 
typedef struct
{
    DWORD<s(1)(1)(0)>[T]     dwBaseOffset<s(1)(1)(0)>[&];
    BYTE<s(1)(1)(0)>[T]      bySimRegNum<s(1)(1)(0)>[&];
    DWORD<s(1)(1)(0)>[T]     dwSimRegInterval<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]      wValue<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]      wMask<s(1)(1)(0)>[&];
}CAH_STATE_CHECK_TABLE_T<s(0)(0)(0)>[&];(D1:CAH_STATE_CHECK_TABLE_T:1)[[TYPENAME:CAH_STATE_CHECK_TABLE_T]]

 
typedef struct
{
    DWORD<s(1)(1)(0)>[T]  dwPeriodMsSet<s(1)(1)(0)>[&];
    DWORD<s(1)(1)(0)>[T]  dwPeriodMsClear<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]   wThreshSet<s(1)(1)(0)>[&];
    WORD<s(1)(1)(0)>[T]   wThreshClear<s(1)(1)(0)>[&];
}CAH_B2_THRESHOLD_T<s(0)(0)(0)>[&];(D1:CAH_B2_THRESHOLD_T:1)[[TYPENAME:CAH_B2_THRESHOLD_T]]

 
typedef struct
{
    ENTITY_T<s(1)(1)(0)>[T]             dwEntityNo<s(1)(1)(0)>[&];
    DWORD<s(1)(1)(0)>[T]                dwBaseAddr<s(1)(1)(0)>[&];
    CTD_MODE_TYPE_T<s(1)(1)(0)>[T]      ePortType<s(1)(1)(0)>[&][0x7e ];
}CAH_CFG_INFO_T<s(0)(0)(0)>[&];(D1:CAH_CFG_INFO_T:1)[[TYPENAME:CAH_CFG_INFO_T]]

 
extern  WORD<s(0)(0)(0)>[T] cah_WriteRegister<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_ReadRegister<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T]* pwValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_PollBusyBit<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&]);(D1:dwOffset:0)
extern  WORD<s(0)(0)(0)>[T] cah_IndWrite<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndData<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wAddr<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskval<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskaddr<s(0)(0)(0)>[&]);(D1:wMaskaddr:0)
extern  WORD<s(0)(0)(0)>[T] cah_IndRead<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndData<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wAddr<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] *pwValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskval<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskaddr<s(0)(0)(0)>[&]);(D1:wMaskaddr:0)
extern  WORD<s(0)(0)(0)>[T] cah_IndWriteQuick<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndData<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wAddr<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskval<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskaddr<s(0)(0)(0)>[&]);(D1:wMaskaddr:0)
extern  WORD<s(0)(0)(0)>[T] cah_IndReadQuick<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwAddrIndData<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wAddr<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] *pwValue<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskval<s(0)(0)(0)>[&], WORD<s(0)(0)(0)>[T] wMaskaddr<s(0)(0)(0)>[&]);(D1:wMaskaddr:0)
extern  WORD<s(0)(0)(0)>[T] cah_Write8Reg<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byValue<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_Read8Reg<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *pbyValue<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_Write32Reg<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwValue<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_Read32Reg<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwValue<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwMask<s(0)(0)(0)>[&], CAH_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&]);(D1:eRegAttrbt:0)
extern  WORD<s(0)(0)(0)>[T] cah_Stm4TpConvert<s(0)(0)(0)>[&](CTD_MODE_TYPE_T<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] tpId<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug1No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAu3No<s(0)(0)(0)>[&]);(D1:byAu3No:0)
extern  WORD<s(0)(0)(0)>[T] cah_Stm16TpConvert<s(0)(0)(0)>[&](CTD_MODE_TYPE_T<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] tpId<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug4No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug1No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAu3No<s(0)(0)(0)>[&]);(D1:byAu3No:0)
extern  WORD<s(0)(0)(0)>[T] cah_Stm64TpConvert<s(0)(0)(0)>[&](CTD_MODE_TYPE_T<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] tpId<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug16No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug4No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug1No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAu3No<s(0)(0)(0)>[&]);(D1:byAu3No:0)
extern  WORD<s(0)(0)(0)>[T] cah_Stm256TpConvert<s(0)(0)(0)>[&](CTD_MODE_TYPE_T<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] tpId<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug64No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug16No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug4No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAug1No<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byAu3No<s(0)(0)(0)>[&]);(D1:byAu3No:0)
extern  DWORD<s(0)(0)(0)>[T] CAH_GetCardBaseAddr<s(0)(0)(0)>[&](CARDTYPE_T<s(0)(0)(0)>[T] eCardType<s(0)(0)(0)>[&]);(D1:eCardType:0)

 
extern  DBG_MODULE_T<s(0)(0)(0)>[T]       gCahDbgModuleNo<s(0)(0)(0)>[&];(D1:gCahDbgModuleNo:0)
extern  CAH_B2_THRESHOLD_T<s(0)(0)(0)>[T] gCahStm1B2Threshold<s(0)(0)(0)>[&][0x9  - 0x3  + 1];(D1:gCahStm1B2Threshold:0)
extern  CAH_B2_THRESHOLD_T<s(0)(0)(0)>[T] gCahStm4B2Threshold<s(0)(0)(0)>[&][0x9  - 0x3  + 1];(D1:gCahStm4B2Threshold:0)
extern  CAH_B2_THRESHOLD_T<s(0)(0)(0)>[T] gCahStm16B2Threshold<s(0)(0)(0)>[&][0x9  - 0x3  + 1];(D1:gCahStm16B2Threshold:0)
extern  CAH_B2_THRESHOLD_T<s(0)(0)(0)>[T] gCahStm64B2Threshold<s(0)(0)(0)>[&][0x9  - 0x3  + 1];(D1:gCahStm64B2Threshold:0)
extern  CAH_B2_THRESHOLD_T<s(0)(0)(0)>[T] gCahStm256B2Threshold<s(0)(0)(0)>[&][0x9  - 0x3  + 1];(D1:gCahStm256B2Threshold:0)

 
extern  int sysClkRateGet<s(0)(0)(0)>[&](void);(D1:sysClkRateGet:0)
extern  STATUS<s(0)(0)(0)>[T] taskDelay<s(0)(0)(0)>[&](int ticks<s(0)(0)(0)>[&]);(D1:ticks:0)
extern  UINT32<s(0)(0)(0)>[T] sysTimestampFreq<s(0)(0)(0)>[&](void);(D1:sysTimestampFreq:0)




 






















 





















 
 

 

 

 


























 

 

 
















union sigval<s(1)(0)(1)>[&]
    {
    int			sival_int<s(1)(1)(0)>[&];
    void		*sival_ptr<s(1)(1)(0)>[&];
    };

struct sigevent<s(1)(0)(1)>[&]
    {
    int			sigev_signo<s(1)(1)(0)>[&];
    union sigval<s(2)(1)(1)>[&]	sigev_value<s(2)(1)(1)>[&];
    int			sigev_notify<s(1)(1)(0)>[&];
    };













typedef struct __timer<s(1)(0)(1)>[&] *timer_t<s(0)(0)(0)>[&] ;(D1:timer_t:1)[[TYPENAME:timer_t]]




typedef unsigned int clock_t<s(0)(0)(0)>[&] ;(D1:clock_t:1)[[TYPENAME:clock_t]]








typedef int clockid_t<s(0)(0)(0)>[&];(D1:clockid_t:1)[[TYPENAME:clockid_t]]





struct tm<s(1)(0)(1)>[&]
	{
	int tm_sec<s(1)(1)(0)>[&];	 
	int tm_min<s(1)(1)(0)>[&];	 
	int tm_hour<s(1)(1)(0)>[&];	 
	int tm_mday<s(1)(1)(0)>[&];	 
	int tm_mon<s(1)(1)(0)>[&];	 
	int tm_year<s(1)(1)(0)>[&];	 
	int tm_wday<s(1)(1)(0)>[&];	 
	int tm_yday<s(1)(1)(0)>[&];	 
	int tm_isdst<s(1)(1)(0)>[&];	 
	};

struct timespec<s(1)(0)(1)>[&]
    {
    					 
    time_t<s(1)(1)(0)>[T] tv_sec<s(1)(1)(0)>[&];			 
    long tv_nsec<s(1)(1)(0)>[&];			 
    };

struct itimerspec<s(1)(0)(1)>[&]
    {
    struct timespec<s(2)(1)(1)>[&] it_interval<s(2)(1)(1)>[&];	 
    struct timespec<s(2)(1)(1)>[&] it_value<s(2)(1)(1)>[&];		 
    };






 



extern uint_t<s(0)(0)(0)>[T]      _clocks_per_sec<s(0)(0)(0)>[&](void);(D1:_clocks_per_sec:0)
extern char *	   asctime<s(0)(0)(0)>[&] (const struct tm<s(1)(0)(1)>[&] *_tptr<s(0)(0)(0)>[&]);(D1:_tptr:0)
extern clock_t<s(0)(0)(0)>[T]	   clock<s(0)(0)(0)>[&] (void);(D1:clock:0)
extern char *	   ctime<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_cal<s(0)(0)(0)>[&]);(D1:_cal:0)
extern double	   difftime<s(0)(0)(0)>[&] (time_t<s(0)(0)(0)>[T] _t1<s(0)(0)(0)>[&], time_t<s(0)(0)(0)>[T] _t0<s(0)(0)(0)>[&]);(D1:_t0:0)
extern struct tm<s(1)(0)(1)>[&] * gmtime<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_tod<s(0)(0)(0)>[&]);(D1:_tod:0)
extern struct tm<s(1)(0)(1)>[&] * localtime<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_tod<s(0)(0)(0)>[&]);(D1:_tod:0)
extern time_t<s(0)(0)(0)>[T]	   mktime<s(0)(0)(0)>[&] (struct tm<s(1)(0)(1)>[&] *_tptr<s(0)(0)(0)>[&]);(D1:_tptr:0)
extern size_t<s(0)(0)(0)>[T]	   strftime<s(0)(0)(0)>[&] (char *_s<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] _n<s(0)(0)(0)>[&], const char *_format<s(0)(0)(0)>[&],
		   	      const struct tm<s(1)(0)(1)>[&] *_tptr<s(0)(0)(0)>[&]);(D1:_tptr:0)
extern time_t<s(0)(0)(0)>[T]	   time<s(0)(0)(0)>[&] (time_t<s(0)(0)(0)>[T] *_tod<s(0)(0)(0)>[&]);(D1:_tod:0)

extern int 	clock_gettime<s(0)(0)(0)>[&] (clockid_t<s(0)(0)(0)>[T] clock_id<s(0)(0)(0)>[&], struct timespec<s(1)(0)(1)>[&] *tp<s(0)(0)(0)>[&]);(D1:tp:0)
extern int 	clock_settime<s(0)(0)(0)>[&] (clockid_t<s(0)(0)(0)>[T] clock_id<s(0)(0)(0)>[&], const struct timespec<s(1)(0)(1)>[&] *tp<s(0)(0)(0)>[&]);(D1:tp:0)
extern int 	clock_getres<s(0)(0)(0)>[&] (clockid_t<s(0)(0)(0)>[T] clock_id<s(0)(0)(0)>[&], struct timespec<s(1)(0)(1)>[&] *res<s(0)(0)(0)>[&]);(D1:res:0)

extern int 	timer_create<s(0)(0)(0)>[&] (clockid_t<s(0)(0)(0)>[T] clock_id<s(0)(0)(0)>[&], struct sigevent<s(1)(0)(1)>[&] *evp<s(0)(0)(0)>[&],
			      timer_t<s(0)(0)(0)>[T] *ptimer<s(0)(0)(0)>[&]);(D1:ptimer:0)
extern int 	timer_delete<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&]);(D1:timerid:0)
extern int 	timer_gettime<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&], struct itimerspec<s(1)(0)(1)>[&] *value<s(0)(0)(0)>[&]);(D1:value:0)
extern int 	timer_settime<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&], int flags<s(0)(0)(0)>[&],
		               const struct itimerspec<s(1)(0)(1)>[&] *value<s(0)(0)(0)>[&],
			       struct itimerspec<s(1)(0)(1)>[&] *ovalue<s(0)(0)(0)>[&]);(D1:ovalue:0)
extern int 	timer_getoverrun<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&]);(D1:timerid:0)

extern int      timer_connect<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&], VOIDFUNCPTR<s(0)(0)(0)>[T] routine<s(0)(0)(0)>[&], int arg<s(0)(0)(0)>[&]);(D1:arg:0)
extern int      timer_cancel<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&]);(D1:timerid:0)
extern int      timer_show<s(0)(0)(0)>[&] (timer_t<s(0)(0)(0)>[T] timerid<s(0)(0)(0)>[&]);(D1:timerid:0)

extern int 	nanosleep<s(0)(0)(0)>[&] (const struct timespec<s(1)(0)(1)>[&] *rqtp<s(0)(0)(0)>[&], struct timespec<s(1)(0)(1)>[&] *rmtp<s(0)(0)(0)>[&]);(D1:rmtp:0)




extern int	   asctime_r<s(0)(0)(0)>[&](const struct tm<s(1)(0)(1)>[&] *_tm<s(0)(0)(0)>[&], char *_buffer<s(0)(0)(0)>[&],
			     size_t<s(0)(0)(0)>[T] *_buflen<s(0)(0)(0)>[&]);(D1:_buflen:0)
extern char *	   ctime_r<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_cal<s(0)(0)(0)>[&], char *_buffer<s(0)(0)(0)>[&], size_t<s(0)(0)(0)>[T] *_buflen<s(0)(0)(0)>[&]);(D1:_buflen:0)
extern int	   gmtime_r<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_tod<s(0)(0)(0)>[&], struct tm<s(1)(0)(1)>[&] *_result<s(0)(0)(0)>[&]);(D1:_result:0)
extern int	   localtime_r<s(0)(0)(0)>[&] (const time_t<s(0)(0)(0)>[T] *_tod<s(0)(0)(0)>[&], struct tm<s(1)(0)(1)>[&] *_result<s(0)(0)(0)>[&]);(D1:_result:0)





























 














 





 




































 






 









 







 









 



 









                                

























 














































 















































 

















































































                                    






































































































































 


extern int i2c_debug<s(0)(0)(0)>[&];(D1:i2c_debug:0)





	
 







typedef struct {
    int addr<s(1)(1)(0)>[&];
	int maxChannelNum<s(1)(1)(0)>[&];
} I2C_MUX_ADDR_TBL_T<s(0)(0)(0)>[&];(D1:I2C_MUX_ADDR_TBL_T:1)[[TYPENAME:I2C_MUX_ADDR_TBL_T]]



typedef enum {
	I2C_ACCESS_OK<s(0)(0)(0)>[&]    = 0,
	I2C_BUS_ERROR<s(0)(0)(0)>[&]    = 0x1000,      
	I2C_BUS_TIMEOUT<s(0)(0)(0)>[&]  = 0x2000,    
	I2C_ERROR_UNKNOWN<s(0)(0)(0)>[&]= 0x4000
} I2C_ERROR_TYPE<s(0)(0)(0)>[&];(D1:I2C_ERROR_TYPE:1)[[TYPENAME:I2C_ERROR_TYPE]]     

typedef struct {
    int          valid<s(1)(1)(0)>[&];        
	int          taskId<s(1)(1)(0)>[&];       
	const char * pTaskName<s(1)(1)(0)>[&];    
    const char * pCaller<s(1)(1)(0)>[&];      
    const char * pCallerFile<s(1)(1)(0)>[&]; 
    int          callerLine<s(1)(1)(0)>[&];  
    int          muxAddr<s(1)(1)(0)>[&];      
    int          channel<s(1)(1)(0)>[&];      
} I2C_BUS_CHANNEL_STATUS<s(0)(0)(0)>[&];(D1:I2C_BUS_CHANNEL_STATUS:1)[[TYPENAME:I2C_BUS_CHANNEL_STATUS]]

typedef struct {
    int               valid<s(1)(1)(0)>[&];              
    int               taskId<s(1)(1)(0)>[&];             
    const char *      pTaskName<s(1)(1)(0)>[&];          
    int               devAddr<s(1)(1)(0)>[&];            
    const char *      pCaller<s(1)(1)(0)>[&];            
    const char *      pCallerFile<s(1)(1)(0)>[&];        
    int               callerLine<s(1)(1)(0)>[&];         
    struct tm<s(2)(1)(1)>[&]        currTime<s(2)(1)(1)>[&];           
    I2C_ERROR_TYPE<s(1)(1)(0)>[T]    reason<s(1)(1)(0)>[&];             
	                                       
	                                       
										  
    int               times<s(1)(1)(0)>[&];              
} I2C_BUS_ERR_RECORD<s(0)(0)(0)>[&];(D1:I2C_BUS_ERR_RECORD:1)[[TYPENAME:I2C_BUS_ERR_RECORD]]  

typedef struct {
    int               isSemInUse<s(1)(1)(0)>[&];          
    SEM_ID<s(1)(1)(0)>[T]            selfID<s(1)(1)(0)>[&];              
    int               taskId<s(1)(1)(0)>[&];              
    const char *      pTaskName<s(1)(1)(0)>[&];           
    const char *      pSemOwner<s(1)(1)(0)>[&];           
    const char *      pSemOwnerFile<s(1)(1)(0)>[&];      
    int               semOwnerLine<s(1)(1)(0)>[&];       
    int               semForMuxAddr<s(1)(1)(0)>[&];      
    int               semTimeOut<s(1)(1)(0)>[&];          
    int               semCounter<s(1)(1)(0)>[&];          
} I2C_SEM_RECORD<s(0)(0)(0)>[&];(D1:I2C_SEM_RECORD:1)[[TYPENAME:I2C_SEM_RECORD]]        





typedef struct {
    int          valid<s(1)(1)(0)>[&];            
	int          taskId<s(1)(1)(0)>[&];           
	const char * pTaskName<s(1)(1)(0)>[&];       
} I2C_SEM_OVERTIME_RECORD_ITEM<s(0)(0)(0)>[&];(D1:I2C_SEM_OVERTIME_RECORD_ITEM:1)[[TYPENAME:I2C_SEM_OVERTIME_RECORD_ITEM]]   

typedef struct {
	int          nextItem<s(1)(1)(0)>[&];           
	I2C_SEM_OVERTIME_RECORD_ITEM<s(1)(1)(0)>[T] item<s(1)(1)(0)>[&][10 ];    
} I2C_SEM_OVERTIME_RECORD<s(0)(0)(0)>[&];(D1:I2C_SEM_OVERTIME_RECORD:1)[[TYPENAME:I2C_SEM_OVERTIME_RECORD]]   



typedef enum {
	I2C_RAW<s(0)(0)(0)>[&],
	I2C_RAW_BASE<s(0)(0)(0)>[&],
	I2C_BASE<s(0)(0)(0)>[&],
} I2C_OPTION<s(0)(0)(0)>[&];(D1:I2C_OPTION:1)[[TYPENAME:I2C_OPTION]]        

typedef struct {
    void *tlvDataPtr<s(1)(1)(0)>[&];
    char deviceName<s(1)(1)(0)>[&][32];
} TLV_data_t<s(0)(0)(0)>[&];(D1:TLV_data_t:1)[[TYPENAME:TLV_data_t]]


















	



 









        
 
 







       
 






















 
int i2cDrvSemTake<s(0)(0)(0)>[&](const char*pCaller<s(0)(0)(0)>[&], const char* pCallerFile<s(0)(0)(0)>[&], 
        const int callerLine<s(0)(0)(0)>[&], int muxAddr<s(0)(0)(0)>[&], int wait<s(0)(0)(0)>[&]);(D1:wait:0)
int i2cDrvSemGive<s(0)(0)(0)>[&](void);(D1:i2cDrvSemGive:0)

int tlvDrvSemTake<s(0)(0)(0)>[&](const char*pCaller<s(0)(0)(0)>[&], const char* pCallerFile<s(0)(0)(0)>[&], 
        const int callerLine<s(0)(0)(0)>[&], int wait<s(0)(0)(0)>[&]);(D1:wait:0)
int tlvDrvSemGive<s(0)(0)(0)>[&](void);(D1:tlvDrvSemGive:0)

int i2cGeneralRead<s(0)(0)(0)>[&](const char* pCaller<s(0)(0)(0)>[&], const char* pCallerFile<s(0)(0)(0)>[&],
        int callerLine<s(0)(0)(0)>[&], int fd<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&], int address<s(0)(0)(0)>[&], char *buffer<s(0)(0)(0)>[&], int numbytes<s(0)(0)(0)>[&], int *status<s(0)(0)(0)>[&], I2C_OPTION<s(0)(0)(0)>[T] option<s(0)(0)(0)>[&]);(D1:option:0)

int i2cGeneralWrite<s(0)(0)(0)>[&](const char* pCaller<s(0)(0)(0)>[&], const char* pCallerFile<s(0)(0)(0)>[&],
        int callerLine<s(0)(0)(0)>[&], int fd<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&], int address<s(0)(0)(0)>[&], char *buffer<s(0)(0)(0)>[&], int numbytes<s(0)(0)(0)>[&], int *status<s(0)(0)(0)>[&], I2C_OPTION<s(0)(0)(0)>[T] option<s(0)(0)(0)>[&]);(D1:option:0)

void i2cBusChannelStatusClear<s(0)(0)(0)>[&](void);(D1:i2cBusChannelStatusClear:0)
void i2cBusChannelStatusSet<s(0)(0)(0)>[&](const char* pCaller<s(0)(0)(0)>[&], const char* pCallerFile<s(0)(0)(0)>[&], int callerLine<s(0)(0)(0)>[&], 
	int muxAddr<s(0)(0)(0)>[&], int channel<s(0)(0)(0)>[&]);(D1:channel:0)

void i2cTrace<s(0)(0)(0)>[&](int level<s(0)(0)(0)>[&], char* mname<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&], char*fname<s(0)(0)(0)>[&], char* fmt<s(0)(0)(0)>[&], ...);(D1:fmt:0)

void i2cCloseDrv<s(0)(0)(0)>[&](int value<s(0)(0)(0)>[&]);(D1:value:0)  

int i2cCreate<s(0)(0)(0)>[&](char *name<s(0)(0)(0)>[&]);(D1:name:0)
int i2cDrv<s(0)(0)(0)>[&](void);(D1:i2cDrv:0)
void i2cFDClose<s(0)(0)(0)>[&](int fd<s(0)(0)(0)>[&]);(D1:fd:0)






 















 















































 


 





 


 



 


 














 
 


 






 


































































 


























extern UINT32<s(0)(0)(0)>[T] CRC32<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] LastBufCRC<s(0)(0)(0)>[&],const UINT8<s(0)(0)(0)>[T] * pBuf<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] BufLength<s(0)(0)(0)>[&]);(D1:BufLength:0)


 


 

typedef enum
{
    FM_DEFECT_BIT_TYPE_UNKNOW<s(0)(0)(0)>[&]       = 0,
        
    FM_DEFECT_BIT_TYPE_STM1_LC<s(0)(0)(0)>[&]      = 1,
    FM_DEFECT_BIT_TYPE_STM1_PM<s(0)(0)(0)>[&]      = 2,
    FM_DEFECT_BIT_TYPE_STM1_LOCC<s(0)(0)(0)>[&]    = 3,
    FM_DEFECT_BIT_TYPE_STM4_LC<s(0)(0)(0)>[&]      = 4,
    FM_DEFECT_BIT_TYPE_STM4_PM<s(0)(0)(0)>[&]      = 5,
    FM_DEFECT_BIT_TYPE_STM4_LOCC<s(0)(0)(0)>[&]    = 6,
    FM_DEFECT_BIT_TYPE_STM16_LC<s(0)(0)(0)>[&]     = 7,
    FM_DEFECT_BIT_TYPE_STM16_PM<s(0)(0)(0)>[&]     = 8,
    FM_DEFECT_BIT_TYPE_STM16_LOCC<s(0)(0)(0)>[&]   = 9,
    FM_DEFECT_BIT_TYPE_STM64_LC<s(0)(0)(0)>[&]     = 10,
    FM_DEFECT_BIT_TYPE_STM64_PM<s(0)(0)(0)>[&]     = 11,
    FM_DEFECT_BIT_TYPE_STM64_LOCC<s(0)(0)(0)>[&]   = 12,
    FM_DEFECT_BIT_TYPE_STM256_LC<s(0)(0)(0)>[&]    = 13,
    FM_DEFECT_BIT_TYPE_STM256_PM<s(0)(0)(0)>[&]    = 14,
    FM_DEFECT_BIT_TYPE_STM256_LOCC<s(0)(0)(0)>[&]  = 15,
    
    FM_DEFECT_BIT_TYPE_E1<s(0)(0)(0)>[&]           = 16,
    FM_DEFECT_BIT_TYPE_E1_PM<s(0)(0)(0)>[&]        = 17,
    FM_DEFECT_BIT_TYPE_E3DS3<s(0)(0)(0)>[&]        = 18,
    FM_DEFECT_BIT_TYPE_E3DS3_PM<s(0)(0)(0)>[&]     = 19,
    
    FM_DEFECT_BIT_TYPE_LAN<s(0)(0)(0)>[&]          = 20,
    FM_DEFECT_BIT_TYPE_VWAN<s(0)(0)(0)>[&]         = 21,
    FM_DEFECT_BIT_TYPE_RPR<s(0)(0)(0)>[&]          = 22,
    FM_DEFECT_BIT_TYPE_VSTM1<s(0)(0)(0)>[&]        = 23,
    FM_DEFECT_BIT_TYPE_VSTM1_PM<s(0)(0)(0)>[&]     = 24,
    FM_DEFECT_BIT_TYPE_VSTM4<s(0)(0)(0)>[&]        = 25,
    FM_DEFECT_BIT_TYPE_VSTM4_PM<s(0)(0)(0)>[&]     = 26,
    FM_DEFECT_BIT_TYPE_VSTM16<s(0)(0)(0)>[&]       = 27,
    FM_DEFECT_BIT_TYPE_VSTM16_PM<s(0)(0)(0)>[&]    = 28,
    FM_DEFECT_BIT_TYPE_VSTM64<s(0)(0)(0)>[&]       = 29,
    FM_DEFECT_BIT_TYPE_VSTM64_PM<s(0)(0)(0)>[&]    = 30,
    
    FM_DEFECT_BIT_TYPE_OA<s(0)(0)(0)>[&]           = 31,
    
    FM_DEFECT_BIT_TYPE_SLOT<s(0)(0)(0)>[&]         = 32,
    FM_DEFECT_BIT_TYPE_NE<s(0)(0)(0)>[&]           = 33,

    FM_DEFECT_BIT_TYPE_OTU2<s(0)(0)(0)>[&]         = 34
}FM_DEFECT_BIT_TYPE_T<s(0)(0)(0)>[&];(D1:FM_DEFECT_BIT_TYPE_T:1)[[TYPENAME:FM_DEFECT_BIT_TYPE_T]]


typedef struct 
{
    BOOL<s(1)(1)(0)>[T] empty<s(1)(1)(0)>[&];
    FM_DEFECT_BIT_TYPE_T<s(1)(1)(0)>[T]  defectType<s(1)(1)(0)>[&];
    unsigned int  entity<s(1)(1)(0)>[&];
    unsigned int  instance<s(1)(1)(0)>[&];
    unsigned int  bitPos<s(1)(1)(0)>[&];
    unsigned int  index<s(1)(1)(0)>[&];
    unsigned char  state<s(1)(1)(0)>[&];            
} __attribute__ ((packed))  FMA_DEFECT_BIT_UNIT_T<s(0)(0)(0)>[&];(D1:FMA_DEFECT_BIT_UNIT_T:1)[[TYPENAME:FMA_DEFECT_BIT_UNIT_T]]


typedef struct
{
    unsigned int index<s(1)(1)(0)>[&];
    FMA_DEFECT_BIT_UNIT_T<s(1)(1)(0)>[T] *pBitUnits<s(1)(1)(0)>[&];
    int number<s(1)(1)(0)>[&];
    void *pNext<s(1)(1)(0)>[&];
} __attribute__ ((packed))  FMA_SENT_BIT_MSG<s(0)(0)(0)>[&];(D1:FMA_SENT_BIT_MSG:1)[[TYPENAME:FMA_SENT_BIT_MSG]]

typedef struct
{
   int length<s(1)(1)(0)>[&];
   void *pNext<s(1)(1)(0)>[&];
}__attribute__ ((packed))  FMA_SENT_BIT_MSG_HEAD<s(0)(0)(0)>[&];(D1:FMA_SENT_BIT_MSG_HEAD:1)[[TYPENAME:FMA_SENT_BIT_MSG_HEAD]]

typedef struct 
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    unsigned int index<s(1)(1)(0)>[&];
    unsigned int defectBitNumber<s(1)(1)(0)>[&];

    unsigned int crc32<s(1)(1)(0)>[&];

    FMA_DEFECT_BIT_UNIT_T<s(1)(1)(0)>[T] *pDefectTable<s(1)(1)(0)>[&];    
} FMA_FMC_DEFECT_BIT_REPORT_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_DEFECT_BIT_REPORT_CMD_T:1)[[TYPENAME:FMA_FMC_DEFECT_BIT_REPORT_CMD_T]]










 

  




typedef enum
{
    FM_GENERAL_TYPE_UNKOWN<s(0)(0)(0)>[&]  = 0,
    FM_GENERAL_TYPE_SDH_LC<s(0)(0)(0)>[&]  = 1,
    FM_GENERAL_TYPE_PDH<s(0)(0)(0)>[&]     = 2,
    FM_GENERAL_TYPE_DATA<s(0)(0)(0)>[&]    = 3,
    FM_GENERAL_TYPE_CC<s(0)(0)(0)>[&]      = 4,
    FM_GENERAL_TYPE_SC<s(0)(0)(0)>[&]      = 5,
    FM_GENERAL_TYPE_OA<s(0)(0)(0)>[&]      = 6,
} FM_GENERAL_TYPE_T<s(0)(0)(0)>[&];(D1:FM_GENERAL_TYPE_T:1)[[TYPENAME:FM_GENERAL_TYPE_T]]


 








typedef enum
{
    FMA_LOCATION_UNKNOW<s(0)(0)(0)>[&]    = 0,
    FMA_LOCATION_LC<s(0)(0)(0)>[&]        = 1,
    FMA_LOCATION_CC<s(0)(0)(0)>[&]        = 2,
    FMA_LOCATION_SC<s(0)(0)(0)>[&]        = 3,
    FMA_LOCATION_SI<s(0)(0)(0)>[&]        = 4,   
} FMA_CPU_LOCATION_T<s(0)(0)(0)>[&];(D1:FMA_CPU_LOCATION_T:1)[[TYPENAME:FMA_CPU_LOCATION_T]]


typedef enum
{
    FMA_START_UP_UNKNOW<s(0)(0)(0)>[&]            = 0,
    FMA_START_UP_AGENT_BOOT_UP<s(0)(0)(0)>[&]     = 1,
    FMA_START_UP_SC_BOOT_UP<s(0)(0)(0)>[&]        = 2,
} FMA_START_UP_INFO_T<s(0)(0)(0)>[&];(D1:FMA_START_UP_INFO_T:1)[[TYPENAME:FMA_START_UP_INFO_T]]

typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] slot<s(1)(1)(0)>[&];                   
    UINT32<s(1)(1)(0)>[T] cardStyle<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] cardOption<s(1)(1)(0)>[&];
    FMA_START_UP_INFO_T<s(1)(1)(0)>[T] agentInform<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] cpuLocation<s(1)(1)(0)>[&];         
    UINT8<s(1)(1)(0)>[T] type<s(1)(1)(0)>[&];                     
} FMA_FMC_AGENT_START_UP_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_AGENT_START_UP_CMD_T:1)[[TYPENAME:FMA_FMC_AGENT_START_UP_CMD_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] agentSlotId<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] option<s(1)(1)(0)>[&];
} FMA_FMC_QUERY_ALARM_PERSISENT_TIME_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_QUERY_ALARM_PERSISENT_TIME_CMD_T:1)[[TYPENAME:FMA_FMC_QUERY_ALARM_PERSISENT_TIME_CMD_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] slotNo<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] portNo<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] portType<s(1)(1)(0)>[&];
} FMA_FMC_LOS_STATE_CHANGE_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_LOS_STATE_CHANGE_CMD_T:1)[[TYPENAME:FMA_FMC_LOS_STATE_CHANGE_CMD_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] queryId<s(1)(1)(0)>[&];    
} FMA_FMC_QUERY_STATE_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_QUERY_STATE_CMD_T:1)[[TYPENAME:FMA_FMC_QUERY_STATE_CMD_T]]

 
typedef FMA_FMC_QUERY_STATE_CMD_T<s(0)(0)(0)>[T] FMC_FMA_QUERY_STATE_ACK_CMD_T<s(0)(0)(0)>[&];(D1:FMC_FMA_QUERY_STATE_ACK_CMD_T:1)[[TYPENAME:FMC_FMA_QUERY_STATE_ACK_CMD_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
     
} FMA_FMM_CUTOFF_STATE_FROM_BUTTON_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMM_CUTOFF_STATE_FROM_BUTTON_CMD_T:1)[[TYPENAME:FMA_FMM_CUTOFF_STATE_FROM_BUTTON_CMD_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];
} FMA_FMM_SUPPRESS_STATE_FROM_BUTTON_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMM_SUPPRESS_STATE_FROM_BUTTON_CMD_T:1)[[TYPENAME:FMA_FMM_SUPPRESS_STATE_FROM_BUTTON_CMD_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] slotId<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] portNo<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] defectId<s(1)(1)(0)>[&];
    FMA_ALM_STATE<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];
} PMA_FMA_LAN_DEFECT_REPORT_CMD_T<s(0)(0)(0)>[&];(D1:PMA_FMA_LAN_DEFECT_REPORT_CMD_T:1)[[TYPENAME:PMA_FMA_LAN_DEFECT_REPORT_CMD_T]]

 
typedef struct
{
	command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
	UINT32<s(1)(1)(0)>[T] slotID<s(1)(1)(0)>[&];
}FMA_FMC_LOCC_CHANGE_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMC_LOCC_CHANGE_CMD_T:1)[[TYPENAME:FMA_FMC_LOCC_CHANGE_CMD_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T] head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] slotId<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] portNo<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T] defectId<s(1)(1)(0)>[&];
    FMA_ALM_STATE<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];
} FMA_FMA_FAN_DEFECT_REPORT_CMD_T<s(0)(0)(0)>[&];(D1:FMA_FMA_FAN_DEFECT_REPORT_CMD_T:1)[[TYPENAME:FMA_FMA_FAN_DEFECT_REPORT_CMD_T]]





 





























typedef struct
{
    UINT32<s(1)(1)(0)>[T] slotNo<s(1)(1)(0)>[&];                
    
    INSTANCE_T<s(1)(1)(0)>[T] instance<s(1)(1)(0)>[&];          
                               
    UINT32<s(1)(1)(0)>[T] portNo<s(1)(1)(0)>[&];                
                                  
    HW_PORT_TYPE<s(1)(1)(0)>[T] portType<s(1)(1)(0)>[&];        
  
    SDH_TP_TYPE<s(1)(1)(0)>[T] tpType<s(1)(1)(0)>[&];           

    COMPACT_TP_T<s(1)(1)(0)>[T] tpIndex<s(1)(1)(0)>[&];         


    UINT32<s(1)(1)(0)>[T] defectId<s(1)(1)(0)>[&];              

    FMA_ALM_STATE<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];          

    UINT8<s(1)(1)(0)>[T] deep<s(1)(1)(0)>[&];                   
    
} FM_SET_DEFECT_INFRMATION_T<s(0)(0)(0)>[&];(D1:FM_SET_DEFECT_INFRMATION_T:1)[[TYPENAME:FM_SET_DEFECT_INFRMATION_T]]

 







typedef enum
{
    FM_DEFECT_TYPE_NONE<s(0)(0)(0)>[&]    = 0, 
    FM_DEFECT_TYPE_LC<s(0)(0)(0)>[&]      = 1,
    FM_DEFECT_TYPE_LOCC<s(0)(0)(0)>[&]    = 2,
    FM_DEFECT_TYPE_DATA<s(0)(0)(0)>[&]    = 3,
    FM_DEFECT_TYPE_PM<s(0)(0)(0)>[&]      = 4,         
} FM_DEFECT_GROUP_TYPE_T<s(0)(0)(0)>[&];(D1:FM_DEFECT_GROUP_TYPE_T:1)[[TYPENAME:FM_DEFECT_GROUP_TYPE_T]]

extern  PB_ERROR_CODE_T<s(0)(0)(0)>[T] FMA_SetDefectByBus_Callback<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] busNo<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] vc4No<s(0)(0)(0)>[&], TU_TP_T<s(0)(0)(0)>[T] tpIndex<s(0)(0)(0)>[&], SDH_TP_TYPE<s(0)(0)(0)>[T] tpType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] defectId<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)
extern  PB_ERROR_CODE_T<s(0)(0)(0)>[T] FMA_AddBoardEntity<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] exist<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] style<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] option<s(0)(0)(0)>[&]);(D1:option:0)
extern  PB_ERROR_CODE_T<s(0)(0)(0)>[T] FMA_SetDefect_Callback<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] SlotId<s(0)(0)(0)>[&], INSTANCE_T<s(0)(0)(0)>[T] Instance<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] PortId<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] PortType<s(0)(0)(0)>[&], SDH_TP_TYPE<s(0)(0)(0)>[T] TpType<s(0)(0)(0)>[&], COMPACT_TP_T<s(0)(0)(0)>[T] TpIndex<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] DefectId<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&]);(D1:state:0)
extern void FMA_HandleButtonEvent<s(0)(0)(0)>[&](SDD_BUTTON_EVENT_TYPE<s(0)(0)(0)>[T] buttonType<s(0)(0)(0)>[&], BUTTON_STATE_T<s(0)(0)(0)>[T] oldState<s(0)(0)(0)>[&], BUTTON_STATE_T<s(0)(0)(0)>[T] newState<s(0)(0)(0)>[&]);(D1:newState:0)
extern void FMA_TCL_CreateCommand<s(0)(0)(0)>[&](Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&]);(D1:interp:0)











 




















 
 
 
 
 
 
 
 
 
 





















 
 
 
 
 






 



 
 
 
 
 
 
 
 












 
 
 
 
 
typedef enum 
{   
    non_GMPLS<s(0)(0)(0)>[&]   = 0x0,
    I_NNI<s(0)(0)(0)>[&]       = 0x1,
    E_NNI<s(0)(0)(0)>[&]       = 0x2,
    UNI10<s(0)(0)(0)>[&]       = 0x3,
    UNI20<s(0)(0)(0)>[&]       = 0x4,
}PB_GMPLS_PORT_CLASSIFIER<s(0)(0)(0)>[&];(D1:PB_GMPLS_PORT_CLASSIFIER:1)[[TYPENAME:PB_GMPLS_PORT_CLASSIFIER]]


typedef enum 
{   
    unreserved<s(0)(0)(0)>[&]  = 0x0,
    migrating<s(0)(0)(0)>[&]   = 0x1,
    reserved<s(0)(0)(0)>[&]    = 0x2,
} PB_TP_RESERVATION<s(0)(0)(0)>[&];(D1:PB_TP_RESERVATION:1)[[TYPENAME:PB_TP_RESERVATION]]


typedef struct 
{
    UINT16<s(1)(1)(0)>[T]      slotNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]      portType<s(1)(1)(0)>[&];        
    							                            
    UINT16<s(1)(1)(0)>[T]      portNo<s(1)(1)(0)>[&];
    TP_INDEX_T<s(1)(1)(0)>[T]  tpIndex<s(1)(1)(0)>[&];         
}PB_GMPLS_TP_T<s(0)(0)(0)>[&];(D1:PB_GMPLS_TP_T:1)[[TYPENAME:PB_GMPLS_TP_T]]


typedef struct 
{
    UINT16<s(1)(1)(0)>[T]       vcgXVType<s(1)(1)(0)>[&];      
                                 
                                 
                                 
    UINT16<s(1)(1)(0)>[T]       vcgLCASSupport<s(1)(1)(0)>[&]; 
                                 
    UINT16<s(1)(1)(0)>[T]       vcgGfpType<s(1)(1)(0)>[&];     
                                                                 
    char         vcgChannelId<s(1)(1)(0)>[&][50];   
 } PB_GMPLS_VCG_CONFIG_T<s(0)(0)(0)>[&];(D1:PB_GMPLS_VCG_CONFIG_T:1)[[TYPENAME:PB_GMPLS_VCG_CONFIG_T]]


typedef struct 
{
    PB_GMPLS_TP_T<s(1)(1)(0)>[T]       fromTP<s(1)(1)(0)>[&];
    PB_GMPLS_TP_T<s(1)(1)(0)>[T]       toTP<s(1)(1)(0)>[&];
	int		GmplsVcNumber<s(1)(1)(0)>[&];   
	char	GmplsCallName<s(1)(1)(0)>[&][255];    
    PbGmplsCcDirection_Tval<s(1)(1)(0)>[T] GmplsCcDirection<s(1)(1)(0)>[&]; 
} PB_GMPLS_XC_T<s(0)(0)(0)>[&];(D1:PB_GMPLS_XC_T:1)[[TYPENAME:PB_GMPLS_XC_T]]

typedef enum 
{
	PB_GMPLS_XC_CREATION<s(0)(0)(0)>[&] = 0x1,
	PB_GMPLS_XC_DELETION<s(0)(0)(0)>[&] = 0x2,
}PB_GMPLS_XC_OPERATION<s(0)(0)(0)>[&];(D1:PB_GMPLS_XC_OPERATION:1)[[TYPENAME:PB_GMPLS_XC_OPERATION]]

typedef enum 
{
	PB_GMPLS_XC_NORMAL_CONFIG<s(0)(0)(0)>[&] = 0x1,
	PB_GMPLS_XC_FAST_CONFIG<s(0)(0)(0)>[&] = 0x2,
}PB_GMPLS_XC_CONFIG_MODE<s(0)(0)(0)>[&];(D1:PB_GMPLS_XC_CONFIG_MODE:1)[[TYPENAME:PB_GMPLS_XC_CONFIG_MODE]]

 typedef struct 
{
    PB_GMPLS_TP_T<s(1)(1)(0)>[T]       workingTP<s(1)(1)(0)>[&];
    PB_GMPLS_TP_T<s(1)(1)(0)>[T]       protectingTP<s(1)(1)(0)>[&];
    PB_GMPLS_TP_T<s(1)(1)(0)>[T]       srcOrDestTP<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              direction<s(1)(1)(0)>[&];    
                                      
} PB_GMPLS_SNCP_T<s(0)(0)(0)>[&];(D1:PB_GMPLS_SNCP_T:1)[[TYPENAME:PB_GMPLS_SNCP_T]]

typedef enum 
{
	PB_GMPLS_SNCP_CREATION_OR_CC_TO_SNCP_CONVERTION<s(0)(0)(0)>[&] = 0x1,
	PB_GMPLS_SNCP_DELETION<s(0)(0)(0)>[&] = 0x2,
	PB_GMPLS_SNCP_TO_CC<s(0)(0)(0)>[&] = 0x3,
	PB_GMPLS_SNCP_EXTERNAL_SWITCHING<s(0)(0)(0)>[&] = 0x4,
}PB_GMPLS_SNCP_OPERATION<s(0)(0)(0)>[&];(D1:PB_GMPLS_SNCP_OPERATION:1)[[TYPENAME:PB_GMPLS_SNCP_OPERATION]]	

typedef enum 
{
	PB_GMPLS_SNCP_WORKING_TO_CC<s(0)(0)(0)>[&] = 0x1,
	PB_GMPLS_SNCP_PROTECTION_TO_CC<s(0)(0)(0)>[&] = 0x2,
}PB_GMPLS_SNCP_TO_CC_CONVERTION<s(0)(0)(0)>[&];(D1:PB_GMPLS_SNCP_TO_CC_CONVERTION:1)[[TYPENAME:PB_GMPLS_SNCP_TO_CC_CONVERTION]]	

typedef enum 
{
    PB_GMPLS_SNCP_CLEAR<s(0)(0)(0)>[&] = 0x1,
    PB_GMPLS_SNCP_MANUAL_TO_PROTECTING<s(0)(0)(0)>[&] =0x2,
    PB_GMPLS_SNCP_MANUAL_TO_WORKING<s(0)(0)(0)>[&] = 0x3,
    PB_GMPLS_SNCP_FORCED_TO_PROTECTING<s(0)(0)(0)>[&] = 0x4,
    PB_GMPLS_SNCP_LOCKOUT<s(0)(0)(0)>[&] = 0x5,
} PB_GMPLS_SNCP_SWITCHING_COMMAND<s(0)(0)(0)>[&];(D1:PB_GMPLS_SNCP_SWITCHING_COMMAND:1)[[TYPENAME:PB_GMPLS_SNCP_SWITCHING_COMMAND]]
	
typedef enum 
{
    PB_GMPLS_SNCP_ACTIVE<s(0)(0)(0)>[&] = 0x1,
    PB_GMPLS_SNCP_STANDBY<s(0)(0)(0)>[&] = 0x2,
} PB_GMPLS_SNCP_STATUS<s(0)(0)(0)>[&];(D1:PB_GMPLS_SNCP_STATUS:1)[[TYPENAME:PB_GMPLS_SNCP_STATUS]]

 typedef struct 
{
    UINT16<s(1)(1)(0)>[T]      slotNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]      portNo<s(1)(1)(0)>[&];
} PB_GMPLS_MSP_PORT_T<s(0)(0)(0)>[&];(D1:PB_GMPLS_MSP_PORT_T:1)[[TYPENAME:PB_GMPLS_MSP_PORT_T]]


typedef enum 
{
    PB_GMPLS_LOF<s(0)(0)(0)>[&]         = 0x1,
    PB_GMPLS_TIM<s(0)(0)(0)>[&]         = 0x2,
    PB_GMPLS_RSEXE<s(0)(0)(0)>[&]      = 0x3,
    PB_GMPLS_RSDEG<s(0)(0)(0)>[&]      = 0x4,
    PB_GMPLS_MSAIS<s(0)(0)(0)>[&]      = 0x5,
    PB_GMPLS_MSEXE<s(0)(0)(0)>[&]      = 0x6,
    PB_GMPLS_MSDEG<s(0)(0)(0)>[&]      = 0x7,
    PB_GMPLS_MSRDI<s(0)(0)(0)>[&]      = 0x8,
} PB_GMPLS_ALARM<s(0)(0)(0)>[&];(D1:PB_GMPLS_ALARM:1)[[TYPENAME:PB_GMPLS_ALARM]]

 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_SDH_PORT_CLASSIFIER_CHANGE_CHECK<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T]       slotNo<s(0)(0)(0)>[&],
                                           UINT16<s(0)(0)(0)>[T]       portType<s(0)(0)(0)>[&],
                                           UINT16<s(0)(0)(0)>[T]       portNo<s(0)(0)(0)>[&],
                                           PB_GMPLS_PORT_CLASSIFIER<s(0)(0)(0)>[T] newPortClassifier<s(0)(0)(0)>[&]);(D1:newPortClassifier:0)


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_TP_RESERVATION_CHANGE_CHECK<s(0)(0)(0)>[&]( UINT16<s(0)(0)(0)>[T]   slotNo<s(0)(0)(0)>[&],
                                       UINT16<s(0)(0)(0)>[T]   portType<s(0)(0)(0)>[&],
                                       UINT16<s(0)(0)(0)>[T]   portNo<s(0)(0)(0)>[&],
                                       UINT16<s(0)(0)(0)>[T]   action<s(0)(0)(0)>[&],
                                       UINT16<s(0)(0)(0)>[T]   tpNum<s(0)(0)(0)>[&],
                                       UINT16<s(0)(0)(0)>[T]   *tp<s(0)(0)(0)>[&]);(D1:tp:0)


 
 
 
 
 
 
gmplsLicenseStatus_Tval<s(0)(0)(0)>[T] CBM_CheckGmplsStatus<s(0)(0)(0)>[&]();(D1:CBM_CheckGmplsStatus:0)


 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        slotNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        portType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        realPortType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        portNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        mapString_len<s(1)(1)(0)>[&];
    char          portMappingString<s(1)(1)(0)>[&][384];
}CMND_IFM_CBM_PORT_MAPPING_CHANGE_IND_T<s(0)(0)(0)>[&];(D1:CMND_IFM_CBM_PORT_MAPPING_CHANGE_IND_T:1)[[TYPENAME:CMND_IFM_CBM_PORT_MAPPING_CHANGE_IND_T]]


 
 
 
 
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_ETH_PORT_CLASSIFIER_CHANGE_CHECK<s(0)(0)(0)>[&]( UINT16<s(0)(0)(0)>[T]      slotNo<s(0)(0)(0)>[&],
                                            UINT16<s(0)(0)(0)>[T]      portType<s(0)(0)(0)>[&],
                                            UINT16<s(0)(0)(0)>[T]      portNo<s(0)(0)(0)>[&],
                                            PB_GMPLS_PORT_CLASSIFIER<s(0)(0)(0)>[T]    newPortClassifier<s(0)(0)(0)>[&]);(D1:newPortClassifier:0)


 
 
 
 
 
 
                                                                             
 
 
 
 
 
 
 

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_VCG_CONFIGURATION_CHANGE_CHECK<s(0)(0)(0)>[&]( UINT16<s(0)(0)(0)>[T]        slotNo<s(0)(0)(0)>[&],
                                          UINT16<s(0)(0)(0)>[T]        vcgNo<s(0)(0)(0)>[&],
                                          PB_GMPLS_VCG_CONFIG_T<s(0)(0)(0)>[T]         vcgConfiguration<s(0)(0)(0)>[&]);(D1:vcgConfiguration:0)

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_VCG_CAPACITY_CHANGE_CHECK<s(0)(0)(0)>[&]( UINT16<s(0)(0)(0)>[T]             slotNo<s(0)(0)(0)>[&],
                                     PB_GMPLS_TP_T<s(0)(0)(0)>[T]      tp<s(0)(0)(0)>[&],
                                     UINT16<s(0)(0)(0)>[T]             vcgNo<s(0)(0)(0)>[&],
                                     UINT16<s(0)(0)(0)>[T]             direction<s(0)(0)(0)>[&],
                                     UINT16<s(0)(0)(0)>[T]             action<s(0)(0)(0)>[&]);(D1:action:0)



 
 
 
 
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_XC_CHANGE_CHECK<s(0)(0)(0)>[&]( PB_GMPLS_XC_OPERATION<s(0)(0)(0)>[T]        action<s(0)(0)(0)>[&],
                           PB_GMPLS_XC_T<s(0)(0)(0)>[T]                xc<s(0)(0)(0)>[&]);(D1:xc:0)


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]        correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        configMode<s(1)(1)(0)>[&];   
    UINT16<s(1)(1)(0)>[T]        deletedXcNum<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        createdXcNum<s(1)(1)(0)>[&];
    PB_GMPLS_XC_T<s(1)(1)(0)>[T] modifiedXc<s(1)(1)(0)>[&][1];
} CMND_CBM_CCS_MODIFY_XC_REQ_T<s(0)(0)(0)>[&];(D1:CMND_CBM_CCS_MODIFY_XC_REQ_T:1)[[TYPENAME:CMND_CBM_CCS_MODIFY_XC_REQ_T]]

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]        correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        deletedXcNum<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        createdXcNum<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        result<s(1)(1)(0)>[&][1];   
} CMND_CCS_CBM_MODIFY_XC_ACK_T<s(0)(0)(0)>[&];(D1:CMND_CCS_CBM_MODIFY_XC_ACK_T:1)[[TYPENAME:CMND_CCS_CBM_MODIFY_XC_ACK_T]]

 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]      head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]          action<s(1)(1)(0)>[&];  
    UINT16<s(1)(1)(0)>[T]          result<s(1)(1)(0)>[&];  
    PB_GMPLS_XC_T<s(1)(1)(0)>[T]   xc<s(1)(1)(0)>[&];
}CMND_CCS_CBM_XC_CHANGE_IND_T<s(0)(0)(0)>[&];(D1:CMND_CCS_CBM_XC_CHANGE_IND_T:1)[[TYPENAME:CMND_CCS_CBM_XC_CHANGE_IND_T]]


 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_SNCP_CHANGE_CHECK<s(0)(0)(0)>[&](PB_GMPLS_SNCP_OPERATION<s(0)(0)(0)>[T]        action<s(0)(0)(0)>[&],
                            PB_GMPLS_SNCP_TO_CC_CONVERTION<s(0)(0)(0)>[T] workOrProtToCc<s(0)(0)(0)>[&],
                            PB_GMPLS_SNCP_T<s(0)(0)(0)>[T]                sncp<s(0)(0)(0)>[&]);(D1:sncp:0)

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]                       head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                           correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                           action<s(1)(1)(0)>[&];          
    UINT16<s(1)(1)(0)>[T]                           workOrProtToCc<s(1)(1)(0)>[&];  
    UINT16<s(1)(1)(0)>[T]                           sncpNum<s(1)(1)(0)>[&];
    PB_GMPLS_SNCP_T<s(1)(1)(0)>[T]                  modifiedSncp<s(1)(1)(0)>[&][1];
} CMND_CBM_SPM_MODIFY_SNCP_REQ_T<s(0)(0)(0)>[&];(D1:CMND_CBM_SPM_MODIFY_SNCP_REQ_T:1)[[TYPENAME:CMND_CBM_SPM_MODIFY_SNCP_REQ_T]]

 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]        correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        sncpNum<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        result<s(1)(1)(0)>[&][1];  
} CMND_SPM_CBM_MODIFY_SNCP_ACK_T<s(0)(0)(0)>[&];(D1:CMND_SPM_CBM_MODIFY_SNCP_ACK_T:1)[[TYPENAME:CMND_SPM_CBM_MODIFY_SNCP_ACK_T]]

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]                       head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]                           correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                           action<s(1)(1)(0)>[&];     
    UINT16<s(1)(1)(0)>[T]                           sncpNum<s(1)(1)(0)>[&];
    PB_GMPLS_SNCP_T<s(1)(1)(0)>[T]                  switchedSncp<s(1)(1)(0)>[&][1];
} CMND_CBM_SPM_SWITCH_SNCP_REQ_T<s(0)(0)(0)>[&];(D1:CMND_CBM_SPM_SWITCH_SNCP_REQ_T:1)[[TYPENAME:CMND_CBM_SPM_SWITCH_SNCP_REQ_T]]


 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]        correlator<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        sncpNum<s(1)(1)(0)>[&]; 
    UINT16<s(1)(1)(0)>[T]        result<s(1)(1)(0)>[&][1];  
} CMND_SPM_CBM_SWITCH_SNCP_ACK_T<s(0)(0)(0)>[&];(D1:CMND_SPM_CBM_SWITCH_SNCP_ACK_T:1)[[TYPENAME:CMND_SPM_CBM_SWITCH_SNCP_ACK_T]]

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
        command_tt<s(1)(1)(0)>[T]              head<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T]                  action<s(1)(1)(0)>[&];  
        UINT16<s(1)(1)(0)>[T]                  workOrProtToCc<s(1)(1)(0)>[&];  
        PB_GMPLS_SNCP_T<s(1)(1)(0)>[T]         sncp<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T]                  result<s(1)(1)(0)>[&];  
}CMND_SPM_CBM_SNCP_CHANGE_IND_T<s(0)(0)(0)>[&];(D1:CMND_SPM_CBM_SNCP_CHANGE_IND_T:1)[[TYPENAME:CMND_SPM_CBM_SNCP_CHANGE_IND_T]]

 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                           action<s(1)(1)(0)>[&];    
     
    UINT16<s(1)(1)(0)>[T]                result<s(1)(1)(0)>[&]; 
     
    PB_GMPLS_SNCP_T<s(1)(1)(0)>[T]       sncp<s(1)(1)(0)>[&];
} CMND_SPM_CBM_SNCP_SWITCH_IND_T<s(0)(0)(0)>[&];(D1:CMND_SPM_CBM_SNCP_SWITCH_IND_T:1)[[TYPENAME:CMND_SPM_CBM_SNCP_SWITCH_IND_T]]

 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]            head<s(1)(1)(0)>[&];
    PB_GMPLS_SNCP_T<s(1)(1)(0)>[T]       sncp<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]                currentStatus<s(1)(1)(0)>[&];  
} CMND_SPA_CBM_SNCP_SWITCHING_IND_T<s(0)(0)(0)>[&];(D1:CMND_SPA_CBM_SNCP_SWITCHING_IND_T:1)[[TYPENAME:CMND_SPA_CBM_SNCP_SWITCHING_IND_T]]


 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_MSP_CREATION_CHECK<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T]                     mspScheme<s(0)(0)(0)>[&],
                             UINT16<s(0)(0)(0)>[T]                     portType<s(0)(0)(0)>[&],
                             PB_GMPLS_MSP_PORT_T<s(0)(0)(0)>[T]        port<s(0)(0)(0)>[&]);(D1:port:0)

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&]; 
    UINT16<s(1)(1)(0)>[T]              action<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              mspScheme<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              portType<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              workingPortNum<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] protectingPort<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] workingPort<s(1)(1)(0)>[&][14];
} CMND_MPM_CBM_MSP_CHANGE_IND_T<s(0)(0)(0)>[&];(D1:CMND_MPM_CBM_MSP_CHANGE_IND_T:1)[[TYPENAME:CMND_MPM_CBM_MSP_CHANGE_IND_T]]


 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CBM_MSSPRING_CREATION_CHECK<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T]                protectionScheme<s(0)(0)(0)>[&],
                                  UINT16<s(0)(0)(0)>[T]                portType<s(0)(0)(0)>[&],
                                  PB_GMPLS_MSP_PORT_T<s(0)(0)(0)>[T]   port<s(0)(0)(0)>[&]);(D1:port:0)

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              action<s(1)(1)(0)>[&]; 
    UINT16<s(1)(1)(0)>[T]              protectionScheme<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]              portType<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] eastPort<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] eastProtectionPort<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] westPort<s(1)(1)(0)>[&];
    PB_GMPLS_MSP_PORT_T<s(1)(1)(0)>[T] westProtectingPort<s(1)(1)(0)>[&];
}CMND_MSM_CBM_MSSPRING_CHANGE_IND_T<s(0)(0)(0)>[&];(D1:CMND_MSM_CBM_MSSPRING_CHANGE_IND_T:1)[[TYPENAME:CMND_MSM_CBM_MSSPRING_CHANGE_IND_T]]


 
 
 
 
 


 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        action<s(1)(1)(0)>[&];
} CMND_MFM_CBM_MIB_SAVING_ADMISSION_IND_T<s(0)(0)(0)>[&];(D1:CMND_MFM_CBM_MIB_SAVING_ADMISSION_IND_T:1)[[TYPENAME:CMND_MFM_CBM_MIB_SAVING_ADMISSION_IND_T]]
 
 
 
 
 

 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        gmplsStatus<s(1)(1)(0)>[&];
} CMND_CBM_SNMPAGENT_GMPLS_ACTIVE_IND_T<s(0)(0)(0)>[&];(D1:CMND_CBM_SNMPAGENT_GMPLS_ACTIVE_IND_T:1)[[TYPENAME:CMND_CBM_SNMPAGENT_GMPLS_ACTIVE_IND_T]]


 
 
 
 
 

 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]   head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]       slotNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]       trigger<s(1)(1)(0)>[&];
} CMND_CBM_GFA_ALARM_IND_TRIGGER_T<s(0)(0)(0)>[&];(D1:CMND_CBM_GFA_ALARM_IND_TRIGGER_T:1)[[TYPENAME:CMND_CBM_GFA_ALARM_IND_TRIGGER_T]]


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
void CBM_SEND_ALARM_IND_TO_GMPLS<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T]              slotNo<s(0)(0)(0)>[&],
                                 UINT16<s(0)(0)(0)>[T]              portType<s(0)(0)(0)>[&],
                                 UINT16<s(0)(0)(0)>[T]              portNo<s(0)(0)(0)>[&],
                                 UINT16<s(0)(0)(0)>[T]              cardType<s(0)(0)(0)>[&],
                                 PB_GMPLS_ALARM<s(0)(0)(0)>[T]      alarmType<s(0)(0)(0)>[&],
                                 UINT16<s(0)(0)(0)>[T]              alarmStatus<s(0)(0)(0)>[&]);(D1:alarmStatus:0)
                                 
                                 

 
 
 
 
 

 
 
 
 
 
 
typedef struct 
{
   command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
} CMND_PSM_CBM_MANUAL_SC_SWITCHING_IND_T<s(0)(0)(0)>[&];(D1:CMND_PSM_CBM_MANUAL_SC_SWITCHING_IND_T:1)[[TYPENAME:CMND_PSM_CBM_MANUAL_SC_SWITCHING_IND_T]]



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
typedef struct 
{
    command_tt<s(1)(1)(0)>[T]    head<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        slotNo<s(1)(1)(0)>[&];
    UINT16<s(1)(1)(0)>[T]        reserved<s(1)(1)(0)>[&];
}CMND_UDM_MIB_RESTORE_READY_NOTIFY_T<s(0)(0)(0)>[&];(D1:CMND_UDM_MIB_RESTORE_READY_NOTIFY_T:1)[[TYPENAME:CMND_UDM_MIB_RESTORE_READY_NOTIFY_T]]

 
 
 
 
 
 
 
 
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] 
	     CBM_IFM_OTU_PORT_PATH_MAPPING_CHANGE_CHECK<s(0)(0)(0)>[&](
	                                               UINT16<s(0)(0)(0)>[T]       slotNo<s(0)(0)(0)>[&],                                        
                                                   UINT16<s(0)(0)(0)>[T]       portNo<s(0)(0)(0)>[&],
                                                   UINT8<s(0)(0)(0)>[T]        newPathMapping<s(0)(0)(0)>[&]);(D1:newPathMapping:0)


 
 
 
typedef unsigned int (*CHK_TP_RESERVE_CALLBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(CHK_TP_RESERVE_CALLBACK)(const PB_GMPLS_TP_T<s(0)(0)(0)>[T]* , UINT32<s(0)(0)(0)>[T] );(D1:UINT32:0)
extern void grm_register_ccs_check_tp_reserve<s(0)(0)(0)>[&](CHK_TP_RESERVE_CALLBACK<s(0)(0)(0)>[T] );(D1:CHK_TP_RESERVE_CALLBACK:0)
extern void grm_register_spm_check_tp_reserve<s(0)(0)(0)>[&](CHK_TP_RESERVE_CALLBACK<s(0)(0)(0)>[T] );(D1:CHK_TP_RESERVE_CALLBACK:0)
























 













typedef enum{
    SDD_EC_P2W<s(0)(0)(0)>[&],
    SDD_EC_W2P<s(0)(0)(0)>[&],
}SDD_EC_SWITCH_T<s(0)(0)(0)>[&];(D1:SDD_EC_SWITCH_T:1)[[TYPENAME:SDD_EC_SWITCH_T]]

 
typedef enum{
    NO_TP_MAP<s(0)(0)(0)>[&] =0,        
    PDH_TP_MAP<s(0)(0)(0)>[&],              
    SDH_TP_MAP<s(0)(0)(0)>[&],                 
    GMPLS_TP_MAP<s(0)(0)(0)>[&]             
}MAPPER_TYPE_T<s(0)(0)(0)>[&];(D1:MAPPER_TYPE_T:1)[[TYPENAME:MAPPER_TYPE_T]]

typedef enum{
    LO_MAPPING_TU12<s(0)(0)(0)>[&] = 0,
    LO_MAPPING_TU3<s(0)(0)(0)>[&],
    LO_MAPPING_TU11<s(0)(0)(0)>[&],
    LO_MAPPING_TU2<s(0)(0)(0)>[&]
}LO_MAPPING_TYPE_T<s(0)(0)(0)>[&];(D1:LO_MAPPING_TYPE_T:1)[[TYPENAME:LO_MAPPING_TYPE_T]]

typedef struct LoTPMapperItem_s<s(1)(0)(1)>[&]
{
    MAPPER_TYPE_T<s(1)(1)(0)>[T] TpType<s(1)(1)(0)>[&];     
    UINT8<s(1)(1)(0)>[T] bGmplsReserve<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] LoBus<s(1)(1)(0)>[&];     
    UINT8<s(1)(1)(0)>[T] LoVC4<s(1)(1)(0)>[&];     
    UINT8<s(1)(1)(0)>[T]  HoSlot<s(1)(1)(0)>[&];     
    UINT8<s(1)(1)(0)>[T]  HoPortType<s(1)(1)(0)>[&];  
    UINT8<s(1)(1)(0)>[T]  HoPort<s(1)(1)(0)>[&];     
    UINT8<s(1)(1)(0)>[T]  HoE<s(1)(1)(0)>[&];          
    UINT8<s(1)(1)(0)>[T]  HoD<s(1)(1)(0)>[&];         
    UINT8<s(1)(1)(0)>[T]  HoC<s(1)(1)(0)>[&];         
    UINT8<s(1)(1)(0)>[T]  HoB<s(1)(1)(0)>[&];         
} __attribute__ ((packed))  LO_TP_MAPPER_ITEM_T<s(0)(0)(0)>[&];(D1:LO_TP_MAPPER_ITEM_T:1)[[TYPENAME:LO_TP_MAPPER_ITEM_T]]

 
typedef struct CrossConnectionItem_s<s(1)(0)(1)>[&]
{    
    UINT8<s(1)(1)(0)>[T] fromBus<s(1)(1)(0)>[&];       
    UINT8<s(1)(1)(0)>[T] fromVC4<s(1)(1)(0)>[&];       
    UINT8<s(1)(1)(0)>[T] type<s(1)(1)(0)>[&] : 5;     
    UINT8<s(1)(1)(0)>[T] k<s(1)(1)(0)>[&] : 3;         
    UINT8<s(1)(1)(0)>[T] l<s(1)(1)(0)>[&] : 4;         
    UINT8<s(1)(1)(0)>[T] m<s(1)(1)(0)>[&] : 3;         
    UINT8<s(1)(1)(0)>[T] bChanged<s(1)(1)(0)>[&] : 1;  
} __attribute__ ((packed))  CROSS_CONNECT_ITEM_T<s(0)(0)(0)>[&];(D1:CROSS_CONNECT_ITEM_T:1)[[TYPENAME:CROSS_CONNECT_ITEM_T]]

 
typedef struct CrossConnectionHCCMatrix_s<s(1)(0)(1)>[&]
{
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC4List<s(1)(1)(0)>[&][136 ][16 ];     



} __attribute__ ((packed))  CROSS_CONNECT_HCC_MATRIX_T<s(0)(0)(0)>[&];(D1:CROSS_CONNECT_HCC_MATRIX_T:1)[[TYPENAME:CROSS_CONNECT_HCC_MATRIX_T]]
 
typedef struct CrossConnectionLCCMatrix_s<s(1)(0)(1)>[&]
{
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC3List<s(1)(1)(0)>[&][9 ][16 ][3 ];     
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC12List<s(1)(1)(0)>[&][9 ][16 ][3 ][7 ][3 ];     
} __attribute__ ((packed))  CROSS_CONNECT_LCC_MATRIX_T<s(0)(0)(0)>[&];(D1:CROSS_CONNECT_LCC_MATRIX_T:1)[[TYPENAME:CROSS_CONNECT_LCC_MATRIX_T]]

 
typedef struct CrossConnectionHLCMatrix_s<s(1)(0)(1)>[&]
{
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC4List<s(1)(1)(0)>[&][18 ][16 ];     
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC3List<s(1)(1)(0)>[&][18 ][16 ][3 ];     
    CROSS_CONNECT_ITEM_T<s(1)(1)(0)>[T]    VC12List<s(1)(1)(0)>[&][18 ][16 ][3 ][7 ][3 ];     
} __attribute__ ((packed))  CrossConnectionHLCMatrix<s(0)(0)(0)>[&];(D1:CrossConnectionHLCMatrix:1)[[TYPENAME:CrossConnectionHLCMatrix]]

 
 
typedef int (*funcPBCCHCCAllCXC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCHCCAllCXC)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], CROSS_CONNECT_HCC_MATRIX_T<s(0)(0)(0)>[T] *pMatrix<s(0)(0)(0)>[&]);(D1:pMatrix:0)
typedef int (*funcPBCCLCCAllCXC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCLCCAllCXC)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], CROSS_CONNECT_LCC_MATRIX_T<s(0)(0)(0)>[T] *pMatrix<s(0)(0)(0)>[&]);(D1:pMatrix:0)
typedef int (*funcPBCCHLCAllCXC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCHLCAllCXC)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], CrossConnectionHLCMatrix<s(0)(0)(0)>[T] *pMatrix<s(0)(0)(0)>[&]);(D1:pMatrix:0)

 
 
typedef int (*funcPBCCSetVC4XC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetVC4XC) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC4<s(0)(0)(0)>[&]);(D1:ToVC4:0)
typedef int (*funcPBCCSetVC3XC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetVC3XC) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] FromBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC3<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC3<s(0)(0)(0)>[&]);(D1:ToVC3:0)
typedef int (*funcPBCCSetVC12XC<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetVC12XC) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] FromBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC3<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC2<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] FromVC1<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC4<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC3<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC2<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] ToVC1<s(0)(0)(0)>[&]);(D1:ToVC1:0)

 
 
typedef int (*funcPBCCTpMapper<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCTpMapper)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], LO_TP_MAPPER_ITEM_T<s(0)(0)(0)>[T] *pMapper<s(0)(0)(0)>[&]);(D1:pMapper:0)
 
typedef int (*funcPBCCLoMapping<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCLoMapping)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] LoBus<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] LoVC4<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] LoK<s(0)(0)(0)>[&], LO_MAPPING_TYPE_T<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&]);(D1:type:0)

 
typedef int (*funcPBCCSetHOCCCardState<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetHOCCCardState) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)
typedef int (*funcPBCCFreezeAllSNCP<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCFreezeAllSNCP) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
typedef int (*funcPBCCFreezeAllHardWareMSP<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCFreezeAllHardWareMSP) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)

 
typedef int (*funcPBCCSetLOCCMode<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetLOCCMode) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)

 
 
typedef int (*funcPBCCSetEPGSwitch<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetEPGSwitch) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] WorkSlot<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] ProtSlot<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)
typedef int (*funcPBCCSetMSPSwitch<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetMSPSwitch) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] WorkSlot<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] eWorkPortType<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] WorkPort<s(0)(0)(0)>[&],
											UINT32<s(0)(0)(0)>[T] ProtSlot<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] eProtPortType<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] ProtPort<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)
typedef int (*funcPBCCSetDRISwitch<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetDRISwitch) (INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] WorkSlot<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] eWorkPortType<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] WorkPort<s(0)(0)(0)>[&],TP_INDEX_T<s(0)(0)(0)>[T] WorkTp<s(0)(0)(0)>[&],
											UINT32<s(0)(0)(0)>[T] ProtSlot<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] eProtPortType<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] ProtPort<s(0)(0)(0)>[&],TP_INDEX_T<s(0)(0)(0)>[T] ProtTp<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)

 
 
typedef int (*funcPBCCSetAis<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetAis)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], TP_INDEX_T<s(0)(0)(0)>[T] eTp<s(0)(0)(0)>[&], ALARM_DIRECTION_T<s(0)(0)(0)>[T] eDir<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
typedef int (*funcPBCCSetCardAis<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetCardAis)(INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] Slot<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)

typedef int (*funcGetLoccSlotFromLCTP<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcGetLoccSlotFromLCTP)(UINT8<s(0)(0)(0)>[T] ucTpType<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucSlot<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] ucPortType<s(0)(0)(0)>[&]
    , UINT8<s(0)(0)(0)>[T] ucPort<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulTp<s(0)(0)(0)>[&]);(D1:ulTp:0)    

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (* funcPBCCSetLOCCSwitch<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetLOCCSwitch)(ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], CTD_LOCC_MODE_T<s(0)(0)(0)>[T] eLccMode<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bWorkState<s(0)(0)(0)>[&]);(D1:bWorkState:0)

typedef int (*funcPBCCSetCardType<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcPBCCSetCardType) (INSTANCE_T<s(0)(0)(0)>[T] inst<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSlot<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulStyle<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulOption<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bWarm<s(0)(0)(0)>[&]);(D1:bWarm:0)
typedef int (*funcCCSetPortType<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCSetPortType)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPortType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T]  usPortId<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulActualPortType<s(0)(0)(0)>[&]);(D1:ulActualPortType:0)
typedef unsigned int (*funcCCGetNofreeCapacityslot<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCGetNofreeCapacityslot)(UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)

typedef  int (*funcCCGetGcbCheck<s(0)(0)(0)>[&])TYPENAME:FUNC:(funcCCGetGcbCheck)(PB_GMPLS_XC_OPERATION<s(0)(0)(0)>[T] action<s(0)(0)(0)>[&], PB_GMPLS_XC_T<s(0)(0)(0)>[T] xc<s(0)(0)(0)>[&]);(D1:xc:0)



















 


















 



 






















 


 

typedef struct 
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                enable<s(1)(1)(0)>[&];             
} FMM_HANDLE_SUPPRESS_CMND_T<s(0)(0)(0)>[&];(D1:FMM_HANDLE_SUPPRESS_CMND_T:1)[[TYPENAME:FMM_HANDLE_SUPPRESS_CMND_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    MIBpbActiveAlarmTable_t<s(1)(1)(0)>[T]  data<s(1)(1)(0)>[&];
} FMM_AEL_NEW_ALARM_RAISED_CMND_T<s(0)(0)(0)>[&];(D1:FMM_AEL_NEW_ALARM_RAISED_CMND_T:1)[[TYPENAME:FMM_AEL_NEW_ALARM_RAISED_CMND_T]]

 
typedef enum
{
    LOG_COMMAND_NONE<s(0)(0)(0)>[&] = 0,
    LOG_COMMAND_CLEAR_ALARMLOG<s(0)(0)(0)>[&]  = 1,
    LOG_COMMAND_CLEAR_EVENTLOG<s(0)(0)(0)>[&]  = 2,    
} LOG_COMMAND_T<s(0)(0)(0)>[&];(D1:LOG_COMMAND_T:1)[[TYPENAME:LOG_COMMAND_T]]

typedef struct
{
    command_tt<s(1)(1)(0)>[T]         head<s(1)(1)(0)>[&];
    LOG_COMMAND_T<s(1)(1)(0)>[T]      logCmd<s(1)(1)(0)>[&];    
} FMM_AEL_LOG_STATUS_CMND_T<s(0)(0)(0)>[&];(D1:FMM_AEL_LOG_STATUS_CMND_T:1)[[TYPENAME:FMM_AEL_LOG_STATUS_CMND_T]]


 





typedef struct
{
    command_tt<s(1)(1)(0)>[T]         head<s(1)(1)(0)>[&];
    int                DetectTime<s(1)(1)(0)>[&];
    int                ClearTime<s(1)(1)(0)>[&];   
} FMM_FMC_ALM_PERSISTENT_TIME_CFG_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_ALM_PERSISTENT_TIME_CFG_CMND_T:1)[[TYPENAME:FMM_FMC_ALM_PERSISTENT_TIME_CFG_CMND_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]         head<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]               enable<s(1)(1)(0)>[&];
} FMM_FMC_ENABLE_CORRELATION_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_ENABLE_CORRELATION_CMND_T:1)[[TYPENAME:FMM_FMC_ENABLE_CORRELATION_CMND_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];    
    BOOL<s(1)(1)(0)>[T]                enable<s(1)(1)(0)>[&];
} FMM_FMC_NE_LEVEL_ALARM_INHIBIT_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_NE_LEVEL_ALARM_INHIBIT_CMND_T:1)[[TYPENAME:FMM_FMC_NE_LEVEL_ALARM_INHIBIT_CMND_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];    
    BOOL<s(1)(1)(0)>[T]                aisEnable<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                rdiEnable<s(1)(1)(0)>[&];
} FMM_FMC_NE_LEVEL_AIS_RDI_INHIBIT_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_NE_LEVEL_AIS_RDI_INHIBIT_CMND_T:1)[[TYPENAME:FMM_FMC_NE_LEVEL_AIS_RDI_INHIBIT_CMND_T]]

 
typedef struct
{
	command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
	BOOL<s(1)(1)(0)>[T]                alarmEnable<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                aisEnable<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                rdiEnable<s(1)(1)(0)>[&];
	BOOL<s(1)(1)(0)>[T]                sefEnable<s(1)(1)(0)>[&];
	unsigned int        changeMsgBit<s(1)(1)(0)>[&];
}FMM_FMC_NE_LEVEL_CFG_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_NE_LEVEL_CFG_CMND_T:1)[[TYPENAME:FMM_FMC_NE_LEVEL_CFG_CMND_T]]

 
typedef struct
{
	PbEnableDisable_Tval<s(1)(1)(0)>[T] pbNodeAlarmEnabling<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbAISEnabled<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbRDIEnabled<s(1)(1)(0)>[&];
	TruthValue_Tval<s(1)(1)(0)>[T] pbSEFEnabled<s(1)(1)(0)>[&];
	unsigned int    changeMsgBit<s(1)(1)(0)>[&]; 
}FMM_NE_LEVEL_CFG_CHANGE_T<s(0)(0)(0)>[&];(D1:FMM_NE_LEVEL_CFG_CHANGE_T:1)[[TYPENAME:FMM_NE_LEVEL_CFG_CHANGE_T]]

 

typedef enum
{
	FMM_ALARM_ENABLE<s(0)(0)(0)>[&] = 0,
	FMM_AIS_ENABLE<s(0)(0)(0)>[&]   = 1,
	FMM_RDI_ENABLE<s(0)(0)(0)>[&]   = 2,
	FMM_SEF_ENABLE<s(0)(0)(0)>[&]   = 3
}FMM_NE_CFG_NUM<s(0)(0)(0)>[&];(D1:FMM_NE_CFG_NUM:1)[[TYPENAME:FMM_NE_CFG_NUM]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              ledId<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                ledOn<s(1)(1)(0)>[&];
} FMM_FMA_ALARM_OUT_STATE_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMA_ALARM_OUT_STATE_CMND_T:1)[[TYPENAME:FMM_FMA_ALARM_OUT_STATE_CMND_T]]

 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              ledId<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                ledOn<s(1)(1)(0)>[&];
} FMM_FMA_MDO_STATE_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMA_MDO_STATE_CMND_T:1)[[TYPENAME:FMM_FMA_MDO_STATE_CMND_T]]


 
 

































typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              ioaIndex<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                enable<s(1)(1)(0)>[&];
} FMM_FMC_MDI_ENABLE_CFG_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_MDI_ENABLE_CFG_CMND_T:1)[[TYPENAME:FMM_FMC_MDI_ENABLE_CFG_CMND_T]]


 
typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    UINT32<s(1)(1)(0)>[T]              alarmId<s(1)(1)(0)>[&];
    BOOL<s(1)(1)(0)>[T]                inhibit<s(1)(1)(0)>[&];
} FMM_FMC_ALARM_TYPE_INHIBIT_CFG_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_ALARM_TYPE_INHIBIT_CFG_CMND_T:1)[[TYPENAME:FMM_FMC_ALARM_TYPE_INHIBIT_CFG_CMND_T]]

 
typedef enum
{
    FM_ALARM_RULE_NO_CHANGE<s(0)(0)(0)>[&] = 0,           
    FM_ALARM_RULE_ENABLE<s(0)(0)(0)>[&] = 1,               
    FM_ALARM_RULE_DISABLE<s(0)(0)(0)>[&] = 2,              
} FM_ALARM_RULE_T<s(0)(0)(0)>[&];(D1:FM_ALARM_RULE_T:1)[[TYPENAME:FM_ALARM_RULE_T]]

typedef struct
{
    command_tt<s(1)(1)(0)>[T]          head<s(1)(1)(0)>[&];
    FM_ALARM_RULE_T<s(1)(1)(0)>[T]     lof<s(1)(1)(0)>[&];
    FM_ALARM_RULE_T<s(1)(1)(0)>[T]     lom<s(1)(1)(0)>[&];
    FM_ALARM_RULE_T<s(1)(1)(0)>[T]     lop<s(1)(1)(0)>[&];
} FMM_FMC_ALARM_RULE_CFG_CMND_T<s(0)(0)(0)>[&];(D1:FMM_FMC_ALARM_RULE_CFG_CMND_T:1)[[TYPENAME:FMM_FMC_ALARM_RULE_CFG_CMND_T]]

extern int FMM_TclCmdShowProc<s(0)(0)(0)>[&](ClientData<s(0)(0)(0)>[T] clientData<s(0)(0)(0)>[&], Tcl_Interp<s(0)(0)(0)>[T] *interp<s(0)(0)(0)>[&], int argc<s(0)(0)(0)>[&], char *argv<s(0)(0)(0)>[&][]);(D1:argv:0)








 
































































 






















 







typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAI_LoadCard<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAI_LoadCard)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],
                                        UINT32<s(0)(0)(0)>[T] style<s(0)(0)(0)>[&],
                                        UINT32<s(0)(0)(0)>[T] option<s(0)(0)(0)>[&]);(D1:option:0)

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAI_RegisterLoad<s(0)(0)(0)>[&](CAI_LoadCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 









 





 
 


 






 

 





 

 





 

 





 

 





 

 





 

 







typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAI_BoardStateChangeFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAI_BoardStateChangeFunc)(BOARD_EVENT_T<s(0)(0)(0)>[T] event<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] style<s(0)(0)(0)>[&]);(D1:style:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAI_BoardStateChange<s(0)(0)(0)>[&](BOARD_EVENT_T<s(0)(0)(0)>[T] event<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] style<s(0)(0)(0)>[&]);(D1:style:0)


 






 


 





 

 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAI_ReportCardFailureFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAI_ReportCardFailureFunc)(INT16<s(0)(0)(0)>[T] entityNum<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAI_ReportCardFailure<s(0)(0)(0)>[&](INT16<s(0)(0)(0)>[T] entityNum<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)



 






typedef struct _CM_CARDPRESENCE_T<s(1)(0)(1)>[&]
{
    BOARD_PRESENCE_T<s(1)(1)(0)>[T]  IsPresent<s(1)(1)(0)>[&][16  + 1];   
                                          
} CM_CARDPRESENCE_T<s(0)(0)(0)>[&];(D1:CM_CARDPRESENCE_T:1)[[TYPENAME:CM_CARDPRESENCE_T]]

typedef void (*CAI_ReportCardPresenceFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAI_ReportCardPresenceFunc)(INT16<s(0)(0)(0)>[T] entityNum<s(0)(0)(0)>[&],
                                       ENTITY_INFO_T<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&]);(D1:pInfo:0)
void CAI_ReportCardPresence<s(0)(0)(0)>[&](INT16<s(0)(0)(0)>[T] entityNum<s(0)(0)(0)>[&],
                                       ENTITY_INFO_T<s(0)(0)(0)>[T] *pInfo<s(0)(0)(0)>[&]);(D1:pInfo:0)

 





 



 

 
 











 




















void Cad_PrintTask<s(0)(0)(0)>[&](void);(D1:Cad_PrintTask:0)
 







typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_InitCard<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_InitCard)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],
                                        UINT32<s(0)(0)(0)>[T] style<s(0)(0)(0)>[&],
                                        UINT32<s(0)(0)(0)>[T] option<s(0)(0)(0)>[&]);(D1:option:0)

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterInit<s(0)(0)(0)>[&](CAD_InitCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)


 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_ActivateCard<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_ActivateCard)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bWarmFlag<s(0)(0)(0)>[&]);(D1:bWarmFlag:0)

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterActive<s(0)(0)(0)>[&](CAD_ActivateCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 





typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_DeinitCard<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_DeinitCard)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&]);(D1:instance:0)

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterDeinit<s(0)(0)(0)>[&](CAD_DeinitCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 





typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_DeactiveCard<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_DeactiveCard)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&]);(D1:instance:0)

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterDeactive<s(0)(0)(0)>[&](CAD_DeactiveCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 







 
 


 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_Detecter<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_Detecter)(INSTANCE_T<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pState<s(0)(0)(0)>[&]);(D1:pState:0)


 





PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterDetecter<s(0)(0)(0)>[&](CAD_Detecter<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 








 
 
 
 



 





 









 
 

 
                                       

 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_ColdRebootFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_ColdRebootFunc)(void);(D1:CAD_ColdRebootFunc:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterColdReboot<s(0)(0)(0)>[&](CAD_ColdRebootFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_ReportCardFailureFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_ReportCardFailureFunc)(UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_ReportCardFailure<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)

 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_ReportFanFailureFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_ReportFanFailureFunc)(UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_ReportFanFailure<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] failure<s(0)(0)(0)>[&]);(D1:failure:0)

 






typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_FpgaVersion<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_FpgaVersion)(INSTANCE_T<s(0)(0)(0)>[T]    inst<s(0)(0)(0)>[&], char *pFpgaVer<s(0)(0)(0)>[&]);(D1:pFpgaVer:0)

PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterFpgaVersion<s(0)(0)(0)>[&](CAD_FpgaVersion<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 





typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_RebootL2Card<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_RebootL2Card)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&]);(D1:instance:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegisterRebootL2Card<s(0)(0)(0)>[&](CAD_RebootL2Card<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_SetLOCCCardState<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_SetLOCCCardState)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bState<s(0)(0)(0)>[&]);(D1:bState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegSetLOCCCardState<s(0)(0)(0)>[&](CAD_SetLOCCCardState<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*CAD_SetLcAIS<s(0)(0)(0)>[&])TYPENAME:FUNC:(CAD_SetLcAIS)(UINT32<s(0)(0)(0)>[T] instance<s(0)(0)(0)>[&],UINT32<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bSet<s(0)(0)(0)>[&]);(D1:bSet:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAD_RegSetLcAIS<s(0)(0)(0)>[&](CAD_SetLcAIS<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

 

extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CMC_RegisterECCActive<s(0)(0)(0)>[&](CAD_ActivateCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
extern PB_ERROR_CODE_T<s(0)(0)(0)>[T] CMC_RegisterECCDeactive<s(0)(0)(0)>[&](CAD_DeactiveCard<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)

















 

typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SDD_TEMP_EVENT_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_TEMP_EVENT_CBACK)(ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&],
                                     SDD_BOARD_TYPE_T<s(0)(0)(0)>[T] boardtype<s(0)(0)(0)>[&],
                                     BOOL<s(0)(0)(0)>[T] bOverheat<s(0)(0)(0)>[&]);(D1:bOverheat:0)
 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T] (*SDD_TEMP_LEM_EVENT_CBACK<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_TEMP_LEM_EVENT_CBACK)(ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&],
                                     SDD_BOARD_TYPE_T<s(0)(0)(0)>[T] boardtype<s(0)(0)(0)>[&],
                                     BOOL<s(0)(0)(0)>[T] bOverheat<s(0)(0)(0)>[&]);(D1:bOverheat:0)
 
typedef void (*HII_PTInitGESFPFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(HII_PTInitGESFPFunc)(int instance<s(0)(0)(0)>[&], int portId<s(0)(0)(0)>[&], int SFPType<s(0)(0)(0)>[&]);(D1:SFPType:0)

 
typedef PB_ERROR_CODE_T<s(0)(0)(0)>[T](*SDD_NotifyIfmSfpChange<s(0)(0)(0)>[&])TYPENAME:FUNC:(SDD_NotifyIfmSfpChange)(UINT32<s(0)(0)(0)>[T] ulSlotNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPortNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulConnectorType<s(0)(0)(0)>[&]);(D1:ulConnectorType:0) 

 
SDD_RESET_REASON<s(0)(0)(0)>[T] SDD_GetResetReason<s(0)(0)(0)>[&]();(D1:SDD_GetResetReason:0)
void SDD_LoadModule<s(0)(0)(0)>[&]();(D1:SDD_LoadModule:0)
void SDD_SetModuleState<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] enable<s(0)(0)(0)>[&]);(D1:enable:0)
BOOL<s(0)(0)(0)>[T] SDD_GetModuleState<s(0)(0)(0)>[&]();(D1:SDD_GetModuleState:0)
BOOL<s(0)(0)(0)>[T] SDD_JudgeIfMaincard<s(0)(0)(0)>[&]();(D1:SDD_JudgeIfMaincard:0)
PbBoardStyle_Tval<s(0)(0)(0)>[T] SDD_GetLocalBoardStyle<s(0)(0)(0)>[&]();(D1:SDD_GetLocalBoardStyle:0)


 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_InitCard<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], CARDTYPE_T<s(0)(0)(0)>[T] cardType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulOption<s(0)(0)(0)>[&]);(D1:ulOption:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_ActivateCard<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bWarm<s(0)(0)(0)>[&]);(D1:bWarm:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_DeactivateCard<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_DeinitCard<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)

BOARD_PRESENCE_T<s(0)(0)(0)>[T] SDD_GetBoardPresence<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PbBoardFunction_Tval<s(0)(0)(0)>[T] SDD_GetBoardFunction<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PbBoardStyle_Tval<s(0)(0)(0)>[T] SDD_GetBoardStyle<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
UINT<s(0)(0)(0)>[T] SDD_GetSlotBoardRev<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_ResetBoard<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetLedState<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], LED_TYPE_T<s(0)(0)(0)>[T] ledType<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] usLedId<s(0)(0)(0)>[&], LED_STATE_T<s(0)(0)(0)>[T] ledState<s(0)(0)(0)>[&]);(D1:ledState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetLedState<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], LED_TYPE_T<s(0)(0)(0)>[T] ledType<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] usLedId<s(0)(0)(0)>[&], LED_STATE_T<s(0)(0)(0)>[T] *pLedState<s(0)(0)(0)>[&]);(D1:pLedState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetMdiPort<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbState<s(0)(0)(0)>[&]);(D1:pbState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetMdoPort<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetAlarmOut<s(0)(0)(0)>[&](UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetGlobalOutSignalStatus<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetCardOutSignalStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetCardManageSignalStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetPortAdminStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_EnablePortAls<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetInSignalPowerStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pNip<s(0)(0)(0)>[&]);(D1:pNip:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_NotifyLos<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bLos<s(0)(0)(0)>[&]);(D1:bLos:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetOutSignalStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pStatus<s(0)(0)(0)>[&]);(D1:pStatus:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetSTMMode<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], HW_ACT_PORT_TYPE<s(0)(0)(0)>[T] Mode<s(0)(0)(0)>[&]);(D1:Mode:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetSfpPresence<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pState<s(0)(0)(0)>[&]);(D1:pState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetLaserParameters<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], LASER_PARAMETER_T<s(0)(0)(0)>[T] *pParam<s(0)(0)(0)>[&]);(D1:pParam:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetRtcTime<s(0)(0)(0)>[&](struct tm<s(1)(0)(1)>[&] *pMyTime<s(0)(0)(0)>[&]);(D1:pMyTime:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetRtcTime<s(0)(0)(0)>[&](struct tm<s(1)(0)(1)>[&] *myTime<s(0)(0)(0)>[&]);(D1:myTime:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetTemperature<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] id<s(0)(0)(0)>[&], INT16<s(0)(0)(0)>[T] *pTemp<s(0)(0)(0)>[&]);(D1:pTemp:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetTempThreshold<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], TEMPERATURE_T<s(0)(0)(0)>[T] high<s(0)(0)(0)>[&], TEMPERATURE_T<s(0)(0)(0)>[T] low<s(0)(0)(0)>[&]);(D1:low:0)
 
void SDD_Enable1HzInterrupt<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
void SDD_RegisterReportDefect<s(0)(0)(0)>[&](FMA_AlmModDefectFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)         
void SDD_RegisterBoardsPresence<s(0)(0)(0)>[&](CAI_ReportCardPresenceFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0) 
void SDD_RegisterReportCardFail<s(0)(0)(0)>[&](CAI_ReportCardFailureFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)  
void SDD_RegisterNotifyIfmSfpChange<s(0)(0)(0)>[&](SDD_NotifyIfmSfpChange<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)  

PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterLatchEvent<s(0)(0)(0)>[&](SDD_LATCH_EVENT_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)   
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_NotifyLatchEvent<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&],CARDTYPE_T<s(0)(0)(0)>[T] cardType<s(0)(0)(0)>[&],BOARD_EVENT_T<s(0)(0)(0)>[T] latchEvent<s(0)(0)(0)>[&]);(D1:latchEvent:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterBoardEvent<s(0)(0)(0)>[&](SDD_BOARD_EVENT_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)   
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterEntityUpdate<s(0)(0)(0)>[&](SDD_ENTITY_UPDATE_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)   
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterOneSecTimer<s(0)(0)(0)>[&](SDD_ONE_SECOND_TIMER_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterButtonEvent<s(0)(0)(0)>[&](SDD_BUTTON_EVENT_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterTempEvent<s(0)(0)(0)>[&](SDD_TEMP_EVENT_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)         
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_RegisterTempLemEvent<s(0)(0)(0)>[&](SDD_TEMP_LEM_EVENT_CBACK<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)         
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetNotifyTempEvent<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)

 


void SDD_RegisterReportFanFail<s(0)(0)(0)>[&](CAD_ReportFanFailureFunc<s(0)(0)(0)>[T] pFunc<s(0)(0)(0)>[&]);(D1:pFunc:0)


PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_ECCardSwitch<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], SDD_EC_SWITCH_T<s(0)(0)(0)>[T] switchStatus<s(0)(0)(0)>[&]);(D1:switchStatus:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_TimingRefSel<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], TIMING_REF_T<s(0)(0)(0)>[T] refSet<s(0)(0)(0)>[&]);(D1:refSet:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_DetectFanFailure<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_DetectPwrFailure<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
void SDD_EnableLedTest<s(0)(0)(0)>[&](BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetFanState<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], FAN_STATUS_T<s(0)(0)(0)>[T] *pState<s(0)(0)(0)>[&]);(D1:pState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetPowerState<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] id<s(0)(0)(0)>[&], POWER_STATUS_T<s(0)(0)(0)>[T] *pState<s(0)(0)(0)>[&]);(D1:pState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetLocalSlot<s(0)(0)(0)>[&](SLOT_NUMBER_T<s(0)(0)(0)>[T] *pSlot<s(0)(0)(0)>[&]);(D1:pSlot:0)

 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SET_OAReset<s(0)(0)(0)>[&] (BOOL<s(0)(0)(0)>[T] bActive<s(0)(0)(0)>[&]);(D1:bActive:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SET_OADisable<s(0)(0)(0)>[&] (BOOL<s(0)(0)(0)>[T] bActive<s(0)(0)(0)>[&]);(D1:bActive:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SET_OAOutputMute<s(0)(0)(0)>[&] (BOOL<s(0)(0)(0)>[T] bActive<s(0)(0)(0)>[&]);(D1:bActive:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SET_OALinkLED<s(0)(0)(0)>[&] (BOOL<s(0)(0)(0)>[T] bActive<s(0)(0)(0)>[&]);(D1:bActive:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GET_OAPin<s(0)(0)(0)>[&] (UINT16<s(0)(0)(0)>[T] *wStatus<s(0)(0)(0)>[&]);(D1:wStatus:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_ResetAsic<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_InitSi5319Sedres<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)

 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetGeElLaserParameters<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&],
                                UINT16<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] offset<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] val<s(0)(0)(0)>[&]);(D1:val:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetGeElLaserParameters<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&],HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&],
                                UINT16<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] offset<s(0)(0)(0)>[&],UINT16<s(0)(0)(0)>[T] * val<s(0)(0)(0)>[&]);(D1:val:0)
void SDD_RegHIIInitGeSfp<s(0)(0)(0)>[&](HII_PTInitGESFPFunc<s(0)(0)(0)>[T] fun<s(0)(0)(0)>[&]);(D1:fun:0)
 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetAlsMode<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T]  usPortId<s(0)(0)(0)>[&], ALS_MODE_STATUS_T<s(0)(0)(0)>[T] aMode<s(0)(0)(0)>[&]);(D1:aMode:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDDSetPCA9555<s(0)(0)(0)>[&](UINT8<s(0)(0)(0)>[T] addr<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] states<s(0)(0)(0)>[&]);(D1:states:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetImpedanceMode<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] ePortType<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], PDH_OHM_TYPE_T<s(0)(0)(0)>[T] eOhmType<s(0)(0)(0)>[&]);(D1:eOhmType:0)
void SDD_NotifyNERebootFinished<s(0)(0)(0)>[&]();(D1:SDD_NotifyNERebootFinished:0)
void SDD_NotifyNERebootStarted<s(0)(0)(0)>[&]();(D1:SDD_NotifyNERebootStarted:0)

 
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetPortAdminStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetWavelength<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] wWaveLengthId<s(0)(0)(0)>[&]);(D1:wWaveLengthId:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_SetDecisionThreshold<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] wDecesionThreshold<s(0)(0)(0)>[&]);(D1:wDecesionThreshold:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetOsrAbnormalStatus<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbState<s(0)(0)(0)>[&]);(D1:pbState:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_GetDecisionThreshold<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] *wDecesionThreshold<s(0)(0)(0)>[&]);(D1:wDecesionThreshold:0)

PB_ERROR_CODE_T<s(0)(0)(0)>[T] SDD_ISELECSFP<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], HW_PORT_TYPE<s(0)(0)(0)>[T] portType<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] portId<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *wIsElecSfp<s(0)(0)(0)>[&]);(D1:wIsElecSfp:0)

extern int sdd_get_ioN_port<s(0)(0)(0)>[&] (int io<s(0)(0)(0)>[&], int * pFirst<s(0)(0)(0)>[&], int * pLast<s(0)(0)(0)>[&]);(D1:pLast:0)
extern int SDD_126xE1IOPortConvert<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&]);(D1:port:0)












 

























 

 

 























































 





 

extern  int intCnt<s(0)(0)(0)>[&];(D1:intCnt:0)		 


 



 














 



extern STATUS<s(0)(0)(0)>[T] 	intConnect<s(0)(0)(0)>[&] (VOIDFUNCPTR<s(0)(0)(0)>[T] *vector<s(0)(0)(0)>[&], VOIDFUNCPTR<s(0)(0)(0)>[T] routine<s(0)(0)(0)>[&],
	       	    	    int parameter<s(0)(0)(0)>[&]);(D1:parameter:0)
extern FUNCPTR<s(0)(0)(0)>[T] 	intHandlerCreate<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] routine<s(0)(0)(0)>[&], int parameter<s(0)(0)(0)>[&]);(D1:parameter:0)
extern void 	intLockLevelSet<s(0)(0)(0)>[&] (int newLevel<s(0)(0)(0)>[&]);(D1:newLevel:0)
extern int 	intLockLevelGet<s(0)(0)(0)>[&] (void);(D1:intLockLevelGet:0)
extern BOOL<s(0)(0)(0)>[T] 	intContext<s(0)(0)(0)>[&] (void);(D1:intContext:0)
extern int 	intCount<s(0)(0)(0)>[&] (void);(D1:intCount:0)
extern void 	intVecBaseSet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *baseAddr<s(0)(0)(0)>[&]);(D1:baseAddr:0)
extern FUNCPTR<s(0)(0)(0)>[T] *intVecBaseGet<s(0)(0)(0)>[&] (void);(D1:intVecBaseGet:0)
extern void 	intVecSet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *vector<s(0)(0)(0)>[&], FUNCPTR<s(0)(0)(0)>[T] function<s(0)(0)(0)>[&]);(D1:function:0)
extern FUNCPTR<s(0)(0)(0)>[T] 	intVecGet<s(0)(0)(0)>[&] (FUNCPTR<s(0)(0)(0)>[T] *vector<s(0)(0)(0)>[&]);(D1:vector:0)
extern int 	intLevelSet<s(0)(0)(0)>[&] (int level<s(0)(0)(0)>[&]);(D1:level:0)
extern int 	intLock<s(0)(0)(0)>[&] (void);(D1:intLock:0)
extern int 	intUnlock<s(0)(0)(0)>[&] (int oldSR<s(0)(0)(0)>[&]);(D1:oldSR:0)
extern int 	intRegsLock<s(0)(0)(0)>[&] (REG_SET<s(0)(0)(0)>[T] *pRegs<s(0)(0)(0)>[&]);(D1:pRegs:0)
extern void 	intRegsUnlock<s(0)(0)(0)>[&] (REG_SET<s(0)(0)(0)>[T] *pRegs<s(0)(0)(0)>[&], int lockKey<s(0)(0)(0)>[&]);(D1:lockKey:0)
extern STATUS<s(0)(0)(0)>[T]   intVecTableWriteProtect<s(0)(0)(0)>[&] (void);(D1:intVecTableWriteProtect:0)

























extern int	intDisable<s(0)(0)(0)>[&] (int);(D1:intDisable:0)
extern int	intEnable<s(0)(0)(0)>[&] (int);(D1:intEnable:0)






























 

 
 

 





 


















































     






















    typedef struct _FPGA_REGADDR_T<s(1)(0)(1)>[&]
    {
        UINT32<s(1)(1)(0)>[T] mask1<s(1)(1)(0)>[&];
        UINT32<s(1)(1)(0)>[T] mask2<s(1)(1)(0)>[&];
        UINT32<s(1)(1)(0)>[T] mask3<s(1)(1)(0)>[&];
        UINT32<s(1)(1)(0)>[T] status1<s(1)(1)(0)>[&];
        UINT32<s(1)(1)(0)>[T] status2<s(1)(1)(0)>[&];
        UINT32<s(1)(1)(0)>[T] status3<s(1)(1)(0)>[&];
    }
    FPGA_REGADDR_T<s(0)(0)(0)>[&];(D1:FPGA_REGADDR_T:1)[[TYPENAME:FPGA_REGADDR_T]]




     

 
     





     































    typedef struct _FPGA_SIG_PIN_T<s(1)(0)(1)>[&]
    {
        UINT32<s(1)(1)(0)>[T] port<s(1)(1)(0)>[&];                   
        UINT32<s(1)(1)(0)>[T] pin<s(1)(1)(0)>[&];                    
    }
    FPGA_SIG_PIN_T<s(0)(0)(0)>[&];(D1:FPGA_SIG_PIN_T:1)[[TYPENAME:FPGA_SIG_PIN_T]]






























    typedef struct _FPGA_PIN_XILINX_T<s(1)(0)(1)>[&]
    {
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitInit<s(1)(1)(0)>[&];             
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitProgram<s(1)(1)(0)>[&];          
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitDone<s(1)(1)(0)>[&];             
 
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitFpgaDln<s(1)(1)(0)>[&];          
    }
    FPGA_PIN_XILINX_T<s(0)(0)(0)>[&];(D1:FPGA_PIN_XILINX_T:1)[[TYPENAME:FPGA_PIN_XILINX_T]]

    typedef struct _FPGA_PIN_ALTERA_T<s(1)(0)(1)>[&]
    {
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitDClk<s(1)(1)(0)>[&];             
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitData0<s(1)(1)(0)>[&];            
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitnConfig<s(1)(1)(0)>[&];          
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitnStatus<s(1)(1)(0)>[&];          
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitCfgDone<s(1)(1)(0)>[&];          
 
        FPGA_SIG_PIN_T<s(1)(1)(0)>[T] BitFpgaDln<s(1)(1)(0)>[&];          
    }
    FPGA_PIN_ALTERA_T<s(0)(0)(0)>[&];(D1:FPGA_PIN_ALTERA_T:1)[[TYPENAME:FPGA_PIN_ALTERA_T]]

    typedef union _FPGA_PINCFG_T<s(1)(0)(1)>[&]
    {
        FPGA_PIN_ALTERA_T<s(1)(1)(0)>[T] PinAltera<s(1)(1)(0)>[&];        
        FPGA_PIN_XILINX_T<s(1)(1)(0)>[T] PinXilinx<s(1)(1)(0)>[&];        
    } FPGA_PINCFG_T<s(0)(0)(0)>[&];(D1:FPGA_PINCFG_T:1)[[TYPENAME:FPGA_PINCFG_T]]

     









     





























     


    typedef enum
    {
        FPGA_STATUS_INACTIVE<s(0)(0)(0)>[&],
        FPGA_STATUS_ACTIVE<s(0)(0)(0)>[&],
    } FPGA_STATUS_T<s(0)(0)(0)>[&];(D1:FPGA_STATUS_T:1)[[TYPENAME:FPGA_STATUS_T]]

    typedef int FPGA_HANDLE<s(0)(0)(0)>[&];(D1:FPGA_HANDLE:1)[[TYPENAME:FPGA_HANDLE]]







    typedef unsigned int FPGA_HOOK_ARG<s(0)(0)(0)>[&];(D1:FPGA_HOOK_ARG:1)[[TYPENAME:FPGA_HOOK_ARG]]
    typedef void ( * FPGA_HOOK_FUNC<s(0)(0)(0)>[&] )TYPENAME:FUNC:(FPGA_HOOK_FUNC) ( FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&], FPGA_HOOK_ARG<s(0)(0)(0)>[T] usrHookArg<s(0)(0)(0)>[&] );(D1:usrHookArg:0)

    typedef struct _FPGA_INTHOOK_T<s(1)(0)(1)>[&]
    {
        FPGA_HOOK_FUNC<s(1)(1)(0)>[T] UsrHookFunc<s(1)(1)(0)>[&];         
        FPGA_HOOK_ARG<s(1)(1)(0)>[T] UsrHookArg<s(1)(1)(0)>[&];          
        UINT32<s(1)(1)(0)>[T] Interrupts<s(1)(1)(0)>[&];          
        UINT32<s(1)(1)(0)>[T] Missed<s(1)(1)(0)>[&];              
    }
    FPGA_INTHOOK_T<s(0)(0)(0)>[&];(D1:FPGA_INTHOOK_T:1)[[TYPENAME:FPGA_INTHOOK_T]]

    typedef struct _FPGA_ERR_STATS_T<s(1)(0)(1)>[&]
    {
        UINT32<s(1)(1)(0)>[T] Interrupts<s(1)(1)(0)>[&];                  
        UINT32<s(1)(1)(0)>[T] WriteViolate<s(1)(1)(0)>[&];                
        UINT32<s(1)(1)(0)>[T] AddressViolate<s(1)(1)(0)>[&];              
        UINT32<s(1)(1)(0)>[T] SizeViolate<s(1)(1)(0)>[&];                 
        UINT32<s(1)(1)(0)>[T] PortViolate<s(1)(1)(0)>[&];                 
        UINT32<s(1)(1)(0)>[T] BoundaryViolate<s(1)(1)(0)>[&];             
    }
    FPGA_ERRSTATS_T<s(0)(0)(0)>[&];(D1:FPGA_ERRSTATS_T:1)[[TYPENAME:FPGA_ERRSTATS_T]]


     


    typedef struct _FPGA_CHIP_DATA_T<s(1)(0)(1)>[&]
    {
        UINT8<s(1)(1)(0)>[T] Chip<s(1)(1)(0)>[&];                
        UCHAR<s(1)(1)(0)>[T] CS<s(1)(1)(0)>[&];                  
        UINT16<s(1)(1)(0)>[T] IntNum<s(1)(1)(0)>[&];              
        UINT32<s(1)(1)(0)>[T] MemBase<s(1)(1)(0)>[&];             
        FPGA_PINCFG_T<s(1)(1)(0)>[T] PinCfg<s(1)(1)(0)>[&];              
        UCHAR<s(1)(1)(0)>[T] * FileName<s(1)(1)(0)>[&];            
        void ( *RegInit<s(1)(1)(0)>[&] ) ( struct _FPGA_CHIP_DATA_T<s(2)(1)(1)>[&] * );
         
        UINT32<s(1)(1)(0)>[T] SubFunction<s(1)(1)(0)>[&];         
        UCHAR<s(1)(1)(0)>[T] * SubSlot<s(1)(1)(0)>[&];             

        FPGA_INTHOOK_T<s(1)(1)(0)>[T] IntHook<s(1)(1)(0)>[&][ 64  ];
         
        FPGA_ERRSTATS_T<s(1)(1)(0)>[T] ErrStats<s(1)(1)(0)>[&];            
        UINT32<s(1)(1)(0)>[T] Version<s(1)(1)(0)>[&];             
        UINT32<s(1)(1)(0)>[T] Status<s(1)(1)(0)>[&];
    }
    FPGA_CHIP_DATA_T<s(0)(0)(0)>[&];(D1:FPGA_CHIP_DATA_T:1)[[TYPENAME:FPGA_CHIP_DATA_T]]





    typedef struct
    {
        UCHAR<s(1)(1)(0)>[T] fileName<s(1)(1)(0)>[&][ 13  ];
        UINT32<s(1)(1)(0)>[T] fileLength<s(1)(1)(0)>[&];
    }
    FPGA_MEM_DATA_T<s(0)(0)(0)>[&];(D1:FPGA_MEM_DATA_T:1)[[TYPENAME:FPGA_MEM_DATA_T]]

    extern FPGA_CHIP_DATA_T<s(0)(0)(0)>[T] *fpgaChips<s(0)(0)(0)>[&];(D1:fpgaChips:0)



     



    extern int pbFpgaInit<s(0)(0)(0)>[&]( void );(D1:pbFpgaInit:0)

    extern FPGA_STATUS_T<s(0)(0)(0)>[T] pbFpgaGetStatus<s(0)(0)(0)>[&]( void );(D1:pbFpgaGetStatus:0)

     



    extern FPGA_HANDLE<s(0)(0)(0)>[T] pbFpgaIsrHookAdd<s(0)(0)(0)>[&]
        (
            int chip<s(0)(0)(0)>[&],
            int asic<s(0)(0)(0)>[&],
            int bank<s(0)(0)(0)>[&],
            FPGA_HOOK_FUNC<s(0)(0)(0)>[T] usrHookFunc<s(0)(0)(0)>[&],
            FPGA_HOOK_ARG<s(0)(0)(0)>[T] usrHookArg<s(0)(0)(0)>[&]
        );(D1:usrHookArg:0)
    extern FPGA_HANDLE<s(0)(0)(0)>[T] pbFpgaIsrHookSlotAdd<s(0)(0)(0)>[&]
        (
            PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&],
            FPGA_HOOK_FUNC<s(0)(0)(0)>[T] usrHookFunc<s(0)(0)(0)>[&],
            FPGA_HOOK_ARG<s(0)(0)(0)>[T] usrHookArg<s(0)(0)(0)>[&]
        );(D1:usrHookArg:0)

     



    extern int pbFpgaIsrHookDel<s(0)(0)(0)>[&]( FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&] );(D1:handle:0)

     



    extern int pbFpgaIntrEnable<s(0)(0)(0)>[&]( FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&] );(D1:handle:0)
    extern int pbFpgaIntrSlotEnable<s(0)(0)(0)>[&]( PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&] );(D1:slot:0)

     



    extern int pbFpgaIntrDisable<s(0)(0)(0)>[&]( FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&] );(D1:handle:0)
    extern int pbFpgaIntrSlotDisable<s(0)(0)(0)>[&]( PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&] );(D1:slot:0)

    extern int pbFpgaIsrEnable<s(0)(0)(0)>[&]( int chip<s(0)(0)(0)>[&] );(D1:chip:0)
    extern int pbFpgaIsrDisable<s(0)(0)(0)>[&]( int chip<s(0)(0)(0)>[&] );(D1:chip:0)
    extern int pbFpgaDownloadCS<s(0)(0)(0)>[&]( UINT<s(0)(0)(0)>[T] cs<s(0)(0)(0)>[&], char * fileName<s(0)(0)(0)>[&], UCHAR<s(0)(0)(0)>[T] * data<s(0)(0)(0)>[&], UINT<s(0)(0)(0)>[T] length<s(0)(0)(0)>[&] );(D1:length:0)










    typedef void ( * FPGA_WRITE_FUNC<s(0)(0)(0)>[&] )TYPENAME:FUNC:(FPGA_WRITE_FUNC) ( UINT32<s(0)(0)(0)>[T] addr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] var<s(0)(0)(0)>[&] );(D1:var:0)
    typedef UINT32<s(0)(0)(0)>[T] ( * FPGA_READ_FUNC<s(0)(0)(0)>[&] )TYPENAME:FUNC:(FPGA_READ_FUNC) ( UINT32<s(0)(0)(0)>[T] addr<s(0)(0)(0)>[&] );(D1:addr:0)

    STATUS<s(0)(0)(0)>[T] pbFpgaDownloadSlot<s(0)(0)(0)>[&]( PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * fileName<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] memBase<s(0)(0)(0)>[&] );(D1:memBase:0)
    STATUS<s(0)(0)(0)>[T] pbFpgaInitSlot<s(0)(0)(0)>[&]( PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * fileName<s(0)(0)(0)>[&] );(D1:fileName:0)








 



















































































 







































 









 



 






 



 


 










 


 


 


 

 

 

 


 

 

 

 


 


 


 





 
 
 

 



 
 
 

 

 
 
 

 




 
 
 

 


 


 


 


 


 


 


 

 

 


 
 
 

 


 
 
 

 


 


 


 


 




 



 


 


 
 
 

 



 
 
 

 



 

















 








 


















 
























 

























 

















 









     




 
 





 
 











    
 
 



 
 


 
 


 
 

















 
 




 
 









 
 













 
 













 




 


















 






























 





























 
















































































typedef enum
{
        eEm4EntEmp<s(0)(0)(0)>[&] = 0,
        eEm4EntInit<s(0)(0)(0)>[&],
        eEm4EntAct<s(0)(0)(0)>[&]  
}
EM4_ENTITY_STATE_T<s(0)(0)(0)>[&];(D1:EM4_ENTITY_STATE_T:1)[[TYPENAME:EM4_ENTITY_STATE_T]]


typedef void (*CPA_LATCHSTATE_CHANGE_FUNC<s(0)(0)(0)>[&])TYPENAME:FUNC:(CPA_LATCHSTATE_CHANGE_FUNC)(BOARD_EVENT_T<s(0)(0)(0)>[T] ulEvent<s(0)(0)(0)>[&], SLOT_NUMBER_T<s(0)(0)(0)>[T] usSlotNum<s(0)(0)(0)>[&], BOARD_STYLE_T<s(0)(0)(0)>[T] ulCardType<s(0)(0)(0)>[&]);(D1:ulCardType:0)
typedef struct
{
    FMA_AlmModDefectFunc<s(1)(1)(0)>[T] pFuncReportAlm<s(1)(1)(0)>[&];  
    CPA_LATCHSTATE_CHANGE_FUNC<s(1)(1)(0)>[T] pFuncReportLatch<s(1)(1)(0)>[&];  
    PRA_SetPortStatus_Func<s(1)(1)(0)>[T] pFuncReportPrbs<s(1)(1)(0)>[&];  
    CAI_BoardStateChangeFunc<s(1)(1)(0)>[T] pFuncReportFault<s(1)(1)(0)>[&];
} CAH_EM4_CALLBACKS_T<s(0)(0)(0)>[&];(D1:CAH_EM4_CALLBACKS_T:1)[[TYPENAME:CAH_EM4_CALLBACKS_T]]

typedef struct {
    UINT32<s(1)(1)(0)>[T] address<s(1)(1)(0)>[&];
    UINT8<s(1)(1)(0)>[T] value<s(1)(1)(0)>[&];
}EM4_REG_CONF<s(0)(0)(0)>[&];(D1:EM4_REG_CONF:1)[[TYPENAME:EM4_REG_CONF]]

typedef struct 
{
    UINT32<s(1)(1)(0)>[T] baseAddr<s(1)(1)(0)>[&];

     


    UINT32<s(1)(1)(0)>[T] portMask<s(1)(1)(0)>[&][(63 )  + 1];    
}CAH_EM4_CHIP_CONFIG_T<s(0)(0)(0)>[&];(D1:CAH_EM4_CHIP_CONFIG_T:1)[[TYPENAME:CAH_EM4_CHIP_CONFIG_T]]



typedef struct
{
        PbTIModeType_Tval<s(1)(1)(0)>[T] J2Mode<s(1)(1)(0)>[&];
        UINT8<s(1)(1)(0)>[T] J2Data<s(1)(1)(0)>[&][64  + 1];
}
EM4_J2_BYTES_T<s(0)(0)(0)>[&];(D1:EM4_J2_BYTES_T:1)[[TYPENAME:EM4_J2_BYTES_T]]
typedef struct
{
        PRBS_MODE_T<s(1)(1)(0)>[T] prbsMode<s(1)(1)(0)>[&];
        PRBS_STATUS_T<s(1)(1)(0)>[T] prbsStatus<s(1)(1)(0)>[&];
         


        UINT32<s(1)(1)(0)>[T] prbsErrCnt<s(1)(1)(0)>[&];
        BOOL<s(1)(1)(0)>[T] bForceRpt<s(1)(1)(0)>[&];
}
EM4_PRBS_CONFIG_T<s(0)(0)(0)>[&];(D1:EM4_PRBS_CONFIG_T:1)[[TYPENAME:EM4_PRBS_CONFIG_T]]

typedef enum
{
    EM4_NONE_FORCE<s(0)(0)(0)>[&]  = 0,
    EM4_DOWN_FORCE<s(0)(0)(0)>[&]  = 1<<1,
    EM4_UP_FORCE<s(0)(0)(0)>[&]    = 1<<2
}EM4_FORCE_MODE_T<s(0)(0)(0)>[&];(D1:EM4_FORCE_MODE_T:1)[[TYPENAME:EM4_FORCE_MODE_T]]



 


typedef struct
{
        UINT16<s(1)(1)(0)>[T] almID<s(1)(1)(0)>[&][14  + 2];

 

























        UINT16<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&][14  + 2];
        UINT16<s(1)(1)(0)>[T] e1state<s(1)(1)(0)>[&][14  + 2];

 
















        UINT16<s(1)(1)(0)>[T] ssf<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] ssfFc<s(1)(1)(0)>[&];
         


        UINT16<s(1)(1)(0)>[T] rdi<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] rfi<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] rdiFc<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] rfiFc<s(1)(1)(0)>[&];

         


        UINT16<s(1)(1)(0)>[T] temp<s(1)(1)(0)>[&];     
        UINT16<s(1)(1)(0)>[T] e1ssf<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] e1ssfFc<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] e1rdi<s(1)(1)(0)>[&];
        UINT16<s(1)(1)(0)>[T] e1rdiFc<s(1)(1)(0)>[&];
}
EM4_POH_ALM_T<s(0)(0)(0)>[&];(D1:EM4_POH_ALM_T:1)[[TYPENAME:EM4_POH_ALM_T]]




 


typedef struct
{
         


        CAH_EM4_CHIP_CONFIG_T<s(1)(1)(0)>[T] cfg<s(1)(1)(0)>[&];

         


        UINT32<s(1)(1)(0)>[T] su_id<s(1)(1)(0)>[&];

         


        BOOL<s(1)(1)(0)>[T] bPlmEnable<s(1)(1)(0)>[&][(63 )  + 1];
        BOOL<s(1)(1)(0)>[T] bTimEnable<s(1)(1)(0)>[&][(63 )  + 1];
        PORT_STATE_T<s(1)(1)(0)>[T] adminState<s(1)(1)(0)>[&][(63 )  + 1];
        UINT8<s(1)(1)(0)>[T] ExpPSL<s(1)(1)(0)>[&][(63 )  + 1];
        UINT8<s(1)(1)(0)>[T] RcvPSL<s(1)(1)(0)>[&][(63 )  + 1];
        UINT8<s(1)(1)(0)>[T] TranPSL<s(1)(1)(0)>[&][(63 )  + 1];

        EM4_J2_BYTES_T<s(1)(1)(0)>[T] strExpJ2<s(1)(1)(0)>[&][(63 )  + 1];
        EM4_J2_BYTES_T<s(1)(1)(0)>[T] strTranJ2<s(1)(1)(0)>[&][(63 )  + 1];
        EM4_J2_BYTES_T<s(1)(1)(0)>[T] strRcvJ2<s(1)(1)(0)>[&][(63 )  + 1];

         



        PDH_PORT_MODE_T<s(1)(1)(0)>[T] portType<s(1)(1)(0)>[&][(63 )  + 1];

         


        EM4_PRBS_CONFIG_T<s(1)(1)(0)>[T] prbsCfg<s(1)(1)(0)>[&][(63 )  + 1];

         


         unsigned int faisMode<s(1)(1)(0)>[&][(63 )  + 1];
        EM4_FORCE_MODE_T<s(1)(1)(0)>[T] frdiMode<s(1)(1)(0)>[&][(63 )  + 1];

         


        PORT_LOOPBACK_T<s(1)(1)(0)>[T] loopMode<s(1)(1)(0)>[&][(63 )  + 1];

         


        EM4_POH_ALM_T<s(1)(1)(0)>[T] pohAlm<s(1)(1)(0)>[&][(63 )  + 1];
        int farcrc<s(1)(1)(0)>[&][(63 )  + 1];
        int crc<s(1)(1)(0)>[&][(63 )  + 1];
        int nslip<s(1)(1)(0)>[&][(63 )  + 1];
        int pslip<s(1)(1)(0)>[&][(63 )  + 1];

         



        BOOL<s(1)(1)(0)>[T] forceRptAlm<s(1)(1)(0)>[&][(63 )  + 1];

         


        UINT32<s(1)(1)(0)>[T] nPrbsDelayCount<s(1)(1)(0)>[&][(63 )  + 1];

         


        BOOL<s(1)(1)(0)>[T] bRestrainRDI<s(1)(1)(0)>[&][(63 )  + 1];
        BOOL<s(1)(1)(0)>[T] bBlockAis<s(1)(1)(0)>[&][(63 )  + 1];
        int isFrcais<s(1)(1)(0)>[&] [(63 )  + 1];
        int isFrcrdi<s(1)(1)(0)>[&] [(63 )  + 1];

         


        int isRptLOM<s(1)(1)(0)>[&] [(63 )  + 1];
        PDH_FRAME_MODE_T<s(1)(1)(0)>[T] isFrame<s(1)(1)(0)>[&] [(63 )  + 1];

        
}
EM4_CHIP_VAR_T<s(0)(0)(0)>[&];(D1:EM4_CHIP_VAR_T:1)[[TYPENAME:EM4_CHIP_VAR_T]]


 
 

typedef enum
{ 
    EM4_ENTITY_UNKNOWN<s(0)(0)(0)>[&] = 0,
    EM4_ENTITY_LATCH<s(0)(0)(0)>[&],
    EM4_ENTITY_DELATCH<s(0)(0)(0)>[&]
}CAH_EM4_ENTITY_LATCH_T<s(0)(0)(0)>[&];(D1:CAH_EM4_ENTITY_LATCH_T:1)[[TYPENAME:CAH_EM4_ENTITY_LATCH_T]]




typedef enum{
    eEM4_DISABLE<s(0)(0)(0)>[&] = 0,
    eEM4_ENABLE<s(0)(0)(0)>[&]  = 1
}eEM4SWITCH<s(0)(0)(0)>[&];(D1:eEM4SWITCH:1)[[TYPENAME:eEM4SWITCH]]





typedef struct
{
         






        ENTITY_T<s(1)(1)(0)>[T] entity<s(1)(1)(0)>[&];

         






        DWORD<s(1)(1)(0)>[T] dwPos<s(1)(1)(0)>[&];

         




        UINT32<s(1)(1)(0)>[T] chipNum<s(1)(1)(0)>[&];

         


        EM4_ENTITY_STATE_T<s(1)(1)(0)>[T] state<s(1)(1)(0)>[&];

         


        EM4_CHIP_VAR_T<s(1)(1)(0)>[T] chip_var<s(1)(1)(0)>[&][(5) ];
}
CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[&];(D1:CAH_EM4_ENTITY_DATA_T:1)[[TYPENAME:CAH_EM4_ENTITY_DATA_T]]







 




typedef union _ARG32<s(1)(0)(1)>[&]
{
    int arg<s(1)(1)(0)>[&];
    char tti<s(1)(1)(0)>[&][32 + 3];
}ARG32<s(0)(0)(0)>[&];(D1:ARG32:1)[[TYPENAME:ARG32]]
typedef void (*PMyFun<s(0)(0)(0)>[&])TYPENAME:FUNC:(PMyFun)( );(D1:PMyFun:0)


typedef struct __E1_CALL<s(1)(0)(1)>[&]
{
     
    PMyFun<s(1)(1)(0)>[T] p<s(1)(1)(0)>[&];
    int arg1<s(1)(1)(0)>[&];
    int arg2<s(1)(1)(0)>[&];
    int arg3<s(1)(1)(0)>[&];
 







    ARG32<s(1)(1)(0)>[T] arg4<s(1)(1)(0)>[&];
    int arg5<s(1)(1)(0)>[&];
    int arg6<s(1)(1)(0)>[&];
    int sn<s(1)(1)(0)>[&];
    int id<s(1)(1)(0)>[&];
    struct __E1_CALL<s(2)(1)(1)>[&] *pNext<s(1)(1)(0)>[&];
    struct __E1_CALL<s(2)(1)(1)>[&] *pHashNext<s(1)(1)(0)>[&][11];
    char fname<s(1)(1)(0)>[&][64];
}
E1_CALL<s(0)(0)(0)>[&];(D1:E1_CALL:1)[[TYPENAME:E1_CALL]]








 














 
 
typedef union _sexar_framer_cfgctrl<s(1)(0)(1)>[&]
{
	struct _cfgCtrlBit<s(2)(1)(1)>[&]
	{
   		unsigned    loopback<s(2)(1)(0)>[&]:1;     
		unsigned	IsDS3<s(2)(1)(0)>[&]:1;	    
		unsigned	losEnable<s(2)(1)(0)>[&]:1;    
		unsigned	reset<s(2)(1)(0)>[&]:1;        
		unsigned	Unused<s(2)(1)(0)>[&]:1;	    
        unsigned	format<s(2)(1)(0)>[&]:1;	    
        unsigned	TimeRefSel<s(2)(1)(0)>[&]:2;   
	} cfgCtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] cfgCtrl<s(1)(0)(0)>[&];
}EXAR_FRAMER_CTRL_T<s(0)(0)(0)>[&];(D1:EXAR_FRAMER_CTRL_T:1)[[TYPENAME:EXAR_FRAMER_CTRL_T]]


typedef union _sexar_rxj1_cfgctrl_x<s(1)(0)(1)>[&]
{
	struct _rxj1CtrlBit_x<s(2)(1)(1)>[&]
	{
   		unsigned    reserved<s(2)(1)(0)>[&] :3;   
		unsigned	bufMode<s(2)(1)(0)>[&]:1;	   
		unsigned	threshold<s(2)(1)(0)>[&]:1;   
		unsigned	alignment<s(2)(1)(0)>[&]:1;   
		unsigned	length<s(2)(1)(0)>[&]:2;	   
	} rxj1CtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] rxj1Ctrl<s(1)(0)(0)>[&];
}EXAR_RXJ2_CTRL_T<s(0)(0)(0)>[&];(D1:EXAR_RXJ2_CTRL_T:1)[[TYPENAME:EXAR_RXJ2_CTRL_T]]





typedef enum
{
        eEm4J2Tx<s(0)(0)(0)>[&] = 0,
        eEm4J2Rx<s(0)(0)(0)>[&],
        eEm4J2Exp<s(0)(0)(0)>[&]
}
EM4_J2_DIRECTION_T<s(0)(0)(0)>[&];(D1:EM4_J2_DIRECTION_T:1)[[TYPENAME:EM4_J2_DIRECTION_T]]

typedef enum
{
        eEm4J2Rd<s(0)(0)(0)>[&] = 0,
        eEm4J2Wr<s(0)(0)(0)>[&],
}
EM4_J2_OPERATION_T<s(0)(0)(0)>[&];(D1:EM4_J2_OPERATION_T:1)[[TYPENAME:EM4_J2_OPERATION_T]]


typedef enum 
{
    EEM_LB_GL_TOH_IN<s(0)(0)(0)>[&] = 5 ,         
    EEM_LB_GL_POH_IN<s(0)(0)(0)>[&],         
    EEM_LB_LC_FRM_IN<s(0)(0)(0)>[&],         
    EEM_LB_LC_FRM_OUT<s(0)(0)(0)>[&],      

}EEM_LOOPBACK_T<s(0)(0)(0)>[&];(D1:EEM_LOOPBACK_T:1)[[TYPENAME:EEM_LOOPBACK_T]]

typedef enum 
{
    EEM_LB_CLEAR<s(0)(0)(0)>[&] , 
    EEM_LB_SET<s(0)(0)(0)>[&],

}EEM_LB_ACC_T<s(0)(0)(0)>[&];(D1:EEM_LB_ACC_T:1)[[TYPENAME:EEM_LB_ACC_T]]



 


typedef union __sexar_alarm_dect<s(1)(0)(1)>[&]
{
    struct __alarmCtrlBit<s(2)(1)(1)>[&]
    {

         


        int rfi<s(2)(1)(0)>[&]:1;
        int ppi_tlct<s(2)(1)(0)>[&]:1;  
        int ppi_crc<s(2)(1)(0)>[&]:1;
        int ppi_oof<s(2)(1)(0)>[&]:1;   
        int ppi_lof<s(2)(1)(0)>[&]:1;
        int ppi_lom<s(2)(1)(0)>[&]:1;
        int ppi_rdi<s(2)(1)(0)>[&]:1;
        int other1<s(2)(1)(0)>[&]:1;          

         


        int tim<s(2)(1)(0)>[&]:1;             
        int unstablePSL<s(2)(1)(0)>[&]:1;     
        int uneq<s(2)(1)(0)>[&]:1;            
        int plm<s(2)(1)(0)>[&]:1;             

        int rdi<s(2)(1)(0)>[&]:1;             
        int unstableRDI<s(2)(1)(0)>[&]:1;     
        int lop<s(2)(1)(0)>[&]:1;             
        int ais<s(2)(1)(0)>[&]:1;             
    }
    alarmCtrlBit<s(1)(0)(0)>[&];
    UINT16<s(1)(0)(0)>[T] alarmCtrl<s(1)(0)(0)>[&];
}
ALARM_REGISTER_T<s(0)(0)(0)>[&];(D1:ALARM_REGISTER_T:1)[[TYPENAME:ALARM_REGISTER_T]]



typedef struct
{
        SEM_ID<s(1)(1)(0)>[T] semInst<s(1)(1)(0)>[&][((1) )  + 1];
        SEM_ID<s(1)(1)(0)>[T] semData<s(1)(1)(0)>[&];
        SEM_ID<s(1)(1)(0)>[T] semLink<s(1)(1)(0)>[&];
        SEM_ID<s(1)(1)(0)>[T] semFind<s(1)(1)(0)>[&];

         


        SEM_ID<s(1)(1)(0)>[T] semLatchIsr<s(1)(1)(0)>[&];
        SEM_ID<s(1)(1)(0)>[T] semisr<s(1)(1)(0)>[&];

        SEM_ID<s(1)(1)(0)>[T] semLatchIsrClose<s(1)(1)(0)>[&];
        SEM_ID<s(1)(1)(0)>[T] semisrclose<s(1)(1)(0)>[&];

        int latchent<s(1)(1)(0)>[&];
        int fpgaHanle<s(1)(1)(0)>[&][((1) )  + 1];
        BOOL<s(1)(1)(0)>[T] bEM4Running<s(1)(1)(0)>[&];
        MSG_Q_ID<s(1)(1)(0)>[T] EM4MsgQId<s(1)(1)(0)>[&];
        CAH_EM4_ENTITY_LATCH_T<s(1)(1)(0)>[T] EM4LatchStatus<s(1)(1)(0)>[&][((1) )  + 1];
        BOOL<s(1)(1)(0)>[T] EM4LatchForceRpt<s(1)(1)(0)>[&][((1) )  + 1];
        UINT16<s(1)(1)(0)>[T] IntCount<s(1)(1)(0)>[&][((1) )  + 1];
}
CAH_EM4_ENTITY_TRIB_T<s(0)(0)(0)>[&];(D1:CAH_EM4_ENTITY_TRIB_T:1)[[TYPENAME:CAH_EM4_ENTITY_TRIB_T]]



typedef union sexar_prbs_cfgctrl<s(1)(0)(1)>[&]
{
	struct __prbsCtrlBit<s(2)(1)(1)>[&]
	{
   		UINT1<s(2)(1)(0)>[T]   TxOHSrc<s(2)(1)(0)>[&]:1;    
		UINT1<s(2)(1)(0)>[T]	Unused<s(2)(1)(0)>[&]:2;	  
		UINT1<s(2)(1)(0)>[T]	lock<s(2)(1)(0)>[&]:1;       
		UINT1<s(2)(1)(0)>[T]	RxPRBS<s(2)(1)(0)>[&]:1;     
		UINT1<s(2)(1)(0)>[T]	TxPRBS<s(2)(1)(0)>[&]:1;	  
        UINT1<s(2)(1)(0)>[T]	reserved<s(2)(1)(0)>[&]:2;	  
	} prbsCtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] prbsCtrl<s(1)(0)(0)>[&];
}__EXAR_PRBS_CTRL_T<s(0)(0)(0)>[&];(D1:__EXAR_PRBS_CTRL_T:1)[[TYPENAME:__EXAR_PRBS_CTRL_T]]

typedef union sexar_ais_cfgctrl<s(1)(0)(1)>[&]
{
	struct __aisCtrlBit<s(2)(1)(1)>[&]
	{
   		UINT1<s(2)(1)(0)>[T]   reserved<s(2)(1)(0)>[&]:1;       
		UINT1<s(2)(1)(0)>[T]   unstableC2<s(2)(1)(0)>[&]:1;	  
		UINT1<s(2)(1)(0)>[T]	uneq<s(2)(1)(0)>[&]:1;           
		UINT1<s(2)(1)(0)>[T]	plm<s(2)(1)(0)>[&]:1;            
		UINT1<s(2)(1)(0)>[T]	unstableJ1<s(2)(1)(0)>[&]:1;	  
		UINT1<s(2)(1)(0)>[T]	tim<s(2)(1)(0)>[&]:1;	          
                                  
		UINT1<s(2)(1)(0)>[T]	lop<s(2)(1)(0)>[&]:1;	          
        UINT1<s(2)(1)(0)>[T]	enable<s(2)(1)(0)>[&]:1;	      
	} aisCtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] aisCtrl<s(1)(0)(0)>[&];
}__EXAR_AIS_CTRL_T<s(0)(0)(0)>[&];(D1:__EXAR_AIS_CTRL_T:1)[[TYPENAME:__EXAR_AIS_CTRL_T]]


typedef union sexar_insert_cfgctrl<s(1)(0)(1)>[&]
{
	struct __insertCtrlBit<s(2)(1)(1)>[&]
	{
   		UINT1<s(2)(1)(0)>[T]   F2<s(2)(1)(0)>[&]:1;              
		UINT1<s(2)(1)(0)>[T]   rei<s(2)(1)(0)>[&]:2;	           
		UINT1<s(2)(1)(0)>[T]	rdi<s(2)(1)(0)>[&]:2;             
		UINT1<s(2)(1)(0)>[T]	c2<s(2)(1)(0)>[&]:1;              
		UINT1<s(2)(1)(0)>[T]	pdi<s(2)(1)(0)>[&]:1;             
		UINT1<s(2)(1)(0)>[T]	ais<s(2)(1)(0)>[&]:1;             
	} insertCtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] insertCtrl<s(1)(0)(0)>[&];
}__EXAR_INSERT_CTRL_T<s(0)(0)(0)>[&];(D1:__EXAR_INSERT_CTRL_T:1)[[TYPENAME:__EXAR_INSERT_CTRL_T]]


            
typedef union sexar_alarm_dect_2<s(1)(0)(1)>[&]
{
	struct _alarmCtrlBit_2<s(2)(1)(1)>[&]
	{
   		UINT1<s(2)(1)(0)>[T]   tim<s(2)(1)(0)>[&]:1;            
		UINT1<s(2)(1)(0)>[T]   unstableC2<s(2)(1)(0)>[&]:1;	  
		UINT1<s(2)(1)(0)>[T]	uneq<s(2)(1)(0)>[&]:1;           
		UINT1<s(2)(1)(0)>[T]	plm<s(2)(1)(0)>[&]:1;            
		UINT1<s(2)(1)(0)>[T]	rdi<s(2)(1)(0)>[&]:1;	          
		UINT1<s(2)(1)(0)>[T]	unstableRDI<s(2)(1)(0)>[&]:1;	  
		UINT1<s(2)(1)(0)>[T]	lop<s(2)(1)(0)>[&]:1;	          
        UINT1<s(2)(1)(0)>[T]	ais<s(2)(1)(0)>[&]:1;	          
	} alarmCtrlBit<s(1)(0)(0)>[&];
	UINT1<s(1)(0)(0)>[T] alarmCtrl<s(1)(0)(0)>[&];
}__EXAR_ALARM_DECT_T<s(0)(0)(0)>[&];(D1:__EXAR_ALARM_DECT_T:1)[[TYPENAME:__EXAR_ALARM_DECT_T]]


 



 
WORD<s(0)(0)(0)>[T] CAH_EM4_SetPortLoopback<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_LOOPBACK_TYPE_T<s(0)(0)(0)>[T] eLpbckMd<s(0)(0)(0)>[&]);(D1:eLpbckMd:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_SetInsertAlm<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_INSERT_ALM_TYPE_T<s(0)(0)(0)>[T] eAlmType<s(0)(0)(0)>[&], CTD_INSERT_ALM_DIR_T<s(0)(0)(0)>[T] eInsAlmDir<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
 
 
WORD<s(0)(0)(0)>[T] CAH_EM4_GetPrbsState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *bPrbsSucc<s(0)(0)(0)>[&]);(D1:bPrbsSucc:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_EnablePrbs<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]) ;(D1:bEnable:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetPrbsErrCount<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *dwPrbsCnt<s(0)(0)(0)>[&]);(D1:dwPrbsCnt:0)

 
UINT32<s(0)(0)(0)>[T] sysTimestamp<s(0)(0)(0)>[&](void);(D1:sysTimestamp:0)
UINT32<s(0)(0)(0)>[T] sysTimestampFreq<s(0)(0)(0)>[&](void);(D1:sysTimestampFreq:0)
 
WORD<s(0)(0)(0)>[T] CAH_EM4_GetTimingRef<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T]   byClockNum<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T]    *byPort<s(0)(0)(0)>[&],  BOOL<s(0)(0)(0)>[T]  *bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetTimingRef<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T]    byPort<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T]   byClockNum<s(0)(0)(0)>[&],  BOOL<s(0)(0)(0)>[T]  bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_GetFpgaVersion<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], char *pucFpgaVer<s(0)(0)(0)>[&]);(D1:pucFpgaVer:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetPpiAlmState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_PPI_ALARM_T<s(0)(0)(0)>[T] *psPpiAlarm<s(0)(0)(0)>[&]);(D1:psPpiAlarm:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetLpAlmState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_LP_ALARM_T<s(0)(0)(0)>[T] *psLpAlarm<s(0)(0)(0)>[&]);(D1:psLpAlarm:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetTuAlmState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_TU_ALARM_T<s(0)(0)(0)>[T] *psTuAlarm<s(0)(0)(0)>[&]);(D1:psTuAlarm:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_getLatchStatus<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&]);(D1:dwPos:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_EnableReTiming<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&],BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_GetLpBipCount<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pLpBip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pLpRei<s(0)(0)(0)>[&]);(D1:pLpRei:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetPpiBipCount<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pPpiBip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pPpiFebe<s(0)(0)(0)>[&]);(D1:pPpiFebe:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetSlip<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&] ,DWORD<s(0)(0)(0)>[T] *pdwPSlip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwNSlip<s(0)(0)(0)>[&]);(D1:pdwNSlip:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxLpTtiMode<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&]);(D1:eTtiMode:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetTxLpTtiMode<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&]);(D1:eTtiMode:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxLpTtiAisEnable<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxLpTtiAlmEnable<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxExpLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], const BYTE<s(0)(0)(0)>[T] *pbyTtiValue<s(0)(0)(0)>[&]);(D1:pbyTtiValue:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetTxLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], const BYTE<s(0)(0)(0)>[T] *pbyTtiValue<s(0)(0)(0)>[&]);(D1:pbyTtiValue:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetTxLpTti<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *pbyTtiValue<s(0)(0)(0)>[&]);(D1:pbyTtiValue:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetRxRcvLpTti<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *pbyTtiValue<s(0)(0)(0)>[&]);(D1:pbyTtiValue:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetRxExpLpTti<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *pbyTtiValue<s(0)(0)(0)>[&]);(D1:pbyTtiValue:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxLpPslEnable<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&]);(D1:bEnable:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxTxLpPsl<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&],  BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&]);(D1:byC2Value:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetRxExpLpPsl<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&],  BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&]);(D1:byC2Value:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_SetTxLpPsl<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&],  BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&]);(D1:byC2Value:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetRxRcvLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *pbyC2Value<s(0)(0)(0)>[&]);(D1:pbyC2Value:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetRxExpLpPsl<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&],  BYTE<s(0)(0)(0)>[T] *byC2Value<s(0)(0)(0)>[&]);(D1:byC2Value:0)

 
WORD<s(0)(0)(0)>[T] CAH_EM4_DetectCardState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * pbActive<s(0)(0)(0)>[&]);(D1:pbActive:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetInnerB1Err<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwB1Err<s(0)(0)(0)>[&]);(D1:pdwB1Err:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetTdmLinkErr<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwTdmErr<s(0)(0)(0)>[&]);(D1:pdwTdmErr:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_Get8KClkState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbActive<s(0)(0)(0)>[&]);(D1:pbActive:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_Get19MClkState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbActive<s(0)(0)(0)>[&]);(D1:pbActive:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_GetPllState<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbPllLock<s(0)(0)(0)>[&]);(D1:pbPllLock:0)

  
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAH_EM4_loadModule<s(0)(0)(0)>[&] ();(D1:CAH_EM4_loadModule:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAH_EM4_activateEntity<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] b_warm<s(0)(0)(0)>[&]) ;(D1:b_warm:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T] CAH_EM4_deActEntity<s(0)(0)(0)>[&](ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_InitEntity<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], CTD_MODE_TYPE_T<s(0)(0)(0)>[T] eporttype<s(0)(0)(0)>[&]);(D1:eporttype:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_DeInitEntity<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&]);(D1:dwPos:0)
WORD<s(0)(0)(0)>[T] CAH_EM4_Initialize<s(0)(0)(0)>[&](DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&]);(D1:dwPos:0)


























 


 


 



 


typedef int (*CahEm4pTransFunc<s(0)(0)(0)>[&])TYPENAME:FUNC:(CahEm4pTransFunc) (ENTITY_T<s(0)(0)(0)>[T]);(D1:ENTITY_T:0)
 














typedef struct
{
    INT32<s(1)(1)(0)>[T] id<s(1)(1)(0)>[&];
    INT8<s(1)(1)(0)>[T] *pName<s(1)(1)(0)>[&];
    INT32<s(1)(1)(0)>[T] pri<s(1)(1)(0)>[&];
    INT32<s(1)(1)(0)>[T] opt<s(1)(1)(0)>[&];
    INT32<s(1)(1)(0)>[T] stckSz<s(1)(1)(0)>[&];
    FUNCPTR<s(1)(1)(0)>[T] pEntryPtr<s(1)(1)(0)>[&];
}
CAH_EM4_TSK_CTL_BLK_T<s(0)(0)(0)>[&];(D1:CAH_EM4_TSK_CTL_BLK_T:1)[[TYPENAME:CAH_EM4_TSK_CTL_BLK_T]]


int buffer_reset<s(0)(0)(0)>[&] (void);(D1:buffer_reset:0)



extern int sysClkRateGet<s(0)(0)(0)>[&] (void);(D1:sysClkRateGet:0)
extern unsigned long GetSystemTime<s(0)(0)(0)>[&] (void);(D1:GetSystemTime:0)

unsigned short em4_bpc_rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&]);(D1:off:0)
unsigned short em4Map2Wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&]);(D1:val:0)
unsigned short em4Map1Wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&]);(D1:val:0)
unsigned short em4MapRd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short *pU1<s(0)(0)(0)>[&], unsigned short *pU2<s(0)(0)(0)>[&]);(D1:pU2:0)
unsigned short em4Map2Rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&]);(D1:off:0)
unsigned short em4Map1Rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&]);(D1:off:0)
 


int cah_em4_hash<s(0)(0)(0)>[&] (int sn<s(0)(0)(0)>[&]);(D1:sn:0)
void cah_em4_isrFunc<s(0)(0)(0)>[&] (FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&], FPGA_HOOK_ARG<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
void cah_em4_EnableLatchInt<s(0)(0)(0)>[&] (UINT32<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] Enable<s(0)(0)(0)>[&]);(D1:Enable:0)
void cah_em4_latch<s(0)(0)(0)>[&] ();(D1:cah_em4_latch:0)
void cah_em4_Dpr<s(0)(0)(0)>[&] ();(D1:cah_em4_Dpr:0)
void cah_em4_readAlarm<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&]);(D1:ulPort:0)
E1_CALL<s(0)(0)(0)>[T] *cah_em4_findCall2<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], void *pfun<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&]   ,
                                   int arg2<s(0)(0)(0)>[&]   , int arg3<s(0)(0)(0)>[&]   , int sn<s(0)(0)(0)>[&]);(D1:sn:0)
CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *cah_em4_fd2entptr<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&]);(D1:fd:0)
int cah_em4_trace<s(0)(0)(0)>[&] (int level<s(0)(0)(0)>[&], char *msg<s(0)(0)(0)>[&], ...);(D1:msg:0)
int cah_em4_ent2fd<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&]);(D1:ent:0)
int cah_em4_pohWrite<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short reg<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&]);(D1:val:0)
CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *cah_em4_getEntityPtr<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&]);(D1:entity:0)
int cah_em4_registerCall<s(0)(0)(0)>[&] (PMyFun<s(0)(0)(0)>[T] pFun<s(0)(0)(0)>[&], int arg3<s(0)(0)(0)>[&], int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int sn<s(0)(0)(0)>[&], char *fname<s(0)(0)(0)>[&]);(D1:fname:0)
unsigned short cah_em4_pohRead<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short reg<s(0)(0)(0)>[&]);(D1:reg:0)
void *cah_em4_getEntityBase<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&]);(D1:port:0)
void cah_em4_forceAis<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] ais<s(0)(0)(0)>[&]);(D1:ais:0)
CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *cah_em4_getEntity<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&]);(D1:ent:0)
void em4_PollBit<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] addrOffset<s(0)(0)(0)>[&], int byPortNo<s(0)(0)(0)>[&]);(D1:byPortNo:0)

void cah_em4_getprbsname<s(0)(0)(0)>[&] (int, char *);(D1:cah_em4_getprbsname:0)

DBG_MODULE_T<s(0)(0)(0)>[T] gCahEm4DbgModNum<s(0)(0)(0)>[&];(D1:gCahEm4DbgModNum:0)   
DBG_INFO_T<s(0)(0)(0)>[T] gCahEm4DbgInfo<s(0)(0)(0)>[&] =(D2) {    
    "EM4",                       
    {
      
      
      
     {"ERROR", 1, "error occurs."},
     {"INIT", 0, "Init info."},
     {"CFGGET", 0, "Get config information."},
     {"CFGSET", 0, "Set config information."},
     {"ALM", 0, "Alarm report information."},
     {"PMON", 0, "Performance information. "},
     {"INTR", 0, "Interrupt information. "},
     {"EGP", 0, "Egp information. "},
     {"OP", 0, "Operation information. "},
     }
};

 


CAH_EM4_ENTITY_TRIB_T<s(0)(0)(0)>[T] gCahEm4TribVar<s(0)(0)(0)>[&];(D1:gCahEm4TribVar:0)




CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *gppCahEm4CfgVar<s(0)(0)(0)>[&][((1) )  + 1];(D1:gppCahEm4CfgVar:0)
CAH_CFG_INFO_T<s(0)(0)(0)>[T] gCahEm4CfgData<s(0)(0)(0)>[&][((1) )  + 1];(D1:gCahEm4CfgData:0)

 



unsigned int g_cah_em4entity<s(0)(0)(0)>[&] =(D2) 0;

 


unsigned int g_isrcount<s(0)(0)(0)>[&] =(D2) 0;

 


CahEm4pTransFunc<s(0)(0)(0)>[T] g_pTransFunc<s(0)(0)(0)>[&];(D1:g_pTransFunc:0)

 


E1_CALL<s(0)(0)(0)>[T] *gpCahEm4HashHead<s(0)(0)(0)>[&][((1) )  + 1][11 + 1] =(D2) { {0} };
E1_CALL<s(0)(0)(0)>[T] gCahEm4Head<s(0)(0)(0)>[&][((1) )  + 1] =(D2) { {((void *)0) , 0, 0, 0, {0}, 0, 0, 0} };
E1_CALL<s(0)(0)(0)>[T] *pCahEm4Head<s(0)(0)(0)>[&][((1) )  + 1];(D1:pCahEm4Head:0)
int gCahEm4LinkFlag<s(0)(0)(0)>[&] =(D2) 0;

 
static char g_aname<s(0)(0)(0)>[&][32];(D1:g_aname:0)

 
int g_fflag<s(0)(0)(0)>[&] =(D2) 1;

 


int gCahEm4SelectEnt<s(0)(0)(0)>[&] =(D2) 5;
int gCahEm4SelectPort<s(0)(0)(0)>[&] =(D2) 0;

  int g_UseInt<s(0)(0)(0)>[&] =(D2) 1;

 
int g_waste<s(0)(0)(0)>[&] =(D2) 0, g_wasetCnt<s(0)(0)(0)>[&] =(D2) 10;


 





int g_crccnt<s(0)(0)(0)>[&] =(D2) 8;
 


int gggg_cnt<s(0)(0)(0)>[&] =(D2) 0;
UINT32<s(0)(0)(0)>[T] g_StampStart<s(0)(0)(0)>[&] =(D2) 0, g_StampStop<s(0)(0)(0)>[&] =(D2) 0;

 


int g_cnt<s(0)(0)(0)>[&] =(D2) 14;
int g_flaggg<s(0)(0)(0)>[&] =(D2) 0;

int nnn<s(0)(0)(0)>[&] =(D2) 1;
int g_delay<s(0)(0)(0)>[&] =(D2) 0;
int g_port<s(0)(0)(0)>[&] =(D2) 0;

 



int g_testcrc<s(0)(0)(0)>[&] =(D2) 0;
int cah_em4_blockupais<s(0)(0)(0)>[&] =(D2) 0;
BOOL<s(0)(0)(0)>[T] gbCahEm4RunPollingTask<s(0)(0)(0)>[&][3 + 1] =(D2) { 1 , 1 , 1 , 1  };
FMA_AlmModDefectFunc<s(0)(0)(0)>[T] cah_em4_gpFunRptAlm<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
CPA_LATCHSTATE_CHANGE_FUNC<s(0)(0)(0)>[T] cah_em4_gpFunRptLatch<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
PRA_SetPortStatus_Func<s(0)(0)(0)>[T] cah_em4_gpFunRptPRBS<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

int gCahEm4Flag<s(0)(0)(0)>[&][((1) )  + 2] =(D2) { 0 };

 
char g_CahEm4Des<s(0)(0)(0)>[&][] =(D2) "  gCahEm4DebugLevel ::= {        1:      ,         2: how cah_em4_AlmPollingTask () is running now ?         3: how cah_em4_set_global_register () is running now ?                 how cah_em4_StopPolling ... ?                 what's the EM4_GetFarCRCErrCount () result ?                 what's the EM4_GetCRCErrCount () result ?         4: what's the cah_em4_ReportAlarm () result ?         5: none,         6: none,         7: none,         8: none,         9: 10: 11: how cah_em4_AlmPollingTask () is polling in detail ?         12: none,         13: how cah_em4_ClearAlarm ()/cah_em4_RiseAlarm () is running now ?         14: what's the indirect register's content in cah_em4_read_hardware_alarm () ?         15: watch EM4_EnablePlm ()         16: watch how is cah_em4_ReadPrbsStatus () running ?         17: watch EM4_SetTransTti ()         18: HOW EM4_GetLpPmPara () IS RUNNING NOW?         19: how are EM4_PrbsEnable ()/EM4_SetPrbsMode ()/cah_em4_getprbsstatus ()              running now ?         20: how is cah_em4_Dpr () running now ?         21: how is EM4_GetSlip () running now ?         22: how is cah_em4_latch () running now ?         23: how is EM4_GetPDHPM () running now ?         24: is there any PDH-NOTHING/SDH-NOTHING ?         33: ReadAlarm and ReportAlamr debug info.                                    // operated by polling g_testcrc(0) // control for test crc-error-counter g_UseInt=0; // if(g_UseInt == 1) the use polling to collect data,                // or use 1hz-interrupt only. int g_waste=0, g_wasetCnt=10; int g_pollcnt=0, g_hdcnt=0, }        " ;

const char *cah_em4_fmsg<s(0)(0)(0)>[&][] =(D2) {
    "__________________________________________________________________",
    "unsigned short\tem4Map1Wr\t(int page, int off, unsigned short val)",
    "unsigned short\tem4MapRd\t(int page, int off)",
    "unsigned short\tem4_bpc_rd\t(int page, int off)", 
    "unsigned short\tem4_bpc_wr\t(int page, int off)", 
    " ",    
    "void\tem4help\t\t(void)",
    "int\tem4BpcShow\t(void)",
    "int\tem4MapShow\t(void)",
    "int\tem4ShowCons\t(int port)",
    "int\tem4ShowEnable\t(int port)",
    "int\tem4AllInLoop\t(int flag) //backplane inloop",
    " ",
    "int\tem4ShowIntMask\t(int port)",
    "int\tem4ShowPageAddr\t(void)",
    "int\tem4ShowAlarms\t(int port)",
    "int\tem4ShowPortMap\t(void)",
    "int\tem4TtiRxTest\t(int port)",
    "int\tem4TtiTxTest\t(int port)",
    "int\tem4SetExpPslTest\t(int port, int c2)", 
    "int\tem4GetExpPslTest\t(int port)",
    "int\tem4GetExpTtiTest\t(int port)",
    "int\tem4SetExpTtiTest\t(int port)", 
    " ",
    "__________________________________________________________________",
    "",
    ((void *)0) 
};

 
static int g_phyportmap<s(0)(0)(0)>[&] [130];(D1:g_phyportmap:0)
int em4ShowPortMap<s(0)(0)(0)>[&] (void)
{
    int i<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 130; i<s(0)(0)(0)>[&] ++) {
        if (g_phyportmap<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] != i<s(0)(0)(0)>[&]) {
            printf<s(0)(0)(0)>[&] ("\r\ng_phyportmap[%3d]\t=\t[%3d]", i<s(0)(0)(0)>[&], g_phyportmap<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]]);
        }
    }

    printf<s(0)(0)(0)>[&] ("\r\n");
    return 0;
}


int
em4showsample<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, ((0x00 << 10) | 0x00) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): devid(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, (((0x00 << 10) | 0x01)) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): PAGE0(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, ((0x00 << 10) | 0x05) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): EM4_IRQ_IN(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, ((0x00 << 10) | 0x0a) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): EM4_MON_INTER(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, ((0x00 << 10) | 0x0b) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): EM4_TIMING_SEL(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    cah_ReadRegister<s(0)(0)(0)>[&] (0x50000000, ((0x00 << 10) | 0x10) , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): EM4_TEST(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    printf<s(0)(0)(0)>[&] ("\r\n");
    return 0;
}



int g_cahem4version<s(0)(0)(0)>[&] =(D2) 30;
int g_CahEm4Delay<s(0)(0)(0)>[&] =(D2) 2;


CAH_EM4_TSK_CTL_BLK_T<s(0)(0)(0)>[T] cah_em4_PollingTask<s(0)(0)(0)>[&] =(D2) {
    0x00,                        
    "cahem4Poll",                
    231 ,   
    0x00,                        
    20480,                       
    (FUNCPTR<s(0)(0)(0)>[T]) ((void *)0) 
};

CAH_EM4_TSK_CTL_BLK_T<s(0)(0)(0)>[T] cah_em4_EpgTask<s(0)(0)(0)>[&] =(D2) {
    0x00,                        
      "cahem4Epg",
     
    230 ,   
    0x00,                        
    20480,                       
    (FUNCPTR<s(0)(0)(0)>[T]) cah_em4_latch<s(0)(0)(0)>[&]
};


CAH_EM4_TSK_CTL_BLK_T<s(0)(0)(0)>[T] cah_em4_DprTsk<s(0)(0)(0)>[&] =(D2) {
    0x00,                        
      "cahem4Dpr",
     
    230 ,   
    0x00,                        
    20480,                       
    (FUNCPTR<s(0)(0)(0)>[T]) cah_em4_Dpr<s(0)(0)(0)>[&]
};


 



int gCahEm4PrbsPort<s(0)(0)(0)>[&] =(D2) 0;

 
int g_wait<s(0)(0)(0)>[&] =(D2) 0;

 

int gHardSlot<s(0)(0)(0)>[&] =(D2) 0;
int gHardPort<s(0)(0)(0)>[&] =(D2) 0;


int gCahEm4DebugLevel<s(0)(0)(0)>[&] =(D2) 0;


 






WORD<s(0)(0)(0)>[T]
cah_em4_deInitEntity<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T] wRtn<s(0)(0)(0)>[&] =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;

     
    memset<s(0)(0)(0)>[&] (&gCahEm4CfgData<s(0)(0)(0)>[&][0], 0, sizeof (gCahEm4CfgData<s(0)(0)(0)>[&]));
    CAH_EM4_DeInitEntity<s(0)(0)(0)>[&] (0);

     
    return wRtn<s(0)(0)(0)>[&];
}



 




int
cah_em4_mapPort<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    return ((port<s(0)(0)(0)>[&] > 62) ? ((port<s(0)(0)(0)>[&] + 1) - 63) : (port<s(0)(0)(0)>[&] + 1));
}


int g_logbackn<s(0)(0)(0)>[&] =(D2) 0;
 




int
cah_em4_port2chip<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    if (0 > port<s(0)(0)(0)>[&] || 125 < port<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s: port(%d) overflow!!!", __FUNCTION__<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
        if (g_logbackn<s(0)(0)(0)>[&] == 1)
        {
            logBackN<s(0)(0)(0)>[&] ("cah_em4_port2chip ", 5);
        }
    }

    return (0 <= port<s(0)(0)(0)>[&] && 62 >= port<s(0)(0)(0)>[&]) ? 1 : 2;
}


int
cah_em4_dwPos2id<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{
    int id<s(0)(0)(0)>[&] =(D2) 0;

    return (id<s(0)(0)(0)>[&]);
}

 


int
cah_em4_dwPos2ent<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{
    return (cah_em4_dwPos2id<s(0)(0)(0)>[&] (dwPos<s(0)(0)(0)>[&]));
}

 




PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_initModule<s(0)(0)(0)>[&] ()
{
    static int flag<s(0)(0)(0)>[&] =(D2) 1;
    UINT8<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&];(D1:slot:0)

    if (0 == flag<s(0)(0)(0)>[&])
    {
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    }
    flag<s(0)(0)(0)>[&] = 0;

    gCahEm4DbgModNum<s(0)(0)(0)>[&] = DBG_RegisterModule<s(0)(0)(0)>[&] (&gCahEm4DbgInfo<s(0)(0)(0)>[&]);

    for (slot<s(0)(0)(0)>[&] = 0; slot<s(0)(0)(0)>[&] < ((1) ) ; slot<s(0)(0)(0)>[&]++)
    {
        gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][slot<s(0)(0)(0)>[&]] = 1 ;
		 


        gppCahEm4CfgVar<s(0)(0)(0)>[&][slot<s(0)(0)(0)>[&]] = ((void *)0) ;
        printf<s(0)(0)(0)>[&] ("\r\n%s(): set gppCahEm4CfgVar[%d] to 0", __FUNCTION__<s(0)(0)(0)>[&], slot<s(0)(0)(0)>[&]);
    }

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}




 






PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_loadModule<s(0)(0)(0)>[&] ()
{
    PB_ERROR_CODE_T<s(0)(0)(0)>[T] pbRtn<s(0)(0)(0)>[&] =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;

    memset<s(0)(0)(0)>[&] (&gCahEm4CfgData<s(0)(0)(0)>[&], 0, sizeof (gCahEm4CfgData<s(0)(0)(0)>[&]));
    cah_em4_initModule<s(0)(0)(0)>[&] ();

    return pbRtn<s(0)(0)(0)>[&];
}

int
cah_em4_getChipBase<s(0)(0)(0)>[&] (int slot<s(0)(0)(0)>[&], int chipno<s(0)(0)(0)>[&])
{
    int base<s(0)(0)(0)>[&] =(D2) 0;

    base<s(0)(0)(0)>[&] = 0;

    return (base<s(0)(0)(0)>[&]);
}

 






void
cah_em4_Info<s(0)(0)(0)>[&] ()
{
    DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&];(D1:dwPos:0)

    for (dwPos<s(0)(0)(0)>[&] = 0; dwPos<s(0)(0)(0)>[&] < ((1) ) ; dwPos<s(0)(0)(0)>[&]++)
    {
        if (CTD_MODE_E1<s(0)(0)(0)>[&] == gCahEm4CfgData<s(0)(0)(0)>[&][dwPos<s(0)(0)(0)>[&]].ePortType<s(0)(0)(0)>[&][0]
            || CTD_MODE_DS1<s(0)(0)(0)>[&] == gCahEm4CfgData<s(0)(0)(0)>[&][dwPos<s(0)(0)(0)>[&]].ePortType<s(0)(0)(0)>[&][0])
        {
            printf<s(0)(0)(0)>[&] ("EntityNo[%d],portType[%d],dwBaseAddr[0x%x].\r\n",
                    gCahEm4CfgData<s(0)(0)(0)>[&][dwPos<s(0)(0)(0)>[&]].dwEntityNo<s(0)(0)(0)>[&], gCahEm4CfgData<s(0)(0)(0)>[&][dwPos<s(0)(0)(0)>[&]].ePortType<s(0)(0)(0)>[&][0],
                    gCahEm4CfgData<s(0)(0)(0)>[&][dwPos<s(0)(0)(0)>[&]].dwBaseAddr<s(0)(0)(0)>[&]);
        }
    }
}

 


unsigned short
cah_em4_rd<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&])
{
    unsigned short ud<s(0)(0)(0)>[&] =(D2) 0xcc;

    ud<s(0)(0)(0)>[&] = *((volatile unsigned short *) (base<s(0)(0)(0)>[&]) + offset<s(0)(0)(0)>[&]);

    return (ud<s(0)(0)(0)>[&]);
}


 


int
cah_em4_wr<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&], unsigned short data<s(0)(0)(0)>[&])
{
    *((volatile unsigned short *) (base<s(0)(0)(0)>[&]) + offset<s(0)(0)(0)>[&]) = data<s(0)(0)(0)>[&];

    return 0;
}

 



int
cah_em4_enableLatchIntr<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int flag<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    if (flag<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] = 0x0001;              
    }
    else
    {
        u<s(0)(0)(0)>[&] = 0x0000;
    }

    cah_WriteRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], ((0x00 << 10) | 0X09) , u<s(0)(0)(0)>[&], 0x00ff, CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);



    return (((WORD<s(0)(0)(0)>[T])0x0) );
}


 


void
cah_em4_pollBitDmapper<s(0)(0)(0)>[&] (unsigned short *baseaddr<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    for (;;)
    {
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], offset<s(0)(0)(0)>[&]);
        if ((u<s(0)(0)(0)>[&] & 0x8000))
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
            if (i<s(0)(0)(0)>[&] >= 100)
            {
                printf<s(0)(0)(0)>[&] ("\r\n%s(): FATAL ERROR ON INDRECT REG ACCESS", __FUNCTION__<s(0)(0)(0)>[&]);
                break;
            }
        }
        else
        {
            break;
        }
    }
}


 


void
cah_em4_pollBit<s(0)(0)(0)>[&] (unsigned short *baseaddr<s(0)(0)(0)>[&], int offset<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    for (;;)
    {
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], offset<s(0)(0)(0)>[&]);
        if ((u<s(0)(0)(0)>[&] & 0x8000))
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
            if (i<s(0)(0)(0)>[&] >= 100)
			{
				printf<s(0)(0)(0)>[&] ("\r\n%s():\t register unstable forever!!!", __FUNCTION__<s(0)(0)(0)>[&]);
                break;
			}
        } else {
            break;
        }
    }
}


 


void
cah_em4_enablePlm<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,          0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    u<s(0)(0)(0)>[&] &= ~0x0004;
    u<s(0)(0)(0)>[&] |= (mode<s(0)(0)(0)>[&] ? 1 : 0) << 2;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    if (1 == mode<s(0)(0)(0)>[&])
    {
         
        u<s(0)(0)(0)>[&] &= ~0x0040;
        u<s(0)(0)(0)>[&] |= 0x0010;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0040;
        u<s(0)(0)(0)>[&] &= ~0x0010;
    }
    u<s(0)(0)(0)>[&] |= (0x0020 | 0x0080);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}

 


int
cah_em4_setPrbs<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] flag<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == flag<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0001;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x47 , u<s(0)(0)(0)>[&]);
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}

 



void
cah_em4_enableTim<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,         
                0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    u<s(0)(0)(0)>[&] &= ~(0x0001 + 0x0080);
    u<s(0)(0)(0)>[&] |= (mode<s(0)(0)(0)>[&] ? (1 + 0x0080) : 0);

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    if (1 == mode<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0008;
        u<s(0)(0)(0)>[&] |= 0x0004;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0008;
        u<s(0)(0)(0)>[&] &= ~0x0004;
    }

    u<s(0)(0)(0)>[&] |= (0x0020 | 0x0080);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}
 



void
cah_em4_enableTimRdi<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,         
                0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    u<s(0)(0)(0)>[&] &= ~(0x0001 + 0x0080);
    u<s(0)(0)(0)>[&] |= (mode<s(0)(0)(0)>[&] ? (1 + 0x0080) : 0);

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    if (1 == mode<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0008;
         
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0008;
         
    }

    u<s(0)(0)(0)>[&] |= (0x0020 | 0x0080);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}

 



void
cah_em4_enableTimAis<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,         
                0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    u<s(0)(0)(0)>[&] &= ~(0x0001 + 0x0080);
    u<s(0)(0)(0)>[&] |= (mode<s(0)(0)(0)>[&] ? (1 + 0x0080) : 0);

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    if (1 == mode<s(0)(0)(0)>[&])
    {
         
        u<s(0)(0)(0)>[&] |= 0x0004;
    }
    else
    {
         
        u<s(0)(0)(0)>[&] &= ~0x0004;
    }

    u<s(0)(0)(0)>[&] |= (0x0020 | 0x0080);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}


 


void
cah_em4_setTtiMode<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    u<s(0)(0)(0)>[&] &= ~0x0001;
    u<s(0)(0)(0)>[&] |= mode<s(0)(0)(0)>[&];

    u<s(0)(0)(0)>[&] |= (0x0020 | 0x0080);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (ulPort<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}


 



void
cah_em4_setPrbs2<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] flag<s(0)(0)(0)>[&])
{
     


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    cah_em4_setPrbs<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], flag<s(0)(0)(0)>[&]);
}


 


void
cah_em4_initERdi<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] flag<s(0)(0)(0)>[&])
{
     


    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


    cah_ReadRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x42 , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);



    if (eEM4_ENABLE<s(0)(0)(0)>[&] == flag<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0001;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }


    cah_WriteRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x42 , u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);



}


 




void
cah_em4_forceAis<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] ais<s(0)(0)(0)>[&])
{
    unsigned short u1<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    u1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (   (0x04 << 10) | 0x40 ));
    if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
        cah_em4_trace<s(0)(0)(0)>[&] (40 , "%s: base(%x), offset(%x), port(%d), u1(%x)",
                       __FUNCTION__<s(0)(0)(0)>[&], baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , port<s(0)(0)(0)>[&], u1<s(0)(0)(0)>[&]);

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == ais<s(0)(0)(0)>[&])
    {
        if (u1<s(0)(0)(0)>[&] & 0x8000)
        {
            if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
                cah_em4_trace<s(0)(0)(0)>[&] (40 , "already set, skip");
            goto endfrcais<s(0)(0)(0)>[&];
        }
        else
        {
            if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
                cah_em4_trace<s(0)(0)(0)>[&] (40 , "set tu-asi insertion");
            u1<s(0)(0)(0)>[&] |= 0x8000;
        }
    }
    else
    {
        if (u1<s(0)(0)(0)>[&] & 0x8000)
        {
            if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
                cah_em4_trace<s(0)(0)(0)>[&] (40 , "clear tu-asi insertion");
            u1<s(0)(0)(0)>[&] &= ~0x8000;
        }
        else
        {
            if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
                cah_em4_trace<s(0)(0)(0)>[&] (40 , "already cleared, skip");
            goto endfrcais<s(0)(0)(0)>[&];
        }
    }
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (   (0x04 << 10) | 0x40 ), u1<s(0)(0)(0)>[&]);
  endfrcais<s(0)(0)(0)>[&]:

  return;
}

void
cah_em4_forceRdi<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rdi<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == rdi<s(0)(0)(0)>[&])
    {
        if ((u<s(0)(0)(0)>[&] & 0x0001) && !(u<s(0)(0)(0)>[&] & 0x0002))
        {
            goto endFrcrdi<s(0)(0)(0)>[&];
        }
        else
        {
            u<s(0)(0)(0)>[&] |= 0x0001;
            u<s(0)(0)(0)>[&] &= ~0x0002;
        }
    }
    else
    {
        if ((u<s(0)(0)(0)>[&] & 0x0002) && !(u<s(0)(0)(0)>[&] & 0x0001))
        {
            goto endFrcrdi<s(0)(0)(0)>[&];
        }
        else
        {
            u<s(0)(0)(0)>[&] |= 0x0002;
            u<s(0)(0)(0)>[&] &= (~0x0001);
        }
    }
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , u<s(0)(0)(0)>[&]);
  endFrcrdi<s(0)(0)(0)>[&]:

  return;
}

int
cah_em4_initReiRdiRfi<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rei<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rdi<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rfi<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == rei<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0080;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= (~0x0080);
    }


    if (eEM4_ENABLE<s(0)(0)(0)>[&] == rdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0002;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= (~0x0002);
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == rfi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0020;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= (~0x0020);
    }

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , u<s(0)(0)(0)>[&]);
    return (((WORD<s(0)(0)(0)>[T])0x0) );

}


int
cah_em4_initPsl<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], unsigned short psl<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );
    u<s(0)(0)(0)>[&] &= 0xffe3;
    u<s(0)(0)(0)>[&] &= ~0x0020;                
    u<s(0)(0)(0)>[&] |= ((psl<s(0)(0)(0)>[&] & 0x0007) << 2);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , u<s(0)(0)(0)>[&]);
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}

void
em4SetPsl2<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], unsigned short port<s(0)(0)(0)>[&], unsigned short psl<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );
    u<s(0)(0)(0)>[&] &= 0xffe3;                 
    u<s(0)(0)(0)>[&] &= ~0x0020;
    u<s(0)(0)(0)>[&] |= ((psl<s(0)(0)(0)>[&] & 0x0007) << 2);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , u<s(0)(0)(0)>[&]);
}


void
em4SetPsl<s(0)(0)(0)>[&] (int ent<s(0)(0)(0)>[&], unsigned short port<s(0)(0)(0)>[&], unsigned short psl<s(0)(0)(0)>[&])
{
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nent(%d) NOT active", ent<s(0)(0)(0)>[&]);
        return;
    }

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);

    em4SetPsl2<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], psl<s(0)(0)(0)>[&]);
}



int
cah_em4_setTxj2<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], const unsigned char *j2<s(0)(0)(0)>[&])
{
    int r<s(0)(0)(0)>[&] =(D2) 0;

    if (((void *)0)  == j2<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nem4_set_j2: j2 NULL");
        return (r<s(0)(0)(0)>[&] = -1);
    }

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 0), (unsigned short) j2<s(0)(0)(0)>[&][0] | (j2<s(0)(0)(0)>[&][1] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 1), (unsigned short) j2<s(0)(0)(0)>[&][2] | (j2<s(0)(0)(0)>[&][3] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 2), (unsigned short) j2<s(0)(0)(0)>[&][4] | (j2<s(0)(0)(0)>[&][5] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 3), (unsigned short) j2<s(0)(0)(0)>[&][6] | (j2<s(0)(0)(0)>[&][7] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 4), (unsigned short) j2<s(0)(0)(0)>[&][8] | (j2<s(0)(0)(0)>[&][9] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 5), (unsigned short) j2<s(0)(0)(0)>[&][10] | (j2<s(0)(0)(0)>[&][11] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 6), (unsigned short) j2<s(0)(0)(0)>[&][12] | (j2<s(0)(0)(0)>[&][13] << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x04 << 10) | 0x50 ) + 7), (unsigned short) j2<s(0)(0)(0)>[&][14] | (j2<s(0)(0)(0)>[&][15] << 8));

    return (((WORD<s(0)(0)(0)>[T])0x0) );
}

void
cahem4setTxj2_2<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], unsigned short port<s(0)(0)(0)>[&], const unsigned char *j2<s(0)(0)(0)>[&])
{
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    cah_em4_setTxj2<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], j2<s(0)(0)(0)>[&]);
}


int
cah_em4_setConsequentAction<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] uneqrdi<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] plmrdi<s(0)(0)(0)>[&],
                             eEM4SWITCH<s(0)(0)(0)>[T] uneqais<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] plmais<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] timrdi<s(0)(0)(0)>[&],
                             eEM4SWITCH<s(0)(0)(0)>[T] timais<s(0)(0)(0)>[&], int ttimode<s(0)(0)(0)>[&])
{
     



    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == uneqrdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0080;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0080;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == plmrdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0040;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0040;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == uneqais<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] &= ~0x0020;
    }
    else
    {
        u<s(0)(0)(0)>[&] |= 0x0020;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == plmais<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] &= ~0x0010;
    }
    else
    {
        u<s(0)(0)(0)>[&] |= 0x0010;
    }


    if (eEM4_ENABLE<s(0)(0)(0)>[&] == timrdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0008;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0008;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == timais<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] &= ~0x0004;
    }
    else
    {
        u<s(0)(0)(0)>[&] |= 0x0004;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == ttimode<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }
    else
    {
        u<s(0)(0)(0)>[&] |= 0x0001;
    }

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (port<s(0)(0)(0)>[&] << 8) + 0x01 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

    return (((WORD<s(0)(0)(0)>[T])0x0) );
}


int
cah_em4_setDegThreshold<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short threshold<s(0)(0)(0)>[&])
{
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , threshold<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (port<s(0)(0)(0)>[&] << 8) + ((0x02 << 10) | 0x20 ));
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}



void
cah_em4_getTslNow<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short *tslexp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,   0x8000 + (port<s(0)(0)(0)>[&] << 8) + 0x0d );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );
    *tslexp<s(0)(0)(0)>[&] = ((u<s(0)(0)(0)>[&] & 0x7000) >> 12);
}

void
em4GetTslAcc<s(0)(0)(0)>[&] (int ent<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    unsigned short tsl<s(0)(0)(0)>[&];(D1:tsl:0)
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nent(%d) NOT active", ent<s(0)(0)(0)>[&]);
        return;
    }

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);

    cah_em4_getTslNow<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], &tsl<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\nent(%d), port(%d), accepted psl(0x%x)", ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], tsl<s(0)(0)(0)>[&] & 0x0007);
    printf<s(0)(0)(0)>[&] ("\r\n");
}

void
cah_em4_get_j2exp<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned char *j2exp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

	printf<s(0)(0)(0)>[&] ("\r\n%s(): base(%p), port(%d)", __FUNCTION__<s(0)(0)(0)>[&], baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 8; i<s(0)(0)(0)>[&]++)
    {
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0x8000 + (port<s(0)(0)(0)>[&] << 8) + (0X20  + i<s(0)(0)(0)>[&]));
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );
		j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&] * 2] = u<s(0)(0)(0)>[&] & 0x00ff;
		j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&] * 2 + 1] = (u<s(0)(0)(0)>[&] >> 8) & 0x00ff;
    }
}



void
cah_em4_set_j2exp<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], const unsigned char *j2exp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 8; i<s(0)(0)(0)>[&]++)
    {
        u<s(0)(0)(0)>[&] = j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&] * 2] + (j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&] * 2 + 1] << 8);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (port<s(0)(0)(0)>[&] << 8) + (0X20  + i<s(0)(0)(0)>[&]));
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    }
}

 


int
em4ShowJ2Exp<s(0)(0)(0)>[&] (int entity<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) (void *) 0;

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);

    if ((void *) 0 == baseaddr<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nentity(%d) not active", entity<s(0)(0)(0)>[&]);
        return (0);
    }
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 8; i<s(0)(0)(0)>[&]++)
    {

        cah_WriteRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,      
                           0x8000 + (port<s(0)(0)(0)>[&] << 8) + (0X20  + i<s(0)(0)(0)>[&]), 0x7f3f,
                           CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);




        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

        cah_ReadRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 , &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);



        printf<s(0)(0)(0)>[&] ("\r\nj2exp[%2d]=[%x]", i<s(0)(0)(0)>[&] * 2, u<s(0)(0)(0)>[&] & 0x00ff);
        printf<s(0)(0)(0)>[&] ("\r\nj2exp[%2d]=[%x]", i<s(0)(0)(0)>[&] * 2 + 1, (u<s(0)(0)(0)>[&] & 0xff00) >> 8);
    }
    printf<s(0)(0)(0)>[&] ("\r\n");

    return (0);
}


void
cah_em4_getJ2Acc<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned char *j2exp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&]++)
    {
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 ,     
                    0x8000 + (port<s(0)(0)(0)>[&] << 8) + (0x10  + i<s(0)(0)(0)>[&]));
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );
        *(j2exp<s(0)(0)(0)>[&] + i<s(0)(0)(0)>[&]) = u<s(0)(0)(0)>[&] & (0x00ff);
         
    }
}


int
cah_em4_setIntMask<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] tsl<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rdi<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] uneq<s(0)(0)(0)>[&],
                    eEM4SWITCH<s(0)(0)(0)>[T] plm<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] tim<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] erdi<s(0)(0)(0)>[&], unsigned short tslexp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


    if (eEM4_ENABLE<s(0)(0)(0)>[&] == tsl<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0100;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0100;
    }

    if (eEM4_ENABLE<s(0)(0)(0)>[&] == rdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0010;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0010;
    }
    if (eEM4_ENABLE<s(0)(0)(0)>[&] == uneq<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0008;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0008;
    }
    if (eEM4_ENABLE<s(0)(0)(0)>[&] == plm<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0004;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0004;
    }
    if (eEM4_ENABLE<s(0)(0)(0)>[&] == tim<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0001;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }
    if (eEM4_ENABLE<s(0)(0)(0)>[&] == erdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0200;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0200;
    }

    u<s(0)(0)(0)>[&] &= ~0x3800;
    u<s(0)(0)(0)>[&] |= ((tslexp<s(0)(0)(0)>[&] & 0x0007) << 11);

    u<s(0)(0)(0)>[&] |= 0xc000;                 

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (port<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}

void
em4SetPslexp<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], unsigned short port<s(0)(0)(0)>[&], unsigned short pslexp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x00 );
    u<s(0)(0)(0)>[&] &= (~0x3800);
    u<s(0)(0)(0)>[&] |= ((pslexp<s(0)(0)(0)>[&] & 0x0007) << 11);

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , u<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (port<s(0)(0)(0)>[&] << 8) + 0x00 );
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
}



int
cah_em4_set_inloopretiming<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] inloop<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] retiming<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x100 ) + port<s(0)(0)(0)>[&]);


    if (eEM4_ENABLE<s(0)(0)(0)>[&] == retiming<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0001;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x100 ) + port<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&]);

    return (((WORD<s(0)(0)(0)>[T])0x0) );
}




UINT16<s(0)(0)(0)>[T] cah_em4_PollBusyBit<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&])
{
    UINT16<s(0)(0)(0)>[T]    wcnt<s(0)(0)(0)>[&]     =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]    wdelay<s(0)(0)(0)>[&]   =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]    wdummy<s(0)(0)(0)>[&]   =(D2) 0x0;
    
    while (((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( (UINT32<s(0)(0)(0)>[T])(dwBaseAddr<s(0)(0)(0)>[&] + (dwOffset<s(0)(0)(0)>[&] * 2)) )))  & 0x8000 )
    {
        if (wcnt<s(0)(0)(0)>[&]++ > 50 )
        {
            return ((UINT16<s(0)(0)(0)>[T])0x4) ;
        }
        
        for (wdelay<s(0)(0)(0)>[&] = 0; wdelay<s(0)(0)(0)>[&] < 100 ; wdelay<s(0)(0)(0)>[&]++)
        {
            wdummy<s(0)(0)(0)>[&] = wdummy<s(0)(0)(0)>[&] + wdelay<s(0)(0)(0)>[&];
        }
    }
    
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 
typedef enum
{
    EM4_REG_ATTRBT_RW<s(0)(0)(0)>[&]   = 0x0,
    EM4_REG_ATTRBT_RO<s(0)(0)(0)>[&]   = 0x1,
    EM4_REG_ATTRBT_WO<s(0)(0)(0)>[&]   = 0x2,
    EM4_REG_ATTRBT_RC<s(0)(0)(0)>[&]   = 0x3,
    EM4_REG_ATTRBT_WC<s(0)(0)(0)>[&]   = 0x4,
}EM4_REG_ATTRBT_T<s(0)(0)(0)>[&];(D1:EM4_REG_ATTRBT_T:1)[[TYPENAME:EM4_REG_ATTRBT_T]]

UINT16<s(0)(0)(0)>[T] cah_em4_WriteRegister<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&],         UINT32<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&],         UINT16<s(0)(0)(0)>[T] wValue<s(0)(0)(0)>[&],         UINT16<s(0)(0)(0)>[T] wMask<s(0)(0)(0)>[&],         EM4_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&])




{
    UINT32<s(0)(0)(0)>[T]   dwAbsAddr<s(0)(0)(0)>[&]          =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]   wCurRegValue<s(0)(0)(0)>[&]       =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]   wShouldWrtValue<s(0)(0)(0)>[&]    =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]   wRtn<s(0)(0)(0)>[&]               =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;

     
    dwAbsAddr<s(0)(0)(0)>[&] = (UINT32<s(0)(0)(0)>[T])(dwBaseAddr<s(0)(0)(0)>[&] + (dwOffset<s(0)(0)(0)>[&] * 2));
     
    wCurRegValue<s(0)(0)(0)>[&] = ((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( dwAbsAddr<s(0)(0)(0)>[&] ))) ;
     
    wShouldWrtValue<s(0)(0)(0)>[&] = (UINT16<s(0)(0)(0)>[T])((wValue<s(0)(0)(0)>[&] & wMask<s(0)(0)(0)>[&]) | (wCurRegValue<s(0)(0)(0)>[&] & (~wMask<s(0)(0)(0)>[&])));
     
    ((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( dwAbsAddr<s(0)(0)(0)>[&] )))  = wShouldWrtValue<s(0)(0)(0)>[&];

     
    


     
    return wRtn<s(0)(0)(0)>[&];
}



UINT16<s(0)(0)(0)>[T] cah_em4_ReadRegister<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] dwBaseAddr<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] dwOffset<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] *pwValue<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] wMask<s(0)(0)(0)>[&], EM4_REG_ATTRBT_T<s(0)(0)(0)>[T] eRegAttrbt<s(0)(0)(0)>[&])
{
    UINT32<s(0)(0)(0)>[T]   dwAbsAddr<s(0)(0)(0)>[&]       =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]   wCurRegValue<s(0)(0)(0)>[&]    =(D2) 0x0;
    UINT16<s(0)(0)(0)>[T]   wRtn<s(0)(0)(0)>[&]            =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;

    if (((void *)0)  != pwValue<s(0)(0)(0)>[&])
    {
         
        dwAbsAddr<s(0)(0)(0)>[&] = (UINT32<s(0)(0)(0)>[T])(dwBaseAddr<s(0)(0)(0)>[&] + (dwOffset<s(0)(0)(0)>[&] * 2));
         
        wCurRegValue<s(0)(0)(0)>[&] = ((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( dwAbsAddr<s(0)(0)(0)>[&] ))) ;
         
        *pwValue<s(0)(0)(0)>[&] = (UINT16<s(0)(0)(0)>[T])(wCurRegValue<s(0)(0)(0)>[&] & wMask<s(0)(0)(0)>[&]);

         
        if (EM4_REG_ATTRBT_WC<s(0)(0)(0)>[&] == eRegAttrbt<s(0)(0)(0)>[&])
        {
             
            ((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( dwAbsAddr<s(0)(0)(0)>[&] )))  = wMask<s(0)(0)(0)>[&];
        }
        
         
        if (EM4_REG_ATTRBT_RW<s(0)(0)(0)>[&] == eRegAttrbt<s(0)(0)(0)>[&])
        {          
            if (0xcccc!= ((UINT16<s(0)(0)(0)>[T])(*(volatile UINT16<s(0)(0)(0)>[T]*)( ((0x00 << 10) | 0x10)  ))) )
            {
                wRtn<s(0)(0)(0)>[&] = ((UINT16<s(0)(0)(0)>[T])0x2) ;
            }
        }
    }
    else
    {
        wRtn<s(0)(0)(0)>[&] = ((UINT16<s(0)(0)(0)>[T])0x1) ;
    }
    
     
    return wRtn<s(0)(0)(0)>[&];
}



UINT16<s(0)(0)(0)>[T] cah_em4_IndRead<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] dwbaseAddr<s(0)(0)(0)>[&] ,     UINT32<s(0)(0)(0)>[T] dwaddrIndAddr<s(0)(0)(0)>[&] ,     UINT32<s(0)(0)(0)>[T] addrIndData<s(0)(0)(0)>[&] ,     UINT16<s(0)(0)(0)>[T] waddr<s(0)(0)(0)>[&] ,     UINT16<s(0)(0)(0)>[T] *pwvalue<s(0)(0)(0)>[&],     UINT16<s(0)(0)(0)>[T] wMaskval<s(0)(0)(0)>[&],     UINT16<s(0)(0)(0)>[T] wMaskaddr<s(0)(0)(0)>[&])






{
    UINT16<s(0)(0)(0)>[T] wRtn<s(0)(0)(0)>[&]    =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;

     
    wRtn<s(0)(0)(0)>[&] |= cah_em4_PollBusyBit<s(0)(0)(0)>[&](dwbaseAddr<s(0)(0)(0)>[&], dwaddrIndAddr<s(0)(0)(0)>[&]);
    if (((WORD<s(0)(0)(0)>[T])0x0)  != wRtn<s(0)(0)(0)>[&])
    {
        return ((UINT16<s(0)(0)(0)>[T])0x8) ;
    }

     
    wRtn<s(0)(0)(0)>[&] |= cah_em4_WriteRegister<s(0)(0)(0)>[&](dwbaseAddr<s(0)(0)(0)>[&], dwaddrIndAddr<s(0)(0)(0)>[&], ((waddr<s(0)(0)(0)>[&] & (~0x4000 )) | 0x8000 ), wMaskaddr<s(0)(0)(0)>[&], EM4_REG_ATTRBT_WO<s(0)(0)(0)>[&]);
	
     
    wRtn<s(0)(0)(0)>[&] |= cah_em4_PollBusyBit<s(0)(0)(0)>[&](dwbaseAddr<s(0)(0)(0)>[&], dwaddrIndAddr<s(0)(0)(0)>[&]);
    if (((WORD<s(0)(0)(0)>[T])0x0)  != wRtn<s(0)(0)(0)>[&])
    {
        return ((UINT16<s(0)(0)(0)>[T])0x8) ;
    }

     
    wRtn<s(0)(0)(0)>[&] |= cah_em4_ReadRegister<s(0)(0)(0)>[&](dwbaseAddr<s(0)(0)(0)>[&], addrIndData<s(0)(0)(0)>[&] , pwvalue<s(0)(0)(0)>[&], wMaskval<s(0)(0)(0)>[&], EM4_REG_ATTRBT_RO<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



 



PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_setPdhPortMode<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], PDH_PORT_MODE_T<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&])
{
    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int port<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) cah_em4_setPdhPortMode<s(0)(0)(0)>[&], (int) ulPort<s(0)(0)(0)>[&], (int) type<s(0)(0)(0)>[&], 0, 11, __FUNCTION__<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&], 0x00 );
    u<s(0)(0)(0)>[&] &= ~0x000c;                
    cah_em4_pohWrite<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x00 , u<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

int cah_em4_gete1outloop<s(0)(0)(0)>[&] (void * base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
	unsigned short loop<s(0)(0)(0)>[&] =(D2) 0;
	int byte<s(0)(0)(0)>[&] =(D2) 0;
	int bit<s(0)(0)(0)>[&] =(D2) 0;

	byte<s(0)(0)(0)>[&] = (port<s(0)(0)(0)>[&] / 16);
	bit<s(0)(0)(0)>[&] = (port<s(0)(0)(0)>[&] % 16);
	
	loop<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x04 << 10) | 0x10 ) + byte<s(0)(0)(0)>[&]));

    return (loop<s(0)(0)(0)>[&] & (0x0001 << bit<s(0)(0)(0)>[&])) ? 1:0;
}


int cah_em4_e1outloop<s(0)(0)(0)>[&] (void * base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], int enable<s(0)(0)(0)>[&])
{
	unsigned short loop<s(0)(0)(0)>[&] =(D2) 0;
	int byte<s(0)(0)(0)>[&] =(D2) 0;
	int bit<s(0)(0)(0)>[&] =(D2) 0;

	byte<s(0)(0)(0)>[&] = (port<s(0)(0)(0)>[&] / 16);
	bit<s(0)(0)(0)>[&] = (port<s(0)(0)(0)>[&] % 16);
	
	loop<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x04 << 10) | 0x10 ) + byte<s(0)(0)(0)>[&]));
	if (enable<s(0)(0)(0)>[&])
	{
		loop<s(0)(0)(0)>[&] |= (0x0001 << bit<s(0)(0)(0)>[&]);
	} else {
		loop<s(0)(0)(0)>[&] &= ~(0x0001 << bit<s(0)(0)(0)>[&]);
	}

	cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x04 << 10) | 0x10 ) + byte<s(0)(0)(0)>[&]), loop<s(0)(0)(0)>[&]);

	return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

int cah_em4_e1inloop<s(0)(0)(0)>[&] (void * base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], int enable<s(0)(0)(0)>[&])
{
	unsigned short loop<s(0)(0)(0)>[&] =(D2) 0;
	
	loop<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x100 ) + port<s(0)(0)(0)>[&]));
	if (enable<s(0)(0)(0)>[&])
	{
		loop<s(0)(0)(0)>[&] |= (0x0002);
	} else {
		loop<s(0)(0)(0)>[&] &= ~(0x0002);
	}

	cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x100 ) + port<s(0)(0)(0)>[&]), loop<s(0)(0)(0)>[&]);

	return ((WORD<s(0)(0)(0)>[T])0x0) ;
}
 


WORD<s(0)(0)(0)>[T]
CAH_EM4_SetPortLoopback<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_LOOPBACK_TYPE_T<s(0)(0)(0)>[T] eLpbckMd<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T] wRtn<s(0)(0)(0)>[&] =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;
	int port<s(0)(0)(0)>[&] =(D2) 0;
	void * base<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetPortLoopback<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) eLpbckMd<s(0)(0)(0)>[&], 0, 16, __FUNCTION__<s(0)(0)(0)>[&]);
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));

    switch (eLpbckMd<s(0)(0)(0)>[&])
    {
    case CTD_LOOPBACK_TYPE_NONE<s(0)(0)(0)>[&]:
		cah_em4_e1inloop<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], CTD_LOOPBACK_TYPE_NONE<s(0)(0)(0)>[&]);
		cah_em4_e1outloop<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], CTD_LOOPBACK_TYPE_NONE<s(0)(0)(0)>[&]);
        break;

    case CTD_LOOPBACK_TYPE_INWARD_NEAR<s(0)(0)(0)>[&]:
        break;

    case CTD_LOOPBACK_TYPE_OUTWARD_FAR<s(0)(0)(0)>[&]:
        break;

    case CTD_LOOPBACK_TYPE_OUTWARD_NEAR<s(0)(0)(0)>[&]:
         
         

		cah_em4_e1inloop<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], eLpbckMd<s(0)(0)(0)>[&]);
        break;

    case CTD_LOOPBACK_TYPE_INWARD_FAR<s(0)(0)(0)>[&]:
         
         

		cah_em4_e1outloop<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], eLpbckMd<s(0)(0)(0)>[&]);
		return ((WORD<s(0)(0)(0)>[T])0x0) ;
        break;

    default:
        wRtn<s(0)(0)(0)>[&] = ((WORD<s(0)(0)(0)>[T])0x1) ;
		return wRtn<s(0)(0)(0)>[&];
    }

    return wRtn<s(0)(0)(0)>[&];
}

 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_prbsEnable<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    PB_ERROR_CODE_T<s(0)(0)(0)>[T] ret<s(0)(0)(0)>[&] =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;
    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
     
     


    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s!  Entity= %d; File=%s; Line=%d  \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], "cah_126e1.c",
                1758);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) cah_em4_prbsEnable<s(0)(0)(0)>[&], (int) ulPort<s(0)(0)(0)>[&], (int) bEnable<s(0)(0)(0)>[&], 0, 16, __FUNCTION__<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    if (bEnable<s(0)(0)(0)>[&])
    {
         


        base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
        cah_em4_setPrbs2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], eEM4_ENABLE<s(0)(0)(0)>[&]);

        ret<s(0)(0)(0)>[&] = ((WORD<s(0)(0)(0)>[T])0x0) ;
        if (((WORD<s(0)(0)(0)>[T])0x0)  == ret<s(0)(0)(0)>[&])
        {
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsMode<s(0)(0)(0)>[&] = PRBS_MODE_POWER15<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsStatus<s(0)(0)(0)>[&] = PRBS_STATUS_SYNCING<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsErrCnt<s(0)(0)(0)>[&] = 0;
        }
    }
    else
    {
        base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
        cah_em4_setPrbs2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], eEM4_DISABLE<s(0)(0)(0)>[&]);
        ret<s(0)(0)(0)>[&] = ((WORD<s(0)(0)(0)>[T])0x0) ;
        if (((WORD<s(0)(0)(0)>[T])0x0)  == ret<s(0)(0)(0)>[&])
        {
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsMode<s(0)(0)(0)>[&] = PRBS_MODE_NA<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsStatus<s(0)(0)(0)>[&] = PRBS_STATUS_NA<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsErrCnt<s(0)(0)(0)>[&] = 0;
        }
    }

    if (((WORD<s(0)(0)(0)>[T])0x0)  != ret<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s!  Entity= %d; File=%s; Line=%d  \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], "cah_126e1.c",
                1802);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].bForceRpt<s(0)(0)(0)>[&] = 1 ;
    cah_em4_trace<s(0)(0)(0)>[&] (19, "%s: entity(%d), port(%d), flag(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

double cah_em4_wasteOfTime<s(0)(0)(0)>[&] (void);(D1:cah_em4_wasteOfTime:0)


int g_ulport<s(0)(0)(0)>[&] =(D2) 200;


UINT16<s(0)(0)(0)>[T]
cah_em4_readPdhAlarm<s(0)(0)(0)>[&](void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0, val1<s(0)(0)(0)>[&] =(D2) 0;

    int i<s(0)(0)(0)>[&] =(D2) 0   ;

    g_waste<s(0)(0)(0)>[&] = 1 + cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x17 , port<s(0)(0)(0)>[&] | 0x8000);   
    for (;;)
    {
if (0) taskDelay<s(0)(0)(0)>[&] (1);            
else cah_em4_wasteOfTime<s(0)(0)(0)>[&] ();
        val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x17 );
        if (0 == (val<s(0)(0)(0)>[&] & 0x8000))
        {
            break;
        }
        else
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
            if (i<s(0)(0)(0)>[&] >= 100)
            {
                printf<s(0)(0)(0)>[&] ("\r\n%s():\tbase(%p), port(%d), FATAL ERROR INDIRECT REG ACCESS ERROR !!!", __FUNCTION__<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
                { { if (DBG_GetLevel<s(0)(0)(0)>[&](  gCahDbgModuleNo<s(0)(0)(0)>[&] ,     CAH_DEBUG_LEVEL_ERROR<s(0)(0)(0)>[&]  )) {printf<s(0)(0)(0)>[&]("[%s] %d: ", "cah_126e1.c", 1852); printf<s(0)(0)(0)>[&]   ("\r\ncah_em4_readPdhAlarm():\tbase(%p), port(%d), FATAL ERROR INDIRECT REG ACCESS ERROR !!!\r\n", base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&])  ;} if (DBG_NvGetLevel<s(0)(0)(0)>[&](  gCahDbgModuleNo<s(0)(0)(0)>[&] ,     CAH_DEBUG_LEVEL_ERROR<s(0)(0)(0)>[&]  ))    ; } ; } ;
                break;
            }
        }
    }

    val<s(0)(0)(0)>[&] 	= cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x1b ) & 0x0007;
    val1<s(0)(0)(0)>[&] 	= cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x1c ) & 0x0001;
    if (port<s(0)(0)(0)>[&] == g_ulport<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\ncah_em4_readPdhAlarm:port(%d), val(%x), val1(%x)", port<s(0)(0)(0)>[&], val<s(0)(0)(0)>[&], val1<s(0)(0)(0)>[&]);
    }

    val<s(0)(0)(0)>[&]     = val<s(0)(0)(0)>[&] & 0x0007;
    val1<s(0)(0)(0)>[&]    = val1<s(0)(0)(0)>[&] & 0x0001;
	val<s(0)(0)(0)>[&] 	= val<s(0)(0)(0)>[&] | ((val1<s(0)(0)(0)>[&] & 0x0001) ? 0x0008 : 0x0000);

    return (val<s(0)(0)(0)>[&]);
}


static double gCahEm4Time<s(0)(0)(0)>[&] =(D2) 0;

double cah_em4_wasteOfTime<s(0)(0)(0)>[&] ()
{
    static double ary<s(0)(0)(0)>[&] [16];(D1:ary:0)
    double r<s(0)(0)(0)>[&] =(D2) 0.0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 5; i<s(0)(0)(0)>[&] ++)
    {
        r<s(0)(0)(0)>[&] = ary<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = ary<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]+1] * ary<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]+2] / ary<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]+3];
    }

    gCahEm4Time<s(0)(0)(0)>[&] = r<s(0)(0)(0)>[&];

    return r<s(0)(0)(0)>[&];
}

int g_inderr<s(0)(0)(0)>[&] =(D2) 1;


UINT32<s(0)(0)(0)>[T]
cah_em4_readCrc4RemoteReg<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] *pNear<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] *pRemote<s(0)(0)(0)>[&])
{
    UINT16<s(0)(0)(0)>[T] val<s(0)(0)(0)>[&];(D1:val:0)
    
    int i<s(0)(0)(0)>[&] =(D2) 0   ;
    g_waste<s(0)(0)(0)>[&] = 1 + cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 , port<s(0)(0)(0)>[&] | 0x8000);   
    for (;;)
    {
        val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 );
        if (0 == (val<s(0)(0)(0)>[&] & 0x8000))
        {
            break;
        }
        else
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
if (0) taskDelay<s(0)(0)(0)>[&] (1);            
else cah_em4_wasteOfTime<s(0)(0)(0)>[&] ();
            if (i<s(0)(0)(0)>[&] >= 100)
            {
                if (g_inderr<s(0)(0)(0)>[&])
                printf<s(0)(0)(0)>[&] ("\r\n%s():\tbase(%p), port(%d), FATAL ERROR ON INDIRECT REG ACCESS", __FUNCTION__<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
                break;
            }
        }
    }
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x1a );
    *pNear<s(0)(0)(0)>[&] = val<s(0)(0)(0)>[&];

    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x19 );
    val<s(0)(0)(0)>[&] &= ~0xfc00;                
    *pRemote<s(0)(0)(0)>[&] = val<s(0)(0)(0)>[&];

    return val<s(0)(0)(0)>[&];
}



UINT32<s(0)(0)(0)>[T]
cah_em4_readCrc4Reg<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    UINT16<s(0)(0)(0)>[T] val<s(0)(0)(0)>[&];(D1:val:0)
    








    int i<s(0)(0)(0)>[&] =(D2) 0   ;
    g_waste<s(0)(0)(0)>[&] = 1 + cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 , port<s(0)(0)(0)>[&] | 0x8000);   
    for (;;)
    {
        val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 );
        if (0 == (val<s(0)(0)(0)>[&] & 0x8000))
        {
            break;
        }
        else
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
if (0) taskDelay<s(0)(0)(0)>[&] (1);            
else cah_em4_wasteOfTime<s(0)(0)(0)>[&] ();
            if (i<s(0)(0)(0)>[&] >= 100)
            {
                if (g_inderr<s(0)(0)(0)>[&])
                printf<s(0)(0)(0)>[&] ("\r\n%s():\tbase(%p), port(%d), FATAL ERROR ON INDIRECT REG ACCESS", __FUNCTION__<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
                break;
            }
        }
    }
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x1a );

    return val<s(0)(0)(0)>[&];
}






unsigned short
cah_em4_getFarCrcErrCount<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;








    int i<s(0)(0)(0)>[&] =(D2) 0;
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 , port<s(0)(0)(0)>[&] | 0x8000);         
    for (;;)
    {
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x18 );
        if (0 == (u<s(0)(0)(0)>[&] & 0x8000))
        {
            break;
        }
        else
        {
            i<s(0)(0)(0)>[&] = i<s(0)(0)(0)>[&] + 1;
if (0) taskDelay<s(0)(0)(0)>[&] (1);            
else cah_em4_wasteOfTime<s(0)(0)(0)>[&] ();
            if (i<s(0)(0)(0)>[&] >= 100)
            {
if (g_inderr<s(0)(0)(0)>[&])
                printf<s(0)(0)(0)>[&] ("\r\n%s():\tbase(%p), port(%d), FATAL ERROR ON INDRECT REG ACCESS", __FUNCTION__<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
                break;
            }
        }
    }
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x19 );
    u<s(0)(0)(0)>[&] &= ~0xfc00;                



    return u<s(0)(0)(0)>[&];
}






inline int
cah_em4_ent2chipno<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    return cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
}



 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_insertUpAis<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
     


    if (cah_em4_blockupais<s(0)(0)(0)>[&] && bEnable<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s, has been blocked! entity%d ulChip%d ulPort%d \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&],
                ulChip<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&]);
        bEnable<s(0)(0)(0)>[&] = 0 ;
    }

    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s!  Entity= %d; File=%s; Line=%d  \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], "cah_126e1.c",
                2247);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s!  Entity= %d; File=%s; Line=%d  \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], "cah_126e1.c",
                2256);
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

extern STATUS<s(0)(0)(0)>[T] vxMemProbe<s(0)(0)(0)>[&](char * adrs<s(0)(0)(0)>[&], int mode<s(0)(0)(0)>[&], int length<s(0)(0)(0)>[&], char * pVal<s(0)(0)(0)>[&]);(D1:pVal:0)

 



PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_detectCardStateEx<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * pbActive<s(0)(0)(0)>[&])
{
    void *base<s(0)(0)(0)>[&] =(D2) (void *) 0;
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0;
    static int flag<s(0)(0)(0)>[&] =(D2) 1;
    volatile unsigned short *p<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

    *pbActive<s(0)(0)(0)>[&] = 0 ;
     


	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&](0, 3);
    p<s(0)(0)(0)>[&] = (unsigned short *)0x50000020;
    if (-1 == vxMemProbe<s(0)(0)(0)>[&]((char *)p<s(0)(0)(0)>[&], 0 , 2, (char *)&val<s(0)(0)(0)>[&]))
    {
 
        *pbActive<s(0)(0)(0)>[&] = 0 ;
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    } else {
   
    }

    p<s(0)(0)(0)>[&] = (unsigned short *)0x60000020;
    if (-1 == vxMemProbe<s(0)(0)(0)>[&]((char *)p<s(0)(0)(0)>[&], 0 , 2, (char *)&val<s(0)(0)(0)>[&]))
    {
    
        *pbActive<s(0)(0)(0)>[&] = 0 ;
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    } else {
     
    }

     
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x00 << 10) | 0x01)) );
    if (0x28 == (val<s(0)(0)(0)>[&]&0xff))
    {
        if (flag<s(0)(0)(0)>[&])
            printf<s(0)(0)(0)>[&] ("\r\ndetect(TRUE), base(%x), val(%x)", (int) base<s(0)(0)(0)>[&], val<s(0)(0)(0)>[&]);
        *pbActive<s(0)(0)(0)>[&] = 1 ;
    }
    else
    {
        printf<s(0)(0)(0)>[&] ("\r\ndetect(FALSE), base(%x), val(%x)", (int) base<s(0)(0)(0)>[&], val<s(0)(0)(0)>[&]);
        *pbActive<s(0)(0)(0)>[&] = 0 ;
    }

	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&](0, 77);
     
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x00 << 10) | 0x01)) );
    if (0x28 == (val<s(0)(0)(0)>[&]&0xff))
    {
        if (flag<s(0)(0)(0)>[&])
            printf<s(0)(0)(0)>[&] ("\r\ndetect(TRUE), base(%x), val(%x)", (int) base<s(0)(0)(0)>[&], val<s(0)(0)(0)>[&]);
        *pbActive<s(0)(0)(0)>[&] = 1 ;
    }
    else
    {
        printf<s(0)(0)(0)>[&] ("\r\ndetect(FALSE), base(%x), val(%x)", (int) base<s(0)(0)(0)>[&], val<s(0)(0)(0)>[&]);
        *pbActive<s(0)(0)(0)>[&] = 0 ;
    }
 
    flag<s(0)(0)(0)>[&] = 0;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}







 





















 




void
cah_em4_showbuild<s(0)(0)(0)>[&] (void)
{
    printf<s(0)(0)(0)>[&] ("\r\n>>>>> EM4: this load is build at (%s):(%s)(%s) <<<<<\r\n", "Apr 13 2009", "15:08:05",
            __FUNCTION__<s(0)(0)(0)>[&]);
}

 



int
cah_em4_show<s(0)(0)(0)>[&] (char *fmt<s(0)(0)(0)>[&], ...)
{
    va_list<s(0)(0)(0)>[T] argptr<s(0)(0)(0)>[&];(D1:argptr:0)
    int cnt<s(0)(0)(0)>[&];(D1:cnt:0)

    printf<s(0)(0)(0)>[&] ("\r\n");
    (__builtin_next_arg<s(0)(0)(0)>[&] (  fmt<s(0)(0)(0)>[&] ), __builtin_memcpy<s(0)(0)(0)>[&] ((  argptr<s(0)(0)(0)>[&]  ), __builtin_saveregs<s(0)(0)(0)>[&] (), sizeof(__gnuc_va_list<s(0)(0)(0)>[T])) ) ;
    cnt<s(0)(0)(0)>[&] = vprintf<s(0)(0)(0)>[&] (fmt<s(0)(0)(0)>[&], argptr<s(0)(0)(0)>[&]);
    ((void)0) ;

    return (cnt<s(0)(0)(0)>[&]);
}

 






int
em4help<s(0)(0)(0)>[&] (void)
{
    int i<s(0)(0)(0)>[&] =(D2) 0;

    printf<s(0)(0)(0)>[&] ("\r\nEM4 version(%d)", g_cahem4version<s(0)(0)(0)>[&]);

    while (cah_em4_fmsg<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] != ((void *)0) )
    {
        cah_em4_show<s(0)(0)(0)>[&] ("%s", cah_em4_fmsg<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]]);
        i<s(0)(0)(0)>[&]++;
    }

    return 0;

}



 


int
cah_em4_portCfg2<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&])
{
    int port<s(0)(0)(0)>[&] =(D2) 0;
    char *j2<s(0)(0)(0)>[&] =(D2) "FPGA_BENCH_T";
    int j<s(0)(0)(0)>[&] =(D2) 0, i<s(0)(0)(0)>[&] =(D2) 0;
    int r<s(0)(0)(0)>[&] =(D2) 0;
    
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x8000);
    taskDelay<s(0)(0)(0)>[&] (10);
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x0001);
    
    for (port<s(0)(0)(0)>[&] = 0; port<s(0)(0)(0)>[&] < (63 ) ; port<s(0)(0)(0)>[&]++)
    {
         



		cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , 0xd3ff);
         

		cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000+(port<s(0)(0)(0)>[&] << 8) + 0);
         

        taskDelay<s(0)(0)(0)>[&] (2);
		cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , 0x01c8);
         

		cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000+(port<s(0)(0)(0)>[&] << 8) + 1);
         
        taskDelay<s(0)(0)(0)>[&] (2);

        if ((port<s(0)(0)(0)>[&] << 10))
        {
            for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&]++)
            {
                if (((WORD<s(0)(0)(0)>[T])0x0)  !=
                    (r<s(0)(0)(0)>[&] = cah_em4_setDegThreshold<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], (j2<s(0)(0)(0)>[&][1] << 8) + 0x80 + j2<s(0)(0)(0)>[&][0])))
                {
                    printf<s(0)(0)(0)>[&] ("\r\ncah_em4_setDegThreshold () failed");
                    return (r<s(0)(0)(0)>[&]);
                }
                for (j<s(0)(0)(0)>[&] = 1; j<s(0)(0)(0)>[&] < 8; j<s(0)(0)(0)>[&]++)
                {
                    if (((WORD<s(0)(0)(0)>[T])0x0)  !=
                        (r<s(0)(0)(0)>[&] =
                         cah_em4_setDegThreshold<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&],
                                                  (j2<s(0)(0)(0)>[&][j<s(0)(0)(0)>[&] * 2 + 1] << 8) + j2<s(0)(0)(0)>[&][j<s(0)(0)(0)>[&] * 2])))
                    {
                        printf<s(0)(0)(0)>[&] ("\r\ncah_em4_setDegThreshold() failed");
                        return (r<s(0)(0)(0)>[&]);
                    }
                }
            }
        }
        else
        {
            for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&]++)
            {
                if (((WORD<s(0)(0)(0)>[T])0x0)  !=
                    (r<s(0)(0)(0)>[&] = cah_em4_setDegThreshold<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], (j2<s(0)(0)(0)>[&][1] << 8) + 0x80 + j2<s(0)(0)(0)>[&][0])))
                {
                    printf<s(0)(0)(0)>[&] ("\r\ncah_em4_setDegThreshold () failed");
                    return (r<s(0)(0)(0)>[&]);
                }

                for (j<s(0)(0)(0)>[&] = 1; j<s(0)(0)(0)>[&] < 8; j<s(0)(0)(0)>[&]++)
                {
                    if (((WORD<s(0)(0)(0)>[T])0x0)  !=
                        (r<s(0)(0)(0)>[&] =
                         cah_em4_setDegThreshold<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&],
                                                  (j2<s(0)(0)(0)>[&][j<s(0)(0)(0)>[&] * 2 + 1] << 8) + j2<s(0)(0)(0)>[&][j<s(0)(0)(0)>[&] * 2])))
                    {
                        printf<s(0)(0)(0)>[&] ("\r\ncah_em4_setDegThreshold () failed");
                        return (r<s(0)(0)(0)>[&]);
                    }
                }
            }
        }
    }

    return 0;
}

int
cah_em4_portCfg1<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&])
{
    char buffer<s(0)(0)(0)>[&][256];(D1:buffer:0)
    int port<s(0)(0)(0)>[&] =(D2) 0;
    char *j2<s(0)(0)(0)>[&] =(D2) "FPGA_BENCH_T";
    int r<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


     


    for (port<s(0)(0)(0)>[&] = 0; port<s(0)(0)(0)>[&] < (63 ) ; port<s(0)(0)(0)>[&]++)
    {
         



        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);       
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , 0x8a);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x47 , 0);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x41 , 0);

         
        u<s(0)(0)(0)>[&] = 0;





  

 
         sprintf<s(0)(0)(0)>[&] (buffer<s(0)(0)(0)>[&], "%s%d", j2<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
        if (((WORD<s(0)(0)(0)>[T])0x0)  != (r<s(0)(0)(0)>[&] = cah_em4_setTxj2<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (const unsigned char *) buffer<s(0)(0)(0)>[&])))
        {
            printf<s(0)(0)(0)>[&] ("\r\n%s(): cah_em4_setTxj2() failed", __FUNCTION__<s(0)(0)(0)>[&]);
            return (r<s(0)(0)(0)>[&]);
        }
    }
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}



void
e1_init<s(0)(0)(0)>[&] (void)
{
    printf<s(0)(0)(0)>[&] ("\r\nInitialize 63-E1 Mapper (%x) : version (%x)(%x)", (0x50000000) , em4Map1Rd<s(0)(0)(0)>[&] (0, 0),
            em4Map2Rd<s(0)(0)(0)>[&] (0, 0));
    em4Map1Wr<s(0)(0)(0)>[&] (0, 1, 0x29);
    taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () / 4);
    em4Map1Wr<s(0)(0)(0)>[&] (0, 1, 0x28);

    taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () / 2);

    printf<s(0)(0)(0)>[&] ("\r\nInitialize DCM monitor interval to 15ms ");
    em4Map1Wr<s(0)(0)(0)>[&] (0, 0x0a, 0x3200);
}

int gCahEm4Print<s(0)(0)(0)>[&] =(D2) 0;
int
cah_em4_printf<s(0)(0)(0)>[&] (char *msg<s(0)(0)(0)>[&], ...)
{
    va_list<s(0)(0)(0)>[T] argptr<s(0)(0)(0)>[&];(D1:argptr:0)
    int cnt<s(0)(0)(0)>[&] =(D2) 0;

    if (0 == gCahEm4Print<s(0)(0)(0)>[&]) 
    {
        taskDelay<s(0)(0)(0)>[&] (3);
        return 0;
    }

    if (1 == gCahEm4Print<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n");
        (__builtin_next_arg<s(0)(0)(0)>[&] (  msg<s(0)(0)(0)>[&] ), __builtin_memcpy<s(0)(0)(0)>[&] ((  argptr<s(0)(0)(0)>[&]  ), __builtin_saveregs<s(0)(0)(0)>[&] (), sizeof(__gnuc_va_list<s(0)(0)(0)>[T])) ) ;
        cnt<s(0)(0)(0)>[&] = vprintf<s(0)(0)(0)>[&] (msg<s(0)(0)(0)>[&], argptr<s(0)(0)(0)>[&]);
        ((void)0) ;
    }

    return (cnt<s(0)(0)(0)>[&]);
}



void
e1_dcm_state<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&])
{
    unsigned short v<s(0)(0)(0)>[&] =(D2) 0;

    v<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x00 << 10) | 0x0a) );
    if (v<s(0)(0)(0)>[&] & 0x80)
    {
        printf<s(0)(0)(0)>[&] ("\r\nDCM: locked");
    }
    else
    {
        printf<s(0)(0)(0)>[&] ("\r\nDCM: UNlocked!");
    }
    printf<s(0)(0)(0)>[&] ("\r\n monitored at interval 15 ms, resetted ");
}

 




















































extern UINT8<s(0)(0)(0)>[T] GetSlotNumber<s(0)(0)(0)>[&](void);(D1:GetSlotNumber:0)



 





































































































































void cah_em4_e1desync_default<s(0)(0)(0)>[&](void *baseaddr<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&]=(D2)0;   
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    cah_em4_printf<s(0)(0)(0)>[&]("\r\nDesync: set to 32-byte fifo with center 12");
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x00 , 0x30c);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x00 ) | 0x0c, 0);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x00 ) | 0x0d, 0);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x00 ) | 0x0e, 0);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x05 << 10) | 0x00 ) | 0x0f, 0);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nInitial desynchronizer (macro): ");
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < (63 ) ; i<s(0)(0)(0)>[&]++)
    {      
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) |( 0x100+ i<s(0)(0)(0)>[&]));
        u<s(0)(0)(0)>[&] &= ~0x0007;
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) |( 0x100+ i<s(0)(0)(0)>[&]), u<s(0)(0)(0)>[&] );        
    }

}
void cah_em4_e1sync_default<s(0)(0)(0)>[&](void *baseaddr<s(0)(0)(0)>[&])
{
      cah_em4_printf<s(0)(0)(0)>[&]("\r\nsync: set LIU fall edge");
       
     cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x00 , 0x0010);
     cah_em4_printf<s(0)(0)(0)>[&]("\r\nall ports are set E1");
     cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x0c, 0);
     cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x0d, 0);
     cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x0e, 0);
     cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x0f, 0);
}
void  cah_em4_e1_tb_outloop_disable<s(0)(0)(0)>[&](void *baseaddr<s(0)(0)(0)>[&])
{    
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    u<s(0)(0)(0)>[&]=cah_em4_rd<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&],(((0x00 << 10) | 0x01)) );
    u<s(0)(0)(0)>[&]=u<s(0)(0)(0)>[&]& 0xfffd;
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x00 << 10) | 0x01)) ,u<s(0)(0)(0)>[&]);
     
    u<s(0)(0)(0)>[&]=cah_em4_rd<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&],(0x04 << 10) | 0x00 );
    u<s(0)(0)(0)>[&]=u<s(0)(0)(0)>[&]|0x0010;
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x00 ,u<s(0)(0)(0)>[&]);
    
}
void cah_em4_e1_poh_rx_mask_int<s(0)(0)(0)>[&](void *baseaddr<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&]=(D2)0;
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\ndisable plmais and timais");
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < (63 ) ; i<s(0)(0)(0)>[&]++)
    {                     
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , 0x1000);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (i<s(0)(0)(0)>[&] << 8) + 0x00 );
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    }
}


void cah_em4_e1_poh_set_degrade<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&],int level<s(0)(0)(0)>[&],int thr<s(0)(0)(0)>[&],int period<s(0)(0)(0)>[&])
{

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nSet poh rx degrade ...");
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | (0x020+2*(level<s(0)(0)(0)>[&]&0x07)), (thr<s(0)(0)(0)>[&]&0x7f)+((period<s(0)(0)(0)>[&]&0xff)<<8)  );
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | (0x021+2*(level<s(0)(0)(0)>[&]&0x07)), ((period<s(0)(0)(0)>[&]&0xffff00)>>8)  );
}

void cah_em4_e1_poh_clr_degrade<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&],int level<s(0)(0)(0)>[&],int thr<s(0)(0)(0)>[&],int period<s(0)(0)(0)>[&])
{

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nSet poh rx degrade ...");
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | (0x030+2*(level<s(0)(0)(0)>[&]&0x07)), (thr<s(0)(0)(0)>[&]&0x7f)+((period<s(0)(0)(0)>[&]&0xff)<<8)  );
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | (0x031+2*(level<s(0)(0)(0)>[&]&0x07)), ((period<s(0)(0)(0)>[&]&0xffff00)>>8)  );
}

int
cah_em4_setGlobalRegister<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&])
{
    int r<s(0)(0)(0)>[&] =(D2) 0;
    int j1_locked<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;
     
     

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): base(%p)", __FUNCTION__<s(0)(0)(0)>[&], baseaddr<s(0)(0)(0)>[&]);
    
    
 
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nInitialize 63-E1 Mapper (%p) : version (%x)", baseaddr<s(0)(0)(0)>[&], em4Map1Rd<s(0)(0)(0)>[&] (0, 0));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x00 << 10) | 0x01)) , 0x29);
     
    taskDelay<s(0)(0)(0)>[&] (10);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (((0x00 << 10) | 0x01)) , 0x28);
     
    taskDelay<s(0)(0)(0)>[&] (40);
    
     












    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nInitialize DCM monitor interval to 15ms ");
    cah_em4_wr<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&], ((0x00 << 10) | 0x0a) , 0x3200);
    
    if ((((WORD<s(0)(0)(0)>[T])0x0)  != (r<s(0)(0)(0)>[&] = cah_em4_portCfg1<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&]))))
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): cah_em4_portCfg1() failed", __FUNCTION__<s(0)(0)(0)>[&]);
        return (r<s(0)(0)(0)>[&]);
    }



      
    
    cah_em4_trace<s(0)(0)(0)>[&] (3, "e1j2 set");

    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x8000);
     
   taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () / 2);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x0001);
    taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () / 2);
    

    

    
    cah_em4_trace<s(0)(0)(0)>[&] (3, "e1ram reset");
    if (((WORD<s(0)(0)(0)>[T])0x0)  != (r<s(0)(0)(0)>[&] = cah_em4_portCfg2<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&])))
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\ncah_em4_portCfg2 () failed");
        return (r<s(0)(0)(0)>[&]);
    }



    cah_em4_trace<s(0)(0)(0)>[&] (3, "e1rx&tx set");
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nResetting mapper ...");
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x00 , 0x0119);
     
    taskDelay<s(0)(0)(0)>[&] (40);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x04 << 10) | 0x00 , 0x0118);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nwait for telecom bus stable ...");
    
     
    j1_locked<s(0)(0)(0)>[&] = 0;
    while (j1_locked<s(0)(0)(0)>[&] == 0)
    {
        j1_locked<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x00 ) & 0x80;
    }
     

    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nResetting demapper ...");
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x00 , 0x8004);
     
     
    taskDelay<s(0)(0)(0)>[&] (50);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x00 , 0x0004);
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nResetting poh ...");
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x8000);
      
    taskDelay<s(0)(0)(0)>[&] (50);
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x00 , 0x0000);
    e1_dcm_state<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&]);
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nWaiting DCM stablized ...");
     
    taskDelay<s(0)(0)(0)>[&] (50);
    e1_dcm_state<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&]);
     
    
     
    cah_em4_e1desync_default<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&]);
    cah_em4_e1sync_default<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&]);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\ndisable plmais and timais");
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < (63 ) ; i<s(0)(0)(0)>[&]++)
    {                     
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , 0x01c8);
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0xc000 + (i<s(0)(0)(0)>[&] << 8) + 0x01 );
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    }


     cah_em4_e1_tb_outloop_disable<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&]);
     cah_em4_e1_poh_rx_mask_int<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&]);

     cah_em4_e1_poh_set_degrade<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&],0,40,16000);
     cah_em4_e1_poh_clr_degrade<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&],0,6,16000);
     	
     cah_em4_e1_poh_set_degrade<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&],1,80,16000);     
     cah_em4_e1_poh_clr_degrade<s(0)(0)(0)>[&](baseaddr<s(0)(0)(0)>[&],1,8,16000);
     
     
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , (0x3f)  | ((0x3f)  << 8));
    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x05 << 10) | 0x201 , (0x3f)  | ((0x3f)  << 8));


    
    cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,  
                    0x1b  + 0, 
                    0x07,  
                    0x07,  
                    CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
    cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,  
                    0x1b  + 1,  
                    0x07,  
                    0x07,  
                    CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
    cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,  
                    0x1b  + 2,  
                    0x07,  
                    0x07,  
                    CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
    cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,  
                    0x1b  + 3, 
                    0x07,  
                    0x07,  
                    CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}




 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_initChip<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s: ent(%d), base address(0x%x)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], (int) (0x50000000) );
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s: setGlobalRegister-1", __FUNCTION__<s(0)(0)(0)>[&]);
    if (((WORD<s(0)(0)(0)>[T])0x0)  != cah_em4_setGlobalRegister<s(0)(0)(0)>[&] ((void *) (0x50000000) ))
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): set map1 failed", __FUNCTION__<s(0)(0)(0)>[&]);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s: ent(%d), base address(0x%x)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], (int) (0x60000000) );
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s: setGlobalRegister-2", __FUNCTION__<s(0)(0)(0)>[&]);
    if (((WORD<s(0)(0)(0)>[T])0x0)  != cah_em4_setGlobalRegister<s(0)(0)(0)>[&] ((void *) (0x60000000) ))
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): set map2 failed", __FUNCTION__<s(0)(0)(0)>[&]);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }
    
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}





 



void
cah_em4_InitAlmID<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], int ulChip<s(0)(0)(0)>[&], int ulPort<s(0)(0)(0)>[&])
{
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][0] = 34 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][1] = 32 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][2] = 36 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][3] = 39 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][4] = 37 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][5] = 38 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][6] = 91 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][7] = 92 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][8] = 42 ;
     


    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][9] = 232 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][10] = 233 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][11] = 235 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][12] = 230 ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][13] = 231 ;




}

void
cah_em4_initVars<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], int chipNum<s(0)(0)(0)>[&])
{
    UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&],(D1:ulChip:0) ulPort<s(0)(0)(0)>[&];(D1:ulPort:0)

    for (ulChip<s(0)(0)(0)>[&] = 0; (int)ulChip<s(0)(0)(0)>[&] < chipNum<s(0)(0)(0)>[&]; ulChip<s(0)(0)(0)>[&]++)
    {
        for (ulPort<s(0)(0)(0)>[&] = 0; ulPort<s(0)(0)(0)>[&] < (63 ) ; ulPort<s(0)(0)(0)>[&]++)
        {
             


            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bPlmEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bTimEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bRestrainRDI<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bBlockAis<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].adminState<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = PORT_STATE_UP<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].faisMode<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] =   0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].frdiMode<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = EM4_NONE_FORCE<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].loopMode<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = PORT_LOOP_NONE<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].portType<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = PDH_MODE_E1<s(0)(0)(0)>[&];
            memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( &pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] ), (  0 ), (  sizeof (EM4_PRBS_CONFIG_T<s(0)(0)(0)>[T]) )) ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsMode<s(0)(0)(0)>[&] = PRBS_MODE_NA<s(0)(0)(0)>[&];

             


            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strExpJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Mode<s(0)(0)(0)>[&] = PbTIModeType_modeFixedOneByte<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strTranJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Mode<s(0)(0)(0)>[&] = PbTIModeType_modeFixedOneByte<s(0)(0)(0)>[&];
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strRcvJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Mode<s(0)(0)(0)>[&] = PbTIModeType_modeFixedOneByte<s(0)(0)(0)>[&];
            memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strExpJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Data<s(0)(0)(0)>[&] ), (  0 ), (  64  + 1 )) ;
            memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strTranJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Data<s(0)(0)(0)>[&] ), (  0 ), (  64  + 1 )) ;
            memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strRcvJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Data<s(0)(0)(0)>[&] ), (  0 ), (  64  + 1 )) ;

             


            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].ExpPSL<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].RcvPSL<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].TranPSL<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0;

             


            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 1 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssf<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssfFc<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdi<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfi<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdiFc<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfiFc<s(0)(0)(0)>[&] = 0;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].e1rdiFc<s(0)(0)(0)>[&] = 0;

            cah_em4_InitAlmID<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
        }
    }
}

int
cah_em4_chkdwPos<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{
    return 0;
}

int
cah_em4_chkId<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]), ((0x00 << 10) | 0x00) );
    if (0x8915  != u<s(0)(0)(0)>[&])
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

 






















int
cah_em4_revise<s(0)(0)(0)>[&] (int isCall<s(0)(0)(0)>[&])
{
    E1_CALL<s(0)(0)(0)>[T] *ppp<s(0)(0)(0)>[&] =(D2) ((void *)0) , *ppp1<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
	ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int fd<s(0)(0)(0)>[&] =(D2) 0;
    int j<s(0)(0)(0)>[&] =(D2) 0;

    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s: entity(%d), fd(%d), isCall(%s)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], fd<s(0)(0)(0)>[&],
            isCall<s(0)(0)(0)>[&] ? "CALL" : "CLEAR");
    if (((void *)0)  == pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s, pointer NULL entity(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&]);
        return (0);
    }

    ppp1<s(0)(0)(0)>[&] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];

    for (;;)
    {
        ppp<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&];
        if (1 == isCall<s(0)(0)(0)>[&])
        {
            if (((void *)0)  == ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\npCahEm4Head[%d]->p NULL", fd<s(0)(0)(0)>[&]);
                break;
            }
            else
            {
                 
                if (5 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] || 6 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&])
                {
                    (*(ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])) (ppp<s(0)(0)(0)>[&]->arg1<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].tti<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg5<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg6<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg2<s(0)(0)(0)>[&]);
                }
                else
                {
                    (*(ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])) (ppp<s(0)(0)(0)>[&]->arg1<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg5<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg6<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg2<s(0)(0)(0)>[&]);
                }
            }
        }

        ppp1<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&];
        if (0 == isCall<s(0)(0)(0)>[&])
        {
            if (((void *)0)  == pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->pNext<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\nEM4 link empty");
                break;
            }
            pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->pNext<s(0)(0)(0)>[&];
            ppp<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&] = ((void *)0) ;
            free<s(0)(0)(0)>[&] (ppp<s(0)(0)(0)>[&]);
            ppp<s(0)(0)(0)>[&] = ((void *)0) ;
        }
        if (ppp1<s(0)(0)(0)>[&])
        {
            if (((void *)0)  == ppp1<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\nem4 link end!!!");
                if (0 == isCall<s(0)(0)(0)>[&])
                    for (j<s(0)(0)(0)>[&] = 0; j<s(0)(0)(0)>[&] < 11; j<s(0)(0)(0)>[&]++)
                    {
                        gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][j<s(0)(0)(0)>[&]] = &gCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];
                    }
                break;
            }
            if (((void *)0)  == ppp1<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\nEM4 link empty");
                if (0 == isCall<s(0)(0)(0)>[&])
                    for (j<s(0)(0)(0)>[&] = 0; j<s(0)(0)(0)>[&] < 11; j<s(0)(0)(0)>[&]++)
                    {
                        gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][j<s(0)(0)(0)>[&]] = &gCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];
                    }
                break;
            }
        }
        else
        {
            printf<s(0)(0)(0)>[&] ("\r\nlink end for NULL");
            if (0 == isCall<s(0)(0)(0)>[&])
                for (j<s(0)(0)(0)>[&] = 0; j<s(0)(0)(0)>[&] < 11; j<s(0)(0)(0)>[&]++)
                {
                    gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][j<s(0)(0)(0)>[&]] = &gCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];
                }
            break;
        }
    }

    return (0);
}



 


void
cah_em4_initLink<s(0)(0)(0)>[&] (void)
{
    int i<s(0)(0)(0)>[&] =(D2) 0, j<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < ((1) ) ; i<s(0)(0)(0)>[&]++)
    {
        pCahEm4Head<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = &gCahEm4Head<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]];
        for (j<s(0)(0)(0)>[&] = 0; j<s(0)(0)(0)>[&] < 11; j<s(0)(0)(0)>[&]++)
        {
            gpCahEm4HashHead<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]][j<s(0)(0)(0)>[&]] = &gCahEm4Head<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]];
        }
        memset<s(0)(0)(0)>[&] (&gCahEm4Head<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]], 0, sizeof (E1_CALL<s(0)(0)(0)>[T]));
    }
}



 


int
cah_em4_registerCall<s(0)(0)(0)>[&] (PMyFun<s(0)(0)(0)>[T] pFun<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], int arg4<s(0)(0)(0)>[&], int arg5<s(0)(0)(0)>[&], int sn<s(0)(0)(0)>[&], char *fname<s(0)(0)(0)>[&])
{
    E1_CALL<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&] =(D2) ((void *)0) , *pold<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int fd<s(0)(0)(0)>[&] =(D2) 0;
    int hash<s(0)(0)(0)>[&] =(D2) 0;

    if (0 == gCahEm4LinkFlag<s(0)(0)(0)>[&])
    {
        cah_em4_initLink<s(0)(0)(0)>[&] ();
        gCahEm4LinkFlag<s(0)(0)(0)>[&] = 1;
    }
    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (0);

if (1) return 0;

    pold<s(0)(0)(0)>[&] = ((void *)0) ;

    pold<s(0)(0)(0)>[&] = cah_em4_findCall2<s(0)(0)(0)>[&] (0, pFun<s(0)(0)(0)>[&], 0, 0, port<s(0)(0)(0)>[&], sn<s(0)(0)(0)>[&]);
    if (pold<s(0)(0)(0)>[&])
    {
        pold<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&] = pFun<s(0)(0)(0)>[&];
        pold<s(0)(0)(0)>[&]->arg1<s(0)(0)(0)>[&] = 0;
        pold<s(0)(0)(0)>[&]->arg2<s(0)(0)(0)>[&] = 0;
        pold<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&];

         


        if (5 == sn<s(0)(0)(0)>[&] || 6 == sn<s(0)(0)(0)>[&])
        {
            memcpy<s(0)(0)(0)>[&] (pold<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].tti<s(0)(0)(0)>[&], (unsigned char *) arg4<s(0)(0)(0)>[&], 16);
        }
        else
        {
            pold<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&] = arg4<s(0)(0)(0)>[&];
        }
        pold<s(0)(0)(0)>[&]->arg5<s(0)(0)(0)>[&] = arg5<s(0)(0)(0)>[&];
        pold<s(0)(0)(0)>[&]->arg6<s(0)(0)(0)>[&] = arg5<s(0)(0)(0)>[&];
        pold<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] = sn<s(0)(0)(0)>[&];

        return (0);
    }

    if (((void *)0)  == (p<s(0)(0)(0)>[&] = (E1_CALL<s(0)(0)(0)>[T] *) malloc<s(0)(0)(0)>[&] (sizeof (E1_CALL<s(0)(0)(0)>[T]))))
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s: malloc error", __FUNCTION__<s(0)(0)(0)>[&]);
        return (0);
    }
    p<s(0)(0)(0)>[&]->id<s(0)(0)(0)>[&] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->id<s(0)(0)(0)>[&] + 1;
    p<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&] = pFun<s(0)(0)(0)>[&];
    p<s(0)(0)(0)>[&]->arg1<s(0)(0)(0)>[&] = 0;
    p<s(0)(0)(0)>[&]->arg2<s(0)(0)(0)>[&] = 0;
    p<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&];
    memcpy<s(0)(0)(0)>[&] (p<s(0)(0)(0)>[&]->fname<s(0)(0)(0)>[&], fname<s(0)(0)(0)>[&], strlen<s(0)(0)(0)>[&] (fname<s(0)(0)(0)>[&]));
    if (5 == sn<s(0)(0)(0)>[&] || 6 == sn<s(0)(0)(0)>[&])
    {
        memcpy<s(0)(0)(0)>[&] (p<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].tti<s(0)(0)(0)>[&], (unsigned char *) arg4<s(0)(0)(0)>[&], 16);
    }
    else
    {
        p<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&] = arg4<s(0)(0)(0)>[&];
    }
    p<s(0)(0)(0)>[&]->arg5<s(0)(0)(0)>[&] = arg5<s(0)(0)(0)>[&];
    p<s(0)(0)(0)>[&]->arg6<s(0)(0)(0)>[&] = arg5<s(0)(0)(0)>[&];
    p<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] = sn<s(0)(0)(0)>[&];

    p<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];
     
    hash<s(0)(0)(0)>[&] = cah_em4_hash<s(0)(0)(0)>[&] (sn<s(0)(0)(0)>[&]);
    p<s(0)(0)(0)>[&]->pHashNext<s(0)(0)(0)>[&][hash<s(0)(0)(0)>[&]] = gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]];     
    pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]] = p<s(0)(0)(0)>[&];
    gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]] = p<s(0)(0)(0)>[&];      

    return (0);
}




 


int
cahem4tree<s(0)(0)(0)>[&] (void)
{
    E1_CALL<s(0)(0)(0)>[T] *ppp<s(0)(0)(0)>[&] =(D2) ((void *)0) , *ppp1<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int fd<s(0)(0)(0)>[&] =(D2) 0;
	ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nEnt(%d) NOT active", entity<s(0)(0)(0)>[&]);
        return (0);
    }

    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (((void *)0)  == pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s, pointer NULL entity(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&]);
        return (0);
    }

    ppp1<s(0)(0)(0)>[&] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];

    for (;;)
    {
        ppp<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&];
        if (1)
        {
            if (((void *)0)  == ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\npCahEm4Head[%d]->p NULL", fd<s(0)(0)(0)>[&]);
                break;
            }
            else
            {
                 
                if (5 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] || 6 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&])
                {
                    printf<s(0)(0)(0)>[&] ("\r\nid(%2d), arg3(%d), arg4(%d), sn(%3d), n(%s)",
                            ppp<s(0)(0)(0)>[&]->id<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&],
                            ppp<s(0)(0)(0)>[&]->fname<s(0)(0)(0)>[&]);
                }
                else
                {
                    printf<s(0)(0)(0)>[&] ("\r\nid(%2d), arg3(%d), arg4(%d), sn(%3d), n(%s)",
                            ppp<s(0)(0)(0)>[&]->id<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&],
                            ppp<s(0)(0)(0)>[&]->fname<s(0)(0)(0)>[&]);
                }
            }
        }

        ppp1<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&];
        if (0)
        {
            pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]] = pCahEm4Head<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->pNext<s(0)(0)(0)>[&];
            ppp<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&] = ((void *)0) ;
            free<s(0)(0)(0)>[&] (ppp<s(0)(0)(0)>[&]);
            ppp<s(0)(0)(0)>[&] = ((void *)0) ;
        }
        if (((void *)0)  == ppp1<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
        {
            printf<s(0)(0)(0)>[&] ("\r\nem4 link end!!!");
            break;
        }
    }

    return (0);
}




  










E1_CALL<s(0)(0)(0)>[T] *
cah_em4_findCall2<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], void *pfun<s(0)(0)(0)>[&], int arg1<s(0)(0)(0)>[&]   ,
                   int arg2<s(0)(0)(0)>[&]   ,
                   int arg3<s(0)(0)(0)>[&]   ,
                   int sn<s(0)(0)(0)>[&])
{
    E1_CALL<s(0)(0)(0)>[T] *ppp<s(0)(0)(0)>[&] =(D2) ((void *)0) , *ppp1<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    E1_CALL<s(0)(0)(0)>[T] *pr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int fd<s(0)(0)(0)>[&] =(D2) 0;
    int hash<s(0)(0)(0)>[&] =(D2) 0;
     

    if (((void *)0)  == cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nEnt(%d) NOT active", entity<s(0)(0)(0)>[&]);
        return (((void *)0) );
    }

    hash<s(0)(0)(0)>[&] = cah_em4_hash<s(0)(0)(0)>[&] (sn<s(0)(0)(0)>[&]);

    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (((void *)0)  == gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s, pointer NULL entity(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&]);
        return (((void *)0) );
    }

    ppp1<s(0)(0)(0)>[&] = gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]];

    for (;;)
    {
        ppp<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&];
        if (((void *)0)  == ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
        {
            printf<s(0)(0)(0)>[&] ("\r\n%s(): pEm4HashHead[%d]->p NULL, func NOT found, first time!", __FUNCTION__<s(0)(0)(0)>[&], fd<s(0)(0)(0)>[&]);
            break;
        }
        else
        {
             


            if (ppp1<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&] == pfun<s(0)(0)(0)>[&] && ppp1<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] == sn<s(0)(0)(0)>[&] && ppp1<s(0)(0)(0)>[&]->arg1<s(0)(0)(0)>[&] == arg1<s(0)(0)(0)>[&] && ppp1<s(0)(0)(0)>[&]->arg2<s(0)(0)(0)>[&] == arg2<s(0)(0)(0)>[&]
                && ppp1<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&] == arg3<s(0)(0)(0)>[&])
            {
                 
                pr<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&];
                cah_em4_trace<s(0)(0)(0)>[&] (4, "\r\n%s: GOT ent(%d:%d), su(%d), port(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&],
                               arg1<s(0)(0)(0)>[&], arg2<s(0)(0)(0)>[&], arg3<s(0)(0)(0)>[&]);
                return (pr<s(0)(0)(0)>[&]);
            }

        }

        ppp1<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&]->pHashNext<s(0)(0)(0)>[&][hash<s(0)(0)(0)>[&]];

        if (((void *)0)  == ppp1<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
        {
            break;
        }
    }

    return (((void *)0) );
}




  




int
cah_em4_hash<s(0)(0)(0)>[&] (int sn<s(0)(0)(0)>[&])
{
    int r<s(0)(0)(0)>[&] =(D2) 0;

    switch (sn<s(0)(0)(0)>[&])
    {
    case 4:
        r<s(0)(0)(0)>[&] = 0;
        break;
    case 2:
        r<s(0)(0)(0)>[&] = 1;
        break;
    case 8:
        r<s(0)(0)(0)>[&] = 2;
        break;
    case 6:
        r<s(0)(0)(0)>[&] = 3;
        break;
    case 99:
        r<s(0)(0)(0)>[&] = 4;
        break;
    case 1:
        r<s(0)(0)(0)>[&] = 5;
        break;
    case 5:
        r<s(0)(0)(0)>[&] = 6;
        break;
    case 9:
        r<s(0)(0)(0)>[&] = 7;
        break;
    case 111:
        r<s(0)(0)(0)>[&] = 8;
        break;

    case 25:
    case 26:
        r<s(0)(0)(0)>[&] = 9;
        break;

    default:
        r<s(0)(0)(0)>[&] = 9;
        break;
    }

    return (r<s(0)(0)(0)>[&]);
}


 


int
cahem4tree2<s(0)(0)(0)>[&] (int hash<s(0)(0)(0)>[&])
{
    E1_CALL<s(0)(0)(0)>[T] *ppp<s(0)(0)(0)>[&] =(D2) ((void *)0) , *ppp1<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int fd<s(0)(0)(0)>[&] =(D2) 0;
	ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    if (0 > hash<s(0)(0)(0)>[&] || 10 < hash<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nhash index error");
        return (0);
    }

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nEnt(%d) NOT active", entity<s(0)(0)(0)>[&]);
        return (0);
    }

    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (((void *)0)  == gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s, pointer NULL entity(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&]);
        return (0);
    }

    ppp1<s(0)(0)(0)>[&] = gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]];

    for (;;)
    {
        ppp<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&];
        if (1)
        {
            if (((void *)0)  == ppp<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
            {
                printf<s(0)(0)(0)>[&] ("\r\ngpCahEm4HashHead[%d][%d]->p NULL", fd<s(0)(0)(0)>[&], hash<s(0)(0)(0)>[&]);
                break;
            }
            else
            {
                if (5 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&] || 6 == ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&])
                {
                    printf<s(0)(0)(0)>[&] ("\r\nid(%4d), arg3(%d), arg4(%d), sn(%3d),n(%s)",
                            ppp<s(0)(0)(0)>[&]->id<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&],
                            ppp<s(0)(0)(0)>[&]->fname<s(0)(0)(0)>[&]);
                }
                else
                {
                    printf<s(0)(0)(0)>[&] ("\r\nid(%4d), arg3(%d), arg4(%d), sn(%3d),n(%s)",
                            ppp<s(0)(0)(0)>[&]->id<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg3<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->arg4<s(0)(0)(0)>[&].arg<s(0)(0)(0)>[&], ppp<s(0)(0)(0)>[&]->sn<s(0)(0)(0)>[&],
                            ppp<s(0)(0)(0)>[&]->fname<s(0)(0)(0)>[&]);
                }
            }
        }

        ppp1<s(0)(0)(0)>[&] = ppp1<s(0)(0)(0)>[&]->pHashNext<s(0)(0)(0)>[&][hash<s(0)(0)(0)>[&]];
        if (0)
        {
            gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]] = gpCahEm4HashHead<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]][hash<s(0)(0)(0)>[&]]->pHashNext<s(0)(0)(0)>[&][hash<s(0)(0)(0)>[&]];
            ppp<s(0)(0)(0)>[&]->pNext<s(0)(0)(0)>[&] = ((void *)0) ;
            free<s(0)(0)(0)>[&] (ppp<s(0)(0)(0)>[&]);
            ppp<s(0)(0)(0)>[&] = ((void *)0) ;
        }
        if (((void *)0)  == ppp1<s(0)(0)(0)>[&]->p<s(0)(0)(0)>[&])
        {
            printf<s(0)(0)(0)>[&] ("\r\nem4 link end!!!");
            break;
        }
    }

    return (0);
}

int em4GetPrbsStateTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    BOOL<s(0)(0)(0)>[T] s<s(0)(0)(0)>[&] =(D2) 0 ;
    DWORD<s(0)(0)(0)>[T] cnt<s(0)(0)(0)>[&] =(D2) 0;

    {if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;

    CAH_EM4_GetPrbsState<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &s<s(0)(0)(0)>[&]);
    CAH_EM4_GetPrbsErrCount<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &cnt<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): status (%d), cnt(%d)", __FUNCTION__<s(0)(0)(0)>[&], s<s(0)(0)(0)>[&], cnt<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n");

    return 0;
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_GetPrbsState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * bPrbsSucc<s(0)(0)(0)>[&])
{
    void *base<s(0)(0)(0)>[&] =(D2) (void *) 0;
    short u<s(0)(0)(0)>[&] =(D2) 0;
    int port<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x20 , port<s(0)(0)(0)>[&] & 0x003f);
    taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () / 10);
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x20 );
	*bPrbsSucc<s(0)(0)(0)>[&] = ((u<s(0)(0)(0)>[&] & 0x8000) ? 1 : 0);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

void
cah_em4_getprbsname<s(0)(0)(0)>[&] (int tempStatus<s(0)(0)(0)>[&], char *almType<s(0)(0)(0)>[&])
{
    switch (tempStatus<s(0)(0)(0)>[&])
    {
    case PRBS_STATUS_NA<s(0)(0)(0)>[&]:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "NONE" , ((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1)) ;
        break;
    case PRBS_STATUS_SYNCING<s(0)(0)(0)>[&]:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "SYNCING" , ((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1)) ;
        break;
    case PRBS_STATUS_SYNC_SUCC<s(0)(0)(0)>[&]:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "SUCC" , ((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1)) ;
        break;
    case PRBS_STATUS_SYNC_FAIL<s(0)(0)(0)>[&]:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "FAIL" , ((int)(  4 + 1 ) <= 0) ? 0 : (  4 + 1 )-1)) ;
        break;
    case PRBS_STATUS_SYNC_ERROR<s(0)(0)(0)>[&]:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "SYNCERR" , ((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1)) ;
        break;
    default:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "UNKNOWN" , ((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1)) ;
        break;
    }

}



 








 








int
cah_em4_pohWrite<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short reg<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;

    u<s(0)(0)(0)>[&] |= (port<s(0)(0)(0)>[&] << 8);
    u<s(0)(0)(0)>[&] |= reg<s(0)(0)(0)>[&];
    u<s(0)(0)(0)>[&] |= 0x8000;                 
    u<s(0)(0)(0)>[&] |= 0x4000;                 

    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x02 << 10) | 0x02 , val<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , u<s(0)(0)(0)>[&]);
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) base<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 





unsigned short
cah_em4_pohRead<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short reg<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    unsigned short result<s(0)(0)(0)>[&] =(D2) 0x00000;

    u<s(0)(0)(0)>[&] |= (port<s(0)(0)(0)>[&] << 8);
    u<s(0)(0)(0)>[&] |= reg<s(0)(0)(0)>[&];
    u<s(0)(0)(0)>[&] |= 0x8000;                 
    u<s(0)(0)(0)>[&] |= 0x0000;                 

    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , u<s(0)(0)(0)>[&]);
    cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) base<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
    result<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );

    return (result<s(0)(0)(0)>[&]);
}

 



unsigned short
cah_em4_readDemapper<s(0)(0)(0)>[&] (void *base<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned short reg<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    unsigned short result<s(0)(0)(0)>[&] =(D2) 0x00000;

    u<s(0)(0)(0)>[&] |= (port<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] |= 0x8000;                 

    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x01 , u<s(0)(0)(0)>[&]);
    cah_em4_pollBitDmapper<s(0)(0)(0)>[&] ((unsigned short *) base<s(0)(0)(0)>[&], (0x05 << 10) | 0x01 );
    result<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], reg<s(0)(0)(0)>[&]);

    return (result<s(0)(0)(0)>[&]);
}

 




CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *
cah_em4_getEntity<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&] =(D2) (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *) 0;

    i<s(0)(0)(0)>[&] = 0;
    p<s(0)(0)(0)>[&] = gppCahEm4CfgVar<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]];

    return p<s(0)(0)(0)>[&];
}

 





void *
cah_em4_getEntityBase<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&] =(D2) (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *) 0;
    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;

    p<s(0)(0)(0)>[&] = cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]);
    base<s(0)(0)(0)>[&] = (void *) p<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][cah_em4_port2chip<s(0)(0)(0)>[&] (port<s(0)(0)(0)>[&]) - 1].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&];

    return base<s(0)(0)(0)>[&];
}

 


CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *
cah_em4_OpenEx<s(0)(0)(0)>[&] (void)
{
    int memSize<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&] =(D2) ((void *)0) ;

     





	if (((void *)0)  != gppCahEm4CfgVar<s(0)(0)(0)>[&][0])
	{
		printf<s(0)(0)(0)>[&] ("\r\n%s(): gppCahEm4CfgVar[0](%p) NOT NULL !!!", __FUNCTION__<s(0)(0)(0)>[&], gppCahEm4CfgVar<s(0)(0)(0)>[&][0]);
		return ((void *)0) ;
	}

    memSize<s(0)(0)(0)>[&] = (sizeof (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T]) + sizeof (EM4_CHIP_VAR_T<s(0)(0)(0)>[T]) * 1) * 2;

    p<s(0)(0)(0)>[&] = (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *) malloc<s(0)(0)(0)>[&]( memSize<s(0)(0)(0)>[&] ); ;
    if (!p<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s():\tFD malloc failed !!!!!!", __FUNCTION__<s(0)(0)(0)>[&]);
        return ((void *)0) ;
    }








    gppCahEm4CfgVar<s(0)(0)(0)>[&][0] = p<s(0)(0)(0)>[&];      
    memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( p<s(0)(0)(0)>[&] ), (  0x00 ), (  memSize<s(0)(0)(0)>[&] )) ;

    return p<s(0)(0)(0)>[&];
}


int
cah_em4_ent2fd<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] ent<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;

    return (i<s(0)(0)(0)>[&]);
}


CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *
cah_em4_fd2entptr<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&])
{
    return gppCahEm4CfgVar<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]];
}

int
cah_em4_fd2ent<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&])
{
    return (gppCahEm4CfgVar<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->entity<s(0)(0)(0)>[&]);
}

CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *
cah_em4_getEntityPtr<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    return cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
}




 





int
cah_em4_ent2Id<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    int id<s(0)(0)(0)>[&] =(D2) 0;

    if (((void *)0)  == g_pTransFunc<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s:KEY translation function not registered!!!", __FUNCTION__<s(0)(0)(0)>[&]);
        return -1;
    }

    id<s(0)(0)(0)>[&] = (*g_pTransFunc<s(0)(0)(0)>[&]) (entity<s(0)(0)(0)>[&]);

    return id<s(0)(0)(0)>[&];
}




void
em4Mi<s(0)(0)(0)>[&] (void)
{
    int fd<s(0)(0)(0)>[&] =(D2) 0;

    for (fd<s(0)(0)(0)>[&] = 0; fd<s(0)(0)(0)>[&] < (((1) ) ); fd<s(0)(0)(0)>[&]++)
    {
        printf<s(0)(0)(0)>[&] ("\r\nfd(%2d) m-base(%p), status(%6s), liu-base(%p)",
                fd<s(0)(0)(0)>[&], cah_em4_getEntityBase<s(0)(0)(0)>[&] (cah_em4_fd2ent<s(0)(0)(0)>[&] (fd<s(0)(0)(0)>[&]), 1),
                (eEm4EntAct<s(0)(0)(0)>[&] == gppCahEm4CfgVar<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->state<s(0)(0)(0)>[&]) ? "ACTIVE" : (eEm4EntInit<s(0)(0)(0)>[&] ==
                                                                         gppCahEm4CfgVar<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->
                                                                         state<s(0)(0)(0)>[&] ? "INIT" : "IDLE"),
                (void *) 0xffff   );
    }
    printf<s(0)(0)(0)>[&] ("\r\n");
}




void
cah_em4Info<s(0)(0)(0)>[&] (void)
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    UINT32<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&];(D1:entity:0)
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < ((1) ) ; i<s(0)(0)(0)>[&]++)
    {
        if (gppCahEm4CfgVar<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] == ((void *)0) )
        {
            continue;
        }

         
        if (gppCahEm4CfgVar<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
        {
            continue;
        }

        entity<s(0)(0)(0)>[&] = gppCahEm4CfgVar<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]]->entity<s(0)(0)(0)>[&];

        pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

        printf<s(0)(0)(0)>[&] ("\r\nentity(%d), base(0x%x)", entity<s(0)(0)(0)>[&], pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&]);
    }

    printf<s(0)(0)(0)>[&] ("\r\n");
}


void
em4AllInLoop<s(0)(0)(0)>[&] (int flag<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
	int ent<s(0)(0)(0)>[&] =(D2) 0;

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nent(%d) NOT active", ent<s(0)(0)(0)>[&]);
        return;
    }


    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], 1), (((0x00 << 10) | 0x01)) );
    if (flag<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0002;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0002;
    }

    cah_em4_wr<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], 1), (((0x00 << 10) | 0x01)) , u<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], 100), (((0x00 << 10) | 0x01)) );
    if (flag<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0002;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0002;
    }

    cah_em4_wr<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], 100), (((0x00 << 10) | 0x01)) , u<s(0)(0)(0)>[&]);
}


int
em4ShowIntMask<s(0)(0)(0)>[&] (int ulPort<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000, uu<s(0)(0)(0)>[&] =(D2) 0;
	int port<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  ulPort<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  ulPort<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (ulPort<s(0)(0)(0)>[&]) - 1;
    u<s(0)(0)(0)>[&] = 	cah_em4_pohRead<s(0)(0)(0)>[&] ((void *)(0x50000000) , port<s(0)(0)(0)>[&], 0x00 );
    uu<s(0)(0)(0)>[&] = 	cah_em4_pohRead<s(0)(0)(0)>[&] ((void *)(0x60000000) , port<s(0)(0)(0)>[&], 0x00 );
    printf<s(0)(0)(0)>[&] ("\r\nbase\t(%p)(%p)", (void *)(0x50000000) , (void *)(0x60000000) );
    printf<s(0)(0)(0)>[&] ("\r\nssf\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x4000 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x4000 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nerdi\t(%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0200 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0200 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\ntsl\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0100 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0100 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\ntti\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0080 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0080 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nsf\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0040 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0040 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nsd\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0020 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0020 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nrdi\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0010 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0010 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nuneq\t(%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0008 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0008 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\nplm\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0004 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0004 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\ntiu\t(%s)(%s), ", 	u<s(0)(0)(0)>[&] & 0x0002 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0002 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\ntim\t(%s)(%s)", 	u<s(0)(0)(0)>[&] & 0x0001 ? "ENABLE" : "DISABLE", 
									uu<s(0)(0)(0)>[&] & 0x0001 ? "ENABLE" : "DISABLE");
    printf<s(0)(0)(0)>[&] ("\r\n");
	return 0;
}



int
em4ShowCons<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000, uu<s(0)(0)(0)>[&] =(D2) 0;
	int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (port<s(0)(0)(0)>[&]) - 1;
    u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] ((void *) (0x50000000) , ulPort<s(0)(0)(0)>[&], 0x01 );
    uu<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] ((void *) (0x60000000) , ulPort<s(0)(0)(0)>[&], 0x01 );
    printf<s(0)(0)(0)>[&] ("\r\nbase       (%x)(%x)", (0x50000000) , (0x60000000) );
    printf<s(0)(0)(0)>[&] ("\r\nuneqrdi    (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0080 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0080 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\nplmrdi     (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0040 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0040 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\nuneqais    (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0020 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0020 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\nplmais     (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0010 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0010 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\ntimrdi     (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0008 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0008 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\ntimais     (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0004 ? "ON" : "OFF", uu<s(0)(0)(0)>[&] & 0x0004 ? "ON" : "OFF");
    printf<s(0)(0)(0)>[&] ("\r\nttimode    (%s)(%s), ", u<s(0)(0)(0)>[&] & 0x0001 ? "1-BYTEMODE" : "16-BYTEMODE", uu<s(0)(0)(0)>[&] & 0x0001 ? "1-BYTEMODE" : "16-BYTEMODE");
    printf<s(0)(0)(0)>[&] ("\r\n");
	return 0;
}



int
cah_em4_trace<s(0)(0)(0)>[&] (int level<s(0)(0)(0)>[&], char *msg<s(0)(0)(0)>[&], ...)
{
    va_list<s(0)(0)(0)>[T] argptr<s(0)(0)(0)>[&];(D1:argptr:0)
    int cnt<s(0)(0)(0)>[&] =(D2) 0;

    if (level<s(0)(0)(0)>[&] == gCahEm4DebugLevel<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n");
        (__builtin_next_arg<s(0)(0)(0)>[&] (  msg<s(0)(0)(0)>[&] ), __builtin_memcpy<s(0)(0)(0)>[&] ((  argptr<s(0)(0)(0)>[&]  ), __builtin_saveregs<s(0)(0)(0)>[&] (), sizeof(__gnuc_va_list<s(0)(0)(0)>[T])) ) ;
        cnt<s(0)(0)(0)>[&] = vprintf<s(0)(0)(0)>[&] (msg<s(0)(0)(0)>[&], argptr<s(0)(0)(0)>[&]);
        ((void)0) ;
    }

    return (cnt<s(0)(0)(0)>[&]);
}


int
em4ShowEnable<s(0)(0)(0)>[&] (int ulPort<s(0)(0)(0)>[&])
{
    int ent<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000, uu<s(0)(0)(0)>[&],(D1:uu:0) u1<s(0)(0)(0)>[&] =(D2) 0, u0<s(0)(0)(0)>[&] =(D2) 0;
	int port<s(0)(0)(0)>[&] =(D2) cah_em4_mapPort<s(0)(0)(0)>[&] (ulPort<s(0)(0)(0)>[&]) - 1;

	{if (125 <  ulPort<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  ulPort<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    u1<s(0)(0)(0)>[&] = em4MapRd<s(0)(0)(0)>[&] (5, 0x100 + port<s(0)(0)(0)>[&], &u0<s(0)(0)(0)>[&], &u1<s(0)(0)(0)>[&]);

    cah_em4_wr<s(0)(0)(0)>[&] ((void *) (0x50000000) , (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (4, 0x40);

    cah_em4_wr<s(0)(0)(0)>[&] ((void *) (0x60000000) , (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);
    uu<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (4, 0x40);
    printf<s(0)(0)(0)>[&] ("\r\nentity(%d), port(%d), u(%x), uu(%x)", ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&], uu<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\nrdi_force     (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0001 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0001 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nrdi_en        (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0002 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0002 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nrei_force     (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0040 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0040 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nrei_en        (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0080 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0080 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nbip2_disable  (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0100 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0100 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nerdi_en       (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0200 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0200 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nerdi_force    (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0400 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0400 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\ntu12_aisforce (%d)(%d)", u<s(0)(0)(0)>[&] & 0x8000 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x8000 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nrfi[force]    (%d)(%d)", u<s(0)(0)(0)>[&] & 0x0020 ? 1 : 0, uu<s(0)(0)(0)>[&] & 0x0020 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\nretiming      (%d)(%d)", u0<s(0)(0)(0)>[&] & 0x0001 ? 1 : 0, u1<s(0)(0)(0)>[&] & 0x0001 ? 1 : 0);
    printf<s(0)(0)(0)>[&] ("\r\n");

	return 0;
}


void
em4ShowJ2Acc<s(0)(0)(0)>[&] (int ent<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) (void *) 0;
    unsigned char j2exp<s(0)(0)(0)>[&][66];(D1:j2exp:0)

    if (((void *)0)  == cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\nEnt(%d) NOT active", ent<s(0)(0)(0)>[&]);
        return;
    }

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);

    cah_em4_getJ2Acc<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], j2exp<s(0)(0)(0)>[&]);

    printf<s(0)(0)(0)>[&] ("\r\nj2: entity(%d), port(%d)", ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] <= 15; i<s(0)(0)(0)>[&]++)
    {
        printf<s(0)(0)(0)>[&] ("\r\nj2[%2d]= (0x%2x), char(%c)",
                i<s(0)(0)(0)>[&], j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]], (j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] >= 0x20 && j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] <= 0x7e) ? j2exp<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] : 'Y');
    }
}


void
em4ShowPageAddr<s(0)(0)(0)>[&] (void)
{
    printf<s(0)(0)(0)>[&] ("\r\npage0x01<<10 = (0x400      * 2 = 0x0800)");
    printf<s(0)(0)(0)>[&] ("\r\npage0x02<<10 = (0x800      * 2 = 0x1000)");
    printf<s(0)(0)(0)>[&] ("\r\npage0x04<<10 = (0x1000     * 2 = 0x2000)");
    printf<s(0)(0)(0)>[&] ("\r\npage0x05<<10 = (0x1400     * 2 = 0x2800)");
}



int 
em4ShowAlarms<s(0)(0)(0)>[&] (int ulPort<s(0)(0)(0)>[&])
{
    int ent<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0, u1<s(0)(0)(0)>[&] =(D2) 0, u2<s(0)(0)(0)>[&] =(D2) 0, u3<s(0)(0)(0)>[&] =(D2) 0, u4<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short mu<s(0)(0)(0)>[&] =(D2) 0, mu1<s(0)(0)(0)>[&] =(D2) 0, mu2<s(0)(0)(0)>[&] =(D2) 0, mu3<s(0)(0)(0)>[&] =(D2) 0, mu4<s(0)(0)(0)>[&] =(D2) 0;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) (void *) 0;
    unsigned short uu<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short muu<s(0)(0)(0)>[&] =(D2) 0;
    int regcnt<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
	int port<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  ulPort<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  ulPort<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (ulPort<s(0)(0)(0)>[&]) - 1;

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&] + 1);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): base(%p)", __FUNCTION__<s(0)(0)(0)>[&], baseaddr<s(0)(0)(0)>[&]);

 



    u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x03 );
    mu<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] ((void *)(0x60000000) , port<s(0)(0)(0)>[&], 0x03 );

    u1<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x04 );
    mu1<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] ((void *)(0x60000000) , port<s(0)(0)(0)>[&], 0x04 );


 


    cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x01 << 10) | 0x03) , 0x8000 | port<s(0)(0)(0)>[&]);
    regcnt<s(0)(0)(0)>[&] = 0;
    while (1)
    {
        uu<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x01 << 10) | 0x03) );
        if (!(0x8000 & uu<s(0)(0)(0)>[&]))
        {
            break;
        }
        else
        {
            regcnt<s(0)(0)(0)>[&]++;
            if (regcnt<s(0)(0)(0)>[&] > 100)
            {
                printf<s(0)(0)(0)>[&] ("\r\nsomething wrong when read_hardware entity(%d)", ent<s(0)(0)(0)>[&]);
                break;
            }
        }
    }
    u2<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x01 << 10) | 0x10) );  

    regcnt<s(0)(0)(0)>[&] = 0;
    cah_em4_wr<s(0)(0)(0)>[&] ((void *)(0x60000000) , ((0x01 << 10) | 0x03) , 0x8000 | port<s(0)(0)(0)>[&]);
    while (1)
    {
        muu<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *)(0x60000000) , ((0x01 << 10) | 0x03) );
        if (!(0x8000 & uu<s(0)(0)(0)>[&]))
        {
            break;
        }
        else
        {
            regcnt<s(0)(0)(0)>[&]++;
            if (regcnt<s(0)(0)(0)>[&] > 100)
            {
                printf<s(0)(0)(0)>[&] ("\r\nsomething wrong when read_hardware entity(%d)", ent<s(0)(0)(0)>[&]);
                break;
            }
        }
    }
    mu2<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *)(0x60000000) , ((0x01 << 10) | 0x10) );  
 


    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntity<s(0)(0)(0)>[&] (ent<s(0)(0)(0)>[&]);
    u3<s(0)(0)(0)>[&] = cah_em4_readPdhAlarm<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    mu3<s(0)(0)(0)>[&] = cah_em4_readPdhAlarm<s(0)(0)(0)>[&] ((void *)(0x60000000) , port<s(0)(0)(0)>[&]);

    printf<s(0)(0)(0)>[&] ("\r\nent(%d), port(%d)", ent<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\nSTATUS\t\t\t\tINTR");
    printf<s(0)(0)(0)>[&] ("\r\n______________________________________________________+++");

    printf<s(0)(0)(0)>[&] ("\r\nlop\t(%s)(%s)\t", (u2<s(0)(0)(0)>[&] & 0x0003) == 0x0001 ? "AIS-RISE" : ((u2<s(0)(0)(0)>[&] & 0x0003) == 0x0002 ? "LOP-RISE" : "NORMAL"),
				(mu2<s(0)(0)(0)>[&] & 0x0003) == 0x0001 ? "AIS-RISE" : ((mu2<s(0)(0)(0)>[&] & 0x0003) == 0x0002 ? "LOP-RISE" : "NORMAL"));

    printf<s(0)(0)(0)>[&] ("\r\npi_ssf\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x4000) ? " RISE" : "CLEAR", (mu<s(0)(0)(0)>[&] & 0x4000) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\tssf\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x4000) ? " RISE" : "CLEAR",
		(mu1<s(0)(0)(0)>[&] & 0x4000) ? " RISE" : "CLEAR");


    printf<s(0)(0)(0)>[&] ("\r\ntsl_ais\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0800) ? " RISE" : "CLEAR",
			(mu<s(0)(0)(0)>[&] & 0x0800) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\ttslais\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0800) ? " RISE" : "CLEAR",
			(mu1<s(0)(0)(0)>[&] & 0x0800) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\nsf\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0040) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0040) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\tsf\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0040) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0040) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\nsd\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0020) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0020) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\tsd\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0020) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0020) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\nrdi\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0010) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0010) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\trdi\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0010) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0010) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\nuneq\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0008) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0008) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\tuneq\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0008) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0008) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\nplm\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0004) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0004) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\tplm\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0004) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0004) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\ntiu\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0002) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0002) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\ttiu\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0002) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0002) ? " RISE" : "CLEAR");

    printf<s(0)(0)(0)>[&] ("\r\ntim\t(%s)(%s)\t", (u<s(0)(0)(0)>[&] & 0x0001) ? " RISE" : "CLEAR", 
			(mu<s(0)(0)(0)>[&] & 0x0001) ? " RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\ttim\t(%s)(%s)", (u1<s(0)(0)(0)>[&] & 0x0001) ? " RISE" : "CLEAR", 
			(mu1<s(0)(0)(0)>[&] & 0x0001) ? " RISE" : "CLEAR");

 


    printf<s(0)(0)(0)>[&] ("\r\ne1lof\t(%s)(%s)\t", (u3<s(0)(0)(0)>[&] & 0x0004) ? "RISE" : "CLEAR", 
			(mu3<s(0)(0)(0)>[&] & 0x0004) ? "RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\r\ne1lom\t(%s)(%s)\t", (u3<s(0)(0)(0)>[&] & 0x0002) ? "RISE" : "CLEAR", 
			(mu3<s(0)(0)(0)>[&] & 0x0002) ? "RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\r\ne1rdi\t(%s)(%s)\t", (u3<s(0)(0)(0)>[&] & 0x0001) ? "RISE" : "CLEAR", 
			(mu3<s(0)(0)(0)>[&] & 0x0001) ? "RISE" : "CLEAR");
    printf<s(0)(0)(0)>[&] ("\r\ne1ais\t(%s)(%s)\t", (u3<s(0)(0)(0)>[&] & 0x0008) ? "RISE" : "CLEAR", 
			(mu3<s(0)(0)(0)>[&] & 0x0008) ? "RISE" : "CLEAR");


 


	u4<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 0x12);
	mu4<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (0, 0x12);
    printf<s(0)(0)(0)>[&] ("\r\ne1los\t(%x)(%x)\t", (u4<s(0)(0)(0)>[&]), (mu4<s(0)(0)(0)>[&]));

    printf<s(0)(0)(0)>[&] ("\r\n______________________________________________________+++");
    printf<s(0)(0)(0)>[&] ("\r\n");

	return 0;
}

char *
cah_em4_fid2name<s(0)(0)(0)>[&] (int id<s(0)(0)(0)>[&], char *pname<s(0)(0)(0)>[&])
{
    char *name<s(0)(0)(0)>[&] =(D2) pname<s(0)(0)(0)>[&];

    switch (id<s(0)(0)(0)>[&])
    {
    case 111:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_EnableRetiming");
        break;
    case 1:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetTransPsl");
        break;
    case 2:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetExpPsl");
        break;
    case 3:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetRcvPsl");
        break;
    case 4:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_EnablePlm");
        break;
    case 5:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetTransTti");
        break;
    case 6:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetExpTti");
        break;
    case 7:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetAccTti");
        break;
    case 8:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_EnableTim");
        break;
    case 9:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetTransTtiMode");
        break;
    case 10:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetTransTti");
        break;
    case 11:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetPdhPortMode");
        break;
    case 12:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetPortType");
        break;
    case 13:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetPortLoopback");
        break;


    case 14:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_EnablePort");
        break;
    case 15:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetPortState");
        break;

    case 16:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_PrbsEnable");
        break;
    case 17:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetPrbsMode");
        break;
    case 18:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetPrbsMode");
        break;
    case 19:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_GetPrbsErrCount");
        break;
    case 20:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_ForceInsertAis");
        break;
    case 21:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_ForceInsertRdi");
        break;

    case 24:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_BlockAIS");
        break;


    case 25:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SelectFrame");
        break;
    case 26:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_EnableLOMLOF");
        break;

    case 99:
        sprintf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%s", "EM4_SetRcvTtiMode");
        break;
    default:
        printf<s(0)(0)(0)>[&] (pname<s(0)(0)(0)>[&], "%d", id<s(0)(0)(0)>[&]);
        break;
    }

    return (name<s(0)(0)(0)>[&]);
}


 


















char *
cah_em4_id2name<s(0)(0)(0)>[&] (int id<s(0)(0)(0)>[&])
{
    if ((32  != id<s(0)(0)(0)>[&])
        && (34  != id<s(0)(0)(0)>[&])
        && (36  != id<s(0)(0)(0)>[&])
        && (37  != id<s(0)(0)(0)>[&])
        && (38  != id<s(0)(0)(0)>[&])
        && (42  != id<s(0)(0)(0)>[&])
        && (39  != id<s(0)(0)(0)>[&])
        && (69  != id<s(0)(0)(0)>[&])
        && (91  != id<s(0)(0)(0)>[&])
        && (92  != id<s(0)(0)(0)>[&])
        && (230  != id<s(0)(0)(0)>[&])
        && (231  != id<s(0)(0)(0)>[&])
        && (232  != id<s(0)(0)(0)>[&])
        && (233  != id<s(0)(0)(0)>[&]) && (235  != id<s(0)(0)(0)>[&]))
    {
        printf<s(0)(0)(0)>[&] ("\r\ncah_em4_id2name: unknown id(%d)", id<s(0)(0)(0)>[&]);
        if (g_fflag<s(0)(0)(0)>[&])
        {
            logBackN<s(0)(0)(0)>[&] ("unkonwn id", 5);
            g_fflag<s(0)(0)(0)>[&] = 0;
        }
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "unknown id");
        return g_aname<s(0)(0)(0)>[&];
    }

 








    switch (id<s(0)(0)(0)>[&])
    {
    case 91 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-nslip");
        break;
    case 92 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-pslip");
        break;
    case 32 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "tu-lop");
        break;
    case 34 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "tu-ais");
        break;
    case 36 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lp-tim");
        break;
    case 37 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lp-uneq");
        break;
    case 38 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lp-rdi");
        break;
    case 42 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lp-rfi");
        break;
    case 39 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lp-plm");
        break;
    case 69 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-los");
        break;
         


    case 230 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-lof");
        break;
    case 231 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-lom");
        break;
    case 232 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-rdi");
        break;
    case 235 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "lpvc_tlct");
        break;
    case 233 :
        sprintf<s(0)(0)(0)>[&] (g_aname<s(0)(0)(0)>[&], "%s", "ppi-crc");
        break;
    default:
        break;
    }
    return g_aname<s(0)(0)(0)>[&];
}


 


int
cah_em4_isPDHRiseOrClear<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].e1state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x0001 );
}


 


int
cah_em4_isRiseOrClear<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x0001 );
}


int
cah_em4_isPDHAlmRPTNow<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].e1state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x8000 );
}


int
cah_em4_isAlmRPTNow<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x8000 );
}

int
cah_em4_isAlmForced<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] == 1 );
}


int
cah_em4_isPDHAlmForced<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] == 1 );
}


void
cah_em4_clearAlmForced<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&])
{
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
}






BOOL<s(0)(0)(0)>[T]
cah_em4_isPDHAlmSet<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].e1state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x0001 );
}


BOOL<s(0)(0)(0)>[T]
cah_em4_isAlmSet<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].state<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]] & 0x0001 );
}

int
cah_em4_isEntLive<s(0)(0)(0)>[&] (int fd<s(0)(0)(0)>[&])
{
    return (eEm4EntAct<s(0)(0)(0)>[&] == gppCahEm4CfgVar<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]->state<s(0)(0)(0)>[&]) ? 1 : 0;
}




 


int
cah_em4_isCardOn<s(0)(0)(0)>[&] (int instance<s(0)(0)(0)>[&])
{
    if (SDD_BOARD_PRESENT<s(0)(0)(0)>[&] == SDD_GetBoardPresence<s(0)(0)(0)>[&] ((CTD_SlotToInstance<s(0)(0)(0)>[&]( instance<s(0)(0)(0)>[&] )) ))
    {
        return 1;
    }
    else
    {
        if (33 == gCahEm4DebugLevel<s(0)(0)(0)>[&])
            printf<s(0)(0)(0)>[&] ("\r\niscardon: inst(%d) FALL-OFF", instance<s(0)(0)(0)>[&]);
        return 0;
    }
    return 1;
}




 

































unsigned short
cah_em4_getPlm<s(0)(0)(0)>[&] (ALARM_REGISTER_T<s(0)(0)(0)>[T] * alarmCtrlReg<s(0)(0)(0)>[&])
{
    return (alarmCtrlReg<s(0)(0)(0)>[&]->alarmCtrlBit<s(0)(0)(0)>[&].plm<s(0)(0)(0)>[&]);
}


unsigned short
cah_em4_getUneq<s(0)(0)(0)>[&] (ALARM_REGISTER_T<s(0)(0)(0)>[T] * alarmCtrlReg<s(0)(0)(0)>[&])
{
    return (alarmCtrlReg<s(0)(0)(0)>[&]->alarmCtrlBit<s(0)(0)(0)>[&].uneq<s(0)(0)(0)>[&]);
}

unsigned short
cah_em4_getTim<s(0)(0)(0)>[&] (ALARM_REGISTER_T<s(0)(0)(0)>[T] * alarmCtrlReg<s(0)(0)(0)>[&])
{
    return (alarmCtrlReg<s(0)(0)(0)>[&]->alarmCtrlBit<s(0)(0)(0)>[&].tim<s(0)(0)(0)>[&]);
}


unsigned short
cah_em4_getRdi<s(0)(0)(0)>[&] (ALARM_REGISTER_T<s(0)(0)(0)>[T] * alarmCtrlReg<s(0)(0)(0)>[&])
{
    return (alarmCtrlReg<s(0)(0)(0)>[&]->alarmCtrlBit<s(0)(0)(0)>[&].rdi<s(0)(0)(0)>[&]);
}

unsigned short
cah_em4_getRfi<s(0)(0)(0)>[&] (ALARM_REGISTER_T<s(0)(0)(0)>[T] * alarmCtrlReg<s(0)(0)(0)>[&])
{
    return (alarmCtrlReg<s(0)(0)(0)>[&]->alarmCtrlBit<s(0)(0)(0)>[&].rfi<s(0)(0)(0)>[&]);
}


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_GetSlip<s(0)(0)(0)>[&] (int dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] * pPSlip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] * pNSlip<s(0)(0)(0)>[&])
{
    unsigned short slip<s(0)(0)(0)>[&] =(D2) 0;
    void *base<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  byPortNo<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  byPortNo<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (byPortNo<s(0)(0)(0)>[&]) - 1;
       base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, byPortNo<s(0)(0)(0)>[&]);

       slip<s(0)(0)(0)>[&] = cah_em4_readDemapper<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], (0x05 << 10) | 0X02 );
    *pPSlip<s(0)(0)(0)>[&] = ((slip<s(0)(0)(0)>[&] & 0xff00) >> 8);       
    *pNSlip<s(0)(0)(0)>[&] = (slip<s(0)(0)(0)>[&] & 0x00ff);      

    cah_em4_trace<s(0)(0)(0)>[&] (21, "%s: entity(%d), port(%d), base(%x), reg(%x), val(%x)",
                   __FUNCTION__<s(0)(0)(0)>[&], 0, byPortNo<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], (0x05 << 10) | 0X02 , slip<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}


int
cah_em4_simslip<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int n<s(0)(0)(0)>[&], int flag<s(0)(0)(0)>[&])
{
    int i<s(0)(0)(0)>[&] =(D2) 0;
    unsigned int pslip<s(0)(0)(0)>[&],(D1:pslip:0) nslip<s(0)(0)(0)>[&];(D1:nslip:0)

    if (0 == flag<s(0)(0)(0)>[&])
    {
        return 0;
    }

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < n<s(0)(0)(0)>[&]; i<s(0)(0)(0)>[&]++)
    {
        taskDelay<s(0)(0)(0)>[&] (100);
        cah_em4_GetSlip<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], &pslip<s(0)(0)(0)>[&], &nslip<s(0)(0)(0)>[&]);
        printf<s(0)(0)(0)>[&] ("\r\nnslip(%d), pslip(%d)", nslip<s(0)(0)(0)>[&], pslip<s(0)(0)(0)>[&]);
    }
    return 0;
}



BOOL<s(0)(0)(0)>[T]
cah_em4_isTTI16Byte<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], int ulChip<s(0)(0)(0)>[&], int ulPort<s(0)(0)(0)>[&])
{
    return (PbTIModeType_mode16Byte<s(0)(0)(0)>[&] == pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strRcvJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Mode<s(0)(0)(0)>[&]);

}


BOOL<s(0)(0)(0)>[T]
cah_em4_isTimEnable<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], int ulChip<s(0)(0)(0)>[&], int ulPort<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bTimEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]]);
}




BOOL<s(0)(0)(0)>[T]
cah_em4_isPLMEnable<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], int ulChip<s(0)(0)(0)>[&], int ulPort<s(0)(0)(0)>[&])
{
    return (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bPlmEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]]);
}

 


UINT16<s(0)(0)(0)>[T]
cah_em4_getAlarmId<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    UINT16<s(0)(0)(0)>[T] almID<s(0)(0)(0)>[&];(D1:almID:0)

    almID<s(0)(0)(0)>[&] = pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].almID<s(0)(0)(0)>[&][almNum<s(0)(0)(0)>[&]];

    return almID<s(0)(0)(0)>[&];
}






BOOL<s(0)(0)(0)>[T]
cah_em4_isPDHAlarmRised<s(0)(0)(0)>[&] (UINT16<s(0)(0)(0)>[T] wTemp<s(0)(0)(0)>[&], CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&],
                         UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return (wTemp<s(0)(0)(0)>[&] && (!cah_em4_isPDHAlmSet<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], almNum<s(0)(0)(0)>[&])));
}


 






BOOL<s(0)(0)(0)>[T]
cah_em4_isAlarmRised<s(0)(0)(0)>[&] (UINT16<s(0)(0)(0)>[T] wTemp<s(0)(0)(0)>[&], CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&],
                      int almNum<s(0)(0)(0)>[&])
{
    return (wTemp<s(0)(0)(0)>[&] && (!cah_em4_isAlmSet<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], almNum<s(0)(0)(0)>[&])));
}


BOOL<s(0)(0)(0)>[T]
cah_em4_isAlarmCleared<s(0)(0)(0)>[&] (UINT16<s(0)(0)(0)>[T] wTemp<s(0)(0)(0)>[&], CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&],
                        int almNum<s(0)(0)(0)>[&])
{
    return ((!wTemp<s(0)(0)(0)>[&]) && (cah_em4_isAlmSet<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], almNum<s(0)(0)(0)>[&])));
}

BOOL<s(0)(0)(0)>[T]
cah_em4_isPDHAlarmCleared<s(0)(0)(0)>[&] (UINT16<s(0)(0)(0)>[T] wTemp<s(0)(0)(0)>[&], CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&],
                           UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], int almNum<s(0)(0)(0)>[&])
{
    return ((!wTemp<s(0)(0)(0)>[&]) && (cah_em4_isPDHAlmSet<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], almNum<s(0)(0)(0)>[&])));
}

int
cah_em4_getAlarmType<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&],
                      UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], UINT16<s(0)(0)(0)>[T] almID<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] * almType<s(0)(0)(0)>[&])
{

    memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( almType<s(0)(0)(0)>[&] ), (  0 ), (  sizeof (almType<s(0)(0)(0)>[&]) )) ;
    switch (almID<s(0)(0)(0)>[&])
    {
    case 91 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  9 + 1 ) <= 0) ? 0 : (  9 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "PPI-NSLIP" , ((int)(  9 + 1 ) <= 0) ? 0 : (  9 + 1 )-1)) ;
        break;
    case 92 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  9 + 1 ) <= 0) ? 0 : (  9 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "PPI-PSLIP" , ((int)(  9 + 1 ) <= 0) ? 0 : (  9 + 1 )-1)) ;
        break;
    case 38 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-RDI" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        if (0)
            if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bRestrainRDI<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]])
            {
                return -1;
            }
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-RDI" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 42 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-RFI" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        if (0)
            if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bRestrainRDI<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]])
            {
                return -1;
            }
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-RFI" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 34 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "TU-AIS" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 32 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "TU-LOP" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 36 :
         





        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-TIM" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 39 :
         





        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-PLM" , ((int)(  6 + 1 ) <= 0) ? 0 : (  6 + 1 )-1)) ;
        break;
    case 37 :
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  8 + 1 ) <= 0) ? 0 : (  8 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "LP-UNREQ" , ((int)(  8 + 1 ) <= 0) ? 0 : (  8 + 1 )-1)) ;
        break;
    default:
        (((char*) almType<s(0)(0)(0)>[&] )[((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1] = '\0', strncpy<s(0)(0)(0)>[&]( almType<s(0)(0)(0)>[&] ,   "UNKNOWN" , ((int)(  7 + 1 ) <= 0) ? 0 : (  7 + 1 )-1)) ;
        break;
    }

    return 0;
}


FMA_ALM_STATE<s(0)(0)(0)>[T]
cah_em4_getPlmStatus<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&],
                      UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&])
{
    if (0  == pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bPlmEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]])
    {
        return FMA_ALM_CLEAR<s(0)(0)(0)>[&];
    }

     


    return state<s(0)(0)(0)>[&];
}


FMA_ALM_STATE<s(0)(0)(0)>[T]
cah_em4_getTimStatus<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&],
                      UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], FMA_ALM_STATE<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&])
{
    if (0  == pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bTimEnable<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]])
    {
        return FMA_ALM_CLEAR<s(0)(0)(0)>[&];
    }

    if (PbTIModeType_mode16Byte<s(0)(0)(0)>[&] != pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].strRcvJ2<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].J2Mode<s(0)(0)(0)>[&])
    {
        return FMA_ALM_CLEAR<s(0)(0)(0)>[&];
    }

     


    return state<s(0)(0)(0)>[&];
}


void
cah_em4_addSsfFc<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;


    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].pohAlm<s(0)(0)(0)>[&][port<s(0)(0)(0)>[&]].e1ssfFc<s(0)(0)(0)>[&]++;

}


void
cah_em4_Dpr<s(0)(0)(0)>[&] ()
{
    unsigned int entity<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    int instance<s(0)(0)(0)>[&] =(D2) 0;
    int fd<s(0)(0)(0)>[&] =(D2) 0;

    while (1)
    {
         


        if (!gbCahEm4RunPollingTask<s(0)(0)(0)>[&][1 ])
        {
            taskDelay<s(0)(0)(0)>[&] (100);
            printf<s(0)(0)(0)>[&] ("\r\ngbCahEm4RunPollingTask[EM4_DPR_TASK_ID]");
            continue;
        }
        entity<s(0)(0)(0)>[&] = gCahEm4TribVar<s(0)(0)(0)>[&].latchent<s(0)(0)(0)>[&];

        if ((( entity<s(0)(0)(0)>[&]  >= ((1) ) )) )
        {
            printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 5185);
            continue;
        }

        if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&])))
        {
            printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 5191);
            continue;
        }

        fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
        if (eEm4EntAct<s(0)(0)(0)>[&] != pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&])
        {
            printf<s(0)(0)(0)>[&] ("\r\ncah_em4_Dpr!  entity(%d) NOT active", entity<s(0)(0)(0)>[&]);
            continue;
        }

        instance<s(0)(0)(0)>[&] = (CTD_SlotToInstance<s(0)(0)(0)>[&]((  entity<s(0)(0)(0)>[&]  ) )) ;

        if (EM4_ENTITY_DELATCH<s(0)(0)(0)>[&] == gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]])
        {
            printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 5206);
            continue;
        }
        else
        {
            printf<s(0)(0)(0)>[&] ("\r\nset DELATCH");
            gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]] = EM4_ENTITY_DELATCH<s(0)(0)(0)>[&];
        }

        cah_em4_trace<s(0)(0)(0)>[&] (20, "%s detach entity:%d status:%d !!! \r\n", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&],
                       gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]   ]);
    }
}

int
pbFpgaIntrEnable<s(0)(0)(0)>[&] (int handle<s(0)(0)(0)>[&])
{
    return 0 ;
}

int
pbFpgaIsrHookAdd<s(0)(0)(0)>[&] (int fpga<s(0)(0)(0)>[&], int bank<s(0)(0)(0)>[&], int device<s(0)(0)(0)>[&], FPGA_HOOK_FUNC<s(0)(0)(0)>[T] usrHookFunc<s(0)(0)(0)>[&],
                  FPGA_HOOK_ARG<s(0)(0)(0)>[T] usrHookArg<s(0)(0)(0)>[&])
{
    return 0 ;
}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_intConnect<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
     
    int fpga<s(0)(0)(0)>[&],(D1:fpga:0) bank<s(0)(0)(0)>[&],(D1:bank:0) device<s(0)(0)(0)>[&];(D1:device:0)
    int fd<s(0)(0)(0)>[&] =(D2) 0;


    if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&])))
    {
         
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }
     
    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    fpga<s(0)(0)(0)>[&] = 1;
    bank<s(0)(0)(0)>[&] = 0;
    device<s(0)(0)(0)>[&] = ( entity<s(0)(0)(0)>[&] )  - 1;
    gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]] =
        pbFpgaIsrHookAdd<s(0)(0)(0)>[&] (fpga<s(0)(0)(0)>[&], bank<s(0)(0)(0)>[&], device<s(0)(0)(0)>[&], (FPGA_HOOK_FUNC<s(0)(0)(0)>[T]) cah_em4_isrFunc<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&]);

    if (((FPGA_HANDLE<s(0)(0)(0)>[T])(-1))  == gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]])
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 5258);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }
    printf<s(0)(0)(0)>[&] ("\r\n126xe1rt entity(%d) interrupt handler installed ok", entity<s(0)(0)(0)>[&]);
     
    if (0  != pbFpgaIntrEnable<s(0)(0)(0)>[&] (gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]))
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 5265);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    pbFpgaIsrEnable<s(0)(0)(0)>[&] (fpga<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}


void
cah_em4_init_nothing<s(0)(0)(0)>[&] ()
{
    static int flag<s(0)(0)(0)>[&] =(D2) 1;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    if (flag<s(0)(0)(0)>[&])
    {
        memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( &gCahEm4TribVar<s(0)(0)(0)>[&] ), (  0 ), (  sizeof (CAH_EM4_ENTITY_TRIB_T<s(0)(0)(0)>[T]) )) ;
        for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < ((1) ) ; i<s(0)(0)(0)>[&]++)
        {
            gppCahEm4CfgVar<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = 0;
            printf<s(0)(0)(0)>[&] ("\r\n%s(): set gppCahEm4CfgVar[%d] to 0", __FUNCTION__<s(0)(0)(0)>[&], i<s(0)(0)(0)>[&]);
        }
        flag<s(0)(0)(0)>[&] = 0;
    }
}

BOOL<s(0)(0)(0)>[T]
cah_em4_IsLatchIntEnable<s(0)(0)(0)>[&] (UINT32<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&] =(D2) 0 ;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], 100);
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_ReadRegister<s(0)(0)(0)>[&] ((DWORD<s(0)(0)(0)>[T]) baseaddr<s(0)(0)(0)>[&], (((0x00 << 10) | 0X09) ), &u<s(0)(0)(0)>[&], 0xffff, CAH_REG_ATTRBT_RO<s(0)(0)(0)>[&]);



    if (0x0001 & u<s(0)(0)(0)>[&])
    {
        bEnable<s(0)(0)(0)>[&] = 1 ;
    }
    else
    {
        bEnable<s(0)(0)(0)>[&] = 0 ;
    }

    return bEnable<s(0)(0)(0)>[&];
}



void
cah_em4_enableLatchInt<s(0)(0)(0)>[&] (UINT32<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] Enable<s(0)(0)(0)>[&])
{
    void *baseAddr<s(0)(0)(0)>[&] =(D2) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], 1);

    if (Enable<s(0)(0)(0)>[&])
    {
        cah_em4_enableLatchIntr<s(0)(0)(0)>[&] (baseAddr<s(0)(0)(0)>[&], 1);
    }
    else
    {
        cah_em4_enableLatchIntr<s(0)(0)(0)>[&] (baseAddr<s(0)(0)(0)>[&], 0);
    }
}


void
cah_em4_isrFunc<s(0)(0)(0)>[&] (FPGA_HANDLE<s(0)(0)(0)>[T] handle<s(0)(0)(0)>[&], FPGA_HOOK_ARG<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    int fd<s(0)(0)(0)>[&] =(D2) 0;

    if ((( entity<s(0)(0)(0)>[&]  >= ((1) ) )) )
    {
        return;
    }

    cah_em4_enableLatchInt<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], 0 );

     



    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    gCahEm4TribVar<s(0)(0)(0)>[&].IntCount<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]   ]++;
    g_isrcount<s(0)(0)(0)>[&]++;
    gCahEm4TribVar<s(0)(0)(0)>[&].latchent<s(0)(0)(0)>[&] = entity<s(0)(0)(0)>[&];
    g_cah_em4entity<s(0)(0)(0)>[&] = entity<s(0)(0)(0)>[&];
}


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
cah_em4_intUnConnect<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
     
    int ReturnValue<s(0)(0)(0)>[&];(D1:ReturnValue:0)
    int fd<s(0)(0)(0)>[&] =(D2) 0;


    if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&])))
    {
         
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

     
    fd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    if (((FPGA_HANDLE<s(0)(0)(0)>[T])(-1))  == gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]])
    {
         
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    ReturnValue<s(0)(0)(0)>[&] = pbFpgaIntrDisable<s(0)(0)(0)>[&] (gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]);
    if (ReturnValue<s(0)(0)(0)>[&] != 0 )
    {
         
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    ReturnValue<s(0)(0)(0)>[&] = pbFpgaIsrHookDel<s(0)(0)(0)>[&] (gCahEm4TribVar<s(0)(0)(0)>[&].fpgaHanle<s(0)(0)(0)>[&][fd<s(0)(0)(0)>[&]]);
    if (ReturnValue<s(0)(0)(0)>[&] != 0 )
    {
         
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



void
cah_em4_latch<s(0)(0)(0)>[&] ()
{
    UINT8<s(0)(0)(0)>[T] fd<s(0)(0)(0)>[&]   ;(D1:fd:0)
    CAH_EM4_ENTITY_LATCH_T<s(0)(0)(0)>[T] Status<s(0)(0)(0)>[&];(D1:Status:0)
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    UINT16<s(0)(0)(0)>[T] intCount<s(0)(0)(0)>[&];(D1:intCount:0)
    INT32<s(0)(0)(0)>[T] intLockRet<s(0)(0)(0)>[&];(D1:intLockRet:0)
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int instance<s(0)(0)(0)>[&] =(D2) 0;
    int fdd<s(0)(0)(0)>[&] =(D2) 0;

    while (1)
    {
        taskDelay<s(0)(0)(0)>[&] (100);

        if (!gbCahEm4RunPollingTask<s(0)(0)(0)>[&][2 ])
        {
            printf<s(0)(0)(0)>[&] ("\r\ncah_em4_latch (): gbCahEm4RunPollingTask[EM4_EPG_TASK_ID] NULL");
            continue;
        }

        for (fd<s(0)(0)(0)>[&] = 0; fd<s(0)(0)(0)>[&] < ((1) ) ; fd<s(0)(0)(0)>[&]++)
        {
            if (!cah_em4_isEntLive<s(0)(0)(0)>[&] (fd<s(0)(0)(0)>[&]))
            {
                cah_em4_trace<s(0)(0)(0)>[&] (2, "FD(%2d), state NOT active, continue", fd<s(0)(0)(0)>[&]);
                continue;
            }

            if (!cah_em4_isCardOn<s(0)(0)(0)>[&] (( cah_em4_fd2ent<s(0)(0)(0)>[&] (fd<s(0)(0)(0)>[&]) ) ))
            {
                printf<s(0)(0)(0)>[&] ("\r\nFD(%2d), card NOT on", fd<s(0)(0)(0)>[&]);
                continue;
            }

             
            pEntity<s(0)(0)(0)>[&] = cah_em4_fd2entptr<s(0)(0)(0)>[&] (fd<s(0)(0)(0)>[&]);
            cah_em4_trace<s(0)(0)(0)>[&] (22, "%s, entity(%d)", __FUNCTION__<s(0)(0)(0)>[&], pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]);

            Status<s(0)(0)(0)>[&] = CAH_EM4_getLatchStatus<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]);
             
            fdd<s(0)(0)(0)>[&] = cah_em4_ent2fd<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]);
            baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&], 100);
            instance<s(0)(0)(0)>[&] = (CTD_SlotToInstance<s(0)(0)(0)>[&]((  pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]  ) )) ;

            if (EM4_ENTITY_LATCH<s(0)(0)(0)>[&] == Status<s(0)(0)(0)>[&])
            {
                if ((EM4_ENTITY_LATCH<s(0)(0)(0)>[&] != gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ])
                    || (gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][   fdd<s(0)(0)(0)>[&]]))
                {
                    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][   fdd<s(0)(0)(0)>[&]] = EM4_ENTITY_LATCH<s(0)(0)(0)>[&];

                    printf<s(0)(0)(0)>[&] ("\r\nEM4_EpgPoll fd %d Latch Attached! \r\n", fd<s(0)(0)(0)>[&]);
                }

                if (gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ])
                {
                    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ] = 0 ;
                }

                if (!cah_em4_IsLatchIntEnable<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]))
                {
                     
                    cah_em4_enableLatchIntr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], 1);
                }
            }
            else if (EM4_ENTITY_DELATCH<s(0)(0)(0)>[&] == Status<s(0)(0)(0)>[&])
            {
                if (cah_em4_IsLatchIntEnable<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&]))
                {
                     
                    cah_em4_enableLatchIntr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], 0);

                }

                if ((EM4_ENTITY_DELATCH<s(0)(0)(0)>[&] != gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ])
                    || (gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][   fdd<s(0)(0)(0)>[&]]))
                {
                    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchStatus<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ] = EM4_ENTITY_DELATCH<s(0)(0)(0)>[&];
                    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ] = 0 ;

                    printf<s(0)(0)(0)>[&] ("\r\nEM4_EpgPoll fd %d Latch Detached! \r\n", fd<s(0)(0)(0)>[&]);
                }

                if (gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ])
                {
                    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ] = 0 ;
                }
            }

            intLockRet<s(0)(0)(0)>[&] = intLock<s(0)(0)(0)>[&] ();
            intCount<s(0)(0)(0)>[&] = gCahEm4TribVar<s(0)(0)(0)>[&].IntCount<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ];

            if (intCount<s(0)(0)(0)>[&] < 80 )
            {
                intLockRet<s(0)(0)(0)>[&] = intLock<s(0)(0)(0)>[&] ();
                gCahEm4TribVar<s(0)(0)(0)>[&].IntCount<s(0)(0)(0)>[&][fdd<s(0)(0)(0)>[&]   ] = 0;
            }
            else
            {
                printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", fd<s(0)(0)(0)>[&], "cah_126e1.c", 5502);
            }
        }
    }
}



 


int
CAH_EM4_enableLOMLOF<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&], int chip<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], int enable<s(0)(0)(0)>[&])
{
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
     


    cah_em4_trace<s(0)(0)(0)>[&] (36, "%s: entity(%d), port(%d), enalbe(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], enable<s(0)(0)(0)>[&]);

    if (0 > port<s(0)(0)(0)>[&] || 62 < port<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s: port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_enableLOMLOF<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], enable<s(0)(0)(0)>[&], 0, 26, __FUNCTION__<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }


    cah_em4_trace<s(0)(0)(0)>[&] (35, "%s: entity(%d), port(%d), enalbe(%d)", __FUNCTION__<s(0)(0)(0)>[&], entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], enable<s(0)(0)(0)>[&]);
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][chip<s(0)(0)(0)>[&]].isRptLOM<s(0)(0)(0)>[&][port<s(0)(0)(0)>[&]] = enable<s(0)(0)(0)>[&];
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][chip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][port<s(0)(0)(0)>[&]] = 1 ;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}




PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_initModule<s(0)(0)(0)>[&] ()
{
    return cah_em4_initModule<s(0)(0)(0)>[&] ();
}

int cah_em4_initPortMap<s(0)(0)(0)>[&] (void);(D1:cah_em4_initPortMap:0)
PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_loadModule<s(0)(0)(0)>[&] ()
{
    static int flag<s(0)(0)(0)>[&] =(D2) 0;

    if (flag<s(0)(0)(0)>[&]) return 0;
    flag<s(0)(0)(0)>[&] = 1;
    cah_em4_init_nothing<s(0)(0)(0)>[&] ();
    cah_em4_initPortMap<s(0)(0)(0)>[&] ();
    return cah_em4_loadModule<s(0)(0)(0)>[&] ();
}


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_ForceAIS<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], int nport<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] ais<s(0)(0)(0)>[&])
{



    void *base<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int port<s(0)(0)(0)>[&] =(D2) 0;

    port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nport<s(0)(0)(0)>[&]) - 1;;

    if (0 > port<s(0)(0)(0)>[&] || 62 < port<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEM4_ForceAIS : port(%d) overflow", port<s(0)(0)(0)>[&]);
        return (((WORD<s(0)(0)(0)>[T])0x1) );
    }

    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    if (gCahEm4SelectPort<s(0)(0)(0)>[&] == port<s(0)(0)(0)>[&])
    {
        cah_em4_trace<s(0)(0)(0)>[&] (40 , "\r\n%s(): entity(%d), port(%d), base(%p)", __FUNCTION__<s(0)(0)(0)>[&],
                       entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&]);
    }
    cah_em4_forceAis<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], ais<s(0)(0)(0)>[&]);
    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].isFrcais<s(0)(0)(0)>[&][port<s(0)(0)(0)>[&]] = ais<s(0)(0)(0)>[&];

    return (((WORD<s(0)(0)(0)>[T])0x0) );


    return 0;

}

 





PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_forceRDI<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], int nport<s(0)(0)(0)>[&], eEM4SWITCH<s(0)(0)(0)>[T] rdi<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    void *base<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int port<s(0)(0)(0)>[&] =(D2) 0;

    port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nport<s(0)(0)(0)>[&]) - 1;;

    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    cah_em4_trace<s(0)(0)(0)>[&] (34, "\r\nentity(%d), port(%d), base(%p), rdi(%d)", entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], base<s(0)(0)(0)>[&], rdi<s(0)(0)(0)>[&]);
    cah_em4_forceRdi<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], rdi<s(0)(0)(0)>[&]);

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntity<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].isFrcrdi<s(0)(0)(0)>[&][port<s(0)(0)(0)>[&]] = rdi<s(0)(0)(0)>[&];

    return (((WORD<s(0)(0)(0)>[T])0x0) );


    return 0;
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_EnableReTiming<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    void *base<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    {if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_EnableReTiming<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) bEnable<s(0)(0)(0)>[&], 0, 111, __FUNCTION__<s(0)(0)(0)>[&]);
    cah_em4_set_inloopretiming<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], eEM4_DISABLE<s(0)(0)(0)>[&]   ,
                                bEnable<s(0)(0)(0)>[&] ? eEM4_ENABLE<s(0)(0)(0)>[&] : eEM4_DISABLE<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

WORD<s(0)(0)(0)>[T] cah_em4_getTimingRef<s(0)(0)(0)>[&] (BYTE<s(0)(0)(0)>[T] mid_port<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] *byPort<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
    return 0;
}

int em4_queryPortFromSlot<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&]);(D1:slot:0)
int testgettiming<s(0)(0)(0)>[&] (byclocknum<s(0)(0)(0)>[&])
{
    BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&] =(D2) 0;
    BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&] =(D2) 0;

    CAH_EM4_GetTimingRef<s(0)(0)(0)>[&] (0, byclocknum<s(0)(0)(0)>[&], &byPortNo<s(0)(0)(0)>[&], &bEnable<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): byclock(%d), byPort(%d), enable(%d)", __FUNCTION__<s(0)(0)(0)>[&], byclocknum<s(0)(0)(0)>[&], byPortNo<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    return 0;
}

int g_testtiming<s(0)(0)(0)>[&] =(D2) 0;
int g_testtiming1<s(0)(0)(0)>[&] =(D2) 0;

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_GetTimingRef<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byClockNum<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * bEnable<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T]   wRtn<s(0)(0)(0)>[&]       =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;
    BYTE<s(0)(0)(0)>[T]	wRegValue<s(0)(0)(0)>[&] =(D2) 0x0;
    BYTE<s(0)(0)(0)>[T] port<s(0)(0)(0)>[&] =(D2) 0;  

    wRtn<s(0)(0)(0)>[&] = cah_Read8Reg<s(0)(0)(0)>[&](0x70000000 , 0x1b  + byClockNum<s(0)(0)(0)>[&], &wRegValue<s(0)(0)(0)>[&], 0x0F, CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
    port<s(0)(0)(0)>[&] = (wRegValue<s(0)(0)(0)>[&] & 0x7) + 1;
if (g_testtiming1<s(0)(0)(0)>[&])
printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%3d), wRegValue(%4x)", __FUNCTION__<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&] - 1, wRegValue<s(0)(0)(0)>[&]);
    if(!(wRegValue<s(0)(0)(0)>[&] & 0x08))
    {
		*bEnable<s(0)(0)(0)>[&] = 1 ;	
    }
    else
    {
		*bEnable<s(0)(0)(0)>[&] = 0 ;
		port<s(0)(0)(0)>[&] = 0;
    }
 
    if (0 == port<s(0)(0)(0)>[&]) 
    {
        *byPortNo<s(0)(0)(0)>[&] = 0;
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    } else {
        *byPortNo<s(0)(0)(0)>[&] = em4_queryPortFromSlot<s(0)(0)(0)>[&](port<s(0)(0)(0)>[&]);
if (g_testtiming1<s(0)(0)(0)>[&])
        printf<s(0)(0)(0)>[&] ("\r\n%s(): virtualport(%3d), realport(%3d)", __FUNCTION__<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], *byPortNo<s(0)(0)(0)>[&]);
    }

    { { if (DBG_GetLevel<s(0)(0)(0)>[&](  gCahDbgModuleNo<s(0)(0)(0)>[&] ,    CAH_DEBUG_LEVEL_CLOCK<s(0)(0)(0)>[&]  )) {printf<s(0)(0)(0)>[&]("[%s] %d: ", "cah_126e1.c", 5710); printf<s(0)(0)(0)>[&]   ("\r\n CAH_S14_GetTimingRef: Port = [%d], clock = [%d], wRegValue = [0x%x], bEnable = [%d]", *byPortNo<s(0)(0)(0)>[&] , byClockNum<s(0)(0)(0)>[&], wRegValue<s(0)(0)(0)>[&], *bEnable<s(0)(0)(0)>[&])  ;} if (DBG_NvGetLevel<s(0)(0)(0)>[&](  gCahDbgModuleNo<s(0)(0)(0)>[&] ,    CAH_DEBUG_LEVEL_CLOCK<s(0)(0)(0)>[&]  ))    ; } ; } ;    
 
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 


int em4_queryPortFromSlot<s(0)(0)(0)>[&](int slot<s(0)(0)(0)>[&])
{
    int port<s(0)(0)(0)>[&] =(D2) 0;
    void * base<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    if (4 >= slot<s(0)(0)(0)>[&])
    {
        base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, 1);     
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + (slot<s(0)(0)(0)>[&]-1) / 2);
        if ((slot<s(0)(0)(0)>[&]) % 2)
        {
            if ((0x3f)  == (u<s(0)(0)(0)>[&] & 0xff))
            {
                return 0;
            } else {
                return (u<s(0)(0)(0)>[&] & 0xff);
            }
        } else {
            if ((0x3f)  == ((u<s(0)(0)(0)>[&] & 0xff00)>>8))
            {
                return 0;
            } else {
                return ((u<s(0)(0)(0)>[&] & 0xff00)>>8);
            }
        }
    } else {
        base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, 100);     
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + (slot<s(0)(0)(0)>[&]-1-4) / 2);
if (g_testtiming1<s(0)(0)(0)>[&])
printf<s(0)(0)(0)>[&] ("\r\nbase(%p), u(%x), slot(%d),(slot-1-4)/2(%d)", base<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&], slot<s(0)(0)(0)>[&], (slot<s(0)(0)(0)>[&]-1-4)/2);
        if ((slot<s(0)(0)(0)>[&]) % 2)
        {
            if ((0x3f)  == (u<s(0)(0)(0)>[&] & 0xff))
            {
                return 0;
            } else {
                return (u<s(0)(0)(0)>[&] & 0xff) + 63;
            }
        } else {
            if ((0x3f)  == ((u<s(0)(0)(0)>[&] & 0xff00)>>8))
            {
                return 0;
            } else {
                return ((u<s(0)(0)(0)>[&] & 0xff00)>>8) + 63;
            }
        }
    }

    return (port<s(0)(0)(0)>[&]);
}

int g_timingVirtualSlot<s(0)(0)(0)>[&] [8];(D1:g_timingVirtualSlot:0)

int em4_getSlotFrom126port<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&], int enable<s(0)(0)(0)>[&])
{
    int slot<s(0)(0)(0)>[&] =(D2) 99;
    int n<s(0)(0)(0)>[&] =(D2) 0;
    void * base<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0, u1<s(0)(0)(0)>[&] =(D2) 0;


    n<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (port<s(0)(0)(0)>[&]) - 1;
    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&]);     
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 );
    u1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + 1);
    if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): EM4_RCK_0_1_SEL(%x),EM4_RCK_0_1_SEL+1(%x)", __FUNCTION__<s(0)(0)(0)>[&], u<s(0)(0)(0)>[&], u1<s(0)(0)(0)>[&]);

    
    if (0 <= port<s(0)(0)(0)>[&] && 62 >= port<s(0)(0)(0)>[&])
    {
        if ((u<s(0)(0)(0)>[&] & 0xff) == n<s(0)(0)(0)>[&]) 
        {            
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 0", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 0;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][0] = (0x3f) ;
                u<s(0)(0)(0)>[&] &= 0xff00;
                u<s(0)(0)(0)>[&] |= 0x00ff;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
            }
        }
        if (((u<s(0)(0)(0)>[&] & 0xff00) >> 8) == n<s(0)(0)(0)>[&]) 
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 1", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 1;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][1] = (0x3f) ;
                u<s(0)(0)(0)>[&] &= 0x00ff;
                u<s(0)(0)(0)>[&] |= 0xff00;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
            }
        }

        if ((u1<s(0)(0)(0)>[&] & 0xff) == n<s(0)(0)(0)>[&])         
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 2", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 2;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][2] = (0x3f) ;
                u1<s(0)(0)(0)>[&] &= 0xff00;
                u1<s(0)(0)(0)>[&] |= 0x00ff;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x200 )+1), u1<s(0)(0)(0)>[&]);
            }
        }
        if (((u1<s(0)(0)(0)>[&] & 0xff00) >> 8) == n<s(0)(0)(0)>[&])  
        { 
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 3", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 3;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][3] = (0x3f) ;
                u1<s(0)(0)(0)>[&] &= 0x00ff;
                u1<s(0)(0)(0)>[&] |= 0xff00;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x200 )+1), u1<s(0)(0)(0)>[&]);
            }
        }
    } else {
        if ((u<s(0)(0)(0)>[&] & 0xff) == n<s(0)(0)(0)>[&])
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 4", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 4;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][4] = (0x3f) ;
                u<s(0)(0)(0)>[&] &= 0xff00;
                u<s(0)(0)(0)>[&] |= 0x00ff;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ), u<s(0)(0)(0)>[&]);
            }
        }
        if (((u<s(0)(0)(0)>[&] & 0xff00) >> 8) == n<s(0)(0)(0)>[&])    
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 5", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 5;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][5] = (0x3f) ;
                u<s(0)(0)(0)>[&] &= 0x00ff;
                u<s(0)(0)(0)>[&] |= 0xff00;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ), u<s(0)(0)(0)>[&]);
            }
        }
        if ((u1<s(0)(0)(0)>[&] & 0xff) == n<s(0)(0)(0)>[&])            
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 6", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 6;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][6] = (0x3f) ;
                u1<s(0)(0)(0)>[&] &= 0xff00;
                u1<s(0)(0)(0)>[&] |= 0x00ff;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x200 ) + 1), u1<s(0)(0)(0)>[&]);
            }
        }
        if (((u1<s(0)(0)(0)>[&] & 0xff00) >> 8) == n<s(0)(0)(0)>[&])   
        {
            if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): found: 7", __FUNCTION__<s(0)(0)(0)>[&]);
            slot<s(0)(0)(0)>[&] = 7;
            if (0 == enable<s(0)(0)(0)>[&])
            {
                g_timingVirtualSlot<s(0)(0)(0)>[&][7] = (0x3f) ;
                u1<s(0)(0)(0)>[&] &= 0x00ff;
                u1<s(0)(0)(0)>[&] |= 0xff00;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (((0x05 << 10) | 0x200 ) + 1), u1<s(0)(0)(0)>[&]);
            }
        }
    }









     
    if (99 == slot<s(0)(0)(0)>[&])
    {
        if (0 <= port<s(0)(0)(0)>[&] && 62 >= port<s(0)(0)(0)>[&])
        {
            if ((u<s(0)(0)(0)>[&] & 0xff) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 0", __FUNCTION__<s(0)(0)(0)>[&]);
                u<s(0)(0)(0)>[&] &= 0xff00;
                u<s(0)(0)(0)>[&] |= n<s(0)(0)(0)>[&];
                slot<s(0)(0)(0)>[&] = 0;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if (((u<s(0)(0)(0)>[&] & 0xff00)>>8) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 1", __FUNCTION__<s(0)(0)(0)>[&]);
                u<s(0)(0)(0)>[&] &= 0xff;
                u<s(0)(0)(0)>[&] |= (n<s(0)(0)(0)>[&] << 8);
                slot<s(0)(0)(0)>[&] = 1;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if ((u1<s(0)(0)(0)>[&] & 0xff) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 2", __FUNCTION__<s(0)(0)(0)>[&]);
                u1<s(0)(0)(0)>[&] &= 0xff00;
                u1<s(0)(0)(0)>[&] |= n<s(0)(0)(0)>[&];
                slot<s(0)(0)(0)>[&] = 2;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + 1, u1<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if (((u1<s(0)(0)(0)>[&] & 0xff00)>>8) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 3", __FUNCTION__<s(0)(0)(0)>[&]);
                u1<s(0)(0)(0)>[&] &= 0xff;
                u1<s(0)(0)(0)>[&] |= (n<s(0)(0)(0)>[&] << 8);
                slot<s(0)(0)(0)>[&] = 3;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + 1, u1<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
        } else {
            if ((u<s(0)(0)(0)>[&] & 0xff) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 4", __FUNCTION__<s(0)(0)(0)>[&]);
                u<s(0)(0)(0)>[&] &= 0xff00;
                u<s(0)(0)(0)>[&] |= n<s(0)(0)(0)>[&];
                slot<s(0)(0)(0)>[&] = 4;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if (((u<s(0)(0)(0)>[&] & 0xff00)>>8) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 5", __FUNCTION__<s(0)(0)(0)>[&]);
                u<s(0)(0)(0)>[&] &= 0xff;
                u<s(0)(0)(0)>[&] |= (n<s(0)(0)(0)>[&] << 8);
                slot<s(0)(0)(0)>[&] = 5;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x200 , u<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if ((u1<s(0)(0)(0)>[&] & 0xff) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 6", __FUNCTION__<s(0)(0)(0)>[&]);
                u1<s(0)(0)(0)>[&] &= 0xff00;
                u1<s(0)(0)(0)>[&] |= n<s(0)(0)(0)>[&];
                slot<s(0)(0)(0)>[&] = 6;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + 1, u1<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
            if (((u1<s(0)(0)(0)>[&] & 0xff00)>>8) == (0x3f) )
            {
                if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): alloc: 7", __FUNCTION__<s(0)(0)(0)>[&]);
                u1<s(0)(0)(0)>[&] &= 0xff;
                u1<s(0)(0)(0)>[&] |= (n<s(0)(0)(0)>[&] << 8);
                slot<s(0)(0)(0)>[&] = 7;
                cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x05 << 10) | 0x200 ) + 1, u1<s(0)(0)(0)>[&]);
                goto allocend<s(0)(0)(0)>[&];
            }
        }
    }

allocend<s(0)(0)(0)>[&]:
    return (slot<s(0)(0)(0)>[&] + 1);
}

int g_timing<s(0)(0)(0)>[&] =(D2) 0;

int cah_em4_setTimingRef84<s(0)(0)(0)>[&] (port_mid<s(0)(0)(0)>[&], byClockNum<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T]   wRtn<s(0)(0)(0)>[&]       =(D2) ((WORD<s(0)(0)(0)>[T])0x0) ;
    int byPortNo<s(0)(0)(0)>[&] =(D2) port_mid<s(0)(0)(0)>[&];

if (g_timing<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): port_mid(%d)", __FUNCTION__<s(0)(0)(0)>[&], port_mid<s(0)(0)(0)>[&]);

    if (bEnable<s(0)(0)(0)>[&])
    {
    	 
    	wRtn<s(0)(0)(0)>[&] = cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,                      0x1b  + byClockNum<s(0)(0)(0)>[&],                      byPortNo<s(0)(0)(0)>[&],                      0x07,                      CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);




	     
    	wRtn<s(0)(0)(0)>[&] = cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,                      0x1b  + byClockNum<s(0)(0)(0)>[&],                      0x0,                      0x08,                      CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);




	
    } else {
    	
    	wRtn<s(0)(0)(0)>[&] = cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,                      0x1b  + byClockNum<s(0)(0)(0)>[&],                      0x07,                      0x07,                      CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);




	 
    	wRtn<s(0)(0)(0)>[&] = cah_Write8Reg<s(0)(0)(0)>[&] (0x70000000 ,                      0x1b  + byClockNum<s(0)(0)(0)>[&],                       0x0,                       0x08 ,                       CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);




	
    }
     
    return wRtn<s(0)(0)(0)>[&];
}

void cah_em4_InitTiming<s(0)(0)(0)>[&] (void)
{
    static int flag<s(0)(0)(0)>[&] =(D2) 0;

    if (flag<s(0)(0)(0)>[&] == 1)
    {   
        return ;
    }
   
    flag<s(0)(0)(0)>[&] = 1;
 
    cah_em4_wr<s(0)(0)(0)>[&] ((void *)(0x50000000) , (0x05 << 10) | 0x200 , (0x3f)  | ((0x3f)  << 8));
    cah_em4_wr<s(0)(0)(0)>[&] ((void *)(0x50000000) , (0x05 << 10) | 0x201 , (0x3f)  | ((0x3f)  << 8));
    cah_em4_wr<s(0)(0)(0)>[&] ((void *)(0x60000000) , (0x05 << 10) | 0x200 , (0x3f)  | ((0x3f)  << 8));
    cah_em4_wr<s(0)(0)(0)>[&] ((void *)(0x60000000) , (0x05 << 10) | 0x201 , (0x3f)  | ((0x3f)  << 8));
}

int cah_em4_initPortMap<s(0)(0)(0)>[&] (void)
{
    int i<s(0)(0)(0)>[&] =(D2) 0;

    memset<s(0)(0)(0)>[&] (g_phyportmap<s(0)(0)(0)>[&], 0, 4 * 130);
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 130; i<s(0)(0)(0)>[&] ++)
    {
        g_phyportmap<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = i<s(0)(0)(0)>[&];
    }

    g_phyportmap<s(0)(0)(0)>[&][9] = 9;
    g_phyportmap<s(0)(0)(0)>[&][10] = 10;
    g_phyportmap<s(0)(0)(0)>[&][11] = 11;
    g_phyportmap<s(0)(0)(0)>[&][12] = 12;
    g_phyportmap<s(0)(0)(0)>[&][34] = 34;
    g_phyportmap<s(0)(0)(0)>[&][35] = 35;
    g_phyportmap<s(0)(0)(0)>[&][39] = 39;
    g_phyportmap<s(0)(0)(0)>[&][40] = 40;
    g_phyportmap<s(0)(0)(0)>[&][41] = 41;
    g_phyportmap<s(0)(0)(0)>[&][42] = 42;
    g_phyportmap<s(0)(0)(0)>[&][43] = 43;
    g_phyportmap<s(0)(0)(0)>[&][44] = 44;
    g_phyportmap<s(0)(0)(0)>[&][63] = 63;
    g_phyportmap<s(0)(0)(0)>[&][64] = 64;


    return 0;
}



unsigned short em4_bpc_wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&]);(D1:val:0)
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetTimingRef<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPort<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byClockNum<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
    int port_mid<s(0)(0)(0)>[&] =(D2) 0 , n<s(0)(0)(0)>[&] =(D2) 0;
    void * base<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    BYTE<s(0)(0)(0)>[T] byPortCopy<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPort<s(0)(0)(0)>[&]), realport<s(0)(0)(0)>[&] =(D2) 0;
    BOOL<s(0)(0)(0)>[T] status<s(0)(0)(0)>[&];(D1:status:0)
    unsigned short c1<s(0)(0)(0)>[&] =(D2) 0, c2<s(0)(0)(0)>[&] =(D2) 0, ccc<s(0)(0)(0)>[&] =(D2) 0;
    unsigned char pt<s(0)(0)(0)>[&] =(D2) 0;

     
    {if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPort<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPort<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetTimingRef<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPort<s(0)(0)(0)>[&]), (int) byClockNum<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&], 1, __FUNCTION__<s(0)(0)(0)>[&]);
    
    if (0 == bEnable<s(0)(0)(0)>[&])
    {
        CAH_EM4_GetTimingRef<s(0)(0)(0)>[&] (0, byClockNum<s(0)(0)(0)>[&], &realport<s(0)(0)(0)>[&], &status<s(0)(0)(0)>[&]);
        byPortCopy<s(0)(0)(0)>[&] = realport<s(0)(0)(0)>[&];
        if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\nGetRef() GOT: byClockNum(%d), realport(%03d)",byClockNum<s(0)(0)(0)>[&], realport<s(0)(0)(0)>[&]); 
    }

    n<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPort<s(0)(0)(0)>[&])) - 1;
    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, byPortCopy<s(0)(0)(0)>[&]);     

    port_mid<s(0)(0)(0)>[&] = em4_getSlotFrom126port<s(0)(0)(0)>[&] (byPortCopy<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    if (g_testtiming<s(0)(0)(0)>[&]) printf<s(0)(0)(0)>[&] ("\r\n%s(): byPortCopy(%03d)(%03d), byClockNum(%d), en(%d), mid(%d)", __FUNCTION__<s(0)(0)(0)>[&], byPortCopy<s(0)(0)(0)>[&], byPort<s(0)(0)(0)>[&], byClockNum<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&], port_mid<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): byPortCopy(%03d)(%03d), byClockNum(%d), en(%d), mid(%d)", __FUNCTION__<s(0)(0)(0)>[&], byPortCopy<s(0)(0)(0)>[&], byPort<s(0)(0)(0)>[&], byClockNum<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&], port_mid<s(0)(0)(0)>[&]);








 
    c1<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (5, 0x200);
    pt<s(0)(0)(0)>[&] = (c1<s(0)(0)(0)>[&] & 0xff) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c1<s(0)(0)(0)>[&] &= 0xff00;
    c1<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&];

    pt<s(0)(0)(0)>[&] = ((c1<s(0)(0)(0)>[&] & 0xff00)>>8) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c1<s(0)(0)(0)>[&] &= 0xff;
    c1<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&] << 8;

 
    c2<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (5, 0x201);
    pt<s(0)(0)(0)>[&] = (c2<s(0)(0)(0)>[&] & 0xff) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c2<s(0)(0)(0)>[&] &= 0xff00;
    c2<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&];

    pt<s(0)(0)(0)>[&] = ((c2<s(0)(0)(0)>[&] & 0xff00)>>8) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c2<s(0)(0)(0)>[&] &= 0xff;
    c2<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&] << 8;


    em4_bpc_wr<s(0)(0)(0)>[&] (0x03, 0x07, c1<s(0)(0)(0)>[&]);
    em4_bpc_wr<s(0)(0)(0)>[&] (0x03, 0x08, c2<s(0)(0)(0)>[&]);


 

 
    c1<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (5, 0x200);
    pt<s(0)(0)(0)>[&] = (c1<s(0)(0)(0)>[&] & 0xff) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c1<s(0)(0)(0)>[&] &= 0xff00;
    c1<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&];

    pt<s(0)(0)(0)>[&] = ((c1<s(0)(0)(0)>[&] & 0xff00)>>8) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c1<s(0)(0)(0)>[&] &= 0xff;
    c1<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&] << 8;

 
    c2<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (5, 0x201);
    pt<s(0)(0)(0)>[&] = (c2<s(0)(0)(0)>[&] & 0xff) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c2<s(0)(0)(0)>[&] &= 0xff00;
    c2<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&];

    pt<s(0)(0)(0)>[&] = ((c2<s(0)(0)(0)>[&] & 0xff00)>>8) + 1; if (pt<s(0)(0)(0)>[&] > 129) return (((WORD<s(0)(0)(0)>[T])0x2) );
    ccc<s(0)(0)(0)>[&] = (g_phyportmap<s(0)(0)(0)>[&][pt<s(0)(0)(0)>[&]] - 1);
    c2<s(0)(0)(0)>[&] &= 0xff;
    c2<s(0)(0)(0)>[&] |= ccc<s(0)(0)(0)>[&] << 8;

    em4_bpc_wr<s(0)(0)(0)>[&] (0x03, 0x09, c1<s(0)(0)(0)>[&]);
    em4_bpc_wr<s(0)(0)(0)>[&] (0x03, 0x0a, c2<s(0)(0)(0)>[&]);




    cah_em4_setTimingRef84<s(0)(0)(0)>[&] (port_mid<s(0)(0)(0)>[&] - 1, byClockNum<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_setTransPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] PSL<s(0)(0)(0)>[&])
{




    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  nulPort<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  nulPort<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
     ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]) - 1;
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_setTransPsl<s(0)(0)(0)>[&], (int) nulPort<s(0)(0)(0)>[&], (int) PSL<s(0)(0)(0)>[&], 0, 1, __FUNCTION__<s(0)(0)(0)>[&]);
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, nulPort<s(0)(0)(0)>[&]);
   em4SetPsl2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], PSL<s(0)(0)(0)>[&]);
   

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxExpLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&])
{




    void *base<s(0)(0)(0)>[&] =(D2) 0x00000;
    int ulPort<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
   ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&](0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetRxExpLpPsl<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) byC2Value<s(0)(0)(0)>[&], 0, 2, __FUNCTION__<s(0)(0)(0)>[&]);
    em4SetPslexp<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], byC2Value<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

void
cah_em4_get_j2acc<s(0)(0)(0)>[&] (void *baseaddr<s(0)(0)(0)>[&], int port<s(0)(0)(0)>[&], unsigned char *j2exp<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&]++)
    {
        cah_em4_wr<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 , 0x8000 + (port<s(0)(0)(0)>[&] << 8) + (0x10  + i<s(0)(0)(0)>[&]));
        cah_em4_pollBit<s(0)(0)(0)>[&] ((unsigned short *) baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x01 );
        u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], (0x02 << 10) | 0x03 );
        *(j2exp<s(0)(0)(0)>[&] + i<s(0)(0)(0)>[&]) = u<s(0)(0)(0)>[&] & (0x00ff);
    }
}

int em4TtiTxTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	 
	CAH_EM4_SetTxLpTti<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], TTI_LEN_16BYTE<s(0)(0)(0)>[&], "f1234567890ABCDE");
	return 0;
}


int em4TtiRxTest<s(0)(0)(0)>[&] (int n<s(0)(0)(0)>[&])
{
	unsigned char tti<s(0)(0)(0)>[&][16] ;(D1:tti:0)

	{if (125 <  n<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  n<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	memset<s(0)(0)(0)>[&] (tti<s(0)(0)(0)>[&], 0, 16);
	CAH_EM4_GetRxRcvLpTti<s(0)(0)(0)>[&] (0, n<s(0)(0)(0)>[&], TTI_LEN_16BYTE<s(0)(0)(0)>[&], tti<s(0)(0)(0)>[&]);
	tti<s(0)(0)(0)>[&][15] = '\0';
	printf<s(0)(0)(0)>[&] ("%s(): tti(%s)", __FUNCTION__<s(0)(0)(0)>[&], tti<s(0)(0)(0)>[&]);
	return 0;
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_GetRxRcvLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * pbyTtiValue<s(0)(0)(0)>[&])
{
	int entity<s(0)(0)(0)>[&] =(D2) 0;
	int i<s(0)(0)(0)>[&] =(D2) 0;
	int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    if (!pbyTtiValue<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEM4_GetAccTti: entity(%d), file(%s) line(%d), tti is NULL!  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 6279);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }
	
	ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	cah_em4_get_j2acc<s(0)(0)(0)>[&] (cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])), ulPort<s(0)(0)(0)>[&], pbyTtiValue<s(0)(0)(0)>[&]);
	if (TTI_LEN_16BYTE<s(0)(0)(0)>[&] == eTtiMode<s(0)(0)(0)>[&])
	{
	} else if (TTI_LEN_FIXED1B<s(0)(0)(0)>[&] == eTtiMode<s(0)(0)(0)>[&]) {
		for (i<s(0)(0)(0)>[&] = 1; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&] ++)
		{
			pbyTtiValue<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = pbyTtiValue<s(0)(0)(0)>[&][0];
		}
	}

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

int em4SetExpPslTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&], int c2<s(0)(0)(0)>[&])
{
	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	CAH_EM4_SetRxExpLpPsl<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], c2<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\n%s(): write c2(%d)", __FUNCTION__<s(0)(0)(0)>[&], c2<s(0)(0)(0)>[&]);
	return 0;
}

int em4GetExpPslTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	unsigned char u<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	CAH_EM4_GetRxExpLpPsl<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &u<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\npsl(%x)", u<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\n");
	return 0;
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_GetRxExpLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * byC2Value<s(0)(0)(0)>[&])
{
    void *base<s(0)(0)(0)>[&] =(D2) 0x00000;
    int ulPort<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);
	unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&](0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetRxExpLpPsl<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) byC2Value<s(0)(0)(0)>[&], 0, 2, __FUNCTION__<s(0)(0)(0)>[&]);
    u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), 0x00 );
	u<s(0)(0)(0)>[&] = u<s(0)(0)(0)>[&] & (0x3800);
	u<s(0)(0)(0)>[&] = (u<s(0)(0)(0)>[&] >> 11);
	*byC2Value<s(0)(0)(0)>[&] = u<s(0)(0)(0)>[&];

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetTxLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&])
{
	return CAH_EM4_setTransPsl<s(0)(0)(0)>[&]  (dwPos<s(0)(0)(0)>[&], 0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), byC2Value<s(0)(0)(0)>[&]);
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxTxLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byC2Value<s(0)(0)(0)>[&])
{
	return CAH_EM4_setTransPsl<s(0)(0)(0)>[&]  (dwPos<s(0)(0)(0)>[&], 0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), byC2Value<s(0)(0)(0)>[&]);
}

int em4GetRxRcvPslTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	unsigned char c2<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	CAH_EM4_GetRxRcvLpPsl<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &c2<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\nc2(%x)", c2<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\n\r\n");
	return 0;
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_GetRxRcvLpPsl<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * pbyC2Value<s(0)(0)(0)>[&])
{




    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    int ulPort<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);
    int nulPort<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]) - 1;

    if (!pbyC2Value<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s(): pPSL is NULL!", __FUNCTION__<s(0)(0)(0)>[&]);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_getTslNow<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&],SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), &u<s(0)(0)(0)>[&]);
    *pbyC2Value<s(0)(0)(0)>[&] = u<s(0)(0)(0)>[&];
    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}


 


void
em4_PollBit<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] addrOffset<s(0)(0)(0)>[&], int byPortNo<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T] i<s(0)(0)(0)>[&] =(D2) 0;
    WORD<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&] =(D2) 0x0000;
    int chipno<s(0)(0)(0)>[&] =(D2) cah_em4_port2chip<s(0)(0)(0)>[&] (byPortNo<s(0)(0)(0)>[&]);
    DWORD<s(0)(0)(0)>[T] base<s(0)(0)(0)>[&] =(D2) cah_em4_getChipBase<s(0)(0)(0)>[&] (0, chipno<s(0)(0)(0)>[&]);

    for (;;)
    {

         
        cah_ReadRegister<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (addrOffset<s(0)(0)(0)>[&]), &data<s(0)(0)(0)>[&], 0xFFFF, CAH_REG_ATTRBT_RW<s(0)(0)(0)>[&]);
        if (data<s(0)(0)(0)>[&] & 0x8000)
        {
            i<s(0)(0)(0)>[&] = (WORD<s(0)(0)(0)>[T]) (i<s(0)(0)(0)>[&] + 1);
            if (i<s(0)(0)(0)>[&] >= 100 )
            {
                 

                 

                break;
            }
        }
        else
        {
            break;
        }
    }
}

 
PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_enablePlm<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  nulPort<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  nulPort<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]) - 1;
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_enablePlm<s(0)(0)(0)>[&], (int) nulPort<s(0)(0)(0)>[&], (int) bEnable<s(0)(0)(0)>[&], 0, 4, __FUNCTION__<s(0)(0)(0)>[&]);

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, nulPort<s(0)(0)(0)>[&]);
    cah_em4_enablePlm<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], 0, ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    


    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}


WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxLpPslEnable<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
    WORD<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&];(D1:data:0)

	data<s(0)(0)(0)>[&] = 0;
	CAH_EM4_enablePlm<s(0)(0)(0)>[&] (dwPos<s(0)(0)(0)>[&], 0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), bEnable<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}


 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetTxLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], const BYTE<s(0)(0)(0)>[T] * pbyTtiValue<s(0)(0)(0)>[&])
{





    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
	int i<s(0)(0)(0)>[&] =(D2) 0;
	unsigned char mytti<s(0)(0)(0)>[&][16];(D1:mytti:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
	int ulPort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
       ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	memset<s(0)(0)(0)>[&] (mytti<s(0)(0)(0)>[&], 0, 16);

    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetTxLpTti<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) pbyTtiValue<s(0)(0)(0)>[&], 0, 5, __FUNCTION__<s(0)(0)(0)>[&]);

    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
	memcpy<s(0)(0)(0)>[&] (mytti<s(0)(0)(0)>[&], pbyTtiValue<s(0)(0)(0)>[&], 16);
	if (TTI_LEN_FIXED1B<s(0)(0)(0)>[&] == eTtiMode<s(0)(0)(0)>[&])
	{
		for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&] ++) mytti<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = pbyTtiValue<s(0)(0)(0)>[&][0];
	}
    cahem4setTxj2_2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&],  ulPort<s(0)(0)(0)>[&], mytti<s(0)(0)(0)>[&]);
   

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}


 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxExpLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], const BYTE<s(0)(0)(0)>[T] * pbyTtiValue<s(0)(0)(0)>[&])
{





    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;
	char mytti<s(0)(0)(0)>[&][16];(D1:mytti:0)
	int i<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
      ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;

	memset<s(0)(0)(0)>[&] (mytti<s(0)(0)(0)>[&], 0, 16); memcpy<s(0)(0)(0)>[&] (mytti<s(0)(0)(0)>[&], pbyTtiValue<s(0)(0)(0)>[&], 16);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetRxExpLpTti<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) pbyTtiValue<s(0)(0)(0)>[&], 0, 6, __FUNCTION__<s(0)(0)(0)>[&]);
	
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
	if (TTI_LEN_FIXED1B<s(0)(0)(0)>[&] == eTtiMode<s(0)(0)(0)>[&])
	{
		 
		for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&] ++) mytti<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = pbyTtiValue<s(0)(0)(0)>[&][1];
	}
   cah_em4_set_j2exp<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], mytti<s(0)(0)(0)>[&]);
  

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

int em4GetExpTtiTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	unsigned char tti<s(0)(0)(0)>[&][16];(D1:tti:0)
	int i<s(0)(0)(0)>[&] =(D2) 0;

	memset<s(0)(0)(0)>[&] (tti<s(0)(0)(0)>[&], 0, 16);
	CAH_EM4_GetRxExpLpTti<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], TTI_LEN_16BYTE<s(0)(0)(0)>[&], tti<s(0)(0)(0)>[&]);
	tti<s(0)(0)(0)>[&][15] = '\0';
	printf<s(0)(0)(0)>[&] ("\r\ntti(%s)", tti<s(0)(0)(0)>[&]);
	printf<s(0)(0)(0)>[&] ("\r\n\t");
	for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 16; i<s(0)(0)(0)>[&] ++)
	{
		printf<s(0)(0)(0)>[&] ("(%x)", tti<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]]);
	}
	printf<s(0)(0)(0)>[&] ("\r\n");

	return 0;
}

int em4SetExpTtiTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	{if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	CAH_EM4_SetRxExpLpTti<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], TTI_LEN_16BYTE<s(0)(0)(0)>[&], "f0987654321abcde");
	return 0;
}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_GetRxExpLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * pbyTtiValue<s(0)(0)(0)>[&])
{
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	int ulPort<s(0)(0)(0)>[&] =(D2) 0;
	unsigned char mytti<s(0)(0)(0)>[&][16];(D1:mytti:0)

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
       cah_em4_get_j2exp<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], mytti<s(0)(0)(0)>[&]);
      
	memcpy<s(0)(0)(0)>[&] (pbyTtiValue<s(0)(0)(0)>[&], mytti<s(0)(0)(0)>[&], 16);
    return 0;
}

int cah_em4_ManualInsertPayloadAIS<s(0)(0)(0)>[&] (int byPortNo<s(0)(0)(0)>[&], int flag<s(0)(0)(0)>[&] )
{
     void * base<s(0)(0)(0)>[&] =(D2) 0;
     int byte<s(0)(0)(0)>[&] =(D2) 0;
      int ulPort<s(0)(0)(0)>[&] =(D2) 0;
      int bit<s(0)(0)(0)>[&] =(D2) 0;
      unsigned short val<s(0)(0)(0)>[&] =(D2) 0;

       ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (byPortNo<s(0)(0)(0)>[&]) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, byPortNo<s(0)(0)(0)>[&]);
	byte<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&] / 16;
	bit<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&] % 16;
	

	val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]));
	if (flag<s(0)(0)(0)>[&] == 1 )
	{
        val<s(0)(0)(0)>[&] = val<s(0)(0)(0)>[&] | (1 << bit<s(0)(0)(0)>[&]);
	} else {
        val<s(0)(0)(0)>[&] = val<s(0)(0)(0)>[&] & (~(1 << bit<s(0)(0)(0)>[&]));
	}

	cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);

    return 0;
}
 










WORD<s(0)(0)(0)>[T]
CAH_EM4_SetInsertAlm<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_INSERT_ALM_TYPE_T<s(0)(0)(0)>[T] eAlmType<s(0)(0)(0)>[&],
                      CTD_INSERT_ALM_DIR_T<s(0)(0)(0)>[T] eInsAlmDir<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	int port<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short alm<s(0)(0)(0)>[&] =(D2) 0;
	UINT8<s(0)(0)(0)>[T] byLoop<s(0)(0)(0)>[&] =(D2) 0x0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetInsertAlm<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) eAlmType<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&], 8, __FUNCTION__<s(0)(0)(0)>[&]);

	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
       cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);       
       
	alm<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );

	if (CTD_INSERT_ALM_TYPE_TUAIS<s(0)(0)(0)>[&] == eAlmType<s(0)(0)(0)>[&] 
		&& CTD_INSERT_ALM_OUT_LASER<s(0)(0)(0)>[&] == eInsAlmDir<s(0)(0)(0)>[&])
	{
		if (1  == bEnable<s(0)(0)(0)>[&])
		{
			alm<s(0)(0)(0)>[&] |= 0x8000;
		} else {
			alm<s(0)(0)(0)>[&] &= ~0x8000;
		}
              cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);       
		alm<s(0)(0)(0)>[&] = cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , alm<s(0)(0)(0)>[&]);
	}

	if (CTD_INSERT_ALM_TYPE_AIS<s(0)(0)(0)>[&] == eAlmType<s(0)(0)(0)>[&] 
		&& CTD_INSERT_ALM_OUT_LASER<s(0)(0)(0)>[&] == eInsAlmDir<s(0)(0)(0)>[&])
	{
		if (1  == bEnable<s(0)(0)(0)>[&])
		{
		}
		else 
		{
            if (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) == 0)
            {
                for (byLoop<s(0)(0)(0)>[&]=0;byLoop<s(0)(0)(0)>[&]<126;byLoop<s(0)(0)(0)>[&]++)
	                cah_em4_ManualInsertPayloadAIS<s(0)(0)(0)>[&](byLoop<s(0)(0)(0)>[&], 0 );
			}
		}
	}
	if (CTD_INSERT_ALM_TYPE_RDI<s(0)(0)(0)>[&] == eAlmType<s(0)(0)(0)>[&]
		&& CTD_INSERT_ALM_OUT_LASER<s(0)(0)(0)>[&] == eInsAlmDir<s(0)(0)(0)>[&])
	{
		if (1  == bEnable<s(0)(0)(0)>[&])
		{
			alm<s(0)(0)(0)>[&] |= 0x0001;
            alm<s(0)(0)(0)>[&] &= ~0x0002;
		} else {
			alm<s(0)(0)(0)>[&] &= ~0x0001;
            alm<s(0)(0)(0)>[&] |= 0x0002;
		}
              cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);       
	      alm<s(0)(0)(0)>[&] = cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , alm<s(0)(0)(0)>[&]);
	}
	
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxLpTtiAlmEnable<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_trace<s(0)(0)(0)>[&] (15, "\r\n%s:, ulPort(%d) bEnable(%d)", __FUNCTION__<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (0);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetRxLpTtiAlmEnable<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) bEnable<s(0)(0)(0)>[&], 0, 8, __FUNCTION__<s(0)(0)(0)>[&]);
    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_enableTimRdi<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], 0, ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxLpTtiAisEnable<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_trace<s(0)(0)(0)>[&] (15, "\r\n%s:, ulPort(%d) bEnable(%d)", __FUNCTION__<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (0);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_SetRxLpTtiAlmEnable<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) bEnable<s(0)(0)(0)>[&], 0, 8, __FUNCTION__<s(0)(0)(0)>[&]);
    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    cah_em4_enableTimAis<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], 0, ulPort<s(0)(0)(0)>[&], bEnable<s(0)(0)(0)>[&]);
    

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetTxLpTtiMode<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&])
{



    return ((WORD<s(0)(0)(0)>[T])0x0) ;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

UINT8<s(0)(0)(0)>[T]
cah_em4_readChReg<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] addrOffset<s(0)(0)(0)>[&])
{
    UINT8<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&] =(D2) 0;
    UINT32<s(0)(0)(0)>[T] offset<s(0)(0)(0)>[&] =(D2) (0x2000  + ulPort<s(0)(0)(0)>[&] * 0x1000  + addrOffset<s(0)(0)(0)>[&]);

    data<s(0)(0)(0)>[&] = (*((volatile UINT8<s(0)(0)(0)>[T] *)( (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&]) )+(  offset<s(0)(0)(0)>[&] ))) ;

    return data<s(0)(0)(0)>[&];
}


void
cah_em4_writeChReg<s(0)(0)(0)>[&] (CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] * pEntity<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&],
                    UINT32<s(0)(0)(0)>[T] addrOffset<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&])
{
    UINT32<s(0)(0)(0)>[T] offset<s(0)(0)(0)>[&] =(D2) (0x2000  + ulPort<s(0)(0)(0)>[&] * 0x1000  + addrOffset<s(0)(0)(0)>[&]);

    (*((volatile UINT8<s(0)(0)(0)>[T] *)( (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&]) )+(  offset<s(0)(0)(0)>[&] )))=(UINT8<s(0)(0)(0)>[T])(  data<s(0)(0)(0)>[&] ) ;
}


 
WORD<s(0)(0)(0)>[T]
CAH_EM4_SetRxLpTtiMode<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&])
{




    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_setPdhPortMode<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], PDH_PORT_MODE_T<s(0)(0)(0)>[T] type<s(0)(0)(0)>[&])
{




    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int port<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);


    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_setPdhPortMode<s(0)(0)(0)>[&], (int) nulPort<s(0)(0)(0)>[&], (int) type<s(0)(0)(0)>[&], 0, 11, __FUNCTION__<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
         
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }
    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
    
   u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&], 0x00 );
   
    u<s(0)(0)(0)>[&] &= ~0x000c;                
    cah_em4_pohWrite<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x00 , u<s(0)(0)(0)>[&]);
    

    return ((WORD<s(0)(0)(0)>[T])0x0) ;




    return 0;
}



 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_getPortType<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], PDH_PORT_MODE_T<s(0)(0)(0)>[T] * pType<s(0)(0)(0)>[&])
{





    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);


    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 6839);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (!pType<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEntity%d: %s %d EM4_GetPortType pType is NULL!  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c",
                6846);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] == eEm4EntInit<s(0)(0)(0)>[&])
    {
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    }

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
         
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

   *pType<s(0)(0)(0)>[&] = pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].portType<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]];
  


    return ((WORD<s(0)(0)(0)>[T])0x0) ;




    return 0;
}


 



PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_enablePort<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&], PORT_STATE_T<s(0)(0)(0)>[T] state<s(0)(0)(0)>[&])
{






    return ((WORD<s(0)(0)(0)>[T])0x0) ;





    return 0;
}



 



PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_getPortState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], PORT_STATE_T<s(0)(0)(0)>[T] * pState<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]) - 1;


     if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )     
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 6963);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (!pState<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEntity%d: %s %d EM4_GetPortState pState is NULL!  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c",
                6970);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] == eEm4EntInit<s(0)(0)(0)>[&])
    {
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    }

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
         
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

   *pState<s(0)(0)(0)>[&] = pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].adminState<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]];
  

    return ((WORD<s(0)(0)(0)>[T])0x0) ;




    return 0;
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_EnablePrbs<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




      int port<s(0)(0)(0)>[&] =(D2) 0;
	void * base<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
       port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));

    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_EnablePrbs<s(0)(0)(0)>[&], (int) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), (int) bEnable<s(0)(0)(0)>[&], 0, 17, __FUNCTION__<s(0)(0)(0)>[&]);

    if (bEnable<s(0)(0)(0)>[&])
    {
        cah_em4_setPrbs2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], eEM4_ENABLE<s(0)(0)(0)>[&]);
        
    }
    else
    {
        cah_em4_setPrbs2<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], eEM4_DISABLE<s(0)(0)(0)>[&]);
        
    }
    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_getPrbsMode<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], PRBS_MODE_T<s(0)(0)(0)>[T] * pMode<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);


    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )     
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 7044);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (!pMode<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEntity%d: %s %d EM4_GetPrbsMode pMode is NULL!  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c",
                7051);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] == eEm4EntInit<s(0)(0)(0)>[&])
    {
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    }

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
         
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    *pMode<s(0)(0)(0)>[&] = pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].prbsMode<s(0)(0)(0)>[&];    
    return ((WORD<s(0)(0)(0)>[T])0x0) ;





    return 0;
}






int em4GetPrbsErrTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    DWORD<s(0)(0)(0)>[T] cnt<s(0)(0)(0)>[&] =(D2) 0;

    {if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;

    CAH_EM4_GetPrbsErrCount<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &cnt<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n%s(): cnt(%d)", __FUNCTION__<s(0)(0)(0)>[&], cnt<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n");
    return 0;
}
 


WORD<s(0)(0)(0)>[T]
CAH_EM4_GetPrbsErrCount<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * dwPrbsCnt<s(0)(0)(0)>[&])
{




    int ulPort<s(0)(0)(0)>[&] =(D2) 0;
    int nulPort<s(0)(0)(0)>[&] =(D2) SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]);
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short c1<s(0)(0)(0)>[&] =(D2) 0, c2<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
       ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));

     












	
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x20 , ulPort<s(0)(0)(0)>[&] & 0x003f);    
    c2<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x22 );
    c1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x05 << 10) | 0x21 );
	*dwPrbsCnt<s(0)(0)(0)>[&] = (c2<s(0)(0)(0)>[&] + (c1<s(0)(0)(0)>[&] << 16));
    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_forceRptDefect<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&])
{





    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);


    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )  
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 7219);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 7226);
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 1 ;    

    return ((WORD<s(0)(0)(0)>[T])0x0) ;





    return 0;
}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_forceReportEpg<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{




    UINT8<s(0)(0)(0)>[T] chipNo<s(0)(0)(0)>[&];(D1:chipNo:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    chipNo<s(0)(0)(0)>[&] = cah_em4_ent2chipno<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    gCahEm4TribVar<s(0)(0)(0)>[&].EM4LatchForceRpt<s(0)(0)(0)>[&][chipNo<s(0)(0)(0)>[&]] = 1 ;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

    return 0;
}



 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_forceInsertAis<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], ALARM_DIRECTION_T<s(0)(0)(0)>[T] dir<s(0)(0)(0)>[&],
                        BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);
    return ((WORD<s(0)(0)(0)>[T])0x0) ;


    return 0;
}

 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_forceInsertRdi<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int port<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;
    __EXAR_INSERT_CTRL_T<s(0)(0)(0)>[T] insertCtrlReg<s(0)(0)(0)>[&];(D1:insertCtrlReg:0)
    UINT8<s(0)(0)(0)>[T] G1<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);

     



    if (1)
        return ((WORD<s(0)(0)(0)>[T])0x0) ;

    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )    
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 7312);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_forceInsertRdi<s(0)(0)(0)>[&], (int) nulPort<s(0)(0)(0)>[&], (int) bEnable<s(0)(0)(0)>[&], 0, 21, __FUNCTION__<s(0)(0)(0)>[&]);

     



    memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( &insertCtrlReg<s(0)(0)(0)>[&] ), (  0 ), (  sizeof (insertCtrlReg<s(0)(0)(0)>[&]) )) ;

    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&]);
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x30 , port<s(0)(0)(0)>[&]);       
    taskDelay<s(0)(0)(0)>[&] (5);
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 );
    insertCtrlReg<s(0)(0)(0)>[&].insertCtrlBit<s(0)(0)(0)>[&].rdi<s(0)(0)(0)>[&] = ((u<s(0)(0)(0)>[&] & 0x00ff) & 0x0001) ? 1 : 0;

    if (bEnable<s(0)(0)(0)>[&])
    {
        insertCtrlReg<s(0)(0)(0)>[&].insertCtrlBit<s(0)(0)(0)>[&].rdi<s(0)(0)(0)>[&] = 0x01;
        G1<s(0)(0)(0)>[&] = 0x08;
         
         pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].frdiMode<s(0)(0)(0)>[&][nulPort<s(0)(0)(0)>[&]] = EM4_UP_FORCE<s(0)(0)(0)>[&];
    }
    else
    {
        insertCtrlReg<s(0)(0)(0)>[&].insertCtrlBit<s(0)(0)(0)>[&].rdi<s(0)(0)(0)>[&] = 0x00;
        G1<s(0)(0)(0)>[&] = 0;
         
         pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].frdiMode<s(0)(0)(0)>[&][nulPort<s(0)(0)(0)>[&]] = EM4_NONE_FORCE<s(0)(0)(0)>[&];
    }

 


     


    if (insertCtrlReg<s(0)(0)(0)>[&].insertCtrlBit<s(0)(0)(0)>[&].rdi<s(0)(0)(0)>[&])
    {
        u<s(0)(0)(0)>[&] |= 0x0003;
    }
    else
    {
        u<s(0)(0)(0)>[&] &= ~0x0001;
    }
    u<s(0)(0)(0)>[&] |= 0x0002;
    u<s(0)(0)(0)>[&] &= ~0x0020;
    cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], (0x04 << 10) | 0x40 , u<s(0)(0)(0)>[&]);
    taskDelay<s(0)(0)(0)>[&] (5);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;


    return 0;
}

int em4GetPpiBipTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    DWORD<s(0)(0)(0)>[T] bip<s(0)(0)(0)>[&] =(D2) 0, rei<s(0)(0)(0)>[&] =(D2) 0;

    {if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    CAH_EM4_GetPpiBipCount<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &bip<s(0)(0)(0)>[&], &rei<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("%s(): bip(%d), rei(%d)", __FUNCTION__<s(0)(0)(0)>[&], bip<s(0)(0)(0)>[&], rei<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n");

    return 0;
}



WORD<s(0)(0)(0)>[T]
CAH_EM4_GetPpiBipCount<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pPpiBip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pPpiFebe<s(0)(0)(0)>[&])
{
	int port<s(0)(0)(0)>[&] =(D2) 0;
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short remote<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short near<s(0)(0)(0)>[&] =(D2) 0, err<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));





	err<s(0)(0)(0)>[&] = cah_em4_readCrc4RemoteReg<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], &near<s(0)(0)(0)>[&], &remote<s(0)(0)(0)>[&]);	

	
	*pPpiBip<s(0)(0)(0)>[&] = near<s(0)(0)(0)>[&];
	*pPpiFebe<s(0)(0)(0)>[&] = remote<s(0)(0)(0)>[&];

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

int em4GetBipTest<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
    DWORD<s(0)(0)(0)>[T] bip<s(0)(0)(0)>[&] =(D2) 0, rei<s(0)(0)(0)>[&] =(D2) 0;

    {if (125 <  port<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  port<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    CAH_EM4_GetLpBipCount<s(0)(0)(0)>[&] (0, port<s(0)(0)(0)>[&], &bip<s(0)(0)(0)>[&], &rei<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("%s(): bip(%d), rei(%d)", __FUNCTION__<s(0)(0)(0)>[&], bip<s(0)(0)(0)>[&], rei<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\n");

    return 0;
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_GetLpBipCount<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pLpBip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pLpRei<s(0)(0)(0)>[&])
{
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	int port<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short bip2<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short rei<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;

	port<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));

	bip2<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x05 );
	rei<s(0)(0)(0)>[&]  = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x06 );	
	*pLpBip<s(0)(0)(0)>[&] = bip2<s(0)(0)(0)>[&];
	*pLpRei<s(0)(0)(0)>[&] = rei<s(0)(0)(0)>[&];

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_getLpPmPara<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] nulPort<s(0)(0)(0)>[&], MSHPLP_PMPARA_T<s(0)(0)(0)>[T] * pPmPara<s(0)(0)(0)>[&])
{





    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    UINT32<s(0)(0)(0)>[T] data<s(0)(0)(0)>[&] =(D2) 0;
    UINT32<s(0)(0)(0)>[T] temp<s(0)(0)(0)>[&] =(D2) 0;
    unsigned int d1<s(0)(0)(0)>[&] =(D2) 0, d2<s(0)(0)(0)>[&] =(D2) 0;
    MSHPLP_PMPARA_T<s(0)(0)(0)>[T] pmParm<s(0)(0)(0)>[&];(D1:pmParm:0)
    void *base<s(0)(0)(0)>[&] =(D2) 0x0000;
    int port<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0x0000;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;

    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (nulPort<s(0)(0)(0)>[&]);


    if ((((  entity<s(0)(0)(0)>[&]   >= ((1) ) )) || ((   ulChip<s(0)(0)(0)>[&]  )  >=  (1) ) || ((   ulPort<s(0)(0)(0)>[&]  ) >= (63 ) ) ) )  
    {
        printf<s(0)(0)(0)>[&] ("\r\n**Error!  Entity= %d; File=%s; Line=%d  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c", 7488);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (!pPmPara<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEntity%d: %s %d EM4_GetLpPmPara pPmPara is NULL!  \r\n", entity<s(0)(0)(0)>[&], "cah_126e1.c",
                7495);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&])))
    {
        printf<s(0)(0)(0)>[&] ("\r\nlppm: entity(%d) NULL", entity<s(0)(0)(0)>[&]);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] == eEm4EntInit<s(0)(0)(0)>[&])
    {
        return ((WORD<s(0)(0)(0)>[T])0x0) ;
    }

    if (eEm4EntAct<s(0)(0)(0)>[&] != pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\ngetpm: entity(%d), not active", entity<s(0)(0)(0)>[&]);
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    memset<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( &pmParm<s(0)(0)(0)>[&] ), (  0 ), (  sizeof (MSHPLP_PMPARA_T<s(0)(0)(0)>[T]) )) ;
     
     


    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
   
    u<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&];
    temp<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x05 );    
    d1<s(0)(0)(0)>[&] = data<s(0)(0)(0)>[&] = temp<s(0)(0)(0)>[&];

    pmParm<s(0)(0)(0)>[&].bip<s(0)(0)(0)>[&] = data<s(0)(0)(0)>[&];

    data<s(0)(0)(0)>[&] = 0;


    base<s(0)(0)(0)>[&] = (void *) cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);    
    u<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] = ulPort<s(0)(0)(0)>[&];
    temp<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], port<s(0)(0)(0)>[&], 0x06 );    
    d2<s(0)(0)(0)>[&] = data<s(0)(0)(0)>[&] = (temp<s(0)(0)(0)>[&]);

    pmParm<s(0)(0)(0)>[&].rei<s(0)(0)(0)>[&] = data<s(0)(0)(0)>[&];


    if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssf<s(0)(0)(0)>[&]   )
    {
        pmParm<s(0)(0)(0)>[&].bip<s(0)(0)(0)>[&] = 0;
        pmParm<s(0)(0)(0)>[&].rei<s(0)(0)(0)>[&] = 0;
        pmParm<s(0)(0)(0)>[&].fefc<s(0)(0)(0)>[&] = 0;
         
        pmParm<s(0)(0)(0)>[&].fc<s(0)(0)(0)>[&] = 1 + pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][nulPort<s(0)(0)(0)>[&]].ssfFc<s(0)(0)(0)>[&];
    }
    else
    {
        pmParm<s(0)(0)(0)>[&].fc<s(0)(0)(0)>[&] = 0;
        if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdi<s(0)(0)(0)>[&]
              )
        {
            pmParm<s(0)(0)(0)>[&].fefc<s(0)(0)(0)>[&] = 1
                + pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdiFc<s(0)(0)(0)>[&]
                + pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfiFc<s(0)(0)(0)>[&];             
            pmParm<s(0)(0)(0)>[&].rei<s(0)(0)(0)>[&] = 0;
        }                        



        else
        {
            pmParm<s(0)(0)(0)>[&].fefc<s(0)(0)(0)>[&] = 0;
        }
    }

    if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssf<s(0)(0)(0)>[&] == 0x0100 )
    {
        pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssf<s(0)(0)(0)>[&] = 0;
    }
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssfFc<s(0)(0)(0)>[&] = 0;

    if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdi<s(0)(0)(0)>[&] == 0x0100 )
    {
        pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdi<s(0)(0)(0)>[&] = 0;
    }
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rdiFc<s(0)(0)(0)>[&] = 0;
    if (pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfi<s(0)(0)(0)>[&] == 0x0100 )
    {
        pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfi<s(0)(0)(0)>[&] = 0;
    }
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].rfiFc<s(0)(0)(0)>[&] = 0;
    
    

    memcpy<s(0)(0)(0)>[&]((INT1<s(0)(0)(0)>[T] *)( pPmPara<s(0)(0)(0)>[&] ), (INT1<s(0)(0)(0)>[T] *)(  &pmParm<s(0)(0)(0)>[&] ), (  sizeof (pmParm<s(0)(0)(0)>[&]) )) ;

    cah_em4_trace<s(0)(0)(0)>[&] (18, "ent(%d), port(%d), bip(%d:%d), rei(%d:%d), fc(%d), fefc(%d), ssf(%x)",
                   entity<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], pPmPara<s(0)(0)(0)>[&]->bip<s(0)(0)(0)>[&], d1<s(0)(0)(0)>[&], pPmPara<s(0)(0)(0)>[&]->rei<s(0)(0)(0)>[&], d2<s(0)(0)(0)>[&], pPmPara<s(0)(0)(0)>[&]->fc<s(0)(0)(0)>[&], pPmPara<s(0)(0)(0)>[&]->fefc<s(0)(0)(0)>[&],
                   pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].pohAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].ssf<s(0)(0)(0)>[&]);
    
    
    return ((WORD<s(0)(0)(0)>[T])0x0) ;








    return 0;
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_DetectCardState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * pbActive<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&]=(D2) ((void *)0) ;
    PB_ERROR_CODE_T<s(0)(0)(0)>[T] ret<s(0)(0)(0)>[&];(D1:ret:0)

    if (!pbActive<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s(): pbActive is NULL!  \r\n", __FUNCTION__<s(0)(0)(0)>[&]);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    ret<s(0)(0)(0)>[&] = cah_em4_detectCardStateEx<s(0)(0)(0)>[&] (p<s(0)(0)(0)>[&], pbActive<s(0)(0)(0)>[&]);

    return ret<s(0)(0)(0)>[&];

}

PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_blockAIS<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bEnable<s(0)(0)(0)>[&])
{





    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    UINT32<s(0)(0)(0)>[T] ulChip<s(0)(0)(0)>[&] =(D2) 0;
    UINT32<s(0)(0)(0)>[T] ulPort<s(0)(0)(0)>[&] =(D2) 0;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);

    cah_em4_registerCall<s(0)(0)(0)>[&] ((PMyFun<s(0)(0)(0)>[T]) CAH_EM4_blockAIS<s(0)(0)(0)>[&], 0, 0, bEnable<s(0)(0)(0)>[&], 24, __FUNCTION__<s(0)(0)(0)>[&]);

    if (pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] != eEm4EntAct<s(0)(0)(0)>[&])
    {
         
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }


    for (ulChip<s(0)(0)(0)>[&] = 0; ulChip<s(0)(0)(0)>[&] < pEntity<s(0)(0)(0)>[&]->chipNum<s(0)(0)(0)>[&]; ulChip<s(0)(0)(0)>[&]++)
    {
        for (ulPort<s(0)(0)(0)>[&] = 0; ulPort<s(0)(0)(0)>[&] < (63 ) ; ulPort<s(0)(0)(0)>[&]++)
        {
            if (bEnable<s(0)(0)(0)>[&])
            {
                pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bBlockAis<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 1 ;
                cah_em4_insertUpAis<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], ulChip<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], 0 );
            }
            else
            {
                pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].bBlockAis<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0 ;
            }
        }
    }

    return ((WORD<s(0)(0)(0)>[T])0x0) ;




    return 0;
}










WORD<s(0)(0)(0)>[T]
CAH_EM4_Initialize<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{
    printf<s(0)(0)(0)>[&] ("\r\n%s():\t called dwPos(%d)", __FUNCTION__<s(0)(0)(0)>[&], dwPos<s(0)(0)(0)>[&]);

	CAH_EM4_activateEntity<s(0)(0)(0)>[&] (0, 0 );
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



 





WORD<s(0)(0)(0)>[T]
CAH_EM4_GetInnerB1Err<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwB1Err<s(0)(0)(0)>[&])
{
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



 





WORD<s(0)(0)(0)>[T]
CAH_EM4_GetTdmLinkErr<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] *pdwTdmErr<s(0)(0)(0)>[&])
{
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}


 




WORD<s(0)(0)(0)>[T]
CAH_EM4_Get8KClkState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbActive<s(0)(0)(0)>[&])
{
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 





WORD<s(0)(0)(0)>[T]
CAH_EM4_Get19MClkState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] *pbActive<s(0)(0)(0)>[&])
{
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

 




WORD<s(0)(0)(0)>[T]
CAH_EM4_GetPllState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] * pbPllLock<s(0)(0)(0)>[&])
{
    unsigned char * p<s(0)(0)(0)>[&] =(D2) (unsigned char *)0x70000110 ;

    *pbPllLock<s(0)(0)(0)>[&] = ((*p<s(0)(0)(0)>[&]) & 0x02) ? 1  : 0 ;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



 

































WORD<s(0)(0)(0)>[T]
CAH_EM4_InitEntity<s(0)(0)(0)>[&] (ENTITY_T<s(0)(0)(0)>[T] etEntity<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], CTD_MODE_TYPE_T<s(0)(0)(0)>[T] eporttype<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
	int ulChip<s(0)(0)(0)>[&] =(D2) 0, ulPort<s(0)(0)(0)>[&] =(D2) 0, i<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_showbuild<s(0)(0)(0)>[&] ();
    CAH_EM4_loadModule<s(0)(0)(0)>[&] ();

    printf<s(0)(0)(0)>[&] ("\r\n%s():\tentity(%d),\tdwPos(%d),\tporttype(%d)", __FUNCTION__<s(0)(0)(0)>[&], etEntity<s(0)(0)(0)>[&], dwPos<s(0)(0)(0)>[&], eporttype<s(0)(0)(0)>[&]);
    cah_em4_trace<s(0)(0)(0)>[&] (1 , "%s: File(%s) Line(%d)", __FUNCTION__<s(0)(0)(0)>[&], "cah_126e1.c", 7832);

    if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_OpenEx<s(0)(0)(0)>[&] ()))
    {
        printf<s(0)(0)(0)>[&] ("\r\n%s(): cah_em4_OpenEx() CANNOT GET FD!!!", __FUNCTION__<s(0)(0)(0)>[&]);
        return ((WORD<s(0)(0)(0)>[T])0x1) ;
    }

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n126xe1rt: pEntity(%p)", pEntity<s(0)(0)(0)>[&]);

     


    pEntity<s(0)(0)(0)>[&]->entity<s(0)(0)(0)>[&] = 0;
    pEntity<s(0)(0)(0)>[&]->dwPos<s(0)(0)(0)>[&] = 0;
    pEntity<s(0)(0)(0)>[&]->chipNum<s(0)(0)(0)>[&] = 2;
    pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] = eEm4EntInit<s(0)(0)(0)>[&];
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&] = (0x50000000) ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][1].cfg<s(0)(0)(0)>[&].baseAddr<s(0)(0)(0)>[&] = (0x60000000) ;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][0].su_id<s(0)(0)(0)>[&] = 0;
    pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][1].su_id<s(0)(0)(0)>[&] = 0;

    cah_em4_initVars<s(0)(0)(0)>[&] (pEntity<s(0)(0)(0)>[&], 2);
    for (i<s(0)(0)(0)>[&] = 0; i<s(0)(0)(0)>[&] < 8; i<s(0)(0)(0)>[&] ++) g_timingVirtualSlot<s(0)(0)(0)>[&][i<s(0)(0)(0)>[&]] = 0;

    for (ulChip<s(0)(0)(0)>[&] = 0; ulChip<s(0)(0)(0)>[&] < (int)pEntity<s(0)(0)(0)>[&]->chipNum<s(0)(0)(0)>[&]; ulChip<s(0)(0)(0)>[&]++)
    {
        for (ulPort<s(0)(0)(0)>[&] = 0; ulPort<s(0)(0)(0)>[&] < (63 ) ; ulPort<s(0)(0)(0)>[&]++)
        {
             


            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].forceRptAlm<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 1 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].prbsCfg<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]].bForceRpt<s(0)(0)(0)>[&] = 1 ;
            pEntity<s(0)(0)(0)>[&]->chip_var<s(0)(0)(0)>[&][ulChip<s(0)(0)(0)>[&]].nPrbsDelayCount<s(0)(0)(0)>[&][ulPort<s(0)(0)(0)>[&]] = 0;
        }
    }
    return ((WORD<s(0)(0)(0)>[T])0x0) ;

    return 0;
}


CAH_EM4_CHIP_CONFIG_T<s(0)(0)(0)>[T] g_cahEm4ChipCfg<s(0)(0)(0)>[&][2];(D1:g_cahEm4ChipCfg:0)
CAH_EM4_CALLBACKS_T<s(0)(0)(0)>[T] g_callback<s(0)(0)(0)>[&];(D1:g_callback:0)

typedef struct
{
    UINT32<s(1)(1)(0)>[T] address<s(1)(1)(0)>[&];
    unsigned short value<s(1)(1)(0)>[&];
}
CAH_EM4_REG_CONF<s(0)(0)(0)>[&];(D1:CAH_EM4_REG_CONF:1)[[TYPENAME:CAH_EM4_REG_CONF]]

 























 























extern struct _GlobalParams<s(1)(0)(1)>[&] *pGlobalParams<s(0)(0)(0)>[&];(D1:pGlobalParams:0)

extern void sysHardDelayUs<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T] us<s(0)(0)(0)>[&]);(D1:us:0)
extern void InitGlobalParams<s(0)(0)(0)>[&](void);(D1:InitGlobalParams:0)

UINT<s(0)(0)(0)>[T] GetBootProperties<s(0)(0)(0)>[&](void);(D1:GetBootProperties:0)
int GetBoardStyle<s(0)(0)(0)>[&](void);(D1:GetBoardStyle:0)
int GetCardFunction<s(0)(0)(0)>[&](void);(D1:GetCardFunction:0)
UINT<s(0)(0)(0)>[T] GetBoardProperties<s(0)(0)(0)>[&](void);(D1:GetBoardProperties:0)
UINT<s(0)(0)(0)>[T] GetBoardRev<s(0)(0)(0)>[&](void);(D1:GetBoardRev:0)
UINT<s(0)(0)(0)>[T] GetChassisRev<s(0)(0)(0)>[&](void);(D1:GetChassisRev:0)

int GetFlashSize<s(0)(0)(0)>[&] (void);(D1:GetFlashSize:0)
int GetRamSize<s(0)(0)(0)>[&] (void);(D1:GetRamSize:0)
int GetFlashType<s(0)(0)(0)>[&](void);(D1:GetFlashType:0)
int GetSysFlashAddr<s(0)(0)(0)>[&] (void);(D1:GetSysFlashAddr:0)

BOOL<s(0)(0)(0)>[T] GetBoardFlashBoot<s(0)(0)(0)>[&](void);(D1:GetBoardFlashBoot:0)
BOOL<s(0)(0)(0)>[T] GetBoardFlashStorage<s(0)(0)(0)>[&](void);(D1:GetBoardFlashStorage:0)

UCHAR<s(0)(0)(0)>[T] *GetBoardMacAddr<s(0)(0)(0)>[&](void);(D1:GetBoardMacAddr:0)

UINT8<s(0)(0)(0)>[T] GetSlotNumber<s(0)(0)(0)>[&](void);(D1:GetSlotNumber:0)

UCHAR<s(0)(0)(0)>[T] *GetBootVersion<s(0)(0)(0)>[&](void);(D1:GetBootVersion:0)
UCHAR<s(0)(0)(0)>[T] *GetBootDate<s(0)(0)(0)>[&](void);(D1:GetBootDate:0)

u_long<s(0)(0)(0)>[T] GetMainIP<s(0)(0)(0)>[&](void);(D1:GetMainIP:0)

UINT32<s(0)(0)(0)>[T] GetBootHostAddress<s(0)(0)(0)>[&](void);(D1:GetBootHostAddress:0)
 
UINT32<s(0)(0)(0)>[T] ppcTBLfreq<s(0)(0)(0)>[&](void);(D1:ppcTBLfreq:0)
UINT32<s(0)(0)(0)>[T] ppcTBLrd<s(0)(0)(0)>[&](void);(D1:ppcTBLrd:0)
UINT32<s(0)(0)(0)>[T] ppcTBUrd<s(0)(0)(0)>[&](void);(D1:ppcTBUrd:0)

void ppcTBLwr<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T]);(D1:UINT32:0)
void ppcTBUwr<s(0)(0)(0)>[&](UINT32<s(0)(0)(0)>[T]);(D1:UINT32:0)

UINT8<s(0)(0)(0)>[T] sysModck13Get<s(0)(0)(0)>[&](void);(D1:sysModck13Get:0)
int sysClkRateGet<s(0)(0)(0)>[&](void);(D1:sysClkRateGet:0)

void enablePrintProcess<s(0)(0)(0)>[&](void);(D1:enablePrintProcess:0)
void disablePrintProcess<s(0)(0)(0)>[&](void);(D1:disablePrintProcess:0)

int GetBoardSStatus<s(0)(0)(0)>[&](void);(D1:GetBoardSStatus:0)
void ClearBoardSStatus<s(0)(0)(0)>[&](int value<s(0)(0)(0)>[&]);(D1:value:0)
void SetBoardSStatus<s(0)(0)(0)>[&](int value<s(0)(0)(0)>[&]);(D1:value:0)
int GetBoardUStatus<s(0)(0)(0)>[&](void);(D1:GetBoardUStatus:0)
void SetBoardUStatus<s(0)(0)(0)>[&](int value<s(0)(0)(0)>[&]);(D1:value:0)

UINT32<s(0)(0)(0)>[T] GetBpSerialNumber<s(0)(0)(0)>[&](char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
UINT32<s(0)(0)(0)>[T] GetBpManDate<s(0)(0)(0)>[&](char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)


UINT32<s(0)(0)(0)>[T] GetSlotSerialNumber<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
UINT32<s(0)(0)(0)>[T] GetSlotManDate<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
UINT32<s(0)(0)(0)>[T] GetSlotPbCode<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
UINT32<s(0)(0)(0)>[T] GetSlotSiProductNumber<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&],char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
UINT32<s(0)(0)(0)>[T] GetSlotOEMProductNumber<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&], char * buffer<s(0)(0)(0)>[&], UINT32<s(0)(0)(0)>[T] bufLen<s(0)(0)(0)>[&]);(D1:bufLen:0)
int GetSlotCardFunction<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
int GetSlotBoardStyle<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
UINT<s(0)(0)(0)>[T] GetSlotBoardRev<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
UINT<s(0)(0)(0)>[T] GetSlotConfigOption<s(0)(0)(0)>[&](PbSlotNumberType_Tval<s(0)(0)(0)>[T] slot<s(0)(0)(0)>[&]);(D1:slot:0)
void setFusionMisc<s(0)(0)(0)>[&](void);(D1:setFusionMisc:0)
UINT8<s(0)(0)(0)>[T] GetFusionMisc<s(0)(0)(0)>[&](void);(D1:GetFusionMisc:0)
UINT8<s(0)(0)(0)>[T] scFpgaByteRead<s(0)(0)(0)>[&](int addr<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] readClear<s(0)(0)(0)>[&], const char * func<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&] );(D1:line:0)
INT32<s(0)(0)(0)>[T] scFpgaByteWrite<s(0)(0)(0)>[&](int addr<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] value<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] writeClear<s(0)(0)(0)>[&], const char * func<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&] );(D1:line:0)
UINT8<s(0)(0)(0)>[T] scFpgaBitRead<s(0)(0)(0)>[&](int addr<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] mask<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] readClear<s(0)(0)(0)>[&], const char * func<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&] );(D1:line:0)
INT32<s(0)(0)(0)>[T] scFpgaBitWrite<s(0)(0)(0)>[&](int addr<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] value<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] mask<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] writeClear<s(0)(0)(0)>[&], const char * func<s(0)(0)(0)>[&], int line<s(0)(0)(0)>[&] );(D1:line:0)


int slowJobAdd<s(0)(0)(0)>[&](FUNCPTR<s(0)(0)(0)>[T] routine<s(0)(0)(0)>[&], int param1<s(0)(0)(0)>[&], int param2<s(0)(0)(0)>[&], int param3<s(0)(0)(0)>[&], int param4<s(0)(0)(0)>[&]);(D1:param4:0)

void RomWriteEnable<s(0)(0)(0)>[&](void);(D1:RomWriteEnable:0)
void RomWriteDisable<s(0)(0)(0)>[&](void);(D1:RomWriteDisable:0)
void setBootFlashVpp<s(0)(0)(0)>[&](int );(D1:setBootFlashVpp:0)
    














 




 































	

























     

     






    typedef enum {
        FPGA_CTRL_OK<s(0)(0)(0)>[&] = 0,
        FPGA_CTRL_ERROR<s(0)(0)(0)>[&] = -1,
        FPGA_UNDEFINE_BOARDSTYLE<s(0)(0)(0)>[&] = 101,
        FPGA_SETDABDL_FAIL<s(0)(0)(0)>[&],
        FPGA_SETDABACCESS_FAIL<s(0)(0)(0)>[&],
        FPGA_SETOFFLINE_FAIL<s(0)(0)(0)>[&],
        FPGA_SETCLOCK_FAIL<s(0)(0)(0)>[&],
        FPGA_RESETCARD_FAIL<s(0)(0)(0)>[&],
        FPGA_DLFPGA_FAIL<s(0)(0)(0)>[&],
        FPGA_INVALID_PARAM<s(0)(0)(0)>[&],
        FPGA_BOARD_REV_ERROR<s(0)(0)(0)>[&],
        FPGA_GLUE_TEST_ERROR<s(0)(0)(0)>[&]
    }FPGA_DLFPGA_T<s(0)(0)(0)>[&];(D1:FPGA_DLFPGA_T:1)[[TYPENAME:FPGA_DLFPGA_T]]
     


     
    int fpga_InitCard<s(0)(0)(0)>[&] ( int slot<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] bDLFPGA<s(0)(0)(0)>[&] );(D1:bDLFPGA:0)






 
































void em4SetTbLoop<s(0)(0)(0)>[&] (void)
{
	unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

	u<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 1);
	u<s(0)(0)(0)>[&] |= 0x0002;
	em4Map1Wr<s(0)(0)(0)>[&] (0, 1, u<s(0)(0)(0)>[&]);

	u<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (0, 1);
	u<s(0)(0)(0)>[&] |= 0x0002;
	em4Map2Wr<s(0)(0)(0)>[&] (0, 1, u<s(0)(0)(0)>[&]);
	cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): bpc loop set !!!", __FUNCTION__<s(0)(0)(0)>[&]);
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
cah_em4_printf<s(0)(0)(0)>[&] ("\r\n");
}



int wydact<s(0)(0)(0)>[&] (void);(D1:wydact:0)
int
wydinit<s(0)(0)(0)>[&] ()
{
    printf<s(0)(0)(0)>[&] ("\r\n%s(): downloading fpga for slot 25...", __FUNCTION__<s(0)(0)(0)>[&]);
    fpga_InitCard<s(0)(0)(0)>[&] (GetSlotNumber<s(0)(0)(0)>[&] (), 1);
printf<s(0)(0)(0)>[&] ("\r\n");
printf<s(0)(0)(0)>[&] ("\r\n");
printf<s(0)(0)(0)>[&] ("\r\n");
printf<s(0)(0)(0)>[&] ("\r\n");
printf<s(0)(0)(0)>[&] ("\r\n");
printf<s(0)(0)(0)>[&] ("\r\n");
    printf<s(0)(0)(0)>[&] ("\r\n%s(): wait for 3 seconds between donwloading fpga and initialize procedure ...", __FUNCTION__<s(0)(0)(0)>[&]);
    taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () * 3);
    memset<s(0)(0)(0)>[&] (&g_cahEm4ChipCfg<s(0)(0)(0)>[&], 0, sizeof (CAH_EM4_CHIP_CONFIG_T<s(0)(0)(0)>[T]));
    memset<s(0)(0)(0)>[&] (&g_callback<s(0)(0)(0)>[&], 0, sizeof (CAH_EM4_CALLBACKS_T<s(0)(0)(0)>[T]));
    if (((WORD<s(0)(0)(0)>[T])0x1)  == CAH_EM4_InitEntity<s(0)(0)(0)>[&] (0, 0, 2))
	{
		printf<s(0)(0)(0)>[&] ("\r\nCAH_EM4_InitEntity () error, abort !!!");
		return 0;
	}

    wydact<s(0)(0)(0)>[&] ();
	taskDelay<s(0)(0)(0)>[&] (sysClkRateGet<s(0)(0)(0)>[&] () * 3);
	em4SetTbLoop<s(0)(0)(0)>[&] ();
    return 0;
}


unsigned short
em4Map2Wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


    cah_em4_wr<s(0)(0)(0)>[&] ((void *) (0x60000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);
    return u<s(0)(0)(0)>[&];
}


unsigned short
em4Map1Wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


    cah_em4_wr<s(0)(0)(0)>[&] ((void *) (0x50000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);
    return u<s(0)(0)(0)>[&];
}

unsigned short
em4MapRd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short *pU1<s(0)(0)(0)>[&], unsigned short *pU2<s(0)(0)(0)>[&])
{
    unsigned short u2<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short u1<s(0)(0)(0)>[&] =(D2) 0;
    *pU1<s(0)(0)(0)>[&] = u1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) (0x50000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]));
    *pU2<s(0)(0)(0)>[&] = u2<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) (0x60000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]));

    return u1<s(0)(0)(0)>[&];
}

unsigned short
em4Map2Rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&])
{
    unsigned short u1<s(0)(0)(0)>[&] =(D2) 0;
    u1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) (0x60000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]));

    return u1<s(0)(0)(0)>[&];
}


unsigned short
em4Map1Rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&])
{
    unsigned short u1<s(0)(0)(0)>[&] =(D2) 0;
    u1<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) (0x50000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]));

    return u1<s(0)(0)(0)>[&];
}

unsigned short
em4_bpc_wr<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&], unsigned short val<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;


    cah_em4_wr<s(0)(0)(0)>[&] ((void *) (0x80000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);
    return u<s(0)(0)(0)>[&];
}

unsigned short
em4_fus_rd<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) 0x70000010, 0);

    return u<s(0)(0)(0)>[&];
}

unsigned short
em4_bpc_rd<s(0)(0)(0)>[&] (int page<s(0)(0)(0)>[&], int off<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] ((void *) (0x80000000) , ((page<s(0)(0)(0)>[&] << 10) + off<s(0)(0)(0)>[&]));

    return u<s(0)(0)(0)>[&];
}

static void
bpc_mgt_wps<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x001);
    if (u<s(0)(0)(0)>[&] & 0x8000)
    {
        printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x001):\twork channel select");
    }
    else
    {
        printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x001):\tprotect channel select");
    }
}

void
bpc_dcm_rst_al<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    printf<s(0)(0)(0)>[&] ("\r\npage(4)off(0x000):\treset all dcm");
    em4_bpc_wr<s(0)(0)(0)>[&] (4, 0x000, 0x007);
     
    u<s(0)(0)(0)>[&] = 1;
    return;
}

void
bpc_dcm_st<s(0)(0)(0)>[&] (void)
{
    unsigned short u1<s(0)(0)(0)>[&] =(D2) em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x010);
    unsigned short u2<s(0)(0)(0)>[&] =(D2) em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x011);

    printf<s(0)(0)(0)>[&] ("\r\npage(4)off(0x010):\tclk77m locked: (%x)", u1<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\npage(4)off(0x011):\tclk93m locked: (%x)", u2<s(0)(0)(0)>[&]);

    return;
}

void
bpc_rst<s(0)(0)(0)>[&] (void)
{
    em4_bpc_wr<s(0)(0)(0)>[&] (0, 0x003, 0x0001);
     
    taskDelay<s(0)(0)(0)>[&] (10);
    em4_bpc_wr<s(0)(0)(0)>[&] (0, 0x003, 0x0000);
}

void
mgt_pwr<s(0)(0)(0)>[&] (int flag<s(0)(0)(0)>[&])
{
    if (flag<s(0)(0)(0)>[&])
    {
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x20, 0);
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x30, 0);
    }
    else
    {
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x20, 1);
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x30, 1);
    }
}

void
bpc_mgt_descram<s(0)(0)(0)>[&] (int ch<s(0)(0)(0)>[&], int en<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    if (ch<s(0)(0)(0)>[&])
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x34):\tprotect channel");
        u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x034);
    }
    else
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off0x024):\twork channel");
        u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x024);
    }

    if (en<s(0)(0)(0)>[&])
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("(enable)");
        u<s(0)(0)(0)>[&] = u<s(0)(0)(0)>[&] | 0x0020;
    }
    else
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("(disable)");
        u<s(0)(0)(0)>[&] = u<s(0)(0)(0)>[&] & 0xffdf;
    }

    if (ch<s(0)(0)(0)>[&])
    {
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x034, u<s(0)(0)(0)>[&]);
    }
    else
    {
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x024, u<s(0)(0)(0)>[&]);
    }
}


void
bpc_mgt_up_scram<s(0)(0)(0)>[&] (int en<s(0)(0)(0)>[&])
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x003);
    if (en<s(0)(0)(0)>[&])
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x003):\tmgt up scram enable");
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x003, u<s(0)(0)(0)>[&] | 0x0001);
    }
    else
    {
        cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x003):\tmgt up scram disable");
        em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x003, u<s(0)(0)(0)>[&] & 0xfffe);
    }
}

 
















 
void
bpc_rst_mgt_fifo<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x020/0x030):\treset mgt tx/rx fifo ...");
    
     
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x003);
    em4_bpc_wr<s(0)(0)(0)>[&] (1,  0x003, u<s(0)(0)(0)>[&] | 0x0010);
     
    
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x020);
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x020, u<s(0)(0)(0)>[&] | 0x0060);
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x030);
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x030, u<s(0)(0)(0)>[&] | 0x0060);
    
    taskDelay<s(0)(0)(0)>[&] (10);
    
      
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x003);
    em4_bpc_wr<s(0)(0)(0)>[&] (1,  0x003, u<s(0)(0)(0)>[&] & 0xFFEF);
     
    
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x020);
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x020, u<s(0)(0)(0)>[&] & 0xff9f);
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x030);
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x030, u<s(0)(0)(0)>[&] & 0xff9f);
    cah_em4_printf<s(0)(0)(0)>[&] ("           (done)");
}

void
bpc_mgt_8k_mon_w<s(0)(0)(0)>[&] (void)
{
    unsigned short dly8k_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short row_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short col_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short cyc_now<s(0)(0)(0)>[&] =(D2) 0;

    unsigned short dly8k<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short cyc<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short col<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short row<s(0)(0)(0)>[&] =(D2) 0;

    dly8k_now<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x002);
    row_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0xf000) >> 12;
    col_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0x0ff8) >> 3;
    cyc_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0x0003);
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x002):\tmgt c1 delay set now : row %d ; col %d ; cyc %d", row_now<s(0)(0)(0)>[&],
            col_now<s(0)(0)(0)>[&], cyc_now<s(0)(0)(0)>[&]);

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x026):\tRead out work channel phase ofset is : ");
    dly8k<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x026);
    cyc<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] - ((dly8k<s(0)(0)(0)>[&] / 4) * 4);
    col<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] / 4 - dly8k<s(0)(0)(0)>[&] / (270 * 4) * 270;
    row<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] / (4 * 270);
    cah_em4_printf<s(0)(0)(0)>[&] ("row : %d ; col : %d ; cyc : %d", row<s(0)(0)(0)>[&], col<s(0)(0)(0)>[&], cyc<s(0)(0)(0)>[&]);

}


void
bpc_mgt_8k_mon_p<s(0)(0)(0)>[&] (void)
{
    unsigned short dly8k_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short row_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short col_now<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short cyc_now<s(0)(0)(0)>[&] =(D2) 0;

    unsigned short dly8k<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short cyc<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short col<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short row<s(0)(0)(0)>[&] =(D2) 0;


    dly8k_now<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x002);
    row_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0xf000) >> 12;
    col_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0x0ff8) >> 3;
    cyc_now<s(0)(0)(0)>[&] = (dly8k_now<s(0)(0)(0)>[&] & 0x003);
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x002):\tmgt c1 delay set now : row %d ; col %d ; cyc %d", row_now<s(0)(0)(0)>[&],
            col_now<s(0)(0)(0)>[&], cyc_now<s(0)(0)(0)>[&]);

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x036):\tRead out work channel phase ofset is : ");
    dly8k<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x036);
    cyc<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] - ((dly8k<s(0)(0)(0)>[&] / 4) * 4);
    col<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] / 4 - dly8k<s(0)(0)(0)>[&] / (270 * 4) * 270;
    row<s(0)(0)(0)>[&] = dly8k<s(0)(0)(0)>[&] / (4 * 270);
    cah_em4_printf<s(0)(0)(0)>[&] ("row : %d ; col : %d ; cyc : %d", row<s(0)(0)(0)>[&], col<s(0)(0)(0)>[&], cyc<s(0)(0)(0)>[&]);

}

void
set_c1j1_a<s(0)(0)(0)>[&] (unsigned short row<s(0)(0)(0)>[&], unsigned short col<s(0)(0)(0)>[&], unsigned short cyc<s(0)(0)(0)>[&])
{
    em4_bpc_wr<s(0)(0)(0)>[&] (2, 3, (row<s(0)(0)(0)>[&] << 12) + (col<s(0)(0)(0)>[&] << 3) + cyc<s(0)(0)(0)>[&]);
}

void
set_c1j1_b<s(0)(0)(0)>[&] (unsigned short row<s(0)(0)(0)>[&], unsigned short col<s(0)(0)(0)>[&], unsigned short cyc<s(0)(0)(0)>[&])
{
    em4_bpc_wr<s(0)(0)(0)>[&] (2, 4, (row<s(0)(0)(0)>[&] << 12) + (col<s(0)(0)(0)>[&] << 3) + cyc<s(0)(0)(0)>[&]);
}

int
em4MapShow<s(0)(0)(0)>[&] ()
{
    unsigned short u1<s(0)(0)(0)>[&] =(D2) 0, u2<s(0)(0)(0)>[&] =(D2) 0;


    printf<s(0)(0)(0)>[&] ("\r\n--- 126xE1 Mapper Fpga Chip ---");
    printf<s(0)(0)(0)>[&] ("\r\n[page 0]");
    em4MapRd<s(0)(0)(0)>[&] (0, 0, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00),\tval(0x%x)(0x%x): \tdevice version", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);


    em4MapRd<s(0)(0)(0)>[&] (0, 0x01, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x01),\tval(0x%x)(0x%x): \ttb_out_edge, tb_out_loop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x02, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x02),\tval(0x%x)(0x%x): \tdevice id", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x03, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x03),\tval(0x%x)(0x%x): \tcontrol c1 add/drop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x05, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x05),\tval(0x%x)(0x%x): \tirq in", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);


    em4MapRd<s(0)(0)(0)>[&] (0, 0x09, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x09),\tval(0x%x)(0x%x): \tmask", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x0a, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x0a),\tval(0x%x)(0x%x): \tdcm_locked/reset_cnt", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x0b, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x0b),\tval(0x%x)(0x%x): \ttimeing_sel1", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (0, 0x10, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x10),\tval(0x%x)(0x%x): \ttest_reg", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (0, 0x12, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x12),\tval(0x%x)(0x%x): \te1_los", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    printf<s(0)(0)(0)>[&] ("\r\n[page 0]");

    em4MapRd<s(0)(0)(0)>[&] (1, 0x00, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00),\tval(0x%x)(0x%x): \th4_lom", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (1, 0x01, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x01),\tval(0x%x)(0x%x): \th4_lom_d", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (1, 0x02, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x02),\tval(0x%x)(0x%x): \th4_lom_m", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (1, 0x03, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x03),\tval(0x%x)(0x%x): \tlopi_vc12", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (1, 0x04, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x04),\tval(0x%x)(0x%x): \tlop_v1/v2", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (1, 0x10, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x10),\tval(0x%x)(0x%x): \tlopi_state", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);


    printf<s(0)(0)(0)>[&] ("\r\n[page 2]: POH Monitor");

    printf<s(0)(0)(0)>[&] ("\r\n");

    printf<s(0)(0)(0)>[&] ("\r\n[page 4]: POH Monitor");

    em4MapRd<s(0)(0)(0)>[&] (4, 0x000, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x000),\tval(0x%x)(0x%x): \tc1_unstable/c1_delay/edge/rst", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);


    em4MapRd<s(0)(0)(0)>[&] (4, 0x001, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x001),\tval(0x%x)(0x%x): \tthresh_high/low", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (4, 0x00c, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00c),\tval(0x%x)(0x%x): \tcfg_vc12_pdh", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x00d, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00d),\tval(0x%x)(0x%x): \tcfg_vc12_pdh", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x00e, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00e),\tval(0x%x)(0x%x): \tcfg_vc12_pdh", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x00f, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00f),\tval(0x%x)(0x%x): \tcfg_vc12_pdh", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    em4MapRd<s(0)(0)(0)>[&] (4, 0x010, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x010),\tval(0x%x)(0x%x): \te1_outloop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x011, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x011),\tval(0x%x)(0x%x): \te1_outloop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x012, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x012),\tval(0x%x)(0x%x): \te1_outloop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);
    em4MapRd<s(0)(0)(0)>[&] (4, 0x013, &u1<s(0)(0)(0)>[&], &u2<s(0)(0)(0)>[&]);
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x013),\tval(0x%x)(0x%x): \te1_outloop", u1<s(0)(0)(0)>[&], u2<s(0)(0)(0)>[&]);

    printf<s(0)(0)(0)>[&] ("\r\n");
    return 0;
}

int
em4BpcShow<s(0)(0)(0)>[&] ()
{
    printf<s(0)(0)(0)>[&] ("\r\n--- Back Plane Converter ---");
    printf<s(0)(0)(0)>[&] ("\r\n[page 0]");
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00),\tval(0x%x): \tmajor &minor version", em4_bpc_rd<s(0)(0)(0)>[&] (0, 0));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x01),\tval(0x%x): \ttest_reg", em4_bpc_rd<s(0)(0)(0)>[&] (0, 1));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x03),\tval(0x%x): \tsw_rst", em4_bpc_rd<s(0)(0)(0)>[&] (0, 3));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x04),\tval(0x%x): \tref8k", em4_bpc_rd<s(0)(0)(0)>[&] (0, 4));
    printf<s(0)(0)(0)>[&] ("\r\n[page 1]");
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00),\tval(0x%x): \ttest_reg", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x01),\tval(0x%x): \twpsel", em4_bpc_rd<s(0)(0)(0)>[&] (1, 1));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x02),\tval(0x%x): \tc1delay", em4_bpc_rd<s(0)(0)(0)>[&] (1, 2));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x03),\tval(0x%x): \tc1delay", em4_bpc_rd<s(0)(0)(0)>[&] (1, 3));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x04),\tval(0x%x): \tfrm_up_haps", em4_bpc_rd<s(0)(0)(0)>[&] (1, 4));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x05),\tval(0x%x): \tfrm_up_haps", em4_bpc_rd<s(0)(0)(0)>[&] (1, 5));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x06),\tval(0x%x): \tfrm_up_haps", em4_bpc_rd<s(0)(0)(0)>[&] (1, 6));



    printf<s(0)(0)(0)>[&] ("\r\noffset(0x20),\tval(0x%x): \tmgt", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x20));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x21),\tval(0x%x): \tmgt", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x21));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x22),\tval(0x%x): \tauto_mgt_tx_rst_cnt", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x22));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x23),\tval(0x%x): \tfrm_ds_b1_cnt", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x23));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x24),\tval(0x%x): \tfrm_ds", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x24));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x25),\tval(0x%x): \tdbg_edge/data_sel", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x25));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x26),\tval(0x%x): \tfp8k_mon", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x26));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x27),\tval(0x%x): \tmgt_tx/rx_center", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x27));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x28),\tval(0x%x): \tline c1 realtime mon", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x28));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x29),\tval(0x%x): \tlof_cnt", em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x29));
    printf<s(0)(0)(0)>[&] ("\r\n\"Port 1(protection channel) configuration/status ");
    printf<s(0)(0)(0)>[&] ("\r\n0x30, 0x31, 0x32, 0x33,0x34,0x35,0x36,0x37\"");
    printf<s(0)(0)(0)>[&] ("\r\n[page 2]");

    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00),\tval(0x%x): \ttest_reg", em4_bpc_rd<s(0)(0)(0)>[&] (2, 0x0));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x01),\tval(0x%x): \ttbi_19m_out/inloop", em4_bpc_rd<s(0)(0)(0)>[&] (2, 0x1));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x02),\tval(0x%x): \tadd_19m_c1delay_row/col", em4_bpc_rd<s(0)(0)(0)>[&] (2, 0x2));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x03),\tval(0x%x): \ttbi_add_a_c1delay_row/col", em4_bpc_rd<s(0)(0)(0)>[&] (2, 0x3));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x04),\tval(0x%x): \ttbi_add_b_c1delay_row/col", em4_bpc_rd<s(0)(0)(0)>[&] (2, 0x4));


    printf<s(0)(0)(0)>[&] ("\r\n[page 3]");
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x000),\tval(0x%x): \ttest_reg", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x000));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x004),\tval(0x%x): \tepg_alarm_a/b_fall_edge_en", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x004));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x005),\tval(0x%x): \tepg_alarm_a/b_even_err_msk", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x005));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x007),\tval(0x%x): \tlos_num_a0/1", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x007));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x008),\tval(0x%x): \tlos_num_a2/3", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x008));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x009),\tval(0x%x): \tlos_num_b0/1", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x009));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x00a),\tval(0x%x): \tlos_num_b2/3", em4_bpc_rd<s(0)(0)(0)>[&] (3, 0x00a));
    printf<s(0)(0)(0)>[&] ("\r\n[page 4]");

    printf<s(0)(0)(0)>[&] ("\r\noffset(0x000),\tval(0x%x): \tintr,cpu_dcm_all_rst", em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x000));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x005),\tval(0x%x): \ttest_reg", em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x005));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x010),\tval(0x%x): \tint_dcm_rst_cnt_77m", em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x010));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x011),\tval(0x%x): \tint_dcm_rst_cnt_93m", em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x011));
    printf<s(0)(0)(0)>[&] ("\r\noffset(0x012),\tval(0x%x): \tint_dcm_rst_cnt_19m", em4_bpc_rd<s(0)(0)(0)>[&] (4, 0x012));



    printf<s(0)(0)(0)>[&] ("\r\n");

    return 0;
}

int
cah_em4_initFusion<s(0)(0)(0)>[&] (void)
{





  
    return 0;
}



int buffer_reset<s(0)(0)(0)>[&] (void)
{
    unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
    
    u<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (1, 0x003);
    u<s(0)(0)(0)>[&] |= 0x0011;
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x003, u<s(0)(0)(0)>[&]);    

    printf<s(0)(0)(0)>[&] ("\r\nwaiting for clear ...");
    taskDelay<s(0)(0)(0)>[&] (1);
    u<s(0)(0)(0)>[&] &= ~0x0010;
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x003, u<s(0)(0)(0)>[&]);    
    
    return 0;
}
void  cah_em4_initCpu<s(0)(0)(0)>[&]  (void)
{

    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf0000120 )))  = 0x70000401;    
    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf0000124 )))  = 0xffff0e3e;
    
    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf0000110 )))  = 0x50000801;  
    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf0000114  )))  =0xff00014a;  
       
    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf0000118 )))  = 0x60000801;  
    ((UINT32<s(0)(0)(0)>[T])(*(volatile UINT32<s(0)(0)(0)>[T]*)( 0xf000011c )))  = 0xff00014a ;      
}

void cah_em4_init_fus<s(0)(0)(0)>[&] (void)
{
  UINT8<s(0)(0)(0)>[T] u<s(0)(0)(0)>[&]=(D2)0;

    ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x0102 )))  =0x02;
   taskDelay<s(0)(0)(0)>[&](10);
   ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x0102 )))  =0x06;
   taskDelay<s(0)(0)(0)>[&](10);
    ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  + 0x04 )))  = 0x00;

   u<s(0)(0)(0)>[&]= ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  + 0x02 ))) ;
   u<s(0)(0)(0)>[&]=u<s(0)(0)(0)>[&]&0x02;
   if (u<s(0)(0)(0)>[&] == 0x02)
   {
   	  printf<s(0)(0)(0)>[&] ("\r\ncah_em4_init_fus:Select work CC!");
   }
   else
   {
        printf<s(0)(0)(0)>[&] ("\r\ncah_em4_init_fus:Select protect CC!!");
   }
    
   ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x03 )))  = 0x00;
   ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x04 )))  = 0x00;
   ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x05 )))  = 0x00;
   ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x06  )))  = 0x00;

   
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x000b )))  = 0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x000d )))  = 0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x000f )))  = 0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x0011 )))  = 0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x0013 )))  = 0x16;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x0015 )))  =0x16;
 
  
 ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  + 0x001b )))  =  0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x001c )))  =  0x00;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x001d )))  =  0x03;
  ((UINT8<s(0)(0)(0)>[T])(*(volatile UINT8<s(0)(0)(0)>[T]*)( (0x70000000)  +0x001e )))  =  0x03; 
 printf<s(0)(0)(0)>[&] ("\r\ncah_em4_init_fus:fusion initializtion is ok!");
    
} 
int cah_em4_initBpc<s(0)(0)(0)>[&] (void)
{
    printf<s(0)(0)(0)>[&] ("\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
     





    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): init BackPlane Converter at base(%x)", __FUNCTION__<s(0)(0)(0)>[&], (0x80000000) );
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): The version register(%x)", __FUNCTION__<s(0)(0)(0)>[&], (em4_bpc_rd<s(0)(0)(0)>[&] (0, 0)));
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): The major version is (%x)", __FUNCTION__<s(0)(0)(0)>[&], (em4_bpc_rd<s(0)(0)(0)>[&] (0, 0) >> 8));
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): The minor version is (%x)", __FUNCTION__<s(0)(0)(0)>[&], (em4_bpc_rd<s(0)(0)(0)>[&] (0, 0) & 0xff));
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\n%s(): The micro version is (%x)", __FUNCTION__<s(0)(0)(0)>[&], em4_bpc_rd<s(0)(0)(0)>[&] (0, 1));
    bpc_mgt_wps<s(0)(0)(0)>[&] ();

    bpc_dcm_rst_al<s(0)(0)(0)>[&] ();
     
    taskDelay<s(0)(0)(0)>[&](10);
    
    bpc_dcm_st<s(0)(0)(0)>[&] ();
    printf<s(0)(0)(0)>[&] ("\r\npage(0)off(0x003):\tsoftware reset");
    bpc_rst<s(0)(0)(0)>[&] ();


    buffer_reset<s(0)(0)(0)>[&] ();     
    taskDelay<s(0)(0)(0)>[&] (10);


    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x20/0x30):\tinitialize mgt");
    mgt_pwr<s(0)(0)(0)>[&] (1);
     
    taskDelay<s(0)(0)(0)>[&] (10);

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nscram enable");
    bpc_mgt_descram<s(0)(0)(0)>[&] (0, 1);
    bpc_mgt_descram<s(0)(0)(0)>[&] (1, 1);
    bpc_mgt_up_scram<s(0)(0)(0)>[&] (1);

    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(1)off(0x002):\tset bpc rx 8k delay");
    em4_bpc_wr<s(0)(0)(0)>[&] (1, 0x002, 0x87b0);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\nFIFO reset");
     
    taskDelay<s(0)(0)(0)>[&] (50);
    bpc_rst_mgt_fifo<s(0)(0)(0)>[&] ();

    taskDelay<s(0)(0)(0)>[&] (10);
    bpc_mgt_8k_mon_w<s(0)(0)(0)>[&] ();
    bpc_mgt_8k_mon_p<s(0)(0)(0)>[&] ();

    printf<s(0)(0)(0)>[&] ("\r\npage(2)off(1):\tinitialize the TBI");

    em4_bpc_wr<s(0)(0)(0)>[&] (2, 1, 0x0000);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(2)off(3/4):\t set c1j1 a/b");
    set_c1j1_a<s(0)(0)(0)>[&] (0, 2, 0);
    set_c1j1_b<s(0)(0)(0)>[&] (0, 2, 0);
    
    cah_em4_printf<s(0)(0)(0)>[&] ("\r\npage(3)off(0x4):\t  set  epg alarm page ");
    em4_bpc_wr<s(0)(0)(0)>[&] (3, 0x04, 0x0000);
    
    printf<s(0)(0)(0)>[&] ("\r\n126xE1 bpc initialization complete");
    printf<s(0)(0)(0)>[&] ("\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

    return 0;
}




 


PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_activateEntity<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BOOL<s(0)(0)(0)>[T] b_warm<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) 0;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    cah_em4_trace<s(0)(0)(0)>[&] (1 , "\r\n(%s): Enter EM4_activateEntity File=%s; Line=%d  ", __FUNCTION__<s(0)(0)(0)>[&], "cah_126e1.c", 8639);

    if (!b_warm<s(0)(0)(0)>[&])
    {
         


         
        printf<s(0)(0)(0)>[&] ("\r\n%s(): cah_em4_initCpu ()", __FUNCTION__<s(0)(0)(0)>[&]);
         
         
         
         
        printf<s(0)(0)(0)>[&] ("\r\n%s(): cah_em4_initChip", __FUNCTION__<s(0)(0)(0)>[&]);
        cah_em4_initBpc<s(0)(0)(0)>[&]();
         
         
         
        printf<s(0)(0)(0)>[&] ("\r\n%s(): BPC initialized @0x80000000", __FUNCTION__<s(0)(0)(0)>[&]);
        
        printf<s(0)(0)(0)>[&] ("\r\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[");
        if (((WORD<s(0)(0)(0)>[T])0x0)  != cah_em4_initChip<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]))
        {
            printf<s(0)(0)(0)>[&] ("\r\EM4_activateEntity: **Error!  Entity= %d; File=%s; Line=%d  ", entity<s(0)(0)(0)>[&], "cah_126e1.c", 8662);
    		printf<s(0)(0)(0)>[&] ("\r\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");
            return ((WORD<s(0)(0)(0)>[T])0x1) ;
        }





    }
    printf<s(0)(0)(0)>[&] ("\r\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");

    gCahEm4TribVar<s(0)(0)(0)>[&].bEM4Running<s(0)(0)(0)>[&] = 1 ;
    pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] = eEm4EntAct<s(0)(0)(0)>[&];
      
     
     
      

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}


int
wydact<s(0)(0)(0)>[&] (void)
{
    CAH_EM4_activateEntity<s(0)(0)(0)>[&] (0, 0);
    return 0;
}



PB_ERROR_CODE_T<s(0)(0)(0)>[T]
CAH_EM4_deActEntity<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    printf<s(0)(0)(0)>[&] ("\r\nEM4_DEACTENTITY: ENTITY(%d) DEACTIVE", entity<s(0)(0)(0)>[&]);

    if (((void *)0)  == (pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&])))
    {
        printf<s(0)(0)(0)>[&] ("\r\nEM4_DeactEntity:  entity(%d) ptr NULL, File(%s), line(%d)", entity<s(0)(0)(0)>[&], "cah_126e1.c", 8708);
        return PB_ERR_PARAM<s(0)(0)(0)>[&];
    }

    if (eEm4EntAct<s(0)(0)(0)>[&] != pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nEM4_DeactEntity: entity(%d) status error, file(%s), line(%d)", entity<s(0)(0)(0)>[&], "cah_126e1.c", 8714);
        return PB_ERR_STATE<s(0)(0)(0)>[&];
    }

    pEntity<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&] = eEm4EntInit<s(0)(0)(0)>[&];
    printf<s(0)(0)(0)>[&] ("\r\nEM4_DeactEntity : entity(%d) intUnconnected", entity<s(0)(0)(0)>[&]);

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}



WORD<s(0)(0)(0)>[T]
CAH_EM4_DeInitEntity<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{




	CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *p<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    printf<s(0)(0)(0)>[&] ("\r\n%s(): enter function ", __FUNCTION__<s(0)(0)(0)>[&]);

	p<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (0);
    cah_em4_revise<s(0)(0)(0)>[&] (0);

	if (!p<s(0)(0)(0)>[&])
	{
		printf<s(0)(0)(0)>[&] ("\r\n%s(): pointer gppCahEm4CfgVar[0] NULL ", __FUNCTION__<s(0)(0)(0)>[&]);
		return ((WORD<s(0)(0)(0)>[T])0x1) ;
	}

	if (p<s(0)(0)(0)>[&]->state<s(0)(0)(0)>[&])
	{
		printf<s(0)(0)(0)>[&] ("\r\n%s(): card state(%d) error", __FUNCTION__<s(0)(0)(0)>[&], gppCahEm4CfgVar<s(0)(0)(0)>[&][0]->state<s(0)(0)(0)>[&]);
		return ((WORD<s(0)(0)(0)>[T])0x1) ;
	}

   	{ if( p<s(0)(0)(0)>[&] ) { free<s(0)(0)(0)>[&]((void*) p<s(0)(0)(0)>[&] );  p<s(0)(0)(0)>[&]  = ((void *)0) ; }} ;
    gppCahEm4CfgVar<s(0)(0)(0)>[&][0] = ((void *)0) ;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;

}





void
CAH_EM4_setTransFunc<s(0)(0)(0)>[&] (CahEm4pTransFunc<s(0)(0)(0)>[T] pfunc<s(0)(0)(0)>[&])
{



    g_pTransFunc<s(0)(0)(0)>[&] = pfunc<s(0)(0)(0)>[&];


    return;
}



WORD<s(0)(0)(0)>[T]
CAH_EM4_GetSlip<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pdwPSlip<s(0)(0)(0)>[&], DWORD<s(0)(0)(0)>[T] * pdwNSlip<s(0)(0)(0)>[&])
{
    cah_em4_GetSlip<s(0)(0)(0)>[&] (dwPos<s(0)(0)(0)>[&], SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), pdwPSlip<s(0)(0)(0)>[&], pdwNSlip<s(0)(0)(0)>[&]);
    return 0;
}

WORD<s(0)(0)(0)>[T]
CAH_EM4_getLatchStatus<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&])
{




    CAH_EM4_ENTITY_LATCH_T<s(0)(0)(0)>[T] ret<s(0)(0)(0)>[&] =(D2) EM4_ENTITY_UNKNOWN<s(0)(0)(0)>[&];
    void *baseaddr<s(0)(0)(0)>[&] =(D2) ((void *)0) ;
    unsigned short status<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;

    baseaddr<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&], 100);
    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    status<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (baseaddr<s(0)(0)(0)>[&], ((0x00 << 10) | 0x05) );
    if (status<s(0)(0)(0)>[&] & 0x01)
    {
        ret<s(0)(0)(0)>[&] = EM4_ENTITY_DELATCH<s(0)(0)(0)>[&];
    } else {
        ret<s(0)(0)(0)>[&] = EM4_ENTITY_LATCH<s(0)(0)(0)>[&];
    }
    return ret<s(0)(0)(0)>[&];

}


WORD<s(0)(0)(0)>[T]
CAH_EM4_GetTuAlmState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_TU_ALARM_T<s(0)(0)(0)>[T] * psTuAlarm<s(0)(0)(0)>[&])
{

     int ulPort<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short uu<s(0)(0)(0)>[&] =(D2) 0, u<s(0)(0)(0)>[&] =(D2) 0;
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	int regcnt<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
      ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;

	 
     cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x01 << 10) | 0x03) , ulPort<s(0)(0)(0)>[&] | 0x8000);
     

    regcnt<s(0)(0)(0)>[&] = 0;
    while (1)
    {
        uu<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x01 << 10) | 0x03) );
        if (!(0x8000 & uu<s(0)(0)(0)>[&]))
        {
            break;
        }
        else
        {
            regcnt<s(0)(0)(0)>[&]++;
            if (regcnt<s(0)(0)(0)>[&] > 100)
            {
				printf<s(0)(0)(0)>[&] ("\r\n%s(): fpga read error ", __FUNCTION__<s(0)(0)(0)>[&]);
                break;
            }
        }
    }

    u<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((0x01 << 10) | 0x10) ) & 0x0003;
    psTuAlarm<s(0)(0)(0)>[&]->ais<s(0)(0)(0)>[&] = (0x0001 == u<s(0)(0)(0)>[&]) ? 1 : 0;
    psTuAlarm<s(0)(0)(0)>[&]->lop<s(0)(0)(0)>[&] = (0x0002 == u<s(0)(0)(0)>[&]) ? 1 : 0;

    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}



WORD<s(0)(0)(0)>[T]
CAH_EM4_GetLpAlmState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_LP_ALARM_T<s(0)(0)(0)>[T] * psLpAlarm<s(0)(0)(0)>[&])
{
     int ulPort<s(0)(0)(0)>[&] =(D2) 0; 
	void * base<s(0)(0)(0)>[&] =(D2) 0;
	unsigned short u<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
       ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	 u<s(0)(0)(0)>[&] = cah_em4_pohRead<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&], 0x03 );
	

    psLpAlarm<s(0)(0)(0)>[&]->tim<s(0)(0)(0)>[&] 	= ((u<s(0)(0)(0)>[&] & 0x0001) ? 1 : 0);
    psLpAlarm<s(0)(0)(0)>[&]->plm<s(0)(0)(0)>[&] 	= ((u<s(0)(0)(0)>[&] & 0x0004) ? 1 : 0);
    psLpAlarm<s(0)(0)(0)>[&]->uneq<s(0)(0)(0)>[&] = ((u<s(0)(0)(0)>[&] & 0x0008) ? 1 : 0);
    psLpAlarm<s(0)(0)(0)>[&]->rdi<s(0)(0)(0)>[&] 	= ((u<s(0)(0)(0)>[&] & 0x0010) ? 1 : 0);
    psLpAlarm<s(0)(0)(0)>[&]->rfi<s(0)(0)(0)>[&] 	= ((u<s(0)(0)(0)>[&] & 0x0080) ? 1 : 0);
    
	return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

int g_mon<s(0)(0)(0)>[&] =(D2) 0;
int g_monport<s(0)(0)(0)>[&] =(D2) 0;

int cah_em4_readPortSchemeLos<s(0)(0)(0)>[&] (int groupport<s(0)(0)(0)>[&] , int group<s(0)(0)(0)>[&])
{
    int phyport<s(0)(0)(0)>[&] =(D2) 0;
    UINT16<s(0)(0)(0)>[T] reg<s(0)(0)(0)>[&] =(D2) 0;
    int los<s(0)(0)(0)>[&] =(D2) 0;

    if (0 > groupport<s(0)(0)(0)>[&] || 71 < groupport<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("(%s): port number(%d) overflow", "cah_126e1.c", groupport<s(0)(0)(0)>[&]);
        return -1;
    }

    phyport<s(0)(0)(0)>[&] = g_phyportmap<s(0)(0)(0)>[&] [groupport<s(0)(0)(0)>[&] + 1] - 1;
    reg<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (3, (phyport<s(0)(0)(0)>[&]/16)+((!group<s(0)(0)(0)>[&]) ? ((0x021) ):0x26));
    if (g_mon<s(0)(0)(0)>[&] && g_monport<s(0)(0)(0)>[&] == groupport<s(0)(0)(0)>[&])
    {
            printf<s(0)(0)(0)>[&] ("group(%d)phyport(%2d)reg(%4x)off(%4x)\r\n", group<s(0)(0)(0)>[&], phyport<s(0)(0)(0)>[&], reg<s(0)(0)(0)>[&],   (phyport<s(0)(0)(0)>[&]/16)+((!group<s(0)(0)(0)>[&]) ? ((0x021) ):0x26) );
    }
    los<s(0)(0)(0)>[&] = (reg<s(0)(0)(0)>[&] & (0x0001 << ((phyport<s(0)(0)(0)>[&]) % 16))) ? 1 : 0;

    return los<s(0)(0)(0)>[&];
}


WORD<s(0)(0)(0)>[T]
cah_em4_getPhyLos<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_PPI_ALARM_T<s(0)(0)(0)>[T] * psPpiAlarm<s(0)(0)(0)>[&])
{
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
	void * base<s(0)(0)(0)>[&] =(D2) 0;
    int schemePort<s(0)(0)(0)>[&] =(D2) 0;

	{if (125 <  byPortNo<s(0)(0)(0)>[&] ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  byPortNo<s(0)(0)(0)>[&] ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (byPortNo<s(0)(0)(0)>[&]) - 1;
    base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, byPortNo<s(0)(0)(0)>[&]);

    schemePort<s(0)(0)(0)>[&] = g_phyportmap<s(0)(0)(0)>[&] [ulPort<s(0)(0)(0)>[&] + 1] - 1;
    
     psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&] = cah_em4_readPortSchemeLos<s(0)(0)(0)>[&] (ulPort<s(0)(0)(0)>[&], byPortNo<s(0)(0)(0)>[&] / 63);
     



    return psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&];
}

 


static int
isIOAbsent<s(0)(0)(0)>[&](int port<s(0)(0)(0)>[&], unsigned char *pIO<s(0)(0)(0)>[&])
{
    int absent<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0;
    int io<s(0)(0)(0)>[&] =(D2) 0;

    io<s(0)(0)(0)>[&] = 0;

    if (port<s(0)(0)(0)>[&] >= 0 && port<s(0)(0)(0)>[&] <=20){
        val<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x02) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 5;    
    } else if (21 <= port<s(0)(0)(0)>[&] && port<s(0)(0)(0)>[&] <= 41){
        val<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x04) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 3; 
    } else if (42 <= port<s(0)(0)(0)>[&] && port<s(0)(0)(0)>[&] <= 62){
        val<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x08) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 1; 
    } else if ((0 + 63) <= port<s(0)(0)(0)>[&] && port<s(0)(0)(0)>[&] <= (20 + 63)){
        val<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x02) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 6; 
    } else if ((21 + 63) <= port<s(0)(0)(0)>[&] && port<s(0)(0)(0)>[&] <= (41 + 63)) {
        val<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x04) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 4; 
    } else if ((42 + 63) <= port<s(0)(0)(0)>[&] && port<s(0)(0)(0)>[&] <= (62 + 63)) {
        val<s(0)(0)(0)>[&] = em4Map2Rd<s(0)(0)(0)>[&] (0, 0x12);
        absent<s(0)(0)(0)>[&] = (val<s(0)(0)(0)>[&] & 0x08) ? 1 : 0;
        *pIO<s(0)(0)(0)>[&] = 2; 
    }
   
    return (absent<s(0)(0)(0)>[&]);
}




 


int clr_payload_ais<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	void * base<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0;
    int byte<s(0)(0)(0)>[&] =(D2) 0, bit<s(0)(0)(0)>[&] =(D2) 0;

    byte<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] / 16;
    bit<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] % 16;
    
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]));
    
    if (val<s(0)(0)(0)>[&] & (0x01 << bit<s(0)(0)(0)>[&])) 
    {
         


        val<s(0)(0)(0)>[&] &= ~(0x01 << bit<s(0)(0)(0)>[&]);
        cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);
    } else {
    }

    return 0;

}


 


int set_payload_ais<s(0)(0)(0)>[&] (int port<s(0)(0)(0)>[&])
{
	void * base<s(0)(0)(0)>[&] =(D2) 0;
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0;
    int byte<s(0)(0)(0)>[&] =(D2) 0, bit<s(0)(0)(0)>[&] =(D2) 0;

    byte<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] / 16;
    bit<s(0)(0)(0)>[&] = port<s(0)(0)(0)>[&] % 16;
    
    val<s(0)(0)(0)>[&] = cah_em4_rd<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]));
    
    if (val<s(0)(0)(0)>[&] & (0x01 << bit<s(0)(0)(0)>[&])) 
    {
    } else {
        val<s(0)(0)(0)>[&] |= (0x01 << bit<s(0)(0)(0)>[&]);
        cah_em4_wr<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ((((0x00 << 10) | 0x20) ) + byte<s(0)(0)(0)>[&]), val<s(0)(0)(0)>[&]);
    }

    return 0;
}


int set_ioN_ais<s(0)(0)(0)>[&] (int io<s(0)(0)(0)>[&])
{
    int firstport<s(0)(0)(0)>[&] =(D2) 0, lastport<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    sdd_get_ioN_port<s(0)(0)(0)>[&] (io<s(0)(0)(0)>[&], &firstport<s(0)(0)(0)>[&], &lastport<s(0)(0)(0)>[&]);

    for (i<s(0)(0)(0)>[&] = firstport<s(0)(0)(0)>[&]; i<s(0)(0)(0)>[&] <= lastport<s(0)(0)(0)>[&]; i<s(0)(0)(0)>[&] ++);
    {
        set_payload_ais<s(0)(0)(0)>[&] (i<s(0)(0)(0)>[&]);
    }
    
    return 0;
}





int clear_IO_payload_si<s(0)(0)(0)>[&] (io<s(0)(0)(0)>[&])
{
    int firstport<s(0)(0)(0)>[&] =(D2) 0, lastport<s(0)(0)(0)>[&] =(D2) 0;
    int i<s(0)(0)(0)>[&] =(D2) 0;

    sdd_get_ioN_port<s(0)(0)(0)>[&] (io<s(0)(0)(0)>[&], &firstport<s(0)(0)(0)>[&], &lastport<s(0)(0)(0)>[&]);

    for (i<s(0)(0)(0)>[&] = firstport<s(0)(0)(0)>[&]; i<s(0)(0)(0)>[&] <= lastport<s(0)(0)(0)>[&]; i<s(0)(0)(0)>[&] ++);
    {
        clr_payload_ais<s(0)(0)(0)>[&] (i<s(0)(0)(0)>[&]);
    }
    
    return 0;
}




int g_ioabsent<s(0)(0)(0)>[&] =(D2) 0;





WORD<s(0)(0)(0)>[T]
CAH_EM4_GetPpiAlmState<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], UINT8<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], CTD_PPI_ALARM_T<s(0)(0)(0)>[T] * psPpiAlarm<s(0)(0)(0)>[&])
{
    ENTITY_T<s(0)(0)(0)>[T] entity<s(0)(0)(0)>[&] =(D2) 0;
    int ulPort<s(0)(0)(0)>[&] =(D2) 0;
    CAH_EM4_ENTITY_DATA_T<s(0)(0)(0)>[T] *pEntity<s(0)(0)(0)>[&];(D1:pEntity:0)
	unsigned short u<s(0)(0)(0)>[&] =(D2) 0;
	void * base<s(0)(0)(0)>[&] =(D2) 0;
    int isloop<s(0)(0)(0)>[&] =(D2) 0;
    CTD_PPI_ALARM_T<s(0)(0)(0)>[T] alm<s(0)(0)(0)>[&];(D1:alm:0)
    unsigned short val<s(0)(0)(0)>[&] =(D2) 0;
    unsigned char io<s(0)(0)(0)>[&] =(D2) 0;

    val<s(0)(0)(0)>[&] = 0;

	{if (125 <  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ) { printf<s(0)(0)(0)>[&] ("\r\n%s(): port(%d) overflow", __FUNCTION__<s(0)(0)(0)>[&],  SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) ); printf<s(0)(0)(0)>[&] ("\r\n\r\n\r\n"); return ((WORD<s(0)(0)(0)>[T])0x1) ; } } ;
    memset<s(0)(0)(0)>[&] (&alm<s(0)(0)(0)>[&], 0, sizeof (CTD_PPI_ALARM_T<s(0)(0)(0)>[T]));

    pEntity<s(0)(0)(0)>[&] = cah_em4_getEntityPtr<s(0)(0)(0)>[&] (entity<s(0)(0)(0)>[&]);
    ulPort<s(0)(0)(0)>[&] = cah_em4_mapPort<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&])) - 1;
	base<s(0)(0)(0)>[&] = cah_em4_getEntityBase<s(0)(0)(0)>[&] (0, SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
    if (byPortNo<s(0)(0)(0)>[&] == g_ulport<s(0)(0)(0)>[&])
    {
        printf<s(0)(0)(0)>[&] ("\r\nCAH_EM4_GetPpiAlmState: ulport(%d)", ulPort<s(0)(0)(0)>[&]); 
    }
    u<s(0)(0)(0)>[&] = cah_em4_readPdhAlarm<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);
    
    isloop<s(0)(0)(0)>[&] = cah_em4_gete1outloop<s(0)(0)(0)>[&] (base<s(0)(0)(0)>[&], ulPort<s(0)(0)(0)>[&]);

    psPpiAlarm<s(0)(0)(0)>[&]->lom<s(0)(0)(0)>[&] = (u<s(0)(0)(0)>[&] & 0x0002) ? 1 : 0;
    psPpiAlarm<s(0)(0)(0)>[&]->ais<s(0)(0)(0)>[&] = (u<s(0)(0)(0)>[&] & 0x0008) ? 1 : 0;  
    psPpiAlarm<s(0)(0)(0)>[&]->rdi<s(0)(0)(0)>[&] = (u<s(0)(0)(0)>[&] & 0x0001) ? 1 : 0;
    psPpiAlarm<s(0)(0)(0)>[&]->lof<s(0)(0)(0)>[&] = (u<s(0)(0)(0)>[&] & 0x0004) ? 1 : 0;

     


    psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&] = cah_em4_getPhyLos<s(0)(0)(0)>[&] (dwPos<s(0)(0)(0)>[&], SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), &alm<s(0)(0)(0)>[&]);

     


    if (isloop<s(0)(0)(0)>[&]) psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&] = 0;



     




    if (isIOAbsent<s(0)(0)(0)>[&](SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), &io<s(0)(0)(0)>[&]))
    {
        if ((SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) == 13 || SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]) == 120) && g_ioabsent<s(0)(0)(0)>[&])
        {
            printf<s(0)(0)(0)>[&] ("\r\nport(%d)'s IO is absent , skip it", SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]));
        }
        psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&] = 1;
         



        clear_IO_payload_si<s(0)(0)(0)>[&] (io<s(0)(0)(0)>[&]);

    } else {
        if (psPpiAlarm<s(0)(0)(0)>[&]->los<s(0)(0)(0)>[&])
        {
            cah_em4_ManualInsertPayloadAIS<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), 1 );
        }
        else
        {
            cah_em4_ManualInsertPayloadAIS<s(0)(0)(0)>[&] (SDD_126xE1IOPortConvert<s(0)(0)(0)>[&](byPortNo<s(0)(0)(0)>[&]), 0 );
        }
    }

     
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}

WORD<s(0)(0)(0)>[T]
CAH_EM4_GetFpgaVersion<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], char *pucFpgaVer<s(0)(0)(0)>[&])
{
	unsigned short version<s(0)(0)(0)>[&] =(D2) 0, v1<s(0)(0)(0)>[&] =(D2) 0;

	version<s(0)(0)(0)>[&] = em4Map1Rd<s(0)(0)(0)>[&] (0, 0);
    v1<s(0)(0)(0)>[&] = em4_bpc_rd<s(0)(0)(0)>[&] (0, 0);
	 
    sprintf<s(0)(0)(0)>[&] (pucFpgaVer<s(0)(0)(0)>[&], "V%d.%d, V%d.%d", 
        (version<s(0)(0)(0)>[&] & 0xff00) >> 8, (version<s(0)(0)(0)>[&] & 0xff),
        (v1<s(0)(0)(0)>[&] && 0xff00) >> 8, (v1<s(0)(0)(0)>[&] && 0x00ff));
    return (((WORD<s(0)(0)(0)>[T])0x0) );
}


WORD<s(0)(0)(0)>[T]
CAH_EM4_GetTxLpTti<s(0)(0)(0)>[&] (DWORD<s(0)(0)(0)>[T] dwPos<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] byPortNo<s(0)(0)(0)>[&], TTI_LEN_T<s(0)(0)(0)>[T] eTtiMode<s(0)(0)(0)>[&], BYTE<s(0)(0)(0)>[T] * pbyTtiValue<s(0)(0)(0)>[&])
{
    return ((WORD<s(0)(0)(0)>[T])0x0) ;
}




int
pbFpgaIsrHookDel<s(0)(0)(0)>[&] (int handle<s(0)(0)(0)>[&])
{
    return 0 ;
}

int
pbFpgaIsrEnable<s(0)(0)(0)>[&] (int chip<s(0)(0)(0)>[&])
{
    return 0 ;
}

int
pbFpgaIntrDisable<s(0)(0)(0)>[&] (int handle<s(0)(0)(0)>[&])
{
    return 0 ;
}

 





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 








