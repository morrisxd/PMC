cscope 15 $HOME/morrix-project-name/cl.tar/cl/std -q 0000000480 0000063777
	@c-standard.l

1 
ANSI
 
C
 
gømm¨
, 
Lex
 
•ecifiˇti⁄


2 
In
 1985, 
Jeff
 
Lì
 
published
 
this
 
Lex
 
•ecifiˇti⁄
 
togëhî
 
wôh
 
a
 
Yacc
 
gømm¨
 
the
 
A¥û
 30, 1985 
ANSI
 
C
 
dø·
. 
Tom
 
Stockfisch
 
ªpo°ed
 
bŸh
 
to
 
√t
.
sour˚s
 
ö
 1987; 
th©
 
‹igöÆ
, 
as
 
míti⁄ed
 i¿thê
™swî
Åÿ
que°i⁄
 17.25 
of
Åhê
comp
.
œng
.
c
 
FAQ
, 
ˇn
 
be
 
·p
'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.

3 
I
 
öãnd
 
to
 
kìp
 
this
 
vîsi⁄
 
as
 
˛o£
Åÿ
the
 
cuºít
 
C
 
Sènd¨d
 
gømm¨
á†
possibÀ
; 
∂ó£
 
Àt
 
me
 
know
 
you
 
discovî
 
dis¸ï™cõs
.

5 
Juâa
 
Degíî
, 1995

10 
√wlöe
 \
n


11 
D
 [0-9]

12 
L
 [
a
-
zA
-
Z_
]

13 
H
 [
a
-
fA
-
F0
-9]

14 
E
 [
Ee
][+-]?{
D
}+

15 
FS
 (
f
|
F
|
l
|
L
)

16 
IS
 (
u
|
U
|
l
|
L
)*

19 
	~<°dio.h
>

20 
	~"y.èb.h
"

21 
	glöío
 = 0;

22 
id
[128];

23 
dump
;

24 
i_ty≥def
;

25 
i_°ru˘_‹_uni⁄
;

26 
cou¡
();

27 
	$£t_°rc_uni⁄
()

29 
i_°ru˘_‹_uni⁄
 = 1;

30  
i_°ru˘_‹_uni⁄
;

31 
	}
}

36 %% /* 
	$yyÀx
 */

37 {
√wlöe
} { 
löío
 ++; 
	`cou¡
(); }

38 "/*" { 
	`commít
(); }

39 "°dio.h" { 
	`cou¡
();  (
FILENAME
); }

40 "#ö˛ude" { 
	`hódî
(); }

41 "auto" { 
	`cou¡
(); (
AUTO
); }

42 "bªak" { 
	`cou¡
(); (
BREAK
); }

43 "ˇ£" { 
	`cou¡
(); (
CASE
); }

44 "ch¨" { 
	`cou¡
(); (
CHAR
); }

45 "c⁄°" { 
	`cou¡
(); (
CONST
); }

46 "c⁄töue" { 
	`cou¡
(); (
CONTINUE
); }

47 "deÁu…" { 
	`cou¡
(); (
DEFAULT
); }

48 "do" { 
	`cou¡
(); (
DO
); }

49 "doubÀ" { 
	`cou¡
(); (
DOUBLE
); }

50 "ñ£" { 
	`cou¡
(); (
ELSE
); }

51 "íum" { 
	`cou¡
(); (
ENUM
); }

52 "exã∫" { 
	`cou¡
(); (
EXTERN
); }

53 "Êﬂt" { 
	`cou¡
(); (
FLOAT
); }

54 "f‹" { 
	`cou¡
(); (
FOR
); }

55 "gŸo" { 
	`cou¡
(); (
GOTO
); }

56 "if" { 
	`cou¡
(); (
IF
); }

57 "öt" { 
	`cou¡
(); (
INT
); }

58 "l⁄g" { 
	`cou¡
(); (
LONG
); }

59 "ªgi°î" { 
	`cou¡
(); (
REGISTER
); }

60 "ªtu∫" { 
	`cou¡
(); (
RETURN
); }

61 "sh‹t" { 
	`cou¡
(); (
SHORT
); }

62 "sig√d" { 
	`cou¡
(); (
SIGNED
); }

63 "sizeof" { 
	`cou¡
(); (
SIZEOF
); }

64 "°©ic" { 
	`cou¡
(); (
STATIC
); }

65 "°ru˘" { 
	`cou¡
(); (
STRUCT
); }

66 "swôch" { 
	`cou¡
(); (
SWITCH
); }

67 "ty≥def" { 
	`cou¡
(); (
TYPEDEF
); }

68 "uni⁄" { 
	`cou¡
(); (
UNION
); }

69 "unsig√d" { 
	`cou¡
(); (
UNSIGNED
); }

70 "void" { 
	`cou¡
(); (
VOID
); }

71 "vﬁ©ûe" { 
	`cou¡
(); (
VOLATILE
); }

72 "whûe" { 
	`cou¡
(); (
WHILE
); }

74 {
L
}({L}|{
D
})* { 
	`cou¡
(); (
	`check_ty≥
()); }

76 0[
xX
]{
H
}+{
IS
}? { 
	`cou¡
(); (
CONSTANT
); }

77 0{
D
}+{
IS
}? { 
	`cou¡
(); (
CONSTANT
); }

78 {
D
}+{
IS
}? { 
	`cou¡
(); (
CONSTANT
); }

79 
L
?'(\\.|[^\\'])+' { count();Ñeturn(CONSTANT); }

81 {
D
}+{
E
}{
FS
}? { 
	`cou¡
(); (
CONSTANT
); }

82 {
D
}*"."{D}+({
E
})?{
FS
}? { 
	`cou¡
(); (
CONSTANT
); }

83 {
D
}+"."{D}*({
E
})?{
FS
}? { 
	`cou¡
(); (
CONSTANT
); }

85 
L
?\"(\\.|[^\\"])*\" { count();Ñeturn(STRING_LITERAL); }

87 "..." { 
	`cou¡
(); (
ELLIPSIS
); }

88 ">>=" { 
	`cou¡
(); (
RIGHT_ASSIGN
); }

89 "<<=" { 
	`cou¡
(); (
LEFT_ASSIGN
); }

90 "+=" { 
	`cou¡
(); (
ADD_ASSIGN
); }

91 "-=" { 
	`cou¡
(); (
SUB_ASSIGN
); }

92 "*=" { 
	`cou¡
(); (
MUL_ASSIGN
); }

93 "/=" { 
	`cou¡
(); (
DIV_ASSIGN
); }

94 "%=" { 
	`cou¡
(); (
MOD_ASSIGN
); }

95 "&=" { 
	`cou¡
(); (
AND_ASSIGN
); }

96 "^=" { 
	`cou¡
(); (
XOR_ASSIGN
); }

97 "|=" { 
	`cou¡
(); (
OR_ASSIGN
); }

98 ">>" { 
	`cou¡
(); (
RIGHT_OP
); }

99 "<<" { 
	`cou¡
(); (
LEFT_OP
); }

100 "++" { 
	`cou¡
(); (
INC_OP
); }

101 "--" { 
	`cou¡
(); (
DEC_OP
); }

102 "->" { 
	`cou¡
(); (
PTR_OP
); }

103 "&&" { 
	`cou¡
(); (
AND_OP
); }

104 "||" { 
	`cou¡
(); (
OR_OP
); }

105 "<=" { 
	`cou¡
(); (
LE_OP
); }

106 ">=" { 
	`cou¡
(); (
GE_OP
); }

107 "==" { 
	`cou¡
(); (
EQ_OP
); }

108 "!=" { 
	`cou¡
(); (
NE_OP
); }

109 ";" { 
	`cou¡
(); (';'); }

110 ("{"|"<%"Ë{ 
	`cou¡
(); ('{'); }

111 ("}"|"%>"Ë{ 
	`cou¡
(); ('}'); }

112 "," { 
	`cou¡
(); (','); }

113 ":" { 
	`cou¡
(); (':'); }

114 "=" { 
	`cou¡
(); ('='); }

115 "(" { 
	`cou¡
(); ('('); }

116 ")" { 
	`cou¡
(); (')'); }

117 ("["|"<:"Ë{ 
	`cou¡
(); ('['); }

118 ("]"|":>"Ë{ 
	`cou¡
(); (']'); }

119 "." { 
	`cou¡
(); ('.'); }

120 "&" { 
	`cou¡
(); ('&'); }

121 "!" { 
	`cou¡
(); ('!'); }

122 "~" { 
	`cou¡
(); ('~'); }

123 "-" { 
	`cou¡
(); ('-'); }

124 "+" { 
	`cou¡
(); ('+'); }

125 "*" { 
	`cou¡
(); ('*'); }

126 "/" { 
	`cou¡
(); ('/'); }

127 "%" { 
	`cou¡
(); ('%'); }

128 "<" { 
	`cou¡
(); ('<'); }

129 ">" { 
	`cou¡
(); ('>'); }

130 "^" { 
	`cou¡
(); ('^'); }

131 "|" { 
	`cou¡
(); ('|'); }

132 "?" { 
	`cou¡
(); ('?'); }

135 [ \
t
\
v
\
n
\
f
] { 
	`cou¡
(); }

138 
	}
%%

140 
	$yywøp
()

143 
	}
}

145 
	$ö˛
()

147 
c
;

149 (
c
 = 
	`öput
()) != '\n')

150 
	`putch¨
 (
c
);

151 
	}
}

153 
	$hódî
()

155 
c
;

156 
	`¥ötf
 ("%s", 
yyãxt
);

157 (
c
 = 
	`öput
()) != '\n' && c != 0)

158 
	`putch¨
(
c
);

159 i‡(
c
 = '\n'); 
	`putch¨
 (c);

160 
	}
}

163 
	$commít
()

165 
c
, 
c1
;

167 
	`puts
(
yyãxt
);

168 
lo›
:

169 (
c
 = 
	`öput
()) != '*' && c != 0)

170 
	`putch¨
(
c
);

172 i‡((
c1
 = 
	`öput
()Ë!'/' && 
c
 != 0)

174 
	`u≈ut
(
c1
);

175 
lo›
;

177 i‡(
c
 ='*' && 
c1
 == '/') {

178 
	`putch¨
 (
c
);

181 i‡(
c
 != 0)

182 
	`putch¨
(
c1
);

183 
	}
}

186 
	gcﬁumn
 = 0;

188 
	$cou¡
()

190 
i
;

192 
i
 = 0; 
yyãxt
[i] != '\0'; i++)

193 i‡(
yyãxt
[
i
] == '\n')

194 
cﬁumn
 = 0;

195 i‡(
yyãxt
[
i
] == '\t')

196 
cﬁumn
 += 8 - (column % 8);

198 
cﬁumn
++;

200 
ECHO
;

201 
	}
}

203 
id
[128];

204 
	$check_ty≥
()

218 
	`•rötf
 (
id
, "%s", 
yyãxt
);

219 i‡(
dump
) {

221 
dump
 = 0;

224 
	`¥ötf
 ("<s(%d)>", 
i_°ru˘_‹_uni⁄
);

225 (
IDENTIFIER
);

226 
	}
}

	@cl-standard.tab.c

1 
	#YY_∑r£_h_ö˛uded


	)

38 #i‡
deföed
–
_MSDOS
 ) || deföed(
MSDOS
Ë|| deföed(
__MSDOS__
)

39 
	#__MSDOS_AND_ALIKE


	)

42 #i‡
deföed
(
_WINDOWS
Ë&& deföed(
_MSC_VER
)

43 
	#__HAVE_NO_ALLOCA


	)

44 
	#__MSDOS_AND_ALIKE


	)

47 #i‚de‡
Æloˇ


48 #i‡
deföed
–
__GNUC__
)

49 
	#Æloˇ
 
__buûtö_Æloˇ


	)

51 #ñi‡(!
deföed
 (
__STDC__
Ë&& deföed (
•¨c
)Ë|| deföed (
__•¨c__
Ë|| deföed (
__•¨c
Ë|| deföed (
__sgi
)

52 
	~<Æloˇ.h
>

54 #ñi‡
deföed
 (
__MSDOS_AND_ALIKE
)

55 
	~<mÆloc.h
>

56 #i‚de‡
__TURBOC__


58 
	#Æloˇ
 
_Æloˇ


	)

61 #ñi‡
deföed
(
_AIX
)

63 #¥agm®
Æloˇ


64 
	~<mÆloc.h
>

66 #ñi‡
deföed
(
__hpux
)

67 #ifde‡
__˝lu•lus


69 *
Æloˇ
 ();

72 *
Æloˇ
 ();

78 #ifde‡
c_∂u•lus


79 #i‚de‡
__˝lu•lus


80 
	#__˝lu•lus


	)

84 #ifde‡
__˝lu•lus


85 #i‚de‡
YY_USE_CLASS


89 #i‚de‡
__STDC__


90 c⁄°

	)

92 #ifde‡
YY_USE_CLASS


97 
	~<°dio.h
>

98 
	#YYBISON
 1

	)

104 
	gi_ty≥def
 = 0;

105 
	gi_°ru˘_‹_uni⁄
 = 0;

110 
	#YY_∑r£_BISON
 1

	)

112 #i‚de‡
YY_∑r£_COMPATIBILITY


113 #i‚de‡
YY_USE_CLASS


114 
	#YY_∑r£_COMPATIBILITY
 1

	)

116 
	#YY_∑r£_COMPATIBILITY
 0

	)

120 #i‡
YY_∑r£_COMPATIBILITY
 != 0

122 #ifde‡
YYLTYPE


123 #i‚de‡
YY_∑r£_LTYPE


124 
	#YY_∑r£_LTYPE
 
YYLTYPE


	)

129 #i‚de‡
YY_∑r£_STYPE


130 
	#YY_∑r£_STYPE
 
YYSTYPE


	)

133 #ifde‡
YYDEBUG


134 #i‚de‡
YY_∑r£_DEBUG


135 
	#YY_∑r£_DEBUG
 
YYDEBUG


	)

140 #i‚de‡
YY_∑r£_USE_GOTO


141 
	#YY_∑r£_USE_GOTO
 1

	)

146 #i‚de‡
YY_∑r£_USE_GOTO


147 
	#YY_∑r£_USE_GOTO
 0

	)

150 #i‚de‡
YY_∑r£_PURE


161 #i‚de‡
YY_USE_CLASS


162 #i‚de‡
YYSTYPE


163 
	#YYSTYPE
 

	)

164 
	#YYSTYPE_IS_TRIVIAL
 1

	)

170 #i‚de‡
YY_∑r£_DEBUG


179 #i‚de‡
YY_∑r£_LSP_NEEDED


190 #ifde‡
YY_∑r£_LSP_NEEDED


191 #i‚de‡
YY_∑r£_LTYPE


192 #i‚de‡
BISON_YYLTYPE_ISDECLARED


193 
	#BISON_YYLTYPE_ISDECLARED


	)

195 
	syy…y≥


197 
	mtime°amp
;

198 
	mfú°_löe
;

199 
	mfú°_cﬁumn
;

200 
	mœ°_löe
;

201 
	mœ°_cﬁumn
;

202 *
	mãxt
;

204 
	tyy…y≥
;

207 
	#YY_∑r£_LTYPE
 
yy…y≥


	)

215 #i‚de‡
YY_∑r£_STYPE


216 
	#YY_∑r£_STYPE
 

	)

219 #i‚de‡
YY_∑r£_PARSE


220 
	#YY_∑r£_PARSE
 
yy∑r£


	)

222 #i‚de‡
YY_∑r£_LEX


223 
	#YY_∑r£_LEX
 
yyÀx


	)

225 #i‚de‡
YY_∑r£_LVAL


226 
	#YY_∑r£_LVAL
 
yylvÆ


	)

228 #i‚de‡
YY_∑r£_LLOC


229 
	#YY_∑r£_LLOC
 
yyŒoc


	)

231 #i‚de‡
YY_∑r£_CHAR


232 
	#YY_∑r£_CHAR
 
yych¨


	)

234 #i‚de‡
YY_∑r£_NERRS


235 
	#YY_∑r£_NERRS
 
yy√ºs


	)

237 #i‚de‡
YY_∑r£_DEBUG_FLAG


238 
	#YY_∑r£_DEBUG_FLAG
 
yydebug


	)

240 #i‚de‡
YY_∑r£_ERROR


241 
	#YY_∑r£_ERROR
 
yyîr‹


	)

244 #i‚de‡
YY_∑r£_PARSE_PARAM


245 #i‚de‡
YY_USE_CLASS


246 #ifde‡
YYPARSE_PARAM


247 
	#YY_∑r£_PARSE_PARAM
 * 
YYPARSE_PARAM


	)

249 #i‚de‡
__STDC__


250 #i‚de‡
__˝lu•lus


251 
	#YY_∑r£_PARSE_PARAM


	)

256 #i‚de‡
YY_∑r£_PARSE_PARAM


257 
	#YY_∑r£_PARSE_PARAM
 

	)

261 #i‡
YY_∑r£_COMPATIBILITY
 != 0

263 #ifde‡
YY_∑r£_LTYPE


264 #i‚de‡
YYLTYPE


265 
	#YYLTYPE
 
YY_∑r£_LTYPE


	)

278 #ifde‡
YY_∑r£_PURE


279 #i‚de‡
YYPURE


280 
	#YYPURE
 
YY_∑r£_PURE


	)

284 #ifde‡
YY_∑r£_DEBUG


285 #i‚de‡
YYDEBUG


286 
	#YYDEBUG
 
YY_∑r£_DEBUG


	)

290 #i‚de‡
YY_∑r£_ERROR_VERBOSE


291 #ifde‡
YYERROR_VERBOSE


292 
	#YY_∑r£_ERROR_VERBOSE
 
YYERROR_VERBOSE


	)

296 #i‚de‡
YY_∑r£_LSP_NEEDED


297 #ifde‡
YYLSP_NEEDED


298 
	#YY_∑r£_LSP_NEEDED
 
YYLSP_NEEDED


	)

304 #i‚de‡
YY_USE_CLASS


308 
	#IDENTIFIER
 258

	)

309 
	#CONSTANT
 259

	)

310 
	#STRING_LITERAL
 260

	)

311 
	#SIZEOF
 261

	)

312 
	#PTR_OP
 262

	)

313 
	#INC_OP
 263

	)

314 
	#DEC_OP
 264

	)

315 
	#LEFT_OP
 265

	)

316 
	#RIGHT_OP
 266

	)

317 
	#LE_OP
 267

	)

318 
	#GE_OP
 268

	)

319 
	#EQ_OP
 269

	)

320 
	#NE_OP
 270

	)

321 
	#AND_OP
 271

	)

322 
	#OR_OP
 272

	)

323 
	#MUL_ASSIGN
 273

	)

324 
	#DIV_ASSIGN
 274

	)

325 
	#MOD_ASSIGN
 275

	)

326 
	#ADD_ASSIGN
 276

	)

327 
	#SUB_ASSIGN
 277

	)

328 
	#LEFT_ASSIGN
 278

	)

329 
	#RIGHT_ASSIGN
 279

	)

330 
	#AND_ASSIGN
 280

	)

331 
	#XOR_ASSIGN
 281

	)

332 
	#OR_ASSIGN
 282

	)

333 
	#TYPE_NAME
 283

	)

334 
	#TYPEDEF
 284

	)

335 
	#EXTERN
 285

	)

336 
	#STATIC
 286

	)

337 
	#AUTO
 287

	)

338 
	#REGISTER
 288

	)

339 
	#CHAR
 289

	)

340 
	#SHORT
 290

	)

341 
	#INT
 291

	)

342 
	#LONG
 292

	)

343 
	#SIGNED
 293

	)

344 
	#UNSIGNED
 294

	)

345 
	#FLOAT
 295

	)

346 
	#DOUBLE
 296

	)

347 
	#CONST
 297

	)

348 
	#VOLATILE
 298

	)

349 
	#VOID
 299

	)

350 
	#STRUCT
 300

	)

351 
	#UNION
 301

	)

352 
	#ENUM
 302

	)

353 
	#ELLIPSIS
 303

	)

354 
	#CASE
 304

	)

355 
	#DEFAULT
 305

	)

356 
	#IF
 306

	)

357 
	#ELSE
 307

	)

358 
	#SWITCH
 308

	)

359 
	#WHILE
 309

	)

360 
	#DO
 310

	)

361 
	#FOR
 311

	)

362 
	#GOTO
 312

	)

363 
	#CONTINUE
 313

	)

364 
	#BREAK
 314

	)

365 
	#RETURN
 315

	)

372 #i‚de‡
YY_∑r£_CLASS


373 
	#YY_∑r£_CLASS
 
∑r£


	)

375 #i‚de‡
YY_∑r£_INHERIT


376 
	#YY_∑r£_INHERIT


	)

378 #i‚de‡
YY_∑r£_MEMBERS


379 
	#YY_∑r£_MEMBERS


	)

381 #i‚de‡
YY_∑r£_LEX_BODY


382 
	#YY_∑r£_LEX_BODY


	)

384 #i‚de‡
YY_∑r£_ERROR_BODY


385 
	#YY_∑r£_ERROR_BODY


	)

387 #i‚de‡
YY_∑r£_CONSTRUCTOR_PARAM


388 
	#YY_∑r£_CONSTRUCTOR_PARAM


	)

390 #i‚de‡
YY_∑r£_CONSTRUCTOR_CODE


391 
	#YY_∑r£_CONSTRUCTOR_CODE


	)

393 #i‚de‡
YY_∑r£_CONSTRUCTOR_INIT


394 
	#YY_∑r£_CONSTRUCTOR_INIT


	)

397 #i‚de‡
YY_∑r£_USE_CONST_TOKEN


398 
	#YY_∑r£_USE_CONST_TOKEN
 0

	)

402 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

403 #i‚de‡
YY_∑r£_ENUM_TOKEN


404 
	#YY_∑r£_ENUM_TOKEN
 
yy_∑r£_íum_tokí


	)

408 ˛as†
	cYY_∑r£_CLASS
 
	mYY_∑r£_INHERIT


410 
	mpublic
:

411 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

415 c⁄° 
IDENTIFIER
;

416 c⁄° 
	mCONSTANT
;

417 c⁄° 
	mSTRING_LITERAL
;

418 c⁄° 
	mSIZEOF
;

419 c⁄° 
	mPTR_OP
;

420 c⁄° 
	mINC_OP
;

421 c⁄° 
	mDEC_OP
;

422 c⁄° 
	mLEFT_OP
;

423 c⁄° 
	mRIGHT_OP
;

424 c⁄° 
	mLE_OP
;

425 c⁄° 
	mGE_OP
;

426 c⁄° 
	mEQ_OP
;

427 c⁄° 
	mNE_OP
;

428 c⁄° 
	mAND_OP
;

429 c⁄° 
	mOR_OP
;

430 c⁄° 
	mMUL_ASSIGN
;

431 c⁄° 
	mDIV_ASSIGN
;

432 c⁄° 
	mMOD_ASSIGN
;

433 c⁄° 
	mADD_ASSIGN
;

434 c⁄° 
	mSUB_ASSIGN
;

435 c⁄° 
	mLEFT_ASSIGN
;

436 c⁄° 
	mRIGHT_ASSIGN
;

437 c⁄° 
	mAND_ASSIGN
;

438 c⁄° 
	mXOR_ASSIGN
;

439 c⁄° 
	mOR_ASSIGN
;

440 c⁄° 
	mTYPE_NAME
;

441 c⁄° 
	mTYPEDEF
;

442 c⁄° 
	mEXTERN
;

443 c⁄° 
	mSTATIC
;

444 c⁄° 
	mAUTO
;

445 c⁄° 
	mREGISTER
;

446 c⁄° 
	mCHAR
;

447 c⁄° 
	mSHORT
;

448 c⁄° 
	mINT
;

449 c⁄° 
	mLONG
;

450 c⁄° 
	mSIGNED
;

451 c⁄° 
	mUNSIGNED
;

452 c⁄° 
	mFLOAT
;

453 c⁄° 
	mDOUBLE
;

454 c⁄° 
	mCONST
;

455 c⁄° 
	mVOLATILE
;

456 c⁄° 
	mVOID
;

457 c⁄° 
	mSTRUCT
;

458 c⁄° 
	mUNION
;

459 c⁄° 
	mENUM
;

460 c⁄° 
	mELLIPSIS
;

461 c⁄° 
	mCASE
;

462 c⁄° 
	mDEFAULT
;

463 c⁄° 
	mIF
;

464 c⁄° 
	mELSE
;

465 c⁄° 
	mSWITCH
;

466 c⁄° 
	mWHILE
;

467 c⁄° 
	mDO
;

468 c⁄° 
	mFOR
;

469 c⁄° 
	mGOTO
;

470 c⁄° 
	mCONTINUE
;

471 c⁄° 
	mBREAK
;

472 c⁄° 
	mRETURN
;

478 
	eYY_∑r£_ENUM_TOKEN
 { 
	mYY_∑r£_NULL_TOKEN
=0

481 ,
	mIDENTIFIER
=258

482 ,
	mCONSTANT
=259

483 ,
	mSTRING_LITERAL
=260

484 ,
	mSIZEOF
=261

485 ,
	mPTR_OP
=262

486 ,
	mINC_OP
=263

487 ,
	mDEC_OP
=264

488 ,
	mLEFT_OP
=265

489 ,
	mRIGHT_OP
=266

490 ,
	mLE_OP
=267

491 ,
	mGE_OP
=268

492 ,
	mEQ_OP
=269

493 ,
	mNE_OP
=270

494 ,
	mAND_OP
=271

495 ,
	mOR_OP
=272

496 ,
	mMUL_ASSIGN
=273

497 ,
	mDIV_ASSIGN
=274

498 ,
	mMOD_ASSIGN
=275

499 ,
	mADD_ASSIGN
=276

500 ,
	mSUB_ASSIGN
=277

501 ,
	mLEFT_ASSIGN
=278

502 ,
	mRIGHT_ASSIGN
=279

503 ,
	mAND_ASSIGN
=280

504 ,
	mXOR_ASSIGN
=281

505 ,
	mOR_ASSIGN
=282

506 ,
	mTYPE_NAME
=283

507 ,
	mTYPEDEF
=284

508 ,
	mEXTERN
=285

509 ,
	mSTATIC
=286

510 ,
	mAUTO
=287

511 ,
	mREGISTER
=288

512 ,
	mCHAR
=289

513 ,
	mSHORT
=290

514 ,
	mINT
=291

515 ,
	mLONG
=292

516 ,
	mSIGNED
=293

517 ,
	mUNSIGNED
=294

518 ,
	mFLOAT
=295

519 ,
	mDOUBLE
=296

520 ,
	mCONST
=297

521 ,
	mVOLATILE
=298

522 ,
	mVOID
=299

523 ,
	mSTRUCT
=300

524 ,
	mUNION
=301

525 ,
	mENUM
=302

526 ,
	mELLIPSIS
=303

527 ,
	mCASE
=304

528 ,
	mDEFAULT
=305

529 ,
	mIF
=306

530 ,
	mELSE
=307

531 ,
	mSWITCH
=308

532 ,
	mWHILE
=309

533 ,
	mDO
=310

534 ,
	mFOR
=311

535 ,
	mGOTO
=312

536 ,
	mCONTINUE
=313

537 ,
	mBREAK
=314

538 ,
	mRETURN
=315

545 
	gpublic
:

546 
YY_∑r£_PARSE
 (
YY_∑r£_PARSE_PARAM
);

547 
vútuÆ
 
	$YY_∑r£_ERROR
(*
msg
Ë
YY_∑r£_ERROR_BODY
;

548 #ifde‡
YY_∑r£_PURE


549 #ifde‡
YY_∑r£_LSP_NEEDED


550 
vútuÆ
 
	$YY_∑r£_LEX
 (
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
,
YY_∑r£_LTYPE
 *
YY_∑r£_LLOC
Ë
YY_∑r£_LEX_BODY
;

552 
vútuÆ
 
	$YY_∑r£_LEX
 (
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
Ë
YY_∑r£_LEX_BODY
;

555 
vútuÆ
 
	$YY_∑r£_LEX
(Ë
YY_∑r£_LEX_BODY
;

556 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

557 #ifde‡
YY_∑r£_LSP_NEEDED


558 
YY_∑r£_LTYPE
 
YY_∑r£_LLOC
;

560 
YY_∑r£_NERRS
;

561 
YY_∑r£_CHAR
;

563 #i‡
YY_∑r£_DEBUG
 != 0

564 
YY_∑r£_DEBUG_FLAG
;

566 
public
:

567 
	`YY_∑r£_CLASS
(
YY_∑r£_CONSTRUCTOR_PARAM
);

568 
public
:

569 
YY_∑r£_MEMBERS


570 
	}
};

572 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

575 c⁄° 
	gYY_∑r£_CLASS
::
IDENTIFIER
=258;

576 c⁄° 
	gYY_∑r£_CLASS
::
CONSTANT
=259;

577 c⁄° 
	gYY_∑r£_CLASS
::
STRING_LITERAL
=260;

578 c⁄° 
	gYY_∑r£_CLASS
::
SIZEOF
=261;

579 c⁄° 
	gYY_∑r£_CLASS
::
PTR_OP
=262;

580 c⁄° 
	gYY_∑r£_CLASS
::
INC_OP
=263;

581 c⁄° 
	gYY_∑r£_CLASS
::
DEC_OP
=264;

582 c⁄° 
	gYY_∑r£_CLASS
::
LEFT_OP
=265;

583 c⁄° 
	gYY_∑r£_CLASS
::
RIGHT_OP
=266;

584 c⁄° 
	gYY_∑r£_CLASS
::
LE_OP
=267;

585 c⁄° 
	gYY_∑r£_CLASS
::
GE_OP
=268;

586 c⁄° 
	gYY_∑r£_CLASS
::
EQ_OP
=269;

587 c⁄° 
	gYY_∑r£_CLASS
::
NE_OP
=270;

588 c⁄° 
	gYY_∑r£_CLASS
::
AND_OP
=271;

589 c⁄° 
	gYY_∑r£_CLASS
::
OR_OP
=272;

590 c⁄° 
	gYY_∑r£_CLASS
::
MUL_ASSIGN
=273;

591 c⁄° 
	gYY_∑r£_CLASS
::
DIV_ASSIGN
=274;

592 c⁄° 
	gYY_∑r£_CLASS
::
MOD_ASSIGN
=275;

593 c⁄° 
	gYY_∑r£_CLASS
::
ADD_ASSIGN
=276;

594 c⁄° 
	gYY_∑r£_CLASS
::
SUB_ASSIGN
=277;

595 c⁄° 
	gYY_∑r£_CLASS
::
LEFT_ASSIGN
=278;

596 c⁄° 
	gYY_∑r£_CLASS
::
RIGHT_ASSIGN
=279;

597 c⁄° 
	gYY_∑r£_CLASS
::
AND_ASSIGN
=280;

598 c⁄° 
	gYY_∑r£_CLASS
::
XOR_ASSIGN
=281;

599 c⁄° 
	gYY_∑r£_CLASS
::
OR_ASSIGN
=282;

600 c⁄° 
	gYY_∑r£_CLASS
::
TYPE_NAME
=283;

601 c⁄° 
	gYY_∑r£_CLASS
::
TYPEDEF
=284;

602 c⁄° 
	gYY_∑r£_CLASS
::
EXTERN
=285;

603 c⁄° 
	gYY_∑r£_CLASS
::
STATIC
=286;

604 c⁄° 
	gYY_∑r£_CLASS
::
AUTO
=287;

605 c⁄° 
	gYY_∑r£_CLASS
::
REGISTER
=288;

606 c⁄° 
	gYY_∑r£_CLASS
::
CHAR
=289;

607 c⁄° 
	gYY_∑r£_CLASS
::
SHORT
=290;

608 c⁄° 
	gYY_∑r£_CLASS
::
INT
=291;

609 c⁄° 
	gYY_∑r£_CLASS
::
LONG
=292;

610 c⁄° 
	gYY_∑r£_CLASS
::
SIGNED
=293;

611 c⁄° 
	gYY_∑r£_CLASS
::
UNSIGNED
=294;

612 c⁄° 
	gYY_∑r£_CLASS
::
FLOAT
=295;

613 c⁄° 
	gYY_∑r£_CLASS
::
DOUBLE
=296;

614 c⁄° 
	gYY_∑r£_CLASS
::
CONST
=297;

615 c⁄° 
	gYY_∑r£_CLASS
::
VOLATILE
=298;

616 c⁄° 
	gYY_∑r£_CLASS
::
VOID
=299;

617 c⁄° 
	gYY_∑r£_CLASS
::
STRUCT
=300;

618 c⁄° 
	gYY_∑r£_CLASS
::
UNION
=301;

619 c⁄° 
	gYY_∑r£_CLASS
::
ENUM
=302;

620 c⁄° 
	gYY_∑r£_CLASS
::
ELLIPSIS
=303;

621 c⁄° 
	gYY_∑r£_CLASS
::
CASE
=304;

622 c⁄° 
	gYY_∑r£_CLASS
::
DEFAULT
=305;

623 c⁄° 
	gYY_∑r£_CLASS
::
IF
=306;

624 c⁄° 
	gYY_∑r£_CLASS
::
ELSE
=307;

625 c⁄° 
	gYY_∑r£_CLASS
::
SWITCH
=308;

626 c⁄° 
	gYY_∑r£_CLASS
::
WHILE
=309;

627 c⁄° 
	gYY_∑r£_CLASS
::
DO
=310;

628 c⁄° 
	gYY_∑r£_CLASS
::
FOR
=311;

629 c⁄° 
	gYY_∑r£_CLASS
::
GOTO
=312;

630 c⁄° 
	gYY_∑r£_CLASS
::
CONTINUE
=313;

631 c⁄° 
	gYY_∑r£_CLASS
::
BREAK
=314;

632 c⁄° 
	gYY_∑r£_CLASS
::
RETURN
=315;

639 
	gYY_∑r£_CLASS
::
	$YY_∑r£_CLASS
(
YY_∑r£_CONSTRUCTOR_PARAM
Ë
YY_∑r£_CONSTRUCTOR_INIT


641 #i‡
YY_∑r£_DEBUG
 != 0

642 
YY_∑r£_DEBUG_FLAG
=0;

644 
YY_∑r£_CONSTRUCTOR_CODE
;

645 
	}
};

651 
	#YYFINAL
 350

	)

652 
	#YYFLAG
 -32768

	)

653 
	#YYNTBASE
 85

	)

655 
	#YYTRANSLATE
(
x
Ë(()(xË<315 ? 
yyå™¶©e
[x] : 148)

	)

657 c⁄° 
	gyyå™¶©e
[] = { 0,

692 #i‡
YY_∑r£_DEBUG
 != 0

693 c⁄° 
	gyy¥hs
[] = { 0,

718 c⁄° 
	gyyrhs
[] = { 3,

789 #i‡(
YY_∑r£_DEBUG
 !0Ë|| 
deföed
(
YY_∑r£_ERROR_VERBOSE
)

790 c⁄° 
	gyyæöe
[] = { 0,

815 c⁄° * c⁄° 
	gyyäame
[] = { "$","error","$illegal.","IDENTIFIER",

843 c⁄° 
	gyyr1
[] = { 0,

868 c⁄° 
	gyyr2
[] = { 0,

893 c⁄° 
	gyydeÁ˘
[] = { 0,

931 c⁄° 
	gyydefgŸo
[] = { 106,

941 c⁄° 
	gyy∑˘
[] = { 937,

979 c⁄° 
	gyypgŸo
[] = {-32768,

990 
	#YYLAST
 1308

	)

993 c⁄° 
	gyyèbÀ
[] = { 25,

1127 c⁄° 
	gyycheck
[] = { 0,

1276 #i‡
YY_∑r£_USE_GOTO
 != 0

1284 
	#YYGOTO
(
lb
Ë{
yy_gŸo°©e
ˆb;;}

	)

1285 
	#YYBEGINGOTO
 
yy_œbñs
 
yy_gŸo°©e
=
yygŸo°¨t
; \

1286 ;;Ë
yy_gŸo°©e
Ë{ 
yygŸo°¨t
: {

	)

1287 
	#YYLABEL
(
lb
Ë} lb: {

	)

1288 
	#YYENDGOTO
 } }

	)

1289 
	#YYBEGINDECLARELABEL
 
	eyy_œbñs
 {
yygŸo°¨t


	)

1290 
	#YYDECLARELABEL
(
lb
Ë,
	)
lb

1291 
	#YYENDDECLARELABEL
 };

	)

1294 
	#YYGOTO
(
lb
Ë
	)
lb

1295 
	#YYBEGINGOTO


	)

1296 
	#YYLABEL
(
lb
Ëlb:

	)

1297 
	#YYENDGOTO


	)

1298 
	#YYBEGINDECLARELABEL


	)

1299 
	#YYDECLARELABEL
(
lb
)

	)

1300 
	#YYENDDECLARELABEL


	)

1303 
YYBEGINDECLARELABEL


1304 
	$YYDECLARELABEL
(
yy√w°©e
)

1305 
	$YYDECLARELABEL
(
yybackup
)

1307 
	$YYDECLARELABEL
(
yydeÁu…
)

1308 
	$YYDECLARELABEL
(
yyªdu˚
)

1309 
	$YYDECLARELABEL
(
yyîæab
)

1310 
	$YYDECLARELABEL
(
yyîæab1
)

1311 
	$YYDECLARELABEL
(
yyîrdeÁu…
)

1312 
	$YYDECLARELABEL
(
yyîΩ›
)

1313 
	$YYDECLARELABEL
(
yyîrh™dÀ
)

1314 
YYENDDECLARELABEL


1317 #ifde‡
__HAVE_NO_ALLOCA


1318 
	$__Æloˇ_‰ì_±r
(*
±r
,*
ªf
)

1319 {if(
±r
!=
ªf
Ë
	`‰ì
(ptr);

1320  0;
	}
}

1322 
	#__ALLOCA_Æloˇ
(
size
Ë
	`mÆloc
(size)

	)

1323 
	#__ALLOCA_‰ì
(
±r
,
ªf
Ë
	`__Æloˇ_‰ì_±r
((*Ìå,(*Ïef)

	)

1325 #ifde‡
YY_∑r£_LSP_NEEDED


1326 
	#__ALLOCA_ªtu∫
(
num
) \

1327 dÿ{ –
	`__ALLOCA_‰ì
(
yyss
,
yysß
)+\

1328 
	`__ALLOCA_‰ì
(
yyvs
,
yyvß
)+\

1329 
	`__ALLOCA_‰ì
(
yyls
,
yylß
)+\

1330 (
num
)); } 0)

	)

1332 
	#__ALLOCA_ªtu∫
(
num
) \

1333 dÿ{ –
	`__ALLOCA_‰ì
(
yyss
,
yysß
)+\

1334 
	`__ALLOCA_‰ì
(
yyvs
,
yyvß
)+\

1335 (
num
)); } 0)

	)

1338 
	#__ALLOCA_ªtu∫
(
num
Ëdÿ{ “um); } 0)

	)

1339 
	#__ALLOCA_Æloˇ
(
size
Ë
	`Æloˇ
(size)

	)

1340 
	#__ALLOCA_‰ì
(
±r
,
ªf
)

	)

1345 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1346 
	#yy˛órö
 (
YY_∑r£_CHAR
 = 
YYEMPTY
)

	)

1347 
	#YYEMPTY
 -2

	)

1348 
	#YYEOF
 0

	)

1349 
	#YYACCEPT
 
	`__ALLOCA_ªtu∫
(0)

	)

1350 
	#YYABORT
 
	`__ALLOCA_ªtu∫
(1)

	)

1351 
	#YYERROR
 
	`YYGOTO
(
yyîæab1
)

	)

1356 
	#YYFAIL
 
	`YYGOTO
(
yyîæab
)

	)

1357 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1358 
	#YYBACKUP
(
tokí
, 
vÆue
) \

1360 i‡(
YY_∑r£_CHAR
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1361 { 
YY_∑r£_CHAR
 = (
tokí
), 
YY_∑r£_LVAL
 = (
vÆue
); \

1362 
yych¨1
 = 
	`YYTRANSLATE
 (
YY_∑r£_CHAR
); \

1363 
YYPOPSTACK
; \

1364 
	`YYGOTO
(
yybackup
); \

1367 { 
	`YY_∑r£_ERROR
 ("sy¡axÉº‹: c™nŸ back up"); 
YYERROR
; } \

1368 0)

	)

1370 
	#YYTERROR
 1

	)

1371 
	#YYERRCODE
 256

	)

1373 #i‚de‡
YY_∑r£_PURE


1375 
	#YYLEX
 
	`YY_∑r£_LEX
()

	)

1376 #i‚de‡
YY_USE_CLASS


1378 
	gYY_∑r£_CHAR
;

1379 
YY_∑r£_STYPE
 
	gYY_∑r£_LVAL
;

1381 
	gYY_∑r£_NERRS
;

1382 #ifde‡
YY_∑r£_LSP_NEEDED


1383 
YY_∑r£_LTYPE
 
	gYY_∑r£_LLOC
;

1391 #ifde‡
YY_∑r£_LSP_NEEDED


1392 
	#YYLEX
 
	`YY_∑r£_LEX
(&
YY_∑r£_LVAL
, &
YY_∑r£_LLOC
)

	)

1394 
	#YYLEX
 
	`YY_∑r£_LEX
(&
YY_∑r£_LVAL
)

	)

1397 #i‚de‡
YY_USE_CLASS


1398 #i‡
YY_∑r£_DEBUG
 != 0

1399 
	gYY_∑r£_DEBUG_FLAG
;

1409 #i‚de‡
YYINITDEPTH


1410 
	#YYINITDEPTH
 200

	)

1416 #i‡
YYMAXDEPTH
 == 0

1417 #unde‡
YYMAXDEPTH


1420 #i‚de‡
YYMAXDEPTH


1421 
	#YYMAXDEPTH
 10000

	)

1425 #i‡
__GNUC__
 > 1

1426 
	#__yy_bc›y
(
FROM
,
TO
,
COUNT
Ë
	`__buûtö_mem˝y
(TO,FROM,COUNT)

	)

1432 #ifde‡
__˝lu•lus


1433 
	$__yy_bc›y
 (*
‰om
, *
to
, 
cou¡
)

1435 #ifde‡
__STDC__


1436 
	$__yy_bc›y
 (*
‰om
, *
to
, 
cou¡
)

1438 
	$__yy_bc›y
 (
‰om
, 
to
, 
cou¡
)

1439 *
‰om
;

1440 *
to
;

1441 
cou¡
;

1445 *
f
 = 
‰om
;

1446 *
t
 = 
to
;

1447 
i
 = 
cou¡
;

1449 
i
-- > 0)

1450 *
t
++ = *
f
++;

1451 
	}
}

1456 #ifde‡
YY_USE_CLASS


1457 
	gYY_∑r£_CLASS
::

1459 
	$YY_∑r£_PARSE
(
YY_∑r£_PARSE_PARAM
)

1460 #i‚de‡
__STDC__


1461 #i‚de‡
__˝lu•lus


1462 #i‚de‡
YY_USE_CLASS


1464 
YY_∑r£_PARSE_PARAM_DEF


1469 
yy°©e
;

1470 
yyn
;

1471 *
yys•
;

1472 
YY_∑r£_STYPE
 *
yyv•
;

1473 
yyîr°©us
;

1474 
yych¨1
=0;

1476 
yysß
[
YYINITDEPTH
];

1477 
YY_∑r£_STYPE
 
yyvß
[
YYINITDEPTH
];

1479 *
yyss
 = 
yysß
;

1480 
YY_∑r£_STYPE
 *
yyvs
 = 
yyvß
;

1482 #ifde‡
YY_∑r£_LSP_NEEDED


1483 
YY_∑r£_LTYPE
 
yylß
[
YYINITDEPTH
];

1484 
YY_∑r£_LTYPE
 *
yyls
 = 
yylß
;

1485 
YY_∑r£_LTYPE
 *
yyl•
;

1487 
	#YYPOPSTACK
 (
yyv•
--, 
yys•
--, 
yyl•
--)

	)

1489 
	#YYPOPSTACK
 (
yyv•
--, 
yys•
--)

	)

1492 
yy°acksize
 = 
YYINITDEPTH
;

1494 #ifde‡
YY_∑r£_PURE


1495 
YY_∑r£_CHAR
;

1496 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

1497 
YY_∑r£_NERRS
;

1498 #ifde‡
YY_∑r£_LSP_NEEDED


1499 
YY_∑r£_LTYPE
 
YY_∑r£_LLOC
;

1503 
YY_∑r£_STYPE
 
yyvÆ
;

1507 
yyÀn
;

1509 
YYBEGINGOTO


1511 #i‡
YY_∑r£_DEBUG
 != 0

1512 i‡(
YY_∑r£_DEBUG_FLAG
)

1513 
	`Ârötf
(
°dîr
, "StartingÖarse\n");

1515 
yy°©e
 = 0;

1516 
yyîr°©us
 = 0;

1517 
YY_∑r£_NERRS
 = 0;

1518 
YY_∑r£_CHAR
 = 
YYEMPTY
;

1525 
yys•
 = 
yyss
 - 1;

1526 
yyv•
 = 
yyvs
;

1527 #ifde‡
YY_∑r£_LSP_NEEDED


1528 
yyl•
 = 
yyls
;

1534 
	`YYLABEL
(
yy√w°©e
)

1536 *++
yys•
 = 
yy°©e
;

1538 i‡(
yys•
 >
yyss
 + 
yy°acksize
 - 1)

1542 
YY_∑r£_STYPE
 *
yyvs1
 = 
yyvs
;

1543 *
yyss1
 = 
yyss
;

1544 #ifde‡
YY_∑r£_LSP_NEEDED


1545 
YY_∑r£_LTYPE
 *
yyls1
 = 
yyls
;

1549 
size
 = 
yys•
 - 
yyss
 + 1;

1551 #ifde‡
yyovîÊow


1554 #ifde‡
YY_∑r£_LSP_NEEDED


1557 
	`yyovîÊow
("parser stack overflow",

1558 &
yyss1
, 
size
 *  (*
yys•
),

1559 &
yyvs1
, 
size
 *  (*
yyv•
),

1560 &
yyls1
, 
size
 *  (*
yyl•
),

1561 &
yy°acksize
);

1563 
	`yyovîÊow
("parser stack overflow",

1564 &
yyss1
, 
size
 *  (*
yys•
),

1565 &
yyvs1
, 
size
 *  (*
yyv•
),

1566 &
yy°acksize
);

1569 
yyss
 = 
yyss1
; 
yyvs
 = 
yyvs1
;

1570 #ifde‡
YY_∑r£_LSP_NEEDED


1571 
yyls
 = 
yyls1
;

1575 i‡(
yy°acksize
 >
YYMAXDEPTH
)

1577 
	`YY_∑r£_ERROR
("parser stack overflow");

1578 
	`__ALLOCA_ªtu∫
(2);

1580 
yy°acksize
 *= 2;

1581 i‡(
yy°acksize
 > 
YYMAXDEPTH
)

1582 
yy°acksize
 = 
YYMAXDEPTH
;

1583 
yyss
 = (*Ë
	`__ALLOCA_Æloˇ
 (
yy°acksize
 *  (*
yys•
));

1584 
	`__yy_bc›y
 ((*)
yyss1
, (*)
yyss
, 
size
 *  (*
yys•
));

1585 
	`__ALLOCA_‰ì
(
yyss1
,
yysß
);

1586 
yyvs
 = (
YY_∑r£_STYPE
 *Ë
	`__ALLOCA_Æloˇ
 (
yy°acksize
 *  (*
yyv•
));

1587 
	`__yy_bc›y
 ((*)
yyvs1
, (*)
yyvs
, 
size
 *  (*
yyv•
));

1588 
	`__ALLOCA_‰ì
(
yyvs1
,
yyvß
);

1589 #ifde‡
YY_∑r£_LSP_NEEDED


1590 
yyls
 = (
YY_∑r£_LTYPE
 *Ë
	`__ALLOCA_Æloˇ
 (
yy°acksize
 *  (*
yyl•
));

1591 
	`__yy_bc›y
 ((*)
yyls1
, (*)
yyls
, 
size
 *  (*
yyl•
));

1592 
	`__ALLOCA_‰ì
(
yyls1
,
yylß
);

1596 
yys•
 = 
yyss
 + 
size
 - 1;

1597 
yyv•
 = 
yyvs
 + 
size
 - 1;

1598 #ifde‡
YY_∑r£_LSP_NEEDED


1599 
yyl•
 = 
yyls
 + 
size
 - 1;

1602 #i‡
YY_∑r£_DEBUG
 != 0

1603 i‡(
YY_∑r£_DEBUG_FLAG
)

1604 
	`Ârötf
(
°dîr
, "Sèck sizêö¸ó£dÅÿ%d\n", 
yy°acksize
);

1607 i‡(
yys•
 >
yyss
 + 
yy°acksize
 - 1)

1608 
YYABORT
;

1611 #i‡
YY_∑r£_DEBUG
 != 0

1612 i‡(
YY_∑r£_DEBUG_FLAG
)

1613 
	`Ârötf
(
°dîr
, "E¡îög sèã %d\n", 
yy°©e
);

1616 
	`YYGOTO
(
yybackup
);

1617 
	`YYLABEL
(
yybackup
)

1625 
yyn
 = 
yy∑˘
[
yy°©e
];

1626 i‡(
yyn
 =
YYFLAG
)

1627 
	`YYGOTO
(
yydeÁu…
);

1634 i‡(
YY_∑r£_CHAR
 =
YYEMPTY
)

1636 #i‡
YY_∑r£_DEBUG
 != 0

1637 i‡(
YY_∑r£_DEBUG_FLAG
)

1638 
	`Ârötf
(
°dîr
, "ReadingáÅoken: ");

1640 
YY_∑r£_CHAR
 = 
YYLEX
;

1645 i‡(
YY_∑r£_CHAR
 <= 0)

1647 
yych¨1
 = 0;

1648 
YY_∑r£_CHAR
 = 
YYEOF
;

1650 #i‡
YY_∑r£_DEBUG
 != 0

1651 i‡(
YY_∑r£_DEBUG_FLAG
)

1652 
	`Ârötf
(
°dîr
, "NowátÉnd of input.\n");

1657 
yych¨1
 = 
	`YYTRANSLATE
(
YY_∑r£_CHAR
);

1659 #i‡
YY_∑r£_DEBUG
 != 0

1660 i‡(
YY_∑r£_DEBUG_FLAG
)

1662 
	`Ârötf
 (
°dîr
, "Nexàtokí i†%d (%s", 
YY_∑r£_CHAR
, 
yyäame
[
yych¨1
]);

1665 #ifde‡
YYPRINT


1666 
	`YYPRINT
 (
°dîr
, 
YY_∑r£_CHAR
, 
YY_∑r£_LVAL
);

1668 
	`Ârötf
 (
°dîr
, ")\n");

1673 
yyn
 +
yych¨1
;

1674 i‡(
yyn
 < 0 || yy¿> 
YYLAST
 || 
yycheck
[yyn] !
yych¨1
)

1675 
	`YYGOTO
(
yydeÁu…
);

1677 
yyn
 = 
yyèbÀ
[yyn];

1686 i‡(
yyn
 < 0)

1688 i‡(
yyn
 =
YYFLAG
)

1689 
	`YYGOTO
(
yyîæab
);

1690 
yyn
 = -yyn;

1691 
	`YYGOTO
(
yyªdu˚
);

1693 i‡(
yyn
 == 0)

1694 
	`YYGOTO
(
yyîæab
);

1696 i‡(
yyn
 =
YYFINAL
)

1697 
YYACCEPT
;

1701 #i‡
YY_∑r£_DEBUG
 != 0

1702 i‡(
YY_∑r£_DEBUG_FLAG
)

1703 
	`Ârötf
(
°dîr
, "Shi·ögÅokí %d (%s), ", 
YY_∑r£_CHAR
, 
yyäame
[
yych¨1
]);

1707 i‡(
YY_∑r£_CHAR
 !
YYEOF
)

1708 
YY_∑r£_CHAR
 = 
YYEMPTY
;

1710 *++
yyv•
 = 
YY_∑r£_LVAL
;

1711 #ifde‡
YY_∑r£_LSP_NEEDED


1712 *++
yyl•
 = 
YY_∑r£_LLOC
;

1716 i‡(
yyîr°©us
) yyerrstatus--;

1718 
yy°©e
 = 
yyn
;

1719 
	`YYGOTO
(
yy√w°©e
);

1722 
	`YYLABEL
(
yydeÁu…
)

1724 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1725 i‡(
yyn
 == 0)

1726 
	`YYGOTO
(
yyîæab
);

1729 
	`YYLABEL
(
yyªdu˚
)

1730 
yyÀn
 = 
yyr2
[
yyn
];

1731 i‡(
yyÀn
 > 0)

1732 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1734 #i‡
YY_∑r£_DEBUG
 != 0

1735 i‡(
YY_∑r£_DEBUG_FLAG
)

1737 
i
;

1739 
	`Ârötf
 (
°dîr
, "Reducing viaÑule %d (line %d), ",

1740 
yyn
, 
yyæöe
[yyn]);

1743 
i
 = 
yy¥hs
[
yyn
]; 
yyrhs
[i] > 0; i++)

1744 
	`Ârötf
 (
°dîr
, "%†", 
yyäame
[
yyrhs
[
i
]]);

1745 
	`Ârötf
 (
°dîr
, " -> %s\n", 
yyäame
[
yyr1
[
yyn
]]);

1752 
yyn
) {

1756 { 
	`¥ötf
 ("$$$$$"); ;

1762 
yyv•
 -
yyÀn
;

1763 
yys•
 -
yyÀn
;

1764 #ifde‡
YY_∑r£_LSP_NEEDED


1765 
yyl•
 -
yyÀn
;

1768 #i‡
YY_∑r£_DEBUG
 != 0

1769 i‡(
YY_∑r£_DEBUG_FLAG
)

1771 *
s•1
 = 
yyss
 - 1;

1772 
	`Ârötf
 (
°dîr
, "state stackÇow");

1773 
s•1
 !
yys•
)

1774 
	`Ârötf
 (
°dîr
, " %d", *++
s•1
);

1775 
	`Ârötf
 (
°dîr
, "\n");

1779 *++
yyv•
 = 
yyvÆ
;

1781 #ifde‡
YY_∑r£_LSP_NEEDED


1782 
yyl•
++;

1783 i‡(
yyÀn
 == 0)

1785 
yyl•
->
fú°_löe
 = 
YY_∑r£_LLOC
.first_line;

1786 
yyl•
->
fú°_cﬁumn
 = 
YY_∑r£_LLOC
.first_column;

1787 
yyl•
->
œ°_löe
 = (yylsp-1)->last_line;

1788 
yyl•
->
œ°_cﬁumn
 = (yylsp-1)->last_column;

1789 
yyl•
->
ãxt
 = 0;

1793 
yyl•
->
œ°_löe
 = (yyl•+
yyÀn
-1)->last_line;

1794 
yyl•
->
œ°_cﬁumn
 = (yyl•+
yyÀn
-1)->last_column;

1803 
yyn
 = 
yyr1
[yyn];

1805 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTBASE
] + *
yys•
;

1806 i‡(
yy°©e
 >0 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1807 
yy°©e
 = 
yyèbÀ
[yystate];

1809 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTBASE
];

1811 
	`YYGOTO
(
yy√w°©e
);

1813 
	`YYLABEL
(
yyîæab
)

1815 i‡(! 
yyîr°©us
)

1818 ++
YY_∑r£_NERRS
;

1820 #ifde‡
YY_∑r£_ERROR_VERBOSE


1821 
yyn
 = 
yy∑˘
[
yy°©e
];

1823 i‡(
yyn
 > 
YYFLAG
 && yy¿< 
YYLAST
)

1825 
size
 = 0;

1826 *
msg
;

1827 
x
, 
cou¡
;

1829 
cou¡
 = 0;

1831 
x
 = (
yyn
 < 0 ? -yyn : 0);

1832 
x
 < ((
yyäame
) / (*)); x++)

1833 i‡(
yycheck
[
x
 + 
yyn
] == x)

1834 
size
 +
	`°æí
(
yyäame
[
x
]Ë+ 15, 
cou¡
++;

1835 
msg
 = (*Ë
	`mÆloc
(
size
 + 15);

1836 i‡(
msg
 != 0)

1838 
	`°r˝y
(
msg
, "parseÉrror");

1840 i‡(
cou¡
 < 5)

1842 
cou¡
 = 0;

1843 
x
 = (
yyn
 < 0 ? -yyn : 0);

1844 
x
 < ((
yyäame
) / (*)); x++)

1845 i‡(
yycheck
[
x
 + 
yyn
] == x)

1847 
	`°rˇt
(
msg
, 
cou¡
 == 0 ? ",Éxpecting `" : " or `");

1848 
	`°rˇt
(
msg
, 
yyäame
[
x
]);

1849 
	`°rˇt
(
msg
, "'");

1850 
cou¡
++;

1853 
	`YY_∑r£_ERROR
(
msg
);

1854 
	`‰ì
(
msg
);

1857 
	`YY_∑r£_ERROR
 ("parseÉrror;álso virtual memoryÉxceeded");

1861 
	`YY_∑r£_ERROR
("parseÉrror");

1864 
	`YYGOTO
(
yyîæab1
);

1865 
	`YYLABEL
(
yyîæab1
)

1867 i‡(
yyîr°©us
 == 3)

1872 i‡(
YY_∑r£_CHAR
 =
YYEOF
)

1873 
YYABORT
;

1875 #i‡
YY_∑r£_DEBUG
 != 0

1876 i‡(
YY_∑r£_DEBUG_FLAG
)

1877 
	`Ârötf
(
°dîr
, "DisˇrdögÅokí %d (%s).\n", 
YY_∑r£_CHAR
, 
yyäame
[
yych¨1
]);

1880 
YY_∑r£_CHAR
 = 
YYEMPTY
;

1886 
yyîr°©us
 = 3;

1888 
	`YYGOTO
(
yyîrh™dÀ
);

1890 
	`YYLABEL
(
yyîrdeÁu…
)

1895 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1896 i‡(
yyn
Ë
	`YYGOTO
(
yydeÁu…
);

1899 
	`YYLABEL
(
yyîΩ›
)

1901 i‡(
yys•
 =
yyss
Ë
YYABORT
;

1902 
yyv•
--;

1903 
yy°©e
 = *--
yys•
;

1904 #ifde‡
YY_∑r£_LSP_NEEDED


1905 
yyl•
--;

1908 #i‡
YY_∑r£_DEBUG
 != 0

1909 i‡(
YY_∑r£_DEBUG_FLAG
)

1911 *
s•1
 = 
yyss
 - 1;

1912 
	`Ârötf
 (
°dîr
, "Error: state stackÇow");

1913 
s•1
 !
yys•
)

1914 
	`Ârötf
 (
°dîr
, " %d", *++
s•1
);

1915 
	`Ârötf
 (
°dîr
, "\n");

1919 
	`YYLABEL
(
yyîrh™dÀ
)

1921 
yyn
 = 
yy∑˘
[
yy°©e
];

1922 i‡(
yyn
 =
YYFLAG
)

1923 
	`YYGOTO
(
yyîrdeÁu…
);

1925 
yyn
 +
YYTERROR
;

1926 i‡(
yyn
 < 0 || yy¿> 
YYLAST
 || 
yycheck
[yyn] !
YYTERROR
)

1927 
	`YYGOTO
(
yyîrdeÁu…
);

1929 
yyn
 = 
yyèbÀ
[yyn];

1930 i‡(
yyn
 < 0)

1932 i‡(
yyn
 =
YYFLAG
)

1933 
	`YYGOTO
(
yyîΩ›
);

1934 
yyn
 = -yyn;

1935 
	`YYGOTO
(
yyªdu˚
);

1937 i‡(
yyn
 == 0)

1938 
	`YYGOTO
(
yyîΩ›
);

1940 i‡(
yyn
 =
YYFINAL
)

1941 
YYACCEPT
;

1943 #i‡
YY_∑r£_DEBUG
 != 0

1944 i‡(
YY_∑r£_DEBUG_FLAG
)

1945 
	`Ârötf
(
°dîr
, "ShiftingÉrrorÅoken, ");

1948 *++
yyv•
 = 
YY_∑r£_LVAL
;

1949 #ifde‡
YY_∑r£_LSP_NEEDED


1950 *++
yyl•
 = 
YY_∑r£_LLOC
;

1953 
yy°©e
 = 
yyn
;

1954 
	`YYGOTO
(
yy√w°©e
);

1956 
YYENDGOTO


1957 
	}
}

1964 
	~<°dio.h
>

1966 
yyãxt
[];

1967 
cﬁumn
;

1969 
	$yyîr‹
(
s
)

1970 *
s
;

1972 
	`fÊush
(
°dout
);

1973 
	`¥ötf
("\n%*s\n%*s\n", 
cﬁumn
, "^", cﬁumn, 
s
);

1974 
	}
}

	@cl-standard.tab.h

1 #i‚de‡
YY_∑r£_h_ö˛uded


2 
	#YY_∑r£_h_ö˛uded


	)

7 #ifde‡
c_∂u•lus


8 #i‚de‡
__˝lu•lus


9 
	#__˝lu•lus


	)

18 #i‚de‡
YY_∑r£_COMPATIBILITY


19 #i‚de‡
YY_USE_CLASS


20 
	#YY_∑r£_COMPATIBILITY
 1

	)

22 
	#YY_∑r£_COMPATIBILITY
 0

	)

26 #i‡
YY_∑r£_COMPATIBILITY
 != 0

28 #ifde‡
YYLTYPE


29 #i‚de‡
YY_∑r£_LTYPE


30 
	#YY_∑r£_LTYPE
 
YYLTYPE


	)

36 #i‚de‡
YY_∑r£_STYPE


37 
	#YY_∑r£_STYPE
 
YYSTYPE


	)

42 #ifde‡
YYDEBUG


43 #i‚de‡
YY_∑r£_DEBUG


44 
	#YY_∑r£_DEBUG
 
YYDEBUG


	)

50 #i‚de‡
YY_∑r£_USE_GOTO


51 
	#YY_∑r£_USE_GOTO
 1

	)

56 #i‚de‡
YY_∑r£_USE_GOTO


57 
	#YY_∑r£_USE_GOTO
 0

	)

60 #i‚de‡
YY_∑r£_PURE


70 #i‚de‡
YY_USE_CLASS


71 #i‚de‡
YYSTYPE


72 
	#YYSTYPE
 

	)

73 
	#YYSTYPE_IS_TRIVIAL
 1

	)

80 #i‚de‡
YY_∑r£_DEBUG


88 #i‚de‡
YY_∑r£_LSP_NEEDED


97 #ifde‡
YY_∑r£_LSP_NEEDED


98 #i‚de‡
YY_∑r£_LTYPE


99 #i‚de‡
BISON_YYLTYPE_ISDECLARED


100 
	#BISON_YYLTYPE_ISDECLARED


	)

102 
	syy…y≥


104 
	mtime°amp
;

105 
	mfú°_löe
;

106 
	mfú°_cﬁumn
;

107 
	mœ°_löe
;

108 
	mœ°_cﬁumn
;

109 *
	mãxt
;

111 
	tyy…y≥
;

114 
	#YY_∑r£_LTYPE
 
yy…y≥


	)

119 #i‚de‡
YY_∑r£_STYPE


120 
	#YY_∑r£_STYPE
 

	)

124 #i‚de‡
YY_∑r£_PARSE


125 
	#YY_∑r£_PARSE
 
yy∑r£


	)

128 #i‚de‡
YY_∑r£_LEX


129 
	#YY_∑r£_LEX
 
yyÀx


	)

132 #i‚de‡
YY_∑r£_LVAL


133 
	#YY_∑r£_LVAL
 
yylvÆ


	)

136 #i‚de‡
YY_∑r£_LLOC


137 
	#YY_∑r£_LLOC
 
yyŒoc


	)

140 #i‚de‡
YY_∑r£_CHAR


141 
	#YY_∑r£_CHAR
 
yych¨


	)

144 #i‚de‡
YY_∑r£_NERRS


145 
	#YY_∑r£_NERRS
 
yy√ºs


	)

148 #i‚de‡
YY_∑r£_DEBUG_FLAG


149 
	#YY_∑r£_DEBUG_FLAG
 
yydebug


	)

152 #i‚de‡
YY_∑r£_ERROR


153 
	#YY_∑r£_ERROR
 
yyîr‹


	)

156 #i‚de‡
YY_∑r£_PARSE_PARAM


157 #i‚de‡
__STDC__


158 #i‚de‡
__˝lu•lus


159 #i‚de‡
YY_USE_CLASS


160 
	#YY_∑r£_PARSE_PARAM


	)

161 #i‚de‡
YY_∑r£_PARSE_PARAM_DEF


162 
	#YY_∑r£_PARSE_PARAM_DEF


	)

167 #i‚de‡
YY_∑r£_PARSE_PARAM


168 
	#YY_∑r£_PARSE_PARAM
 

	)

173 #i‚de‡
YY_USE_CLASS


175 #i‚de‡
YY_∑r£_PURE


176 #i‚de‡
yylvÆ


177 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

179 #i‡
yylvÆ
 !
YY_∑r£_LVAL


180 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

189 
	#IDENTIFIER
 258

	)

190 
	#CONSTANT
 259

	)

191 
	#STRING_LITERAL
 260

	)

192 
	#SIZEOF
 261

	)

193 
	#PTR_OP
 262

	)

194 
	#INC_OP
 263

	)

195 
	#DEC_OP
 264

	)

196 
	#LEFT_OP
 265

	)

197 
	#RIGHT_OP
 266

	)

198 
	#LE_OP
 267

	)

199 
	#GE_OP
 268

	)

200 
	#EQ_OP
 269

	)

201 
	#NE_OP
 270

	)

202 
	#AND_OP
 271

	)

203 
	#OR_OP
 272

	)

204 
	#MUL_ASSIGN
 273

	)

205 
	#DIV_ASSIGN
 274

	)

206 
	#MOD_ASSIGN
 275

	)

207 
	#ADD_ASSIGN
 276

	)

208 
	#SUB_ASSIGN
 277

	)

209 
	#LEFT_ASSIGN
 278

	)

210 
	#RIGHT_ASSIGN
 279

	)

211 
	#AND_ASSIGN
 280

	)

212 
	#XOR_ASSIGN
 281

	)

213 
	#OR_ASSIGN
 282

	)

214 
	#TYPE_NAME
 283

	)

215 
	#TYPEDEF
 284

	)

216 
	#EXTERN
 285

	)

217 
	#STATIC
 286

	)

218 
	#AUTO
 287

	)

219 
	#REGISTER
 288

	)

220 
	#CHAR
 289

	)

221 
	#SHORT
 290

	)

222 
	#INT
 291

	)

223 
	#LONG
 292

	)

224 
	#SIGNED
 293

	)

225 
	#UNSIGNED
 294

	)

226 
	#FLOAT
 295

	)

227 
	#DOUBLE
 296

	)

228 
	#CONST
 297

	)

229 
	#VOLATILE
 298

	)

230 
	#VOID
 299

	)

231 
	#STRUCT
 300

	)

232 
	#UNION
 301

	)

233 
	#ENUM
 302

	)

234 
	#ELLIPSIS
 303

	)

235 
	#CASE
 304

	)

236 
	#DEFAULT
 305

	)

237 
	#IF
 306

	)

238 
	#ELSE
 307

	)

239 
	#SWITCH
 308

	)

240 
	#WHILE
 309

	)

241 
	#DO
 310

	)

242 
	#FOR
 311

	)

243 
	#GOTO
 312

	)

244 
	#CONTINUE
 313

	)

245 
	#BREAK
 314

	)

246 
	#RETURN
 315

	)

253 #i‚de‡
YY_∑r£_CLASS


254 
	#YY_∑r£_CLASS
 
∑r£


	)

257 #i‚de‡
YY_∑r£_INHERIT


258 
	#YY_∑r£_INHERIT


	)

261 #i‚de‡
YY_∑r£_MEMBERS


262 
	#YY_∑r£_MEMBERS


	)

265 #i‚de‡
YY_∑r£_LEX_BODY


266 
	#YY_∑r£_LEX_BODY


	)

269 #i‚de‡
YY_∑r£_ERROR_BODY


270 
	#YY_∑r£_ERROR_BODY


	)

273 #i‚de‡
YY_∑r£_CONSTRUCTOR_PARAM


274 
	#YY_∑r£_CONSTRUCTOR_PARAM


	)

277 #i‚de‡
YY_∑r£_USE_CONST_TOKEN


278 
	#YY_∑r£_USE_CONST_TOKEN
 0

	)

282 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

283 #i‚de‡
YY_∑r£_ENUM_TOKEN


284 
	#YY_∑r£_ENUM_TOKEN
 
yy_∑r£_íum_tokí


	)

288 ˛as†
	cYY_∑r£_CLASS
 
	mYY_∑r£_INHERIT


290 
	mpublic
:

291 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

295 c⁄° 
IDENTIFIER
;

296 c⁄° 
	mCONSTANT
;

297 c⁄° 
	mSTRING_LITERAL
;

298 c⁄° 
	mSIZEOF
;

299 c⁄° 
	mPTR_OP
;

300 c⁄° 
	mINC_OP
;

301 c⁄° 
	mDEC_OP
;

302 c⁄° 
	mLEFT_OP
;

303 c⁄° 
	mRIGHT_OP
;

304 c⁄° 
	mLE_OP
;

305 c⁄° 
	mGE_OP
;

306 c⁄° 
	mEQ_OP
;

307 c⁄° 
	mNE_OP
;

308 c⁄° 
	mAND_OP
;

309 c⁄° 
	mOR_OP
;

310 c⁄° 
	mMUL_ASSIGN
;

311 c⁄° 
	mDIV_ASSIGN
;

312 c⁄° 
	mMOD_ASSIGN
;

313 c⁄° 
	mADD_ASSIGN
;

314 c⁄° 
	mSUB_ASSIGN
;

315 c⁄° 
	mLEFT_ASSIGN
;

316 c⁄° 
	mRIGHT_ASSIGN
;

317 c⁄° 
	mAND_ASSIGN
;

318 c⁄° 
	mXOR_ASSIGN
;

319 c⁄° 
	mOR_ASSIGN
;

320 c⁄° 
	mTYPE_NAME
;

321 c⁄° 
	mTYPEDEF
;

322 c⁄° 
	mEXTERN
;

323 c⁄° 
	mSTATIC
;

324 c⁄° 
	mAUTO
;

325 c⁄° 
	mREGISTER
;

326 c⁄° 
	mCHAR
;

327 c⁄° 
	mSHORT
;

328 c⁄° 
	mINT
;

329 c⁄° 
	mLONG
;

330 c⁄° 
	mSIGNED
;

331 c⁄° 
	mUNSIGNED
;

332 c⁄° 
	mFLOAT
;

333 c⁄° 
	mDOUBLE
;

334 c⁄° 
	mCONST
;

335 c⁄° 
	mVOLATILE
;

336 c⁄° 
	mVOID
;

337 c⁄° 
	mSTRUCT
;

338 c⁄° 
	mUNION
;

339 c⁄° 
	mENUM
;

340 c⁄° 
	mELLIPSIS
;

341 c⁄° 
	mCASE
;

342 c⁄° 
	mDEFAULT
;

343 c⁄° 
	mIF
;

344 c⁄° 
	mELSE
;

345 c⁄° 
	mSWITCH
;

346 c⁄° 
	mWHILE
;

347 c⁄° 
	mDO
;

348 c⁄° 
	mFOR
;

349 c⁄° 
	mGOTO
;

350 c⁄° 
	mCONTINUE
;

351 c⁄° 
	mBREAK
;

352 c⁄° 
	mRETURN
;

358 
	eYY_∑r£_ENUM_TOKEN
 { 
	mYY_∑r£_NULL_TOKEN
=0

361 ,
	mIDENTIFIER
=258

362 ,
	mCONSTANT
=259

363 ,
	mSTRING_LITERAL
=260

364 ,
	mSIZEOF
=261

365 ,
	mPTR_OP
=262

366 ,
	mINC_OP
=263

367 ,
	mDEC_OP
=264

368 ,
	mLEFT_OP
=265

369 ,
	mRIGHT_OP
=266

370 ,
	mLE_OP
=267

371 ,
	mGE_OP
=268

372 ,
	mEQ_OP
=269

373 ,
	mNE_OP
=270

374 ,
	mAND_OP
=271

375 ,
	mOR_OP
=272

376 ,
	mMUL_ASSIGN
=273

377 ,
	mDIV_ASSIGN
=274

378 ,
	mMOD_ASSIGN
=275

379 ,
	mADD_ASSIGN
=276

380 ,
	mSUB_ASSIGN
=277

381 ,
	mLEFT_ASSIGN
=278

382 ,
	mRIGHT_ASSIGN
=279

383 ,
	mAND_ASSIGN
=280

384 ,
	mXOR_ASSIGN
=281

385 ,
	mOR_ASSIGN
=282

386 ,
	mTYPE_NAME
=283

387 ,
	mTYPEDEF
=284

388 ,
	mEXTERN
=285

389 ,
	mSTATIC
=286

390 ,
	mAUTO
=287

391 ,
	mREGISTER
=288

392 ,
	mCHAR
=289

393 ,
	mSHORT
=290

394 ,
	mINT
=291

395 ,
	mLONG
=292

396 ,
	mSIGNED
=293

397 ,
	mUNSIGNED
=294

398 ,
	mFLOAT
=295

399 ,
	mDOUBLE
=296

400 ,
	mCONST
=297

401 ,
	mVOLATILE
=298

402 ,
	mVOID
=299

403 ,
	mSTRUCT
=300

404 ,
	mUNION
=301

405 ,
	mENUM
=302

406 ,
	mELLIPSIS
=303

407 ,
	mCASE
=304

408 ,
	mDEFAULT
=305

409 ,
	mIF
=306

410 ,
	mELSE
=307

411 ,
	mSWITCH
=308

412 ,
	mWHILE
=309

413 ,
	mDO
=310

414 ,
	mFOR
=311

415 ,
	mGOTO
=312

416 ,
	mCONTINUE
=313

417 ,
	mBREAK
=314

418 ,
	mRETURN
=315

425 
	gpublic
:

426 
YY_∑r£_PARSE
(
YY_∑r£_PARSE_PARAM
);

427 
vútuÆ
 
	$YY_∑r£_ERROR
(*
msg
Ë
YY_∑r£_ERROR_BODY
;

428 #ifde‡
YY_∑r£_PURE


429 #ifde‡
YY_∑r£_LSP_NEEDED


430 
vútuÆ
 
	$YY_∑r£_LEX
(
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
,
YY_∑r£_LTYPE
 *
YY_∑r£_LLOC
Ë
YY_∑r£_LEX_BODY
;

432 
vútuÆ
 
	$YY_∑r£_LEX
(
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
Ë
YY_∑r£_LEX_BODY
;

435 
vútuÆ
 
	$YY_∑r£_LEX
(Ë
YY_∑r£_LEX_BODY
;

436 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

437 #ifde‡
YY_∑r£_LSP_NEEDED


438 
YY_∑r£_LTYPE
 
YY_∑r£_LLOC
;

440 
YY_∑r£_NERRS
;

441 
YY_∑r£_CHAR
;

443 #i‡
YY_∑r£_DEBUG
 != 0

444 
public
:

445 
YY_∑r£_DEBUG_FLAG
;

447 
public
:

448 
	`YY_∑r£_CLASS
(
YY_∑r£_CONSTRUCTOR_PARAM
);

449 
public
:

450 
YY_∑r£_MEMBERS


451 
	}
};

456 #i‡
YY_∑r£_COMPATIBILITY
 != 0

463 #i‚de‡
YYLTYPE


464 
	#YYLTYPE
 
YY_∑r£_LTYPE


	)

466 #i‚de‡
YYDEBUG


467 #ifde‡
YY_∑r£_DEBUG


468 
	#YYDEBUG
 
YY_∑r£_DEBUG


	)

	@cl-standard.y

8 
	#YYDEBUG
 1

	)

9 
yydebug
;

10 
löío
;

11 
cﬁumn
;

13 
	gid
[128];

14 
	gi_ty≥def
 = 0;

15 
	gi_°ru˘_‹_uni⁄
 = 0;

16 
	gdump
 = 0;

18 
	$£ây≥def
()

20 
i_ty≥def
 = 1;

21  
i_ty≥def
;

22 
	}
}

24 
	$£t_ö_°ru
 ()

26 
yydebug
 = 1;

27 
i_°ru˘_‹_uni⁄
 = 1;

28 
	}
}

29 
	$˛r_ö_°ru
 ()

31 
i_°ru˘_‹_uni⁄
 = 0;

32 
yydebug
 = 0;

33 
	}
}

37 %
tokí
 
INCLUDE_FLAG
 
LINE
 
FILENAME


38 %
tokí
 
IDENTIFIER
 
CONSTANT
 
STRING_LITERAL
 
SIZEOF


39 %
tokí
 
PTR_OP
 
INC_OP
 
DEC_OP
 
LEFT_OP
 
RIGHT_OP
 
LE_OP
 
GE_OP
 
EQ_OP
 
NE_OP


40 %
tokí
 
AND_OP
 
OR_OP
 
MUL_ASSIGN
 
DIV_ASSIGN
 
MOD_ASSIGN
 
ADD_ASSIGN


41 %
tokí
 
SUB_ASSIGN
 
LEFT_ASSIGN
 
RIGHT_ASSIGN
 
AND_ASSIGN


42 %
tokí
 
XOR_ASSIGN
 
OR_ASSIGN
 
TYPE_NAME


44 %
tokí
 
TYPEDEF
 
EXTERN
 
STATIC
 
AUTO
 
REGISTER


45 %
tokí
 
CHAR
 
SHORT
 
INT
 
LONG
 
SIGNED
 
UNSIGNED
 
FLOAT
 
DOUBLE
 
CONST
 
VOLATILE
 
VOID


46 %
tokí
 
STRUCT
 
UNION
 
ENUM
 
ELLIPSIS


48 %
tokí
 
CASE
 
DEFAULT
 
IF
 
ELSE
 
SWITCH
 
WHILE
 
DO
 
FOR
 
GOTO
 
CONTINUE
 
BREAK
 
RETURN


50 %
°¨t
 
å™¶©i⁄_unô


51 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

53 
¥im¨y_ex¥essi⁄


54 : 
IDENTIFIER


55 | 
CONSTANT


56 | 
STRING_LITERAL


57 | '(' 
ex¥essi⁄
 ')'

60 
¥ïro˚ss‹_ö˛ude_hódî_fûe


61 : 
INCLUDE_FLAG


67 
po°fix_ex¥essi⁄


68 : 
¥im¨y_ex¥essi⁄


69 | 
po°fix_ex¥essi⁄
 '[' 
ex¥essi⁄
 ']'

70 | 
po°fix_ex¥essi⁄
 '(' ')'

71 | 
po°fix_ex¥essi⁄
 '(' 
¨gumít_ex¥essi⁄_li°
 ')'

72 | 
po°fix_ex¥essi⁄
 '.' 
IDENTIFIER


73 | 
po°fix_ex¥essi⁄
 
PTR_OP
 
IDENTIFIER


74 | 
po°fix_ex¥essi⁄
 
INC_OP


75 | 
po°fix_ex¥essi⁄
 
DEC_OP


78 
¨gumít_ex¥essi⁄_li°


79 : 
assignmít_ex¥essi⁄


80 | 
¨gumít_ex¥essi⁄_li°
 ',' 
assignmít_ex¥essi⁄


83 
u«ry_ex¥essi⁄


84 : 
po°fix_ex¥essi⁄


85 | 
INC_OP
 
u«ry_ex¥essi⁄


86 | 
DEC_OP
 
u«ry_ex¥essi⁄


87 | 
u«ry_›î©‹
 
ˇ°_ex¥essi⁄


88 | 
SIZEOF
 
u«ry_ex¥essi⁄


89 | 
SIZEOF
 '(' 
ty≥_«me
 ')'

92 
u«ry_›î©‹


101 
ˇ°_ex¥essi⁄


102 : 
u«ry_ex¥essi⁄


103 | '(' 
ty≥_«me
 ')' 
ˇ°_ex¥essi⁄


106 
mu…ùliˇtive_ex¥essi⁄


107 : 
ˇ°_ex¥essi⁄


108 | 
mu…ùliˇtive_ex¥essi⁄
 '*' 
ˇ°_ex¥essi⁄


109 | 
mu…ùliˇtive_ex¥essi⁄
 '/' 
ˇ°_ex¥essi⁄


110 | 
mu…ùliˇtive_ex¥essi⁄
 '%' 
ˇ°_ex¥essi⁄


113 
addôive_ex¥essi⁄


114 : 
mu…ùliˇtive_ex¥essi⁄


115 | 
addôive_ex¥essi⁄
 '+' 
mu…ùliˇtive_ex¥essi⁄


116 | 
addôive_ex¥essi⁄
 '-' 
mu…ùliˇtive_ex¥essi⁄


119 
shi·_ex¥essi⁄


120 : 
addôive_ex¥essi⁄


121 | 
shi·_ex¥essi⁄
 
LEFT_OP
 
addôive_ex¥essi⁄


122 | 
shi·_ex¥essi⁄
 
RIGHT_OP
 
addôive_ex¥essi⁄


125 
ªœti⁄Æ_ex¥essi⁄


126 : 
shi·_ex¥essi⁄


127 | 
ªœti⁄Æ_ex¥essi⁄
 '<' 
shi·_ex¥essi⁄


128 | 
ªœti⁄Æ_ex¥essi⁄
 '>' 
shi·_ex¥essi⁄


129 | 
ªœti⁄Æ_ex¥essi⁄
 
LE_OP
 
shi·_ex¥essi⁄


130 | 
ªœti⁄Æ_ex¥essi⁄
 
GE_OP
 
shi·_ex¥essi⁄


133 
equÆôy_ex¥essi⁄


134 : 
ªœti⁄Æ_ex¥essi⁄


135 | 
equÆôy_ex¥essi⁄
 
EQ_OP
 
ªœti⁄Æ_ex¥essi⁄


136 | 
equÆôy_ex¥essi⁄
 
NE_OP
 
ªœti⁄Æ_ex¥essi⁄


139 
™d_ex¥essi⁄


140 : 
equÆôy_ex¥essi⁄


141 | 
™d_ex¥essi⁄
 '&' 
equÆôy_ex¥essi⁄


144 
ex˛usive_‹_ex¥essi⁄


145 : 
™d_ex¥essi⁄


146 | 
ex˛usive_‹_ex¥essi⁄
 '^' 
™d_ex¥essi⁄


149 
ö˛usive_‹_ex¥essi⁄


150 : 
ex˛usive_‹_ex¥essi⁄


151 | 
ö˛usive_‹_ex¥essi⁄
 '|' 
ex˛usive_‹_ex¥essi⁄


154 
logiˇl_™d_ex¥essi⁄


155 : 
ö˛usive_‹_ex¥essi⁄


156 | 
logiˇl_™d_ex¥essi⁄
 
AND_OP
 
ö˛usive_‹_ex¥essi⁄


159 
logiˇl_‹_ex¥essi⁄


160 : 
logiˇl_™d_ex¥essi⁄


161 | 
logiˇl_‹_ex¥essi⁄
 
OR_OP
 
logiˇl_™d_ex¥essi⁄


164 
c⁄dôi⁄Æ_ex¥essi⁄


165 : 
logiˇl_‹_ex¥essi⁄


166 | 
logiˇl_‹_ex¥essi⁄
 '?' 
ex¥essi⁄
 ':' 
c⁄dôi⁄Æ_ex¥essi⁄


169 
assignmít_ex¥essi⁄


170 : 
c⁄dôi⁄Æ_ex¥essi⁄


171 | 
u«ry_ex¥essi⁄
 
assignmít_›î©‹
 
assignmít_ex¥essi⁄


174 
assignmít_›î©‹


176 | 
MUL_ASSIGN


177 | 
DIV_ASSIGN


178 | 
MOD_ASSIGN


179 | 
ADD_ASSIGN


180 | 
SUB_ASSIGN


181 | 
LEFT_ASSIGN


182 | 
RIGHT_ASSIGN


183 | 
AND_ASSIGN


184 | 
XOR_ASSIGN


185 | 
OR_ASSIGN


188 
ex¥essi⁄


189 : 
assignmít_ex¥essi⁄


190 | 
ex¥essi⁄
 ',' 
assignmít_ex¥essi⁄


193 
c⁄°™t_ex¥essi⁄


194 : 
c⁄dôi⁄Æ_ex¥essi⁄


197 
de˛¨©i⁄


198 : 
de˛¨©i⁄_•ecifõrs
 ';'

199 | 
de˛¨©i⁄_•ecifõrs
 
öô_de˛¨©‹_li°
 ';' { \

200 i‡(
i_ty≥def
) {

201 
	`¥ötf
 ("[[%s]]", 
id
); 
i_ty≥def
=0;

202 
	`°_ö£π_ty≥def
 (
id
, 
löío
, 
cﬁumn
);

207 
de˛¨©i⁄_•ecifõrs


208 : 
°‹age_˛ass_•ecifõr


209 | 
°‹age_˛ass_•ecifõr
 
de˛¨©i⁄_•ecifõrs


210 | 
ty≥_•ecifõr


211 | 
ty≥_•ecifõr
 
de˛¨©i⁄_•ecifõrs


212 | 
ty≥_quÆifõr


213 | 
ty≥_quÆifõr
 
de˛¨©i⁄_•ecifõrs


216 
öô_de˛¨©‹_li°


217 : 
öô_de˛¨©‹


218 | 
öô_de˛¨©‹_li°
 ',' 
öô_de˛¨©‹


221 
öô_de˛¨©‹


222 : 
de˛¨©‹
 { 
	`¥ötf
 ("(D1:%s:%d)", 
id
,
i_ty≥def
); }

223 | 
de˛¨©‹
 { 
	`¥ötf
 ("(D2)"); } '=' 
öôülizî


226 
°‹age_˛ass_•ecifõr


227 : 
TYPEDEF
 { 
	`£ây≥def
(); }

228 | 
EXTERN


229 | 
STATIC


230 | 
AUTO


231 | 
REGISTER


234 
ty≥_•ecifõr


235 : 
VOID


236 | 
CHAR


237 | 
SHORT


238 | 
INT


239 | 
LONG


240 | 
FLOAT


241 | 
DOUBLE


242 | 
SIGNED


243 | 
UNSIGNED


244 | 
°ru˘_‹_uni⁄_•ecifõr


245 | 
íum_•ecifõr


246 | 
TYPE_NAME


249 
°ru˘_‹_uni⁄_•ecifõr


250 : 
°ru˘_‹_uni⁄
 
IDENTIFIER
 '{' 
°ru˘_de˛¨©i⁄_li°
 '}' { 
	`˛r_ö_°ru
(); }

251 | 
°ru˘_‹_uni⁄
 '{' 
°ru˘_de˛¨©i⁄_li°
 '}' { 
	`˛r_ö_°ru
(); }

252 | 
°ru˘_‹_uni⁄
 
IDENTIFIER
 { 
	`˛r_ö_°ru
(); }

255 
°ru˘_‹_uni⁄


256 : 
STRUCT
 { 
	`£t_ö_°ru
(); }

257 | 
UNION
 { 
	`£t_ö_°ru
(); }

260 
°ru˘_de˛¨©i⁄_li°


261 : 
°ru˘_de˛¨©i⁄


262 | 
°ru˘_de˛¨©i⁄_li°
 
°ru˘_de˛¨©i⁄


265 
°ru˘_de˛¨©i⁄


266 : 
•ecifõr_quÆifõr_li°
 
°ru˘_de˛¨©‹_li°
 ';'

269 
•ecifõr_quÆifõr_li°


270 : 
ty≥_•ecifõr
 
•ecifõr_quÆifõr_li°


271 | 
ty≥_•ecifõr


272 | 
ty≥_quÆifõr
 
•ecifõr_quÆifõr_li°


273 | 
ty≥_quÆifõr


276 
°ru˘_de˛¨©‹_li°


277 : 
°ru˘_de˛¨©‹


278 | 
°ru˘_de˛¨©‹_li°
 ',' 
°ru˘_de˛¨©‹


281 
°ru˘_de˛¨©‹


282 : 
de˛¨©‹


283 | ':' 
c⁄°™t_ex¥essi⁄


284 | 
de˛¨©‹
 ':' 
c⁄°™t_ex¥essi⁄


287 
íum_•ecifõr


288 : 
ENUM
 '{' 
íumî©‹_li°
 '}'

289 | 
ENUM
 
IDENTIFIER
 '{' 
íumî©‹_li°
 '}'

290 | 
ENUM
 
IDENTIFIER


293 
íumî©‹_li°


294 : 
íumî©‹


295 | 
íumî©‹_li°
 ',' 
íumî©‹


298 
íumî©‹


299 : 
IDENTIFIER


300 | 
IDENTIFIER
 '=' 
c⁄°™t_ex¥essi⁄


303 
ty≥_quÆifõr


304 : 
CONST


305 | 
VOLATILE


308 
de˛¨©‹


309 : 
poöãr
 
dúe˘_de˛¨©‹


310 | 
dúe˘_de˛¨©‹


316 
dúe˘_de˛¨©‹


317 : 
IDENTIFIER


318 | '(' 
de˛¨©‹
 ')'

319 | 
dúe˘_de˛¨©‹
 '[' 
c⁄°™t_ex¥essi⁄
 ']'

320 | 
dúe˘_de˛¨©‹
 '[' ']'

321 | 
dúe˘_de˛¨©‹
 '(' 
∑ømëî_ty≥_li°
 ')'

322 | 
dúe˘_de˛¨©‹
 '(' 
idítifõr_li°
 ')'

323 | 
dúe˘_de˛¨©‹
 '(' ')'

326 
poöãr


328 | '*' 
ty≥_quÆifõr_li°


329 | '*' 
poöãr


330 | '*' 
ty≥_quÆifõr_li°
 
poöãr


333 
ty≥_quÆifõr_li°


334 : 
ty≥_quÆifõr


335 | 
ty≥_quÆifõr_li°
 
ty≥_quÆifõr


339 
∑ømëî_ty≥_li°


340 : 
∑ømëî_li°


341 | 
∑ømëî_li°
 ',' 
ELLIPSIS


344 
∑ømëî_li°


345 : 
∑ømëî_de˛¨©i⁄


346 | 
∑ømëî_li°
 ',' 
∑ømëî_de˛¨©i⁄


349 
∑ømëî_de˛¨©i⁄


350 : 
de˛¨©i⁄_•ecifõrs
 
de˛¨©‹


351 | 
de˛¨©i⁄_•ecifõrs
 
ab°ø˘_de˛¨©‹


352 | 
de˛¨©i⁄_•ecifõrs


355 
idítifõr_li°


356 : 
IDENTIFIER


357 | 
idítifõr_li°
 ',' 
IDENTIFIER


360 
ty≥_«me


361 : 
•ecifõr_quÆifõr_li°


362 | 
•ecifõr_quÆifõr_li°
 
ab°ø˘_de˛¨©‹


365 
ab°ø˘_de˛¨©‹


366 : 
poöãr


367 | 
dúe˘_ab°ø˘_de˛¨©‹


368 | 
poöãr
 
dúe˘_ab°ø˘_de˛¨©‹


371 
dúe˘_ab°ø˘_de˛¨©‹


372 : '(' 
ab°ø˘_de˛¨©‹
 ')'

374 | '[' 
c⁄°™t_ex¥essi⁄
 ']'

375 | 
dúe˘_ab°ø˘_de˛¨©‹
 '[' ']'

376 | 
dúe˘_ab°ø˘_de˛¨©‹
 '[' 
c⁄°™t_ex¥essi⁄
 ']'

378 | '(' 
∑ømëî_ty≥_li°
 ')'

379 | 
dúe˘_ab°ø˘_de˛¨©‹
 '(' ')'

380 | 
dúe˘_ab°ø˘_de˛¨©‹
 '(' 
∑ømëî_ty≥_li°
 ')'

383 
öôülizî


384 : 
assignmít_ex¥essi⁄


385 | '{' 
öôülizî_li°
 '}'

386 | '{' 
öôülizî_li°
 ',' '}'

389 
öôülizî_li°


390 : 
öôülizî


391 | 
öôülizî_li°
 ',' 
öôülizî


394 
°©emít


395 : 
œbñed_°©emít


396 | 
compound_°©emít


397 | 
ex¥essi⁄_°©emít


398 | 
£À˘i⁄_°©emít


399 | 
ôî©i⁄_°©emít


400 | 
jump_°©emít


403 
œbñed_°©emít


404 : 
IDENTIFIER
 ':' 
°©emít


405 | 
CASE
 
c⁄°™t_ex¥essi⁄
 ':' 
°©emít


406 | 
DEFAULT
 ':' 
°©emít


409 
compound_°©emít


411 | '{' 
°©emít_li°
 '}'

412 | '{' 
de˛¨©i⁄_li°
 '}'

413 | '{' 
de˛¨©i⁄_li°
 
°©emít_li°
 '}'

416 
de˛¨©i⁄_li°


417 : 
de˛¨©i⁄


418 | 
de˛¨©i⁄_li°
 
de˛¨©i⁄


421 
°©emít_li°


422 : 
°©emít


423 | 
°©emít_li°
 
°©emít


426 
ex¥essi⁄_°©emít


428 | 
ex¥essi⁄
 ';'

431 
£À˘i⁄_°©emít


432 : 
IF
 '(' 
ex¥essi⁄
 ')' 
°©emít


433 | 
IF
 '(' 
ex¥essi⁄
 ')' 
°©emít
 
ELSE
 statement

434 | 
SWITCH
 '(' 
ex¥essi⁄
 ')' 
°©emít


437 
ôî©i⁄_°©emít


438 : 
WHILE
 '(' 
ex¥essi⁄
 ')' 
°©emít


439 | 
DO
 
°©emít
 
WHILE
 '(' 
ex¥essi⁄
 ')' ';'

440 | 
FOR
 '(' 
ex¥essi⁄_°©emít
Éx¥essi⁄_°©emíà')' 
°©emít


441 | 
FOR
 '(' 
ex¥essi⁄_°©emít
Éx¥essi⁄_°©emíà
ex¥essi⁄
 ')' 
°©emít


444 
jump_°©emít


445 : 
GOTO
 
IDENTIFIER
 ';'

446 | 
CONTINUE
 ';'

447 | 
BREAK
 ';'

448 | 
RETURN
 ';'

449 | 
RETURN
 
ex¥essi⁄
 ';'

452 
å™¶©i⁄_unô


453 : 
exã∫Æ_de˛¨©i⁄


454 | 
å™¶©i⁄_unô
 
exã∫Æ_de˛¨©i⁄


455 | 
¥ïro˚ss‹_ö˛ude_hódî_fûe


456 | 
å™¶©i⁄_unô
 
¥ïro˚ss‹_ö˛ude_hódî_fûe


459 
exã∫Æ_de˛¨©i⁄


460 : 
fun˘i⁄_deföôi⁄


461 | 
de˛¨©i⁄


464 
fun˘i⁄_deföôi⁄


465 : 
de˛¨©i⁄_•ecifõrs
 
de˛¨©‹
 
de˛¨©i⁄_li°
 
compound_°©emít


466 | 
de˛¨©i⁄_•ecifõrs
 
de˛¨©‹
 
compound_°©emít


467 | 
de˛¨©‹
 
de˛¨©i⁄_li°
 
compound_°©emít


468 | 
de˛¨©‹
 
compound_°©emít


471 
	}
%%

472 
	~<°dio.h
>

474 
cﬁumn
;

476 
	$yyîr‹
(
s
)

477 *
s
;

479 
	`fÊush
(
°dout
);

480 
	`¥ötf
("\n%*s\n%*s\n", 
cﬁumn
, "^", cﬁumn, 
s
);

481 
	}
}

483 
	$maö
 ()

485 
yydebug
 = 0;

486 
	`yy∑r£
();

487 
	}
}

	@hello.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

8 
	s°udít
 {

9 
	mage
;

10 
	m«me
[16];

11 } 
	t°udít
;

13 
	tmyöt
;

15 
	$maö
 (
¨gc
, ** 
¨gv
)

17 
˛ock
;

18 
ii
 = 0;

19 c⁄° 
iii
;

20 
kk
;

22 
	s˛ock
 {

23 
i
;

24 
c
;

25 }
˛ock
;

26 
age
 = 0;

28 
	`¥ötf
 ("Hello world\n");

31 
	}
}

	@symtab.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~"symèb.h
"

17 
	#SIZE
 211

	)

22 
	#SHIFT
 4

	)

26 
	$hash
(*
key
)

28 
ãmp
 = 0;

29 
i
 = 0;

30 
key
[
i
] != '\0') {

31 
ãmp
 = (—em∞<< 
SHIFT
Ë+ 
key
[
i
]Ë% 
SIZE
;

32 ++
i
;

34  
ãmp
;

35 
	}
}

42 
	sLöeLi°Rec
 {

43 
	mlöío
;

44 
LöeLi°Rec
 *
	m√xt
;

45 } *
	tLöeLi°
;

52 
	sBuckëLi°Rec
 {

53 
	m«me
[126];

54 
LöeLi°
 
	mlöes
;

55 
	mmemloc
;

56 
BuckëLi°Rec
 *
	m√xt
;

57 
	mfunc
[126];

58 
	mdúty
;

59 } *
	tBuckëLi°
;

62 
	gßved_func_«me
 [1024];

65 
BuckëLi°
 
	ghashTabÀ
[
SIZE
];

66 
BuckëLi°
 
	gty≥defNameTabÀ
[
SIZE
];

74 
	$°_ö£π_id
 (*
«me
, 
löío
, 
loc
)

76 
h
 = 
	`hash
(
«me
);

77 
BuckëLi°
 
l
 = 
hashTabÀ
[
h
];

79 (
l
 !
NULL
)

81 (
	`°rcmp
(
«me
, 
l
->name) != 0) ||

82 (
	`°rcmp
(
ßved_func_«me
, 
l
->
func
) != 0)

86 
l
 =Ü->
√xt
;

88 i‡(
l
 =
NULL
) {

89 
l
 = (
BuckëLi°
Ë
	`mÆloc
((
BuckëLi°Rec
));

90 i‡(!
l
) {

91 
	`¥ötf
 ("st_insert: malloc failed");

94 
l
->
«me
 =Çame;

96 
	`•rötf
 (
l
->
«me
, "%s",Çame);

98 
l
->
löes
 = (
LöeLi°
Ë
	`mÆloc
((
LöeLi°Rec
));

99 i‡(!(
l
->
löes
)) {

100 
	`¥ötf
 ("st_insert: malloc failed,Ü->lines");

102 
l
->
löes
->
löío
 =Üineno;

103 
l
->
memloc
 = 
loc
;

104 
l
->
löes
->
√xt
 = 
NULL
;

105 
l
->
dúty
 = 1;

106 
	`•rötf
 (
l
->
func
, "%s", 
ßved_func_«me
);

107 
l
->
√xt
 = 
hashTabÀ
[
h
];

108 
hashTabÀ
[
h
] = 
l
;

110 
LöeLi°
 
t
 = 
l
->
löes
;

111 
t
->
√xt
 !
NULL
)

112 
t
 =Å->
√xt
;

113 
t
->
√xt
 = (
LöeLi°
Ë
	`mÆloc
((
LöeLi°Rec
));

114 i‡(!(
t
->
√xt
)) {

115 
	`¥ötf
 ("st_insert: malloc failed,Å->next");

117 
t
->
√xt
->
löío
 =Üineno;

118 
t
->
√xt
->√xà
NULL
;

120 
	}
}

124 
	$°_ö£π_ty≥def
 (*
«me
, 
löío
, 
loc
)

126 
h
 = 
	`hash
(
«me
);

127 
BuckëLi°
 
l
 = 
ty≥defNameTabÀ
[
h
];

129 (
l
 !
NULL
)

131 (
	`°rcmp
(
«me
, 
l
->name) != 0) ||

132 (
	`°rcmp
(
ßved_func_«me
, 
l
->
func
) != 0)

136 
l
 =Ü->
√xt
;

138 i‡(
l
 =
NULL
) {

139 
l
 = (
BuckëLi°
Ë
	`mÆloc
((
BuckëLi°Rec
));

140 i‡(!(
l
)) {

141 
	`¥ötf
 ("st_insert_typedef: malloc failed,Ü");

144 
l
->
«me
 =Çame;

146 
	`•rötf
 (
l
->
«me
, "%s",Çame);

148 
l
->
löes
 = (
LöeLi°
Ë
	`mÆloc
((
LöeLi°Rec
));

149 i‡(!(
l
->
löes
)) {

150 
	`¥ötf
 ("st_insert_typedef: malloc failed,Ü->lines");

152 
l
->
löes
->
löío
 =Üineno;

153 
l
->
memloc
 = 
loc
;

154 
l
->
löes
->
√xt
 = 
NULL
;

155 
l
->
dúty
 = 1;

156 
	`•rötf
 (
l
->
func
, "%s", 
ßved_func_«me
);

157 
l
->
√xt
 = 
ty≥defNameTabÀ
[
h
];

158 
ty≥defNameTabÀ
[
h
] = 
l
;

160 
LöeLi°
 
t
 = 
l
->
löes
;

161 
t
->
√xt
 !
NULL
)

162 
t
 =Å->
√xt
;

163 
t
->
√xt
 = (
LöeLi°
Ë
	`mÆloc
((
LöeLi°Rec
));

164 i‡(!(
l
->
√xt
)) {

165 
	`¥ötf
 ("st_insert_typedef: malloc failed,Ü->next");

167 
t
->
√xt
->
löío
 =Üineno;

168 
t
->
√xt
->√xà
NULL
;

170 
	}
}

181 
	gBuckëLi°


183 
	$°_lookup
(*
«me
)

185 
h
 = 
	`hash
(
«me
);

186 
BuckëLi°
 
l
 = 
hashTabÀ
[
h
];

188 (
l
 !
NULL
)

189 && ((
	`°rcmp
(
«me
, 
l
->name) != 0) ||

190 ((
	`°rcmp
(
ßved_func_«me
, 
l
->
func
) != 0))))

192 
l
 =Ü->
√xt
;

194 i‡(
l
 =
NULL
)

198  
NULL
;

202  
l
->
memloc
;

204  
l
;

206 
	}
}

209 
BuckëLi°


210 
	$°_lookup_ty≥def
(*
«me
)

212 
h
 = 
	`hash
(
«me
);

213 
BuckëLi°
 
l
 = 
ty≥defNameTabÀ
[
h
];

215 (
l
 !
NULL
)

216 && ((
	`°rcmp
(
«me
, 
l
->name) != 0)))

218 
l
 =Ü->
√xt
;

220 i‡(
l
 =
NULL
)

221  
NULL
;

223  
l
;

224 
	}
}

234 
	$¥ötSymTab
(
FILE
 * 
li°ög
)

236 
i
;

237 
	`Ârötf
(
li°ög
, "Variable Name Location Domain Line Numbers\n");

238 
	`Ârötf
(
li°ög
, "-------------- -------- -------------- ------------\n");

239 
i
 = 0; i < 
SIZE
; ++i) {

240 i‡(
hashTabÀ
[
i
] !
NULL
) {

241 
BuckëLi°
 
l
 = 
hashTabÀ
[
i
];

242 
l
 !
NULL
) {

243 
LöeLi°
 
t
 = 
l
->
löes
;

244 
	`Ârötf
(
li°ög
, "%+14†", 
l
->
«me
);

245 
	`Ârötf
(
li°ög
, "%+8d ", 
l
->
memloc
);

246 
	`Ârötf
(
li°ög
, "%+14†", 
l
->
func
);

247 
t
 !
NULL
) {

248 
	`Ârötf
(
li°ög
, "%+12d ", 
t
->
löío
);

249 
t
 =Å->
√xt
;

251 
	`Ârötf
(
li°ög
, "\n");

252 
l
 =Ü->
√xt
;

256 
	}
}

261 
	$¥ötTy≥defTab
(
FILE
 * 
li°ög
)

263 
i
;

264 
	`Ârötf
(
li°ög
, "Typedef Name Location Domain Line Numbers\n");

265 
	`Ârötf
(
li°ög
, "-------------- -------- -------------- ------------\n");

266 
i
 = 0; i < 
SIZE
; ++i) {

267 i‡(
ty≥defNameTabÀ
[
i
] !
NULL
) {

268 
BuckëLi°
 
l
 = 
ty≥defNameTabÀ
[
i
];

269 
l
 !
NULL
) {

270 
LöeLi°
 
t
 = 
l
->
löes
;

271 
	`Ârötf
(
li°ög
, "%+14†", 
l
->
«me
);

272 
	`Ârötf
(
li°ög
, "%+8d ", 
l
->
memloc
);

273 
	`Ârötf
(
li°ög
, "%+14†", 
l
->
func
);

274 
t
 !
NULL
) {

275 
	`Ârötf
(
li°ög
, "%+12d ", 
t
->
löío
);

276 
t
 =Å->
√xt
;

278 
	`Ârötf
(
li°ög
, "\n");

279 
l
 =Ü->
√xt
;

283 
	}
}

286 
	$ªÀa£_èbÀ
 ()

288 
i
 = 0;

289 
BuckëLi°
 
b1
 = 
NULL
, 
b2
 = NULL;

290 
LöeLi°
 
l1
 = 
NULL
, 
l2
 = NULL;

292 
i
 = 0; i < 
SIZE
; i ++) {

293 
b1
 = 
hashTabÀ
[
i
];

294 
b1
 !
NULL
) {

295 i‡(
NULL
 !
b1
->
√xt
)

297 
b2
 = 
b1
->
√xt
;

299 
b2
 = 
NULL
;

305 
l1
 = 
b1
->
löes
;

308 i‡(
NULL
 =
l1
) {

309 
‰ìbuckë
;

311 i‡(
NULL
 !
l1
->
√xt
)

313 
l2
 = 
l1
->
√xt
;

315 
l2
 = 
NULL
;

317 
	`‰ì
 (
l1
);

318 
l1
 = 
l2
;

321 
‰ìbuckë
:

322 
	`‰ì
 (
b1
);

323 
b1
 = 
b2
;

327 
	}
}

331 
	$ªÀa£_ty≥def_èbÀ
 ()

333 
i
 = 0;

334 
BuckëLi°
 
b1
 = 
NULL
, 
b2
 = NULL;

335 
LöeLi°
 
l1
 = 
NULL
, 
l2
 = NULL;

337 
i
 = 0; i < 
SIZE
; i ++) {

338 
b1
 = 
ty≥defNameTabÀ
[
i
];

339 
b1
 !
NULL
) {

340 i‡(
NULL
 !
b1
->
√xt
)

342 
b2
 = 
b1
->
√xt
;

344 
b2
 = 
NULL
;

350 
l1
 = 
b1
->
löes
;

353 i‡(
NULL
 =
l1
) {

354 
‰ìbuckë
;

356 i‡(
NULL
 !
l1
->
√xt
)

358 
l2
 = 
l1
->
√xt
;

360 
l2
 = 
NULL
;

362 
	`‰ì
 (
l1
);

363 
l1
 = 
l2
;

366 
‰ìbuckë
:

367 
	`‰ì
 (
b1
);

368 
b1
 = 
b2
;

372 
	}
}

377 
	$¥öt_°
 ()

379 
FILE
 * 
Â
;

380 
Â
 = 
	`f›í
 ("st.sym", "w+");

381 
	`¥ötSymTab
 (
Â
);

382 
	`Ârötf
 (
Â
, "\n");

383 
	`¥ötTy≥defTab
 (
Â
);

384 
	`f˛o£
 (
Â
);

385 
	}
}

	@symtab.h

9 #i‚de‡
_SYMTAB_H_


10 
	#_SYMTAB_H_


	)

12 
	~"°dio.h
"

19 
°_ö£π_id
–* 
«me
, 
löío
, 
loc
 );

20 
°_ö£π_ty≥def
(*
«me
, 
löío
, 
loc
);

30 
¥ötSymTab
(
FILE
 * 
li°ög
);

31 
¥ötTy≥defTab
(
FILE
 * 
li°ög
);

32 
ªÀa£_èbÀ
 ();

33 
ªÀa£_ty≥def_èbÀ
 ();

34 
¥öt_°
 ();

36 
	sLöeLi°Rec
 {

37 
	mlöío
;

38 
LöeLi°Rec
 *
	m√xt
;

39 } *
	tLöeLi°
;

40 
	sBuckëLi°Rec
 {

41 
	m«me
[126];

42 
LöeLi°
 
	mlöes
;

43 
	mmemloc
;

44 
BuckëLi°Rec
 *
	m√xt
;

45 
	mfunc
[126];

46 
	mdúty
;

47 } *
	tBuckëLi°
;

49 
BuckëLi°
 
°_lookup
 ( * 
«me
 );

50 
BuckëLi°
 
°_lookup_ty≥def
(*
«me
);

52 
ö_íum
;

	@test.c

1 #"
klsjdÊkjlksdjf
"

2 
	gi
 = 0;

3 
	tmyage
;

4 
	gj
 = 0;

	@y.tab.h

1 #i‚de‡
YY_∑r£_h_ö˛uded


2 
	#YY_∑r£_h_ö˛uded


	)

7 #ifde‡
c_∂u•lus


8 #i‚de‡
__˝lu•lus


9 
	#__˝lu•lus


	)

18 #i‚de‡
YY_∑r£_COMPATIBILITY


19 #i‚de‡
YY_USE_CLASS


20 
	#YY_∑r£_COMPATIBILITY
 1

	)

22 
	#YY_∑r£_COMPATIBILITY
 0

	)

26 #i‡
YY_∑r£_COMPATIBILITY
 != 0

28 #ifde‡
YYLTYPE


29 #i‚de‡
YY_∑r£_LTYPE


30 
	#YY_∑r£_LTYPE
 
YYLTYPE


	)

36 #i‚de‡
YY_∑r£_STYPE


37 
	#YY_∑r£_STYPE
 
YYSTYPE


	)

42 #ifde‡
YYDEBUG


43 #i‚de‡
YY_∑r£_DEBUG


44 
	#YY_∑r£_DEBUG
 
YYDEBUG


	)

50 #i‚de‡
YY_∑r£_USE_GOTO


51 
	#YY_∑r£_USE_GOTO
 1

	)

56 #i‚de‡
YY_∑r£_USE_GOTO


57 
	#YY_∑r£_USE_GOTO
 0

	)

60 #i‚de‡
YY_∑r£_PURE


70 #i‚de‡
YY_USE_CLASS


71 #i‚de‡
YYSTYPE


72 
	#YYSTYPE
 

	)

73 
	#YYSTYPE_IS_TRIVIAL
 1

	)

80 #i‚de‡
YY_∑r£_DEBUG


88 #i‚de‡
YY_∑r£_LSP_NEEDED


97 #ifde‡
YY_∑r£_LSP_NEEDED


98 #i‚de‡
YY_∑r£_LTYPE


99 #i‚de‡
BISON_YYLTYPE_ISDECLARED


100 
	#BISON_YYLTYPE_ISDECLARED


	)

102 
	syy…y≥


104 
	mtime°amp
;

105 
	mfú°_löe
;

106 
	mfú°_cﬁumn
;

107 
	mœ°_löe
;

108 
	mœ°_cﬁumn
;

109 *
	mãxt
;

111 
	tyy…y≥
;

114 
	#YY_∑r£_LTYPE
 
yy…y≥


	)

119 #i‚de‡
YY_∑r£_STYPE


120 
	#YY_∑r£_STYPE
 

	)

124 #i‚de‡
YY_∑r£_PARSE


125 
	#YY_∑r£_PARSE
 
yy∑r£


	)

128 #i‚de‡
YY_∑r£_LEX


129 
	#YY_∑r£_LEX
 
yyÀx


	)

132 #i‚de‡
YY_∑r£_LVAL


133 
	#YY_∑r£_LVAL
 
yylvÆ


	)

136 #i‚de‡
YY_∑r£_LLOC


137 
	#YY_∑r£_LLOC
 
yyŒoc


	)

140 #i‚de‡
YY_∑r£_CHAR


141 
	#YY_∑r£_CHAR
 
yych¨


	)

144 #i‚de‡
YY_∑r£_NERRS


145 
	#YY_∑r£_NERRS
 
yy√ºs


	)

148 #i‚de‡
YY_∑r£_DEBUG_FLAG


149 
	#YY_∑r£_DEBUG_FLAG
 
yydebug


	)

152 #i‚de‡
YY_∑r£_ERROR


153 
	#YY_∑r£_ERROR
 
yyîr‹


	)

156 #i‚de‡
YY_∑r£_PARSE_PARAM


157 #i‚de‡
__STDC__


158 #i‚de‡
__˝lu•lus


159 #i‚de‡
YY_USE_CLASS


160 
	#YY_∑r£_PARSE_PARAM


	)

161 #i‚de‡
YY_∑r£_PARSE_PARAM_DEF


162 
	#YY_∑r£_PARSE_PARAM_DEF


	)

167 #i‚de‡
YY_∑r£_PARSE_PARAM


168 
	#YY_∑r£_PARSE_PARAM
 

	)

173 #i‚de‡
YY_USE_CLASS


175 #i‚de‡
YY_∑r£_PURE


176 #i‚de‡
yylvÆ


177 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

179 #i‡
yylvÆ
 !
YY_∑r£_LVAL


180 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

189 
	#INCLUDE_FLAG
 258

	)

190 
	#LINE
 259

	)

191 
	#FILENAME
 260

	)

192 
	#IDENTIFIER
 261

	)

193 
	#CONSTANT
 262

	)

194 
	#STRING_LITERAL
 263

	)

195 
	#SIZEOF
 264

	)

196 
	#PTR_OP
 265

	)

197 
	#INC_OP
 266

	)

198 
	#DEC_OP
 267

	)

199 
	#LEFT_OP
 268

	)

200 
	#RIGHT_OP
 269

	)

201 
	#LE_OP
 270

	)

202 
	#GE_OP
 271

	)

203 
	#EQ_OP
 272

	)

204 
	#NE_OP
 273

	)

205 
	#AND_OP
 274

	)

206 
	#OR_OP
 275

	)

207 
	#MUL_ASSIGN
 276

	)

208 
	#DIV_ASSIGN
 277

	)

209 
	#MOD_ASSIGN
 278

	)

210 
	#ADD_ASSIGN
 279

	)

211 
	#SUB_ASSIGN
 280

	)

212 
	#LEFT_ASSIGN
 281

	)

213 
	#RIGHT_ASSIGN
 282

	)

214 
	#AND_ASSIGN
 283

	)

215 
	#XOR_ASSIGN
 284

	)

216 
	#OR_ASSIGN
 285

	)

217 
	#TYPE_NAME
 286

	)

218 
	#TYPEDEF
 287

	)

219 
	#EXTERN
 288

	)

220 
	#STATIC
 289

	)

221 
	#AUTO
 290

	)

222 
	#REGISTER
 291

	)

223 
	#CHAR
 292

	)

224 
	#SHORT
 293

	)

225 
	#INT
 294

	)

226 
	#LONG
 295

	)

227 
	#SIGNED
 296

	)

228 
	#UNSIGNED
 297

	)

229 
	#FLOAT
 298

	)

230 
	#DOUBLE
 299

	)

231 
	#CONST
 300

	)

232 
	#VOLATILE
 301

	)

233 
	#VOID
 302

	)

234 
	#STRUCT
 303

	)

235 
	#UNION
 304

	)

236 
	#ENUM
 305

	)

237 
	#ELLIPSIS
 306

	)

238 
	#CASE
 307

	)

239 
	#DEFAULT
 308

	)

240 
	#IF
 309

	)

241 
	#ELSE
 310

	)

242 
	#SWITCH
 311

	)

243 
	#WHILE
 312

	)

244 
	#DO
 313

	)

245 
	#FOR
 314

	)

246 
	#GOTO
 315

	)

247 
	#CONTINUE
 316

	)

248 
	#BREAK
 317

	)

249 
	#RETURN
 318

	)

256 #i‚de‡
YY_∑r£_CLASS


257 
	#YY_∑r£_CLASS
 
∑r£


	)

260 #i‚de‡
YY_∑r£_INHERIT


261 
	#YY_∑r£_INHERIT


	)

264 #i‚de‡
YY_∑r£_MEMBERS


265 
	#YY_∑r£_MEMBERS


	)

268 #i‚de‡
YY_∑r£_LEX_BODY


269 
	#YY_∑r£_LEX_BODY


	)

272 #i‚de‡
YY_∑r£_ERROR_BODY


273 
	#YY_∑r£_ERROR_BODY


	)

276 #i‚de‡
YY_∑r£_CONSTRUCTOR_PARAM


277 
	#YY_∑r£_CONSTRUCTOR_PARAM


	)

280 #i‚de‡
YY_∑r£_USE_CONST_TOKEN


281 
	#YY_∑r£_USE_CONST_TOKEN
 0

	)

285 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

286 #i‚de‡
YY_∑r£_ENUM_TOKEN


287 
	#YY_∑r£_ENUM_TOKEN
 
yy_∑r£_íum_tokí


	)

291 ˛as†
	cYY_∑r£_CLASS
 
	mYY_∑r£_INHERIT


293 
	mpublic
:

294 #i‡
YY_∑r£_USE_CONST_TOKEN
 != 0

298 c⁄° 
INCLUDE_FLAG
;

299 c⁄° 
	mLINE
;

300 c⁄° 
	mFILENAME
;

301 c⁄° 
	mIDENTIFIER
;

302 c⁄° 
	mCONSTANT
;

303 c⁄° 
	mSTRING_LITERAL
;

304 c⁄° 
	mSIZEOF
;

305 c⁄° 
	mPTR_OP
;

306 c⁄° 
	mINC_OP
;

307 c⁄° 
	mDEC_OP
;

308 c⁄° 
	mLEFT_OP
;

309 c⁄° 
	mRIGHT_OP
;

310 c⁄° 
	mLE_OP
;

311 c⁄° 
	mGE_OP
;

312 c⁄° 
	mEQ_OP
;

313 c⁄° 
	mNE_OP
;

314 c⁄° 
	mAND_OP
;

315 c⁄° 
	mOR_OP
;

316 c⁄° 
	mMUL_ASSIGN
;

317 c⁄° 
	mDIV_ASSIGN
;

318 c⁄° 
	mMOD_ASSIGN
;

319 c⁄° 
	mADD_ASSIGN
;

320 c⁄° 
	mSUB_ASSIGN
;

321 c⁄° 
	mLEFT_ASSIGN
;

322 c⁄° 
	mRIGHT_ASSIGN
;

323 c⁄° 
	mAND_ASSIGN
;

324 c⁄° 
	mXOR_ASSIGN
;

325 c⁄° 
	mOR_ASSIGN
;

326 c⁄° 
	mTYPE_NAME
;

327 c⁄° 
	mTYPEDEF
;

328 c⁄° 
	mEXTERN
;

329 c⁄° 
	mSTATIC
;

330 c⁄° 
	mAUTO
;

331 c⁄° 
	mREGISTER
;

332 c⁄° 
	mCHAR
;

333 c⁄° 
	mSHORT
;

334 c⁄° 
	mINT
;

335 c⁄° 
	mLONG
;

336 c⁄° 
	mSIGNED
;

337 c⁄° 
	mUNSIGNED
;

338 c⁄° 
	mFLOAT
;

339 c⁄° 
	mDOUBLE
;

340 c⁄° 
	mCONST
;

341 c⁄° 
	mVOLATILE
;

342 c⁄° 
	mVOID
;

343 c⁄° 
	mSTRUCT
;

344 c⁄° 
	mUNION
;

345 c⁄° 
	mENUM
;

346 c⁄° 
	mELLIPSIS
;

347 c⁄° 
	mCASE
;

348 c⁄° 
	mDEFAULT
;

349 c⁄° 
	mIF
;

350 c⁄° 
	mELSE
;

351 c⁄° 
	mSWITCH
;

352 c⁄° 
	mWHILE
;

353 c⁄° 
	mDO
;

354 c⁄° 
	mFOR
;

355 c⁄° 
	mGOTO
;

356 c⁄° 
	mCONTINUE
;

357 c⁄° 
	mBREAK
;

358 c⁄° 
	mRETURN
;

364 
	eYY_∑r£_ENUM_TOKEN
 { 
	mYY_∑r£_NULL_TOKEN
=0

367 ,
	mINCLUDE_FLAG
=258

368 ,
	mLINE
=259

369 ,
	mFILENAME
=260

370 ,
	mIDENTIFIER
=261

371 ,
	mCONSTANT
=262

372 ,
	mSTRING_LITERAL
=263

373 ,
	mSIZEOF
=264

374 ,
	mPTR_OP
=265

375 ,
	mINC_OP
=266

376 ,
	mDEC_OP
=267

377 ,
	mLEFT_OP
=268

378 ,
	mRIGHT_OP
=269

379 ,
	mLE_OP
=270

380 ,
	mGE_OP
=271

381 ,
	mEQ_OP
=272

382 ,
	mNE_OP
=273

383 ,
	mAND_OP
=274

384 ,
	mOR_OP
=275

385 ,
	mMUL_ASSIGN
=276

386 ,
	mDIV_ASSIGN
=277

387 ,
	mMOD_ASSIGN
=278

388 ,
	mADD_ASSIGN
=279

389 ,
	mSUB_ASSIGN
=280

390 ,
	mLEFT_ASSIGN
=281

391 ,
	mRIGHT_ASSIGN
=282

392 ,
	mAND_ASSIGN
=283

393 ,
	mXOR_ASSIGN
=284

394 ,
	mOR_ASSIGN
=285

395 ,
	mTYPE_NAME
=286

396 ,
	mTYPEDEF
=287

397 ,
	mEXTERN
=288

398 ,
	mSTATIC
=289

399 ,
	mAUTO
=290

400 ,
	mREGISTER
=291

401 ,
	mCHAR
=292

402 ,
	mSHORT
=293

403 ,
	mINT
=294

404 ,
	mLONG
=295

405 ,
	mSIGNED
=296

406 ,
	mUNSIGNED
=297

407 ,
	mFLOAT
=298

408 ,
	mDOUBLE
=299

409 ,
	mCONST
=300

410 ,
	mVOLATILE
=301

411 ,
	mVOID
=302

412 ,
	mSTRUCT
=303

413 ,
	mUNION
=304

414 ,
	mENUM
=305

415 ,
	mELLIPSIS
=306

416 ,
	mCASE
=307

417 ,
	mDEFAULT
=308

418 ,
	mIF
=309

419 ,
	mELSE
=310

420 ,
	mSWITCH
=311

421 ,
	mWHILE
=312

422 ,
	mDO
=313

423 ,
	mFOR
=314

424 ,
	mGOTO
=315

425 ,
	mCONTINUE
=316

426 ,
	mBREAK
=317

427 ,
	mRETURN
=318

434 
	gpublic
:

435 
YY_∑r£_PARSE
(
YY_∑r£_PARSE_PARAM
);

436 
vútuÆ
 
	$YY_∑r£_ERROR
(*
msg
Ë
YY_∑r£_ERROR_BODY
;

437 #ifde‡
YY_∑r£_PURE


438 #ifde‡
YY_∑r£_LSP_NEEDED


439 
vútuÆ
 
	$YY_∑r£_LEX
(
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
,
YY_∑r£_LTYPE
 *
YY_∑r£_LLOC
Ë
YY_∑r£_LEX_BODY
;

441 
vútuÆ
 
	$YY_∑r£_LEX
(
YY_∑r£_STYPE
 *
YY_∑r£_LVAL
Ë
YY_∑r£_LEX_BODY
;

444 
vútuÆ
 
	$YY_∑r£_LEX
(Ë
YY_∑r£_LEX_BODY
;

445 
YY_∑r£_STYPE
 
YY_∑r£_LVAL
;

446 #ifde‡
YY_∑r£_LSP_NEEDED


447 
YY_∑r£_LTYPE
 
YY_∑r£_LLOC
;

449 
YY_∑r£_NERRS
;

450 
YY_∑r£_CHAR
;

452 #i‡
YY_∑r£_DEBUG
 != 0

453 
public
:

454 
YY_∑r£_DEBUG_FLAG
;

456 
public
:

457 
	`YY_∑r£_CLASS
(
YY_∑r£_CONSTRUCTOR_PARAM
);

458 
public
:

459 
YY_∑r£_MEMBERS


460 
	}
};

465 #i‡
YY_∑r£_COMPATIBILITY
 != 0

472 #i‚de‡
YYLTYPE


473 
	#YYLTYPE
 
YY_∑r£_LTYPE


	)

475 #i‚de‡
YYDEBUG


476 #ifde‡
YY_∑r£_DEBUG


477 
	#YYDEBUG
 
YY_∑r£_DEBUG


	)

	@
1
.
0
9
104
c-standard.l
cl-standard.tab.c
cl-standard.tab.h
cl-standard.y
hello.c
symtab.c
symtab.h
test.c
y.tab.h
